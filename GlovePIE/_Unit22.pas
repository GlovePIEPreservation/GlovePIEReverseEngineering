//***************************************
//IDR home page: http://kpnc.org/idr32/en
//Decompiled by IDR v.01.04.2017
//***************************************
unit _Unit22;

interface

uses
  SysUtils, Classes, Controls, DwmApi, Graphics, JvWndProcHook, ImgList, Menus, mwCompletionProposal, JvTypes, SyncObjs, TimeSpan;

type
  TInteractiveGestureFlag = (gfBegin, gfInertia, gfEnd);
  TInteractiveGestureFlags = set of TInteractiveGestureFlag;
  TInteractiveGesture = (igZoom, igPan, igRotate, igTwoFingerTap, igPressAndTap);
  TInteractiveGestures = set of TInteractiveGesture;
  TInteractiveGestureOption = (igoPanSingleFingerHorizontal, igoPanSingleFingerVertical, igoPanInertia, igoPanGutter, igoParentPassthrough);
  TInteractiveGestureOptions = set of TInteractiveGestureOption;
  THintInfo = THintInfo = record//size=40
f38:string;//f38
end;
HintControl:TControl;//f0
HintWindowClass:THintWindowClass;//f4
HintPos:TPoint;//f8
HintMaxWidth:Integer;//f10
HintColor:TColor;//f14
CursorRect:TRect;//f18
CursorPos:TPoint;//f28
ReshowTimeout:Integer;//f30
HideTimeout:Integer;//f34
HintStr:string;//f38
HintData:Pointer;//f3C
end;;
  TAlign = (alNone, alTop, alBottom, alLeft, alRight, alClient, alCustom);
  TDragObject = class(TObject)
  published
    procedure ShowDragImage;//004819F4
    procedure AfterConstruction;//00481A54
    procedure BeforeDestruction;//00481A44
    function Instance:Cardinal;//004819EC
    procedure Assign(Source:TDragObject);//00481814
    function GetName:string;//00481874
    procedure HideDragImage;//004819E8
  public
    FAlwaysShowDragImages:Boolean;//f4
    FCancelling:Boolean;//f5
    FDragHandle:HWND;//f8
    FDragPos:TPoint;//fC
    FDragTarget:Pointer;//f14
    FDragTargetPos:TPoint;//f18
    FDropped:Boolean;//f20
    FMouseDeltaX:Double;//f28
    FMouseDeltaY:Double;//f30
    FRightClickCancels:Boolean;//f38
    procedure AfterConstruction; virtual;//00481A54
    procedure BeforeDestruction; virtual;//00481A44
    procedure v0; virtual;//v0//0048186C
    function GetDragCursor(Accepted:Boolean; X:Integer; Y:Integer):TCursor; virtual;//v4//004819D0
    //function v8:?; virtual;//v8//004819CC
    procedure WndProc(var Msg:TMessage); virtual;//vC//0048189C
    procedure Assign(Source:TDragObject); virtual;//v10//00481814
    function GetName:string; virtual;//v14//00481874
    procedure HideDragImage; virtual;//v18//004819E8
    function Instance:Cardinal; virtual;//v1C//004819EC
    procedure ShowDragImage; virtual;//v20//004819F4
    function Capture:HWND;//00481854
    procedure ReleaseCapture(Handle:HWND);//00481888
    procedure MainWndProc(var Message:TMessage);//004819F8
  end;
  TBaseDragControlObject = class(TDragObject)
  published
    procedure Assign(Source:TDragObject);//00481AA0
    constructor Create;//00481A64
  public
    FControl:TControl;//f40
    procedure Finished(Target:TObject; X:Integer; Y:Integer; Accepted:Boolean); virtual;//v0//00481AF8
    procedure Assign(Source:TDragObject); virtual;//v10//00481AA0
    procedure EndDrag(Target:TObject; X:Integer; Y:Integer); virtual;//v24//00481ACC
    constructor Create; virtual;//v28//00481A64
  end;
  TDragControlObject = class(TBaseDragControlObject)
  published
    procedure ShowDragImage;//00481B74
    procedure HideDragImage;//00481B50
  public
    function GetDragCursor(Accepted:Boolean; X:Integer; Y:Integer):TCursor; virtual;//v4//00481B2C
    function GetDragImages:TDragImageList; virtual;//v8//00481B44
    procedure HideDragImage; virtual;//v18//00481B50
    procedure ShowDragImage; virtual;//v20//00481B74
  end;
  TDragControlObjectEx = class(TDragControlObject)
  published
    procedure BeforeDestruction;//00481B98
  public
    procedure BeforeDestruction; virtual;//00481B98
  end;
  TDragDockObject = class(TBaseDragControlObject)
  published
    procedure Assign(Source:TDragObject);//00481C34
    destructor Destroy();//00481C04
    constructor Create;//00481B9C
  public
    FBrush:TBrush;//f48
    FDockRect:TRect;//f4C
    FDropAlign:TAlign;//f5C
    FDropOnControl:TControl;//f60
    FEraseDockRect:TRect;//f64
    FFloating:Boolean;//f74
    destructor Destroy(); virtual;//00481C04
    function GetDragCursor(Accepted:Boolean; X:Integer; Y:Integer):TCursor; virtual;//v4//00481D84
    procedure Assign(Source:TDragObject); virtual;//v10//00481C34
    procedure EndDrag(Target:TObject; X:Integer; Y:Integer); virtual;//v24//00481CA0
    constructor Create; virtual;//v28//00481B9C
    procedure AdjustDockRect(ARect:TRect); virtual;//v2C//00481CE0
    procedure DrawDragDockImage; virtual;//v30//00481D5C
    procedure EraseDragDockImage; virtual;//v34//00481D70
    //function v38:?; virtual;//v38//00481D94
    //function v3C:?; virtual;//v3C//00481D90
    procedure SetBrush(Value:TBrush);//00481C94
  end;
  TDragDockObjectEx = class(TDragDockObject)
  published
    procedure BeforeDestruction;//00481D9C
  public
    procedure BeforeDestruction; virtual;//00481D9C
  end;
  TControlCanvas = class(TCanvas)
  published
    procedure UpdateTextFlags;//00483138
    procedure FreeHandle;//004830EC
    destructor Destroy();//00482FEC
  public
    FControl:TControl;//f58
    FDeviceContext:HDC;//f5C
    FWindowHandle:HWND;//f60
    destructor Destroy(); virtual;//00482FEC
    procedure CreateHandle; virtual;//v9C//00483018
    procedure SetControl(AControl:TControl);//00483120
  end;
  TControlActionLink = class(TActionLink)
  public
    FClient:TControl;//f18
    procedure AssignClient(AClient:TObject); virtual;//v0//00483288
    function IsOnExecuteLinked:Boolean; virtual;//v8//004834DC
    procedure SetOnExecute(Value:TNotifyEvent); virtual;//v10//00483590
    function IsCaptionLinked:Boolean; virtual;//v20//004833A0
    function IsEnabledLinked:Boolean; virtual;//v28//0048341C
    function IsHelpLinked:Boolean; virtual;//v34//004835BC
    function IsHintLinked:Boolean; virtual;//v38//00483458
    function IsVisibleLinked:Boolean; virtual;//v44//004834B4
    procedure SetCaption(const Value:UnicodeString); virtual;//v4C//00483504
    procedure SetEnabled(Value:Boolean); virtual;//v54//00483528
    procedure SetHelpKeyword(const Value:UnicodeString); virtual;//v5C//0048362C
    procedure SetHelpContext(Value:THelpContext); virtual;//v60//0048360C
    procedure SetHelpType(Value:THelpType); virtual;//v64//0048364C
    procedure SetHint(const Value:UnicodeString); virtual;//v68//0048354C
    procedure SetVisible(Value:Boolean); virtual;//v74//00483570
    function IsDropdownMenuLinked:Boolean; virtual;//v78//00483408
    function IsEnableDropdownLinked:Boolean; virtual;//v7C//00483444
    function IsPopupMenuLinked:Boolean; virtual;//v80//00483484
    function DoShowHint(var HintStr:UnicodeString):Boolean; virtual;//v84//004832A4
    procedure v88; virtual;//v88//00483524
    procedure v8C; virtual;//v8C//00483548
    procedure SetPopupMenu(Value:TPopupMenu); virtual;//v90//0048366C
  end;
  :21 = (csLButtonDown, csClicked, csPalette, csReadingState, csAlignmentNeeded, csFocusing, csCreating, csPaintCopy, csCustomPaint, csDestroyingHandle, csDocking, csDesignerHide, csPanning, csRecreating, csAligning, csGlassPaint, csPrintClient);
  TControlState = set of :21;
  :31 = (csAcceptsControls, csCaptureMouse, csDesignInteractive, csClickEvents, csFramed, csSetCaption, csOpaque, csDoubleClicks, csFixedWidth, csFixedHeight, csNoDesignVisible, csReplicatable, csNoStdEvents, csDisplayDragImage, csReflector, csActionClient, csMenuEvents, csNeedsBorderPaint, csParentBackground, csPannable, csAlignWithMargins, csGestures, csPaintBlackOpaqueOnGlass);
  TControlStyle = set of :31;
  TMouseButton = (mbLeft, mbRight, mbMiddle);
  TMouseActivate = (maDefault, maActivate, maActivateAndEat, maNoActivate, maNoActivateAndEat);
  TDragMode = (dmManual, dmAutomatic);
  TDragState = (dsDragEnter, dsDragLeave, dsDragMove);
  TDragKind = (dkDrag, dkDock);
  :41 = (sfLeft, sfTop, sfWidth, sfHeight, sfFont, sfDesignSize);
  TScalingFlags = set of :41;
  TAnchorKind = (akLeft, akTop, akRight, akBottom);
  TAnchors = set of TAnchorKind;
  TSizeConstraints = class(TPersistent)
  published
    constructor Create;//00483164
  public
    FControl:TControl;//f4
    FMaxHeight:TConstraintSize;//f8
    FMaxWidth:TConstraintSize;//fC
    FMinHeight:TConstraintSize;//f10
    FMinWidth:TConstraintSize;//f14
    FOnChange:TNotifyEvent;//f18
    procedure AssignTo(Dest:TPersistent); virtual;//v0//004831A0
    constructor Create; virtual;//v10//00483164
    procedure SetConstraints(Index:Integer; Value:TConstraintSize);//004831E8
  end;
  TMargins = class(TPersistent)
  published
    procedure SetControlBounds(ARect:TRect; Aligning:Boolean);//00494508
    procedure SetBounds(ALeft:Integer; ATop:Integer; ABottom:Integer; ARight:Integer);//0049452C
    constructor Create;//00494304
    procedure SetControlBounds(ALeft:Integer; ATop:Integer; Aligning:Boolean; AHeight:Integer; AWidth:Integer);//0049441C
  public
    FControl:TControl;//f4
    FLeft:TMarginSize;//f8
    FTop:TMarginSize;//fC
    FRight:TMarginSize;//f10
    FBottom:TMarginSize;//f14
    FOnChange:TNotifyEvent;//f18
    procedure AssignTo(Dest:TPersistent); virtual;//v0//00494348
    function GetControlBound(Index:Integer):Integer; virtual;//v10//00494568
    procedure InitDefaults(Margins:TMargins); virtual;//v14//004943A4
    constructor Create; virtual;//v18//00494304
    procedure SetMargin(Index:Integer; Value:TMarginSize);//004943C4
  end;
  TPadding = class(TMargins)
  public
    procedure InitDefaults(Margins:TMargins); virtual;//v14//004946F8
  end;
  TGestureEventInfo = TGestureEventInfo = record//size=20
GestureID:TGestureID;//f0
Location:TPoint;//f4
Flags:TInteractiveGestureFlags;//fC
Angle:Double;//f10
InertiaVector:TSmallPoint;//f18
Distance:Integer;//f1C
TapLocation:TSmallPoint;//f1C
end;;
  TGestureEvent = procedure(Sender:TObject; const EventInfo:TGestureEventInfo; var Handled:Boolean) of object;;
  TStandardGestures = set of ?;
  TTabletOption = (toPressAndHold, toPenTapFeedback, toPenBarrelFeedback, toTouchUIForceOn, toTouchUIForceOff, toTouchSwitch, toFlicks, toSmoothScrolling, toFlickFallbackKeys);
  TTabletOptions = set of TTabletOption;
  TGestureType = (gtStandard, gtRecorded, gtRegistered, gtNone);
  TGestureOption = (goUniDirectional, goSkew, goEndpoint, goRotate);
  TGestureOptions = set of TGestureOption;
  TGestureArray = array of TCustomGestureCollectionItem;
//elSize = 4;
  TGesturePointArray = array of TPoint;
//elSize = 8;
  TCustomGestureCollectionItem = class(TCollectionItem)
  public
    procedure v20; virtual; abstract;//v20//00404A58
    procedure v24; virtual; abstract;//v24//00404A58
    procedure v28; virtual; abstract;//v28//00404A58
    procedure v2C; virtual; abstract;//v2C//00404A58
    procedure v30; virtual; abstract;//v30//00404A58
    procedure v34; virtual; abstract;//v34//00404A58
    procedure v38; virtual; abstract;//v38//00404A58
    procedure v3C; virtual; abstract;//v3C//00404A58
    procedure v40; virtual; abstract;//v40//00404A58
    procedure v44; virtual; abstract;//v44//00404A58
    procedure v48; virtual; abstract;//v48//00404A58
    procedure v4C; virtual; abstract;//v4C//00404A58
    procedure v50; virtual; abstract;//v50//00404A58
    procedure v54; virtual; abstract;//v54//00404A58
    procedure v58; virtual; abstract;//v58//00404A58
  end;
  TCustomGestureManager = class(TComponent)
  published
    procedure SelectGesture(AControl:TControl; AGestureID:TGestureID);//004789D0
    procedure RemoveRecordedGesture(AGesture:TCustomGestureCollectionItem);//004789C8
    procedure RemoveRecordedGesture(AGestureID:TGestureID);//004789C0
    procedure UnselectGesture(AControl:TControl; AGestureID:TGestureID);//004789E8
    procedure UnregisterControl(AControl:TControl);//004789E0
    procedure SelectGesture(AControl:TControl; AName:string);//004789D8
    procedure FindCustomGesture(AName:string);//004789A0
    procedure FindCustomGesture(AGestureID:TGestureID);//00478998
    procedure AddRecordedGesture(Item:TCustomGestureCollectionItem);//00478990
    procedure RegisterControl(AControl:TControl);//004789B8
    procedure FindGesture(AControl:TControl; AName:string);//004789B0
    procedure FindGesture(AControl:TControl; AGestureID:TGestureID);//004789A8
  public
    procedure v34; virtual; abstract;//v34//00404A58
    procedure v38; virtual; abstract;//v38//00404A58
    procedure v3C; virtual; abstract;//v3C//00404A58
    procedure v40; virtual; abstract;//v40//00404A58
    procedure v44; virtual; abstract;//v44//00404A58
    procedure v48; virtual; abstract;//v48//00404A58
    procedure v4C; virtual; abstract;//v4C//00404A58
    procedure v50; virtual; abstract;//v50//00404A58
    procedure v54; virtual; abstract;//v54//00404A58
    procedure v58; virtual; abstract;//v58//00404A58
    procedure v5C; virtual; abstract;//v5C//00404A58
    procedure v60; virtual; abstract;//v60//00404A58
    procedure v64; virtual; abstract;//v64//00404A58
    procedure v68; virtual; abstract;//v68//00404A58
    procedure v6C; virtual; abstract;//v6C//00404A58
  end;
  TCustomGestureEngine.TGestureEngineFlag = (efMouseEvents, efTouchEvents);
  TCustomGestureEngine.TGestureEngineFlags = set of TCustomGestureEngine.TGestureEngineFlag;
  TCustomGestureEngine = class(TObject)
  published
    function Supported:Boolean;//00495788
    procedure Notification(Message:TMessage);//00478C58
    procedure Create(AControl:TWinControl);//00478C50
  public
    procedure v0; virtual; abstract;//v0//00404A58
    procedure v4; virtual; abstract;//v4//00404A58
    procedure v8; virtual; abstract;//v8//00404A58
    procedure vC; virtual; abstract;//vC//00404A58
    procedure v10; virtual; abstract;//v10//00404A58
    function Supported:Boolean; virtual;//v14//00495788
  end;
  TCustomTouchManager = class(TPersistent)
  published
    function SelectGesture(AGestureID:TGestureID):Boolean;//004959D4
    procedure RemoveChangeNotification(AControl:TControl);//004959B0
    procedure UnselectGesture(AGestureID:TGestureID);//00495B5C
    function SelectGesture(AName:string):Boolean;//004959F4
    function FindGesture(AName:string):TCustomGestureCollectionItem;//004958D8
    destructor Destroy();//004957F8
    constructor Create;//0049578C
    function FindGesture(AGestureID:TGestureID):TCustomGestureCollectionItem;//004958B8
    procedure ChangeNotification(AControl:TControl);//004958A8
  public
    FControl:TControl;//f4
    FGestureEngine:TCustomGestureEngine;//f8
    FGestureManager:TCustomGestureManager;//fC
    FInteractiveGestures:TInteractiveGestures;//f10
    FInteractiveGestureOptions:TInteractiveGestureOptions;//f11
    FNotifyList:TList;//f14
    FParentTabletOptions:Boolean;//f18
    FStandardGestures:TStandardGestures;//f19
    FTabletOptions:TTabletOptions;//f1E
    destructor Destroy(); virtual;//004957F8
    procedure AssignTo(Dest:TPersistent); virtual;//v0//0049583C
    function GetGestureList:TGestureArray;//004958F8
    function GetStandardGestures:TStandardGestures;//00495924
    function IsInteractiveGestureOptionsStored(Value:TInteractiveGestureOptions):Boolean;//00495960
    function IsInteractiveGesturesStored(Value:TInteractiveGestures):Boolean;//00495974
    function IsParentTabletOptionsStored(Value:Boolean):Boolean;//00495988
    function IsTabletOptionsStored(Value:TTabletOptions):Boolean;//0049599C
    procedure SetGestureEngine(const Value:TCustomGestureEngine);//00495A14
    procedure SetGestureManager(const Value:TCustomGestureManager);//00495A58
    procedure SetParentTabletOptions(const Value:Boolean);//00495ACC
    procedure SetStandardGestures(const Value:TStandardGestures);//00495AF4
    procedure SetTabletOptions(const Value:TTabletOptions);//00495B28
  end;
  TTouchManager = class(TCustomTouchManager)
  end;
  TMouseEvent = procedure(Sender:TObject; Button:TMouseButton; Shift:TShiftState; X:Integer; Y:Integer) of object;;
  TMouseMoveEvent = procedure(Sender:TObject; Shift:TShiftState; X:Integer; Y:Integer) of object;;
  TMouseActivateEvent = procedure(Sender:TObject; Button:TMouseButton; Shift:TShiftState; X:Integer; Y:Integer; HitTest:Integer; var MouseActivate:TMouseActivate) of object;;
  TKeyEvent = procedure(Sender:TObject; var Key:Word; Shift:TShiftState) of object;;
  TKeyPressEvent = procedure(Sender:TObject; var Key:Char) of object;;
  TDragOverEvent = procedure(Sender:TObject; Source:TObject; X:Integer; Y:Integer; State:TDragState; var Accept:Boolean) of object;;
  TDragDropEvent = procedure(Sender:TObject; Source:TObject; X:Integer; Y:Integer) of object;;
  TStartDragEvent = procedure(Sender:TObject; var DragObject:TDragObject) of object;;
  TEndDragEvent = procedure(Sender:TObject; Target:TObject; X:Integer; Y:Integer) of object;;
  TDockDropEvent = procedure(Sender:TObject; Source:TDragDockObject; X:Integer; Y:Integer) of object;;
  TDockOverEvent = procedure(Sender:TObject; Source:TDragDockObject; X:Integer; Y:Integer; State:TDragState; var Accept:Boolean) of object;;
  TUnDockEvent = procedure(Sender:TObject; Client:TControl; NewTarget:TWinControl; var Allow:Boolean) of object;;
  TStartDockEvent = procedure(Sender:TObject; var DragObject:TDragDockObject) of object;;
  TGetSiteInfoEvent = procedure(Sender:TObject; DockClient:TControl; var InfluenceRect:TRect; MousePos:TPoint; var CanDock:Boolean) of object;;
  TCanResizeEvent = procedure(Sender:TObject; var NewWidth:Integer; var NewHeight:Integer; var Resize:Boolean) of object;;
  TConstrainedResizeEvent = procedure(Sender:TObject; var MinWidth:Integer; var MinHeight:Integer; var MaxWidth:Integer; var MaxHeight:Integer) of object;;
  TMouseWheelEvent = procedure(Sender:TObject; Shift:TShiftState; WheelDelta:Integer; MousePos:TPoint; var Handled:Boolean) of object;;
  TMouseWheelUpDownEvent = procedure(Sender:TObject; Shift:TShiftState; MousePos:TPoint; var Handled:Boolean) of object;;
  TContextPopupEvent = procedure(Sender:TObject; MousePos:TPoint; var Handled:Boolean) of object;;
  TDockOrientation = (doNoOrient, doHorizontal, doVertical);
  TControl = class(TComponent)
  published
    procedure HasParent;//004838E4
    procedure Hide;//0048506C
    procedure GetControlsAlignment;//004851C0
    procedure GetParentComponent;//004838EC
    procedure InitiateAction;//00487864
    function ManualFloat(ScreenPos:TRect):Boolean;//00485B74
    function Perform(Msg:Cardinal; WParam:Integer; LParam:Integer):Integer;//00485F48
    procedure Refresh;//004850B8
    function ManualDock(NewDockSite:TWinControl; DropControl:TControl; ControlSide:TAlign):Boolean;//00485960
    procedure Invalidate;//00484FA4
    procedure MouseWheelHandler(var Message:TMessage);//00485000
    function IsRightToLeft:Boolean;//004851C4
    procedure BringToFront;//00484CD8
    function ClientToScreen(Point:TPoint):TPoint;//0048442C
    function ClientToParent(Point:TPoint; AParent:TWinControl):TPoint;//00487A24
    constructor Create;//00483690
    destructor Destroy();//004837D8
    procedure BeginDrag(Immediate:Boolean; Threshold:Integer);//00485244
    function DrawTextBiDiModeFlags(Flags:Integer):Integer;//00487808
    function DrawTextBiDiModeFlagsReadingOnly:Integer;//00487848
    procedure EndDrag(Drop:Boolean);//00485324
    procedure Dock(NewDockSite:TWinControl; ARect:TRect);//004840D8
    function Dragging:Boolean;//0048535C
    procedure DragDrop(Source:TObject; X:Integer; Y:Integer);//004853A4
    procedure Repaint;//004850C4
    function UseRightToLeftScrollBar:Boolean;//0048520C
    //procedure DefaultHandler(var Message:?);//0048635C
    procedure UseRightToLeftAlignment;//004851F4
    function UseRightToLeftReading:Boolean;//004851DC
    function GetTextBuf(Buffer:PWideChar; BufSize:Integer):Integer;//004849B0
    function Perform(Msg:Cardinal; WParam:Integer; var LParam:TRect):Integer;//00485F90
    procedure SetTextBuf(Buffer:PWideChar);//00483E60
    function GetTextLen:Integer;//004849A0
    function Perform(Msg:Cardinal; WParam:Integer; LParam:PWideChar):Integer;//00485F7C
    function ParentToClient(Point:TPoint; AParent:TWinControl):TPoint;//00487B34
    procedure SendToBack;//00484CE8
    function ReplaceDockedControl(Control:TControl; NewDockSite:TWinControl; ControlSide:TAlign; DropControl:TControl):Boolean;//00485C14
    function ScreenToClient(Point:TPoint):TPoint;//00484560
    procedure SetBounds(ALeft:Integer; ATop:Integer; AHeight:Integer; AWidth:Integer);//00483DC0
    procedure Show;//00485074
    procedure Update;//004850A4
    procedure SetDesignVisible(Value:Boolean);//00483B38
    procedure SetParentComponent(Value:TComponent);//004838F0
  public
    FParent:TWinControl;//f34
    FWindowProc:TWndMethod;//f38
    f3C:TJvHookInfos;//f3C
    FLeft:Integer;//f40
    FTop:Integer;//f44
    FWidth:Integer;//f48
    FHeight:Integer;//f4C
    FControlStyle:TControlStyle;//f50
    FControlState:TControlState;//f54
    FDesktopFont:Boolean;//f58
    FVisible:Boolean;//f59
    FEnabled:Boolean;//f5A
    FParentFont:Boolean;//f5B
    FParentColor:Boolean;//f5C
    FAlign:TAlign;//f5D
    FAutoSize:Boolean;//f5E
    FDragMode:TDragMode;//f5F
    FIsControl:Boolean;//f60
    FBiDiMode:TBiDiMode;//f61
    FParentBiDiMode:Boolean;//f62
    FAnchors:TAnchors;//f63
    FFont:TFont;//f64
    FActionLink:TControlActionLink;//f68
    FColor:TColor;//f6C
    FConstraints:TSizeConstraints;//f70
    FMargins:TMargins;//f74
    FCursor:TCursor;//f78
    FDragCursor:TCursor;//f7A
    FPopupMenu:TPopupMenu;//f7C
    FHint:string;//f80
    FFontHeight:Integer;//f84
    FScalingFlags:TScalingFlags;//f88
    FShowHint:Boolean;//f89
    FParentShowHint:Boolean;//f8A
    FDragKind:TDragKind;//f8B
    FDockOrientation:TDockOrientation;//f8C
    FHostDockSite:TWinControl;//f90
    FWheelAccumulator:Integer;//f94
    FUndockWidth:Integer;//f98
    FUndockHeight:Integer;//f9C
    FLRDockWidth:Integer;//fA0
    FTBDockHeight:Integer;//fA4
    FFloatingDockSiteClass:TWinControlClass;//fA8
    FTouchManager:TTouchManager;//fAC
    FOnCanResize:TCanResizeEvent;//fB0
    FOnConstrainedResize:TConstrainedResizeEvent;//fB8
    FOnMouseDown:TMouseEvent;//fC0
    FOnMouseMove:TMouseMoveEvent;//fC8
    FOnMouseUp:TMouseEvent;//fD0
    FOnDragDrop:TDragDropEvent;//fD8
    FOnDragOver:TDragOverEvent;//fE0
    FOnResize:TNotifyEvent;//fE8
    FOnStartDock:TStartDockEvent;//fF0
    FOnEndDock:TEndDragEvent;//fF8
    FOnStartDrag:TStartDragEvent;//f100
    FOnEndDrag:TEndDragEvent;//f108
    FOnClick:TNotifyEvent;//f110
    FOnDblClick:TNotifyEvent;//f118
    FOnContextPopup:TContextPopupEvent;//f120
    FOnMouseActivate:TMouseActivateEvent;//f128
    FOnMouseLeave:TNotifyEvent;//f130
    FOnMouseEnter:TNotifyEvent;//f138
    FOnMouseWheel:TMouseWheelEvent;//f140
    FOnMouseWheelDown:TMouseWheelUpDownEvent;//f148
    FOnMouseWheelUp:TMouseWheelUpDownEvent;//f150
    FOnGesture:TGestureEvent;//f158
    FHelpType:THelpType;//f160
    FHelpKeyword:string;//f164
    FHelpContext:THelpContext;//f168
    FCustomHint:TCustomHint;//f16C
    FParentCustomHint:Boolean;//f170
    FText:PWideChar;//f174
    FAnchorMove:Boolean;//f178
    FAnchorRules:TPoint;//f17C
    FAnchorOrigin:TPoint;//f184
    FOriginalParentSize:TPoint;//f18C
    FExplicitLeft:Integer;//f194
    FExplicitTop:Integer;//f198
    FExplicitWidth:Integer;//f19C
    FExplicitHeight:Integer;//f1A0
    FReserved:Pointer;//f1A4
    //procedure DefaultHandler(var Message:?); virtual;//0048635C
    destructor Destroy(); virtual;//004837D8
    procedure AssignTo(Dest:TPersistent); virtual;//v0//0048761C
    procedure DefineProperties(Filer:TFiler); virtual;//v4//00486664
    procedure Loaded; virtual;//vC//004875E4
    procedure Notification(AComponent:TComponent; Operation:TOperation); virtual;//v10//00483C5C
    procedure ReadState(Reader:TReader); virtual;//v14//00483BAC
    procedure SetName(const Value:TComponentName); virtual;//v18//00484818
    constructor Create; virtual;//v2C//00483690
    function CanResize(var NewWidth:Integer; var NewHeight:Integer):Boolean; virtual;//v34//00485D18
    //function v38:?; virtual;//v38//00485D14
    procedure ConstrainedResize(var MinWidth:Integer; var MinHeight:Integer; var MaxWidth:Integer; var MaxHeight:Integer); virtual;//v3C//00485DE4
    procedure CreateTouchManager; virtual;//v40//004872F4
    //procedure v44(?:?; ?:?); virtual;//v44//004853F0
    procedure DoGetGestureOptions(var Gestures:TInteractiveGestures; var Options:TInteractiveGestureOptions); virtual;//v48//004853F4
    function GetAction:TBasicAction; virtual;//v4C//00483994
    function GetClientOrigin:TPoint; virtual;//v50//0048439C
    function GetClientRect:TRect; virtual;//v54//00484304
    function GetDeviceContext(var WindowHandle:HWND):HDC; virtual;//v58//00484DE0
    function GetEnabled:Boolean; virtual;//v5C//004838D8
    function GetFloating:Boolean; virtual;//v60//004877B4
    //function v64:?; virtual;//v64//004877E0
    procedure RequestAlign; virtual;//v68//00483B74
    procedure SetAutoSize(Value:Boolean); virtual;//v6C//00484800
    procedure SetDragMode(Value:TDragMode); virtual;//v70//00483B70
    procedure SetEnabled(Value:Boolean); virtual;//v74//00484988
    procedure SetParent(AParent:TWinControl); virtual;//v78//00484904
    procedure SetParentBiDiMode(Value:Boolean); virtual;//v7C//00484C60
    procedure SetBiDiMode(Value:TBiDiMode); virtual;//v80//00484ACC
    procedure WndProc(var Message:TMessage); virtual;//v84//00486074
    //function v88:?; virtual;//v88//004838D4
    procedure InitiateAction; virtual;//v8C//00487864
    procedure Invalidate; virtual;//v90//00484FA4
    procedure Repaint; virtual;//v94//004850C4
    procedure SetBounds(ALeft:Integer; ATop:Integer; AHeight:Integer; AWidth:Integer); virtual;//v98//00483DC0
    procedure Update; virtual;//v9C//004850A4
    procedure WMCancelMode(var Message:TWMCancelMode); message WM_CANCELMODE;//00486E08
    procedure WMWindowPosChanged(var Message:TWMWindowPosChanged); message WM_WINDOWPOSCHANGED;//00486E44
    procedure WMContextMenu(var Message:TWMContextMenu); message WM_CONTEXTMENU;//004878A4
    procedure WMNCLButtonDown(var Message:TWMNCLButtonDown); message WM_NCLBUTTONDOWN;//004869FC
    procedure WMMouseMove(var Message:TWMMouseMove); message WM_MOUSEMOVE;//00486BF0
    procedure WMLButtonDown(var Message:TWMLButtonDown); message WM_LBUTTONDOWN;//004869B0
    procedure WMLButtonUp(var Message:TWMLButtonUp); message WM_LBUTTONUP;//00486CF4
    procedure WMLButtonDblClk(var Message:TWMLButtonDblClk); message WM_LBUTTONDBLCLK;//00486A18
    procedure WMRButtonDown(var Message:TWMRButtonDown); message WM_RBUTTONDOWN;//00486B0C
    procedure WMRButtonUp(var Message:TWMRButtonUp); message WM_RBUTTONUP;//00486D70
    procedure WMRButtonDblClk(var Message:TWMRButtonDblClk); message WM_RBUTTONDBLCLK;//00486B38
    procedure WMMButtonDown(var Message:TWMMButtonDown); message WM_MBUTTONDOWN;//00486B64
    procedure WMMButtonUp(var Message:TWMMButtonUp); message WM_MBUTTONUP;//00486D90
    procedure WMMButtonDblClk(var Message:TWMMButtonDblClk); message WM_MBUTTONDBLCLK;//00486B90
    procedure WMMouseWheel(var Message:TWMMouseWheel); message WM_MOUSEWHEEL;//00486DB0
    procedure CMParentFontChanged(var Message:TCMParentFontChanged); message CM_PARENTFONTCHANGED;//00487114
    procedure CMParentColorChanged(var Message:TMessage); message CM_PARENTCOLORCHANGED;//00486F78
    procedure CMHitTest(var Message:TWMNCHitTest); message CM_HITTEST;//00487168
    procedure CMVisibleChanged(var Message:TMessage); message CM_VISIBLECHANGED;//00486EF4
    procedure CMColorChanged(var Message:TMessage); message CM_ENABLEDCHANGED;//00486F1C
    procedure CMFontChanged(var Message:TMessage); message CM_COLORCHANGED;//00486F34
    procedure CMEnabledChanged(var Message:TMessage); message CM_FONTCHANGED;//00486F28
    procedure CMMouseEnter(var Message:TMessage); message CM_MOUSEENTER;//00487170
    procedure CMMouseLeave(var Message:TMessage); message CM_MOUSELEAVE;//004871D4
    procedure CMDesignHitTest(var Message:TWMMouse); message CM_DESIGNHITTEST;//00487238
    procedure CMParentShowHintChanged(var Message:TMessage); message CM_PARENTSHOWHINTCHANGED;//004870D8
    procedure CMHintShow(var Message:TCMHintShow); message CM_HINTSHOW;//00487874
    procedure CMSysFontChanged(var Message:TMessage); message CM_SYSFONTCHANGED;//00487144
    procedure CMFloat(var Message:TCMFloat); message CM_FLOAT;//00487398
    procedure CMBiDiModeChanged(var Message:TMessage); message CM_BIDIMODECHANGED;//004870BC
    procedure CMParentBiDiModeChanged(var Message:TMessage); message CM_PARENTBIDIMODECHANGED;//00486FB4
    procedure CMMouseWheel(var Message:TCMMouseWheel); message CM_MOUSEWHEEL;//00486FD8
    procedure CMMouseActivate(var Message:TCMMouseActivate); dynamic;//00487C44
    procedure CMGesture(var Message:TCMGesture); dynamic;//00487048
    procedure CMParentTabletOptionsChanged(var Message:TMessage); dynamic;//00487240
    procedure UseRightToLeftAlignment; dynamic;//004851F4
    procedure SetDesignVisible(Value:Boolean); dynamic;//00483B38
    procedure MouseWheelHandler(var Message:TMessage); dynamic;//00485000
    procedure GetControlsAlignment; dynamic;//004851C0
    procedure DragDrop(Source:TObject; X:Integer; Y:Integer); dynamic;//004853A4
    procedure Dock(NewDockSite:TWinControl; ARect:TRect); dynamic;//004840D8
    procedure DesignWndProc(var Message:TMessage); dynamic;//00485E40
    procedure sub_00486070; dynamic;//00486070
    procedure SetZOrder(TopMost:Boolean); dynamic;//00484D84
    procedure Resize; dynamic;//00483B8C
    procedure PaletteChanged(Foreground:Boolean); dynamic;//00483918
    procedure PositionDockRect(DragDockObject:TDragDockObject); dynamic;//0048543C
    procedure MouseUp(Button:TMouseButton; Shift:TShiftState; X:Integer; Y:Integer); dynamic;//00486C78
    procedure MouseMove(Shift:TShiftState; X:Integer; Y:Integer); dynamic;//00486BBC
    procedure MouseDown(Button:TMouseButton; Shift:TShiftState; X:Integer; Y:Integer); dynamic;//004868DC
    procedure MouseActivate(Button:TMouseButton; Shift:TShiftState; X:Integer; Y:Integer; HitTest:Integer); dynamic;//00484FB8
    procedure IsTouchPropertyStored(AProperty:TTouchProperty); dynamic;//00483AD8
    procedure sub_00486A6C; dynamic;//00486A6C
    procedure sub_004838E0; dynamic;//004838E0
    procedure GetDockEdge(MousePos:TPoint); dynamic;//00487704
    procedure sub_0048751C; dynamic;//0048751C
    procedure EraseDragDockImage(DragDockObject:TDragDockObject); dynamic;//00485860
    procedure DrawDragDockImage(DragDockObject:TDragDockObject); dynamic;//00485850
    procedure DoStartDrag(var DragObject:TDragObject); dynamic;//004853D0
    procedure DoEndDrag(Target:TObject; X:Integer; Y:Integer); dynamic;//00485410
    procedure DragOver(Source:TObject; X:Integer; Y:Integer; State:TDragState; var Accept:Boolean); dynamic;//00485368
    procedure sub_00485358; dynamic;//00485358
    procedure DoMouseWheelUp(Shift:TShiftState; MousePos:TPoint); dynamic;//004856D8
    procedure DoMouseWheelDown(Shift:TShiftState; MousePos:TPoint); dynamic;//0048568C
    procedure DoMouseWheel(Shift:TShiftState; WheelDelta:Integer; MousePos:TPoint); dynamic;//004855B8
    procedure DoStartDock(var DragObject:TDragObject); dynamic;//00485554
    procedure DoDock(NewDockSite:TWinControl; var ARect:TRect); dynamic;//00484208
    procedure DoEndDock(Target:TObject; X:Integer; Y:Integer); dynamic;//00485528
    procedure DoContextPopup(MousePos:TPoint; var Handled:Boolean); dynamic;//004879E4
    procedure DockTrackNoTarget(Source:TDragDockObject; X:Integer; Y:Integer); dynamic;//00485510
    procedure DefaultDockImage(DragDockObject:TDragDockObject; Erase:Boolean); dynamic;//00485724
    procedure DblClick; dynamic;//004868BC
    procedure Click; dynamic;//00486844
    procedure ChangeScale(M:Integer; D:Integer); dynamic;//00484638
    procedure BeginAutoDrag; dynamic;//00485228
    procedure AdjustSize; dynamic;//004877E8
    procedure ActionChange(Sender:TObject; CheckDefaults:Boolean); dynamic;//004873F8
    procedure HasParent; dynamic;//004838E4
    procedure GetParentComponent; dynamic;//004838EC
    procedure SetParentComponent(Value:TComponent); dynamic;//004838F0
    procedure SetAnchors(Value:TAnchors);//004839A4
    procedure SetAction(Value:TBasicAction);//00483A44
    function IsAnchorsStored(Value:TAnchors):Boolean;//00483AC0
    function GetDragMode:TDragMode;//00483B84
    procedure SetAlign(Value:TAlign);//00483CD8
    procedure UpdateAnchorRules;//00483E84
    procedure SetLeft(Value:Integer);//00484008
    procedure SetTop(Value:Integer);//0048403C
    procedure SetWidth(Value:Integer);//00484070
    procedure SetHeight(Value:Integer);//004840A4
    procedure SetHelpKeyword(const Value:UnicodeString);//00484260
    procedure SetHelpContext(const Value:THelpContext);//00484274
    procedure SetHostDockSite(Value:TWinControl);//00484298
    function GetBoundsRect:TRect;//004842C0
    procedure SetBoundsRect(const Rect:TRect);//004842E0
    function GetClientWidth:Integer;//0048431C
    procedure SetClientWidth(Value:Integer);//00484334
    function GetClientHeight:Integer;//0048435C
    procedure SetClientHeight(Value:Integer);//00484374
    procedure ScaleConstraints(M:Integer; D:Integer);//00484458
    procedure ScaleMargins(M:Integer; D:Integer);//004844DC
    procedure SendCancelMode(Sender:TControl);//0048458C
    procedure SendDockNotification(Msg:Cardinal; WParam:THandle; LParam:THandle);//004845BC
    procedure Changed;//00484628
    procedure SetClientSize(Value:TPoint);//004848BC
    procedure SetVisible(Value:Boolean);//00484950
    function GetUndockHeight:Integer;//004849BC
    function GetUndockWidth:Integer;//004849D0
    function GetTBDockHeight:Integer;//004849E4
    function GetLRDockWidth:Integer;//004849F8
    procedure SetPopupMenu(Value:TPopupMenu);//00484A0C
    function GetText:TCaption;//00484A30
    procedure SetText(const Value:TCaption);//00484A68
    procedure FontChanged(Sender:TObject);//00484AE8
    procedure SetFont(Value:TFont);//00484B2C
    function IsFontStored(Value:TFont):Boolean;//00484B3C
    function IsShowHintStored(Value:Boolean):Boolean;//00484B50
    procedure SetParentFont(Value:Boolean);//00484B64
    procedure SetShowHint(Value:Boolean);//00484B88
    procedure SetParentShowHint(Value:Boolean);//00484BAC
    procedure SetParentCustomHint(Value:Boolean);//00484BD8
    procedure SetColor(Value:TColor);//00484BE8
    procedure SetParentColor(Value:Boolean);//00484C3C
    procedure SetCursor(Value:TCursor);//00484C84
    function GetMouseCapture:Boolean;//00484CA0
    procedure SetMouseCapture(Value:Boolean);//00484CB0
    procedure SetZOrderPosition(Position:Integer);//00484CF8
    procedure SetCustomHint(Value:TCustomHint);//00484DA8
    procedure InvalidateControl(IsVisible:Boolean; IsOpaque:Boolean);//00484F10
    procedure DoMouseActivate(var Message:TCMMouseActivate);//00485584
    procedure DoDragMsg(var DragMsg:TCMDrag);//00485870
    procedure DoConstraintsChange(Sender:TObject);//00485D08
    function DoCanAutoSize(var NewWidth:Integer; var NewHeight:Integer):Boolean;//00485D48
    function DoCanResize(var NewWidth:Integer; var NewHeight:Integer):Boolean;//00485DB4
    function CalcCursorPos:TPoint;//00485E14
    procedure DoConstrainedResize(var NewWidth:Integer; var NewHeight:Integer);//00485E74
    function GetCustomHint:TCustomHint;//00485FA4
    procedure CalcDockSizes;//00485FCC
    procedure UpdateBoundsRect(const R:TRect);//00486040
    procedure ReadIsControl(Reader:TReader);//004863F0
    procedure WriteIsControl(Writer:TWriter);//00486404
    procedure DoMouseDown(var Message:TWMMouse; Button:TMouseButton; Shift:TShiftState);//00486914
    function CheckNewSize(var NewWidth:Integer; var NewHeight:Integer):Boolean;//00486A70
    procedure DoMouseUp(var Message:TWMMouse; Button:TMouseButton);//00486CB0
    function CreateFloatingDockSite(Bounds:TRect):TWinControl;//00487274
    procedure DoActionChange(Sender:TObject);//004874F8
    function IsCaptionStored(Value:TCaption):Boolean;//00487524
    function IsEnabledStored(Value:Boolean):Boolean;//00487544
    function IsHintStored(Value:string):Boolean;//00487564
    function IsHelpContextStored(Value:string):Boolean;//00487584
    function IsVisibleStored(Value:Boolean):Boolean;//004875A4
    function IsOnClickStored(Value:TNotifyEvent):Boolean;//004875C4
    procedure SetConstraints(const Value:TSizeConstraints);//00487A18
    procedure DoMarginChange(Sender:TObject);//00487C68
    procedure SetMargins(const Value:TMargins);//00487C74
    procedure SetTouchManager(const Value:TTouchManager);//00487C80
    function GetAlignWithMargins:Boolean;//00487C8C
    procedure SetAlignWithMargins(Value:Boolean);//00487C94
    procedure UpdateExplicitBounds;//00487CC0
    procedure WriteExplicitTop(Writer:TWriter);//00487CF4
    procedure WriteExplicitHeight(Writer:TWriter);//00487D04
    procedure WriteExplicitLeft(Writer:TWriter);//00487D14
    procedure ReadExplicitWidth(Reader:TReader);//00487D24
    procedure WriteExplicitWidth(Writer:TWriter);//00487D3C
    procedure ReadExplicitTop(Reader:TReader);//00487D4C
    procedure ReadExplicitHeight(Reader:TReader);//00487D64
    procedure ReadExplicitLeft(Reader:TReader);//00487D7C
  end;
  TWinControlActionLink = class(TControlActionLink)
  public
    FClient:TWinControl;//f20
    procedure AssignClient(AClient:TObject); virtual;//v0//00487D94
    procedure IsHelpContextLinked; virtual;//v30//00487DB8
    procedure SetHelpKeyword(const Value:UnicodeString); virtual;//v5C//00487DC0
  end;
  TImeMode = (imDisable, imClose, imOpen, imDontCare, imSAlpha, imAlpha, imHira, imSKata, imKata, imChinese, imSHanguel, imHanguel);
  TAlignInfo = TAlignInfo = record//size=10
AlignList:TList;//f0
ControlIndex:Integer;//f4
Align:TAlign;//f8
Scratch:Integer;//fC
end;;
  TBevelCut = (bvNone, bvLowered, bvRaised, bvSpace);
  TBevelEdge = (beLeft, beTop, beRight, beBottom);
  TBevelEdges = set of TBevelEdge;
  TBevelKind = (bkNone, bkTile, bkSoft, bkFlat);
  TAlignInsertBeforeEvent = function(Sender:TWinControl; C1:TControl; C2:TControl):Boolean of object;;
  TAlignPositionEvent = procedure(Sender:TWinControl; Control:TControl; var NewLeft:Integer; var NewTop:Integer; var NewWidth:Integer; var NewHeight:Integer; var AlignRect:TRect; AlignInfo:TAlignInfo) of object;;
  TWinControl = class(TControl)
  published
    procedure DisableAlign;//00488FC8
    //procedure DefaultHandler(var Message:?);//0048AC34
    function FindChildControl(ControlName:string):TControl;//0048EE1C
    procedure EnableAlign;//00488FD0
    procedure DockDrop(Source:TDragDockObject; X:Integer; Y:Integer);//0048C028
    constructor Create;//00487DC8
    destructor Destroy();//00487F9C
    function CreateParentedControl(ParentWindow:HWND):TWinControl;//00487F78
    constructor CreateParented;//00487F30
    //procedure Broadcast(var Message:?);//004894F8
    function ControlAtPos(Pos:TPoint; AllowDisabled:Boolean; AllLevels:Boolean; AllowWinControls:Boolean):TControl;//0048A3C8
    function ContainsControl(Control:TControl):Boolean;//00489214
    procedure CanFocus;//0048D9CC
    procedure Repaint;//0048D978
    procedure ScaleBy(M:Integer; D:Integer);//0048D4F8
    procedure Realign;//00488FF0
    procedure PreProcessMessage(var Msg:tagMSG);//0048F96C
    procedure RemoveControl(AControl:TControl);//004893FC
    procedure ScrollBy(DeltaX:Integer; DeltaY:Integer);//0048D5A8
    procedure Update;//0048D95C
    procedure UpdateControlState;//0048A0A8
    procedure SetFocus;//0048DA0C
    procedure SetBounds(ALeft:Integer; ATop:Integer; AHeight:Integer; AWidth:Integer);//0048D298
    procedure SetDesignVisible(Value:Boolean);//0048C2B4
    procedure GetTabControlList(List:TList);//0048DF64
    procedure GetTabOrderList(List:TList);//0048DFA0
    procedure GetChildren(Root:TComponent; Proc:TGetChildProc);//0048E184
    procedure FlipChildren(AllLevels:Boolean);//004890CC
    procedure Focused;//0048DA48
    function HandleAllocated:Boolean;//0048DE3C
    procedure PaintTo(DC:HDC; X:Integer; Y:Integer);//0048B304
    procedure PaintTo(Canvas:TCanvas; X:Integer; Y:Integer);//0048B1F8
    procedure Invalidate;//0048D864
    procedure HandleNeeded;//0048DA6C
    procedure InsertControl(AControl:TControl);//004892DC
  public
    FAlignControlList:TList;//f1A8
    FAlignLevel:Word;//f1AC
    FBevelEdges:TBevelEdges;//f1AE
    FBevelInner:TBevelCut;//f1AF
    FBevelOuter:TBevelCut;//f1B0
    FBevelKind:TBevelKind;//f1B1
    FBevelWidth:TBevelWidth;//f1B4
    FBorderWidth:TBorderWidth;//f1B8
    FPadding:TPadding;//f1BC
    FBrush:TBrush;//f1C0
    FDockClients:TList;//f1C4
    FDockManager:IDockManager;//f1C8
    FImeMode:TImeMode;//f1CC
    FImeName:TImeName;//f1D0
    FParentWindow:HWND;//f1D4
    FTabList:TList;//f1D8
    FControls:TList;//f1DC
    FWinControls:TList;//f1E0
    FTabOrder:Integer;//f1E4
    FTabStop:Boolean;//f1E8
    FCtl3D:Boolean;//f1E9
    FShowing:Boolean;//f1EA
    FUseDockManager:Boolean;//f1EB
    FDockSite:Boolean;//f1EC
    FParentCtl3D:Boolean;//f1ED
    FParentDoubleBuffered:Boolean;//f1EE
    FPerformingShowingChanged:Boolean;//f1EF
    FOnDockDrop:TDockDropEvent;//f1F0
    FOnDockOver:TDockOverEvent;//f1F8
    FOnEnter:TNotifyEvent;//f200
    f204:TCompletionProposalForm;//f204
    FOnExit:TNotifyEvent;//f208
    FOnGetSiteInfo:TGetSiteInfoEvent;//f210
    FOnKeyDown:TKeyEvent;//f218
    f21C:TMwCompletionProposal;//f21C
    FOnKeyPress:TKeyPressEvent;//f220
    f222:word;//f222
    f224:TMwCompletionProposal;//f224
    FOnKeyUp:TKeyEvent;//f228
    FOnUnDock:TUnDockEvent;//f230
    FOnAlignInsertBefore:TAlignInsertBeforeEvent;//f238
    FOnAlignPosition:TAlignPositionEvent;//f240
    FMouseInClient:Boolean;//f248
    FMouseControl:TControl;//f24C
    FTouchControl:TControl;//f250
    FDefWndProc:Pointer;//f254
    FHandle:HWND;//f258
    FObjectInstance:Pointer;//f25C
    FDoubleBuffered:Boolean;//f260
    FInImeComposition:Boolean;//f261
    FDesignSize:TPoint;//f264
    //procedure DefaultHandler(var Message:?); virtual;//0048AC34
    destructor Destroy(); virtual;//00487F9C
    procedure AssignTo(Dest:TPersistent); virtual;//v0//0048E7E8
    procedure DefineProperties(Filer:TFiler); virtual;//v4//00489B48
    procedure Notification(AComponent:TComponent; Operation:TOperation); virtual;//v10//00489538
    procedure ReadState(Reader:TReader); virtual;//v14//00488184
    constructor Create; virtual;//v2C//00487DC8
    procedure CanResize(var NewWidth:Integer; var NewHeight:Integer); virtual;//v34//0048E20C
    function CanAutoSize(var NewWidth:Integer; var NewHeight:Integer):Boolean; virtual;//v38//0048E818
    procedure ConstrainedResize(var MinWidth:Integer; var MinHeight:Integer; var MaxWidth:Integer; var MaxHeight:Integer); virtual;//v3C//0048E764
    function GetClientOrigin:TPoint; virtual;//v50//0048DBD8
    function GetClientRect:TRect; virtual;//v54//0048DBF8
    function GetDeviceContext(var WindowHandle:HWND):HDC; virtual;//v58//0048D7D8
    procedure RequestAlign; virtual;//v68//0048BDCC
    procedure SetParent(AParent:TWinControl); virtual;//v78//0048FAA4
    procedure WndProc(var Message:TMessage); virtual;//v84//0048A6A4
    procedure Invalidate; virtual;//v90//0048D864
    procedure Repaint; virtual;//v94//0048D978
    procedure SetBounds(ALeft:Integer; ATop:Integer; AHeight:Integer; AWidth:Integer); virtual;//v98//0048D298
    procedure Update; virtual;//v9C//0048D95C
    procedure AdjustClientRect(var Rect:TRect); virtual;//vA0//004881FC
    procedure AlignControls(AControl:TControl; var Rect:TRect); virtual;//vA4//00488D58
    procedure CreateHandle; virtual;//vA8//00489CE0
    procedure CreateParams(var Params:TCreateParams); virtual;//vAC//00489664
    procedure CreateWindowHandle(const Params:TCreateParams); virtual;//vB0//00489980
    procedure CreateWnd; virtual;//vB4//00489778
    function CustomAlignInsertBefore(C1:TControl; C2:TControl):Boolean; virtual;//vB8//00489D78
    procedure CustomAlignPosition(Control:TControl; var NewLeft:Integer; var NewTop:Integer; var NewWidth:Integer; var NewHeight:Integer; var AlignRect:TRect; AlignInfo:TAlignInfo); virtual;//vBC//00489D9C
    procedure DestroyHandle; virtual;//vC0//00489E30
    procedure DestroyWindowHandle; virtual;//vC4//00489C1C
    procedure DestroyWnd; virtual;//vC8//00489BB4
    function DockReplaceDockClient(Client:TControl; NewDockSite:TWinControl; DropControl:TControl; ControlSide:TAlign; ReplacementClient:TControl):Boolean; virtual;//vCC//0048F960
    function GetControlExtents:TRect; virtual;//vD0//0048DAA4
    procedure PaintWindow(DC:HDC); virtual;//vD4//0048AEE0
    procedure SetParentBackground(Value:Boolean); virtual;//vD8//0048F8D8
    procedure SetParentDoubleBuffered(Value:Boolean); virtual;//vDC//0048A170
    procedure ShowControl(AControl:TControl); virtual;//vE0//0048D684
    procedure UpdateControlOriginalParentSize(AControl:TControl; var AOriginalParentSize:TPoint); virtual;//vE4//0048FA28
    procedure SetFocus; virtual;//vE8//0048DA0C
    procedure WMDestroy(var Message:TWMDestroy); message WM_DESTROY;//0048CA2C
    procedure WMMove(var Message:TWMMove); message WM_MOVE;//0048BB6C
    procedure WMSize(var Message:TWMSize); message WM_SIZE;//0048BAF0
    procedure WMSetFocus(var Message:TWMSetFocus); message WM_SETFOCUS;//0048BC90
    procedure WMKillFocus(var Message:TWMKillFocus); message WM_KILLFOCUS;//0048BCAC
    procedure WMPaint(var Message:TWMPaint); message WM_PAINT;//0048B55C
    procedure WMEraseBkgnd(var Message:TWMEraseBkgnd); message WM_ERASEBKGND;//0048B944
    procedure WMSysColorChange(var Message:TWMSysColorChange); message WM_SYSCOLORCHANGE;//0048B7F4
    procedure WMWinIniChange(var Message:TMessage); message WM_SETTINGCHANGE;//0048B810
    procedure WMFontChange(var Message:TMessage); message WM_FONTCHANGE;//0048B824
    procedure WMTimeChange(var Message:TMessage); message WM_TIMECHANGE;//0048B834
    procedure WMSetCursor(var Message:TWMSetCursor); message WM_SETCURSOR;//0048BB88
    procedure WMMouseActivate(var Message:TWMMouseActivate); message WM_MOUSEACTIVATE;//0048B910
    procedure WMDrawItem(var Message:TWMDrawItem); message WM_DRAWITEM;//0048B8CC
    procedure WMMeasureItem(var Message:TWMMeasureItem); message WM_MEASUREITEM;//0048B8F0
    procedure WMDeleteItem(var Message:TWMDeleteItem); message WM_DELETEITEM;//0048B8A8
    procedure WMVScroll(var Message:TWMVScroll); message WM_VKEYTOITEM;//0048CA0C
    procedure WMVKeyToItem(var Message:TWMVKeyToItem); message WM_CHARTOITEM;//0048C9B8
    procedure WMCompareItem(var Message:TWMCompareItem); message WM_COMPAREITEM;//0048B884
    procedure WMWindowPosChanging(var Message:TWMWindowPosChanging); message WM_WINDOWPOSCHANGING;//0048BA9C
    procedure WMWindowPosChanged(var Message:TWMWindowPosChanged); message WM_WINDOWPOSCHANGED;//0048B9E4
    procedure WMNotify(var Message:TWMNotify); message WM_NOTIFY;//0048B7D0
    procedure WMInputLangChange(var Message:TMessage); dynamic;//0048BCDC
    procedure WMContextMenu(var Message:TWMContextMenu); message WM_CONTEXTMENU;//0048EE7C
    procedure WMNCDestroy(var Message:TWMNCDestroy); message WM_NCDESTROY;//0048CA98
    procedure WMNCCalcSize(var Message:TWMNCCalcSize); message WM_NCCALCSIZE;//0048EA90
    procedure WMNCHitTest(var Message:TWMNCHitTest); message WM_NCHITTEST;//0048CAB4
    procedure WMNCPaint(var Message:TWMNCPaint); message WM_NCPAINT;//0048EB24
    procedure WMKeyDown(var Message:TWMKeyDown); message WM_KEYDOWN;//0048C63C
    procedure WMKeyUp(var Message:TWMKeyUp); message WM_KEYUP;//0048C774
    procedure WMChar(var Message:TWMChar); message WM_CHAR;//0048C83C
    procedure WMSysKeyDown(var Message:TWMSysKeyDown); message WM_SYSKEYDOWN;//0048C668
    procedure WMSysKeyUp(var Message:TWMSysKeyUp); message WM_SYSKEYUP;//0048C794
    procedure WMIMEStartComp(var Message:TMessage); dynamic;//0048BCC8
    procedure WMIMEEndComp(var Message:TMessage); dynamic;//0048BD34
    procedure WMCharToItem(var Message:TWMCharToItem); message WM_COMMAND;//0048B7B0
    procedure WMSysCommand(var Message:TWMSysCommand); message WM_SYSCOMMAND;//0048C90C
    procedure WMCommand(var Message:TWMCommand); message WM_HSCROLL;//0048B844
    procedure WMHScroll(var Message:TWMHScroll); message WM_VSCROLL;//0048B864
    procedure WMGesture(var Message:TMessage); dynamic;//0048F05C
    procedure WMGestureNotify(var Message:TWMGestureNotify); dynamic;//0048F44C
    procedure WMParentNotify(var Message:TWMParentNotify); message WM_PARENTNOTIFY;//0048C9D8
    procedure WMTabletQuerySystemGestureStatus(var Message:TMessage); dynamic;//0048F828
    procedure WMQueryNewPalette(var Message:TMessage); message WM_QUERYNEWPALETTE;//0048CB30
    procedure WMPaletteChanged(var Message:TMessage); message WM_PALETTECHANGED;//0048CB54
    procedure WMPrintClient(var Message:TWMPrintClient); dynamic;//0048EF80
    procedure CMDialogKey(var Message:TWMKey); message CM_DIALOGKEY;//0048CCC0
    procedure CMDialogChar(var Message:TWMKey); message CM_DIALOGCHAR;//0048CCC8
    procedure CMFocusChanged(var Message:TCMFocusChanged); message CM_FOCUSCHANGED;//0048CCD0
    procedure CMVisibleChanged(var Message:TMessage); message CM_VISIBLECHANGED;//0048CCD8
    procedure CMEnabledChanged(var Message:TMessage); message CM_ENABLEDCHANGED;//0048CD30
    procedure CMColorChanged(var Message:TMessage); message CM_COLORCHANGED;//0048CD78
    procedure CMFontChanged(var Message:TMessage); message CM_FONTCHANGED;//0048CDA0
    procedure CMCursorChanged(var Message:TMessage); message CM_CURSORCHANGED;//0048CDDC
    procedure CMCtl3DChanged(var Message:TMessage); message CM_CTL3DCHANGED;//0048CE5C
    procedure CMParentCtl3DChanged(var Message:TMessage); message CM_PARENTCTL3DCHANGED;//0048CE9C
    procedure CMTextChanged(var Message:TMessage); message CM_TEXTCHANGED;//0048F914
    procedure CMShowingChanged(var Message:TMessage); message CM_SHOWINGCHANGED;//0048CD08
    procedure CMEnter(var Message:TWMNoParams); message CM_ENTER;//0048CBE8
    procedure CMExit(var Message:TWMNoParams); message CM_EXIT;//0048CC6C
    procedure CMDesignHitTest(var Message:TWMMouse); message CM_DESIGNHITTEST;//0048CC78
    procedure CMShowHintChanged(var Message:TMessage); message CM_SHOWHINTCHANGED;//0048CB74
    procedure CMSysColorChange(var Message:TMessage); message CM_SYSCOLORCHANGE;//0048CF08
    procedure CMWinIniChange(var Message:TWMWinIniChange); message CM_WININICHANGE;//0048CF10
    procedure CMFontChange; message CM_FONTCHANGE;//0048CF18
    procedure CMTimeChange; message CM_TIMECHANGE;//0048CF3C
    procedure CMControlListChange(var Message:TMessage); message CM_CONTROLLISTCHANGE;//0048CFA4
    procedure CMChildKey(var Message:TCMChildKey); message CM_CHILDKEY;//0048CCAC
    procedure CMDrag(var Message:TCMDrag); message CM_DRAG;//0048CF44
    procedure CMRecreateWnd(var Message:TMessage); message CM_RECREATEWND;//00489EBC
    procedure CMInvalidate(var Message:TMessage); message CM_INVALIDATE;//0048D8C8
    procedure CMSysFontChanged(var Message:TMessage); message CM_SYSFONTCHANGED;//0048CFCC
    procedure CMChanged(var Message:TCMChanged); message CM_CHANGED;//0048CC98
    procedure CMDockClient(var Message:TCMDockClient); message CM_DOCKCLIENT;//0048C3C4
    procedure CMUnDockClient(var Message:TCMUnDockClient); message CM_UNDOCKCLIENT;//0048C4B4
    procedure CMFloat(var Message:TCMFloat); message CM_FLOAT;//0048C4DC
    procedure CMBorderChanged(var Message:TMessage); message CM_BORDERCHANGED;//0048CE1C
    procedure CMBiDiModeChanged(var Message:TMessage); message CM_BIDIMODECHANGED;//0048CB8C
    procedure CMControlListChanging(var Message:TMessage); dynamic;//0048CFB8
    procedure CMDoubleBufferedChanged(var Message:TMessage); dynamic;//0048CBC4
    procedure CMParentDoubleBufferedChanged(var Message:TMessage); dynamic;//0048CEDC
    procedure CMInputLangChange(var Message:TMessage); dynamic;//0048D874
    procedure CMTabletOptionsChanged(var Message:TMessage); dynamic;//0048CF20
    procedure CNKeyDown(var Message:TWMKeyDown); dynamic;//0048D080
    procedure CNKeyUp(var Message:TWMKeyUp); dynamic;//0048D164
    procedure CNChar(var Message:TWMChar); dynamic;//0048D1B8
    procedure CNSysKeyDown(var Message:TWMKeyDown); dynamic;//0048D208
    procedure CNSysChar(var Message:TWMChar); dynamic;//0048D264
    procedure PreProcessMessage(var Msg:tagMSG); dynamic;//0048F96C
    procedure GetTabOrderList(List:TList); dynamic;//0048DFA0
    procedure GetTabControlList(List:TList); dynamic;//0048DF64
    procedure Focused; dynamic;//0048DA48
    procedure FlipChildren(AllLevels:Boolean); dynamic;//004890CC
    procedure DockDrop(Source:TDragDockObject; X:Integer; Y:Integer); dynamic;//0048C028
    procedure CanFocus; dynamic;//0048D9CC
    procedure ReloadDockedControl(const AControlName:UnicodeString; var AControl:TControl); dynamic;//0048C150
    procedure KeyPress(var Key:Char); dynamic;//0048C7B4
    procedure KeyUp(var Key:Word; Shift:TShiftState); dynamic;//0048C694
    procedure KeyDown(var Key:Word; Shift:TShiftState); dynamic;//0048C55C
    procedure IsQualifyingSite(const Client:TControl); dynamic;//0048F9A0
    procedure GetSiteInfo(Client:TControl; var InfluenceRect:TRect; MousePos:TPoint; var CanDock:Boolean); dynamic;//0048C1AC
    procedure DoUnDock(NewTarget:TWinControl; Client:TControl); dynamic;//0048C0F4
    procedure DoRemoveDockClient(Client:TControl); dynamic;//0048BFE4
    procedure DoFlipChildren; dynamic;//00488FF8
    procedure DoExit; dynamic;//0048C008
    procedure DoEnter; dynamic;//0048BFE8
    procedure DoDockOver(Source:TDragDockObject; X:Integer; Y:Integer; State:TDragState; var Accept:Boolean); dynamic;//0048C080
    procedure DockOver(Source:TDragDockObject; X:Integer; Y:Integer; State:TDragState; var Accept:Boolean); dynamic;//0048C0B4
    procedure DoAddDockClient(Client:TControl; const ARect:TRect); dynamic;//0048BFDC
    procedure CreateDockManager; dynamic;//0048C248
    procedure sub_0048C244; dynamic;//0048C244
    procedure SetDesignVisible(Value:Boolean); dynamic;//0048C2B4
    procedure SetZOrder(TopMost:Boolean); dynamic;//0048D778
    procedure PaletteChanged(Foreground:Boolean); dynamic;//0048CAD8
    procedure sub_0048751C; dynamic;//0048E7E0
    procedure ChangeScale(M:Integer; D:Integer); dynamic;//0048D440
    procedure AdjustSize; dynamic;//0048DC10
    procedure ActionChange(Sender:TObject; CheckDefaults:Boolean); dynamic;//0048E7A0
    procedure SetChildOrder(Child:TComponent; Order:Integer); dynamic;//0048E1CC
    procedure GetChildren(Root:TComponent; Proc:TGetChildProc); dynamic;//0048E184
    function GetAlignDisabled:Boolean;//00487F24
    procedure FixupTabList;//004880B0
    procedure ArrangeControl(AControl:TControl; const ParentSize:TPoint; AAlign:TAlign; AAlignInfo:TAlignInfo; var Rect:TRect; UpdateAnchorOrigin:Boolean);//0048822C
    procedure AlignControl(AControl:TControl);//00488F34
    procedure RemoveFocus(Removing:Boolean);//00489228
    procedure Insert(AControl:TControl);//00489248
    procedure Remove(AControl:TControl);//00489294
    function GetControl(Index:Integer):TControl;//0048949C
    function GetControlCount:Integer;//004894D8
    procedure NotifyControls(Msg:Word);//00489568
    procedure CreateSubClass(var Params:TCreateParams; ControlClassName:PChar);//00489590
    procedure AddBiDiModeExStyle(var ExStyle:DWORD);//004895FC
    procedure ReadDesignSize(Reader:TReader);//004899C0
    procedure WriteDesignSize(Writer:TWriter);//004899FC
    function PrecedingWindow(Control:TWinControl):HWND;//00489C98
    procedure RecreateWnd;//00489EA4
    procedure UpdateShowing;//00489F48
    procedure SetParentWindow(Value:HWND);//0048A19C
    procedure MainWndProc(var Message:TMessage);//0048A280
    function IsControlMouseMsg(var Message:TWMMouse):Boolean;//0048A48C
    function IsControlActivateMsg(var Message:TWMMouseActivate; Control:TControl):Boolean;//0048A54C
    procedure PaintHandler(var Message:TWMPaint);//0048AD70
    procedure PaintControls(DC:HDC; First:TControl);//0048AF18
    function SetImeCompositionWindow(Font:TFont; XPos:Integer; YPos:Integer):Boolean;//0048BD48
    procedure SetIme;//0048BE54
    procedure ResetIme;//0048BF44
    function GetDockClientCount:Integer;//0048C174
    function GetDockClients(Index:Integer):TControl;//0048C188
    function GetVisibleDockClientCount:Integer;//0048C208
    procedure SetDockSite(Value:Boolean);//0048C2E8
    procedure SetDoubleBuffered(Value:Boolean);//0048C3A0
    function DoKeyDown(var Message:TWMKey):Boolean;//0048C588
    function DoKeyUp(var Message:TWMKey):Boolean;//0048C6C0
    function DoKeyPress(var Message:TWMKey):Boolean;//0048C7D4
    function IsMenuKey(var Message:TWMKey):Boolean;//0048CFE8
    procedure ScaleControls(M:Integer; D:Integer);//0048D374
    procedure ScalePadding(M:Integer; D:Integer);//0048D3BC
    procedure SetZOrderPosition(Position:Integer);//0048D6A0
    function GetParentHandle:HWND;//0048D82C
    function GetTopParentHandle:HWND;//0048D844
    procedure InvalidateFrame;//0048D994
    function GetHandle:HWND;//0048DA90
    procedure SetBorderWidth(Value:TBorderWidth);//0048DC4C
    procedure SetCtl3D(Value:Boolean);//0048DC6C
    function IsCtl3DStored(Value:Boolean):Boolean;//0048DC90
    function IsDoubleBufferedStored(Value:Boolean):Boolean;//0048DC9C
    procedure SetParentCtl3D(Value:Boolean);//0048DCA8
    function GetTabOrder:TTabOrder;//0048DCD4
    procedure UpdateTabOrder(Value:TTabOrder);//0048DCF8
    procedure SetTabOrder(Value:TTabOrder);//0048DD54
    procedure SetTabStop(Value:Boolean);//0048DD6C
    procedure SetUseDockManager(Value:Boolean);//0048DDCC
    procedure UpdateBounds;//0048DE48
    function FindNextControl(CurControl:TWinControl; GoForward:Boolean; CheckTabStop:Boolean; CheckParent:Boolean):TWinControl;//0048E000
    procedure SelectNext(CurControl:TWinControl; GoForward:Boolean; CheckTabStop:Boolean);//0048E10C
    procedure SelectFirst;//0048E13C
    procedure CalcConstraints(var MinWidth:Integer; var MinHeight:Integer; var MaxWidth:Integer; var MaxHeight:Integer);//0048E2D8
    procedure SetBevelCut(Index:Integer; const Value:TBevelCut);//0048E9DC
    procedure SetBevelEdges(const Value:TBevelEdges);//0048EA20
    procedure SetBevelKind(const Value:TBevelKind);//0048EA50
    procedure SetBevelWidth(const Value:TBevelWidth);//0048EA70
    procedure UpdateUIState(CharCode:Word);//0048EF34
    function GetParentBackground:Boolean;//0048F8D0
    procedure InvalidateDockHostSite(FocusLost:Boolean);//0048F92C
    procedure RemoveWindowProps;//0048F970
    procedure DoPaddingChange(Sender:TObject);//0048F9C4
    procedure SetPadding(const Value:TPadding);//0048F9CC
    procedure UpdateRecreatingFlag(Recreating:Boolean);//0048F9D8
  end;
  TGraphicControl = class(TControl)
  published
    destructor Destroy();//0048FB7C
    constructor Create;//0048FB20
  public
    FCanvas:TCanvas;//f1A8
    destructor Destroy(); virtual;//0048FB7C
    constructor Create; virtual;//v2C//0048FB20
    procedure vA0; virtual;//vA0//0048FC70
    procedure WMPaint(var Message:TWMPaint); message WM_PAINT;//0048FBBC
  end;
  TCustomControl = class(TWinControl)
  published
    destructor Destroy();//00490680
    constructor Create;//00490624
  public
    ................FCanvas:TCanvas;//f270
    destructor Destroy(); virtual;//00490680
    constructor Create; virtual;//v2C//00490624
    procedure PaintWindow(DC:HDC); virtual;//vD4//004906D0
    procedure vEC; virtual;//vEC//0049077C
    procedure WMPaint(var Message:TWMPaint); message WM_PAINT;//004906B0
  end;
  THintWindow = class(TCustomControl)
  published
    function CalcHintRect(MaxWidth:Integer; AHint:string; AData:Pointer):TRect;//0049026C
    procedure ActivateHintData(Rect:TRect; AHint:string; AData:Pointer);//00490244
    function IsHintMsg(var Msg:tagMSG):Boolean;//0048FEC0
    procedure ActivateHint(Rect:TRect; AHint:string);//0048FFC8
    constructor Create;//0048FC74
    procedure ReleaseHandle;//0048FF24
    function ShouldHideHint:Boolean;//00490358
  public
    FActivating:Boolean;//f278
    FLastActive:Cardinal;//f27C
    constructor Create; virtual;//v2C//0048FC74
    procedure CreateParams(var Params:TCreateParams); virtual;//vAC//0048FCDC
    procedure Paint; virtual;//vEC//0048FD9C
    procedure NCPaint(DC:HDC); virtual;//vF0//004902CC
    procedure ActivateHint(Rect:TRect; AHint:string); virtual;//vF4//0048FFC8
    function IsHintMsg(var Msg:tagMSG):Boolean; virtual;//vF8//0048FEC0
    function ShouldHideHint:Boolean; virtual;//vFC//00490358
    procedure ActivateHintData(Rect:TRect; AHint:string; AData:Pointer); virtual;//v100//00490244
    function CalcHintRect(MaxWidth:Integer; AHint:string; AData:Pointer):TRect; virtual;//v104//0049026C
    procedure CMTextChanged(var Message:TMessage); message CM_TEXTCHANGED;//0048FF30
  end;
  TDragImageList = class(TCustomImageList)
  published
    procedure HideDragImage;//004905B8
    function GetHotSpot:TPoint;//00490428
    procedure ShowDragImage;//004905A0
    function SetDragImage(Index:Integer; HotSpotX:Integer; HotSpotY:Integer):Boolean;//004903B4
    function EndDrag:Boolean;//004905D0
    function DragLock(Window:HWND; XPos:Integer; YPos:Integer):Boolean;//004904D4
    function BeginDrag(Window:HWND; X:Integer; Y:Integer):Boolean;//00490454
    procedure DragUnlock;//00490538
    function DragMove(X:Integer; Y:Integer):Boolean;//0049055C
  public
    FDragCursor:TCursor;//f78
    FDragging:Boolean;//f7A
    FDragHandle:HWND;//f7C
    FDragHotspot:TPoint;//f80
    FDragIndex:Integer;//f88
    FOldCursor:TCursor;//f8C
    procedure Initialize; virtual;//v38//0049039C
    function GetHotSpot:TPoint; virtual;//v44//00490428
    procedure SetDragCursor(Value:TCursor);//00490404
  end;
  TImageList = class(TDragImageList)
  end;
  TDockZone = class(TObject)
  published
    procedure ResetChildren;//00490A38
    function PrevVisible:TDockZone;//00490E38
    procedure Update;//00490BD8
    procedure ResetZoneLimits;//00490DCC
    procedure ExpandZoneLimit(NewLimit:Integer);//00490D90
    constructor Create;//004907C0
    function NextVisible:TDockZone;//00490E2C
    function FirstVisibleChild:TDockZone;//00490E54
  public
    FChildControl:TControl;//f4
    FChildZones:TDockZone;//f8
    FNextSibling:TDockZone;//fC
    FOrientation:TDockOrientation;//f10
    FParentZone:TDockZone;//f14
    FPrevSibling:TDockZone;//f18
    FTree:TDockTree;//f1C
    FZoneLimit:Integer;//f20
    FOldSize:Integer;//f24
    function GetChildCount:Integer;//004907FC
    function GetVisibleChildCount:Integer;//00490810
    function GetVisible:Boolean;//00490834
    function GetLimitBegin:Integer;//0049086C
    function GetLimitSize:Integer;//004908B4
    function GetTopLeft(Orient:Integer):Integer;//004908FC
    function GetHeightWidth(Orient:Integer):Integer;//00490980
    function GetControlName:UnicodeString;//00490AE0
    function SetControlName(const Value:UnicodeString):Boolean;//00490B24
    function GetZoneLimit:Integer;//00490D54
    procedure SetZoneLimit(const Value:Integer);//00490D7C
  end;
  TDockTree = class(TInterfacedObject)
  published
    procedure PaintSite(DC:HDC);//00491FD4
    destructor Destroy();//00490FC8
    constructor Create;//00490E60
  public
    FBorderWidth:Integer;//fC
    FBrush:TBrush;//f10
    FDockSite:TWinControl;//f14
    FGrabberSize:Integer;//f18
    FGrabbersOnTop:Boolean;//f1C
    FOldRect:TRect;//f20
    FOldWndProc:TWndMethod;//f30
    FReplacementZone:TDockZone;//f38
    FScaleBy:Double;//f40
    FShiftScaleOrient:TDockOrientation;//f48
    FShiftBy:Integer;//f4C
    FSizePos:TPoint;//f50
    FSizingDC:HDC;//f58
    FSizingWnd:HWND;//f5C
    FSizingZone:TDockZone;//f60
    FTopZone:TDockZone;//f64
    FTopXYLimit:Integer;//f68
    FUpdateCount:Integer;//f6C
    FVersion:Integer;//f70
    FRelativeSizes:Boolean;//f74
    destructor Destroy(); virtual;//00490FC8
    procedure AdjustDockRect(Control:TControl; var ARect:TRect); virtual;//v0//00491020
    procedure AdjustFrameRect(Control:TControl; var ARect:TRect); virtual;//v4//004934A8
    function HitTest(const MousePos:TPoint; var HTFlag:Integer):TControl; virtual;//v8//004911A0
    procedure InsertControl(Control:TControl; InsertAt:TAlign; DropCtl:TControl); virtual;//vC//004911B0
    procedure LoadFromStream(Stream:TStream); virtual;//v10//004919C8
    procedure MouseDown(Button:TMouseButton; Shift:TShiftState; X:Integer; Y:Integer; var Handled:Boolean); virtual;//v14//004934E8
    procedure MouseMove(Shift:TShiftState; X:Integer; Y:Integer; var Handled:Boolean); virtual;//v18//004936A0
    procedure MouseUp(Button:TMouseButton; Shift:TShiftState; X:Integer; Y:Integer; var Handled:Boolean); virtual;//v1C//004936EC
    procedure PaintDockFrame(Canvas:TCanvas; Control:TControl; const ARect:TRect); virtual;//v20//00491E80
    procedure PositionDockRect(Client:TControl; DropCtl:TControl; DropAlign:TAlign; var DockRect:TRect); virtual;//v24//00492108
    function ReferenceFromOrient(const Orient:TDockOrientation):Integer; virtual;//v28//0049347C
    procedure RemoveControl(Control:TControl); virtual;//v2C//00492314
    procedure SaveToStream(Stream:TStream); virtual;//v30//004928E0
    procedure ShowHint(CursorPos:TPoint; var CursorRect:TRect; var HintStr:UnicodeString); virtual;//v34//00493758
    procedure ResetBounds(Force:Boolean); virtual;//v38//004925F4
    procedure WndProc(var Message:TMessage); virtual;//v3C//0049317C
    function ZoneCaptionHitTest(const Zone:TDockZone; const MousePos:TPoint; var HTFlag:Integer):Boolean; virtual;//v40//004915E0
    constructor Create; virtual;//v44//00490E60
    procedure PaintSite(DC:HDC); virtual;//v48//00491FD4
    procedure BeginUpdate;//00491038
    procedure EndUpdate;//0049103C
    function FindControlZone(Control:TControl):TDockZone;//004910A8
    procedure ForEachAt(Zone:TDockZone; Proc:TForEachZoneProc);//00491110
    procedure GetControlBounds(Control:TControl; var CtlBounds:TRect);//00491128
    procedure InsertNewParent(NewZone:TDockZone; SiblingZone:TDockZone; ParentOrientation:TDockOrientation; InsertLast:Boolean);//004913C4
    procedure InsertSibling(NewZone:TDockZone; SiblingZone:TDockZone; InsertLast:Boolean);//00491568
    function FindControlAtPos(const Pos:TPoint):TControl;//004916E4
    function InternalHitTest(const MousePos:TPoint; var HTFlag:Integer):TDockZone;//00491890
    procedure PruneZone(Zone:TDockZone);//004922B8
    procedure RemoveZone(Zone:TDockZone);//00492354
    procedure ScaleZone(Zone:TDockZone);//004926D4
    procedure SetNewBounds(Zone:TDockZone);//00492B50
    procedure SetReplacingControl(Control:TControl);//00492B80
    procedure ShiftZone(Zone:TDockZone);//00492B98
    procedure SplitterMouseDown(OnZone:TDockZone; MousePos:TPoint);//00492BC8
    procedure SplitterMouseUp;//00492C28
    procedure UpdateAll;//00492CA0
    procedure UpdateZone(Zone:TDockZone);//00492CC8
    procedure WindowProc(var Message:TMessage);//00492CD8
    procedure DrawSizeSplitter;//00492CEC
    function GetNextLimit(AZone:TDockZone):Integer;//00492E68
    procedure ControlVisibilityChanged(Control:TControl; Visible:Boolean);//004930F4
    function ActualSize(const RelativeSize:Integer; const Reference:Integer):Integer;//00493414
    function RelativeSize(const ActualSize:Integer; const Reference:Integer):Integer;//00493444
  end;
  TCustomPanningWindow = class(TCustomControl)
  published
    procedure StopPanning;//0047F5B4
    procedure StartPanning(AHandle:Cardinal; AControl:TControl);//0047F5AC
    procedure GetIsPanning;//0047F5A4
  public
    procedure vF0; virtual; abstract;//vF0//00404A58
    procedure vF4; virtual; abstract;//vF4//00404A58
    procedure vF8; virtual; abstract;//vF8//00404A58
  end;
  TMouse = class(TObject)
  published
    procedure SettingChanged(Setting:Integer);//00493A68
    function CreatePanningWindow:TCustomPanningWindow;//004938DC
    constructor Create();//0049384C
    destructor Destroy();//00493908
  public
    FDragImmediate:Boolean;//f4
    FDragThreshold:Integer;//f8
    FMousePresent:Boolean;//fC
    FNativeWheelSupport:Boolean;//fD
    FScrollLines:Integer;//f10
    FScrollLinesMessage:Cardinal;//f14
    FWheelHwnd:HWND;//f18
    FWheelMessage:Cardinal;//f1C
    FWheelPresent:Boolean;//f20
    FWheelSupportMessage:Cardinal;//f24
    FPanningWindow:TCustomPanningWindow;//f28
    FPanningWindowClass:TPanningWindowClass;//f2C
    function GetCapture:HWND;//00493938
    function GetCursorPos:TPoint;//00493940
    function GetIsDragging:Boolean;//0049396C
    function GetIsPanning:Boolean;//00493978
    procedure GetMouseData;//0049399C
    procedure GetNativeData;//004939B4
    procedure GetRegisteredData;//004939E0
    procedure SetCapture(const Value:HWND);//00493A08
    procedure SetCursorPos(const Value:TPoint);//00493A30
    procedure SetPanningWindow(const Value:TCustomPanningWindow);//00493A40
  end;
  TCustomListControl = class(TWinControl)
  published
    procedure GetCount;//0047FEC8
    procedure DeleteSelected;//0047FEC0
    procedure SelectAll;//0047FED0
    procedure MoveSelection(Destination:TCustomListControl);//004942E8
    procedure AddItem(Item:string; AObject:TObject);//0047FEA0
    constructor Create;//0049423C
    procedure Clear;//0047FEA8
    procedure CopySelection(Destination:TCustomListControl);//0047FEB8
    procedure ClearSelection;//0047FEB0
  public
    constructor Create; virtual;//v2C//0049423C
    procedure GetItemIndex; virtual; abstract;//vEC//00404A58
    procedure SetItemIndex; virtual; abstract;//vF0//00404A58
    procedure AddItem; virtual; abstract;//vF4//00404A58
    procedure Clear; virtual; abstract;//vF8//00404A58
    procedure ClearSelection; virtual; abstract;//vFC//00404A58
    procedure CopySelection; virtual; abstract;//v100//00404A58
    procedure DeleteSelected; virtual; abstract;//v104//00404A58
    procedure GetCount; virtual; abstract;//v108//00404A58
    procedure MoveSelection(Destination:TCustomListControl); virtual;//v10C//004942E8
    procedure SelectAll; virtual; abstract;//v110//00404A58
    procedure IsTouchPropertyStored(AProperty:TTouchProperty); dynamic;//0049429C
  end;
  TCustomMultiSelectListControl = class(TCustomListControl)
  public
    FMultiSelect:Boolean;//f270
  end;
  TBalloonHintStyle = (bhsStandard, bhsBalloon);
  TCustomHintWindow = class(TCustomControl)
  published
    procedure PositionAtCursor;//00494834
    procedure AutoSize;//004946FC
    constructor Create;//00494714
    procedure PositionAt(Rect:TRect);//00494850
    procedure PositionAt(Point:TPoint);//004948F4
  public
    FHintParent:TCustomHint;//f278
    FPopAbove:Boolean;//f27C
    FTitle:string;//f280
    FDescription:string;//f284
    FImageIndex:TImageIndex;//f288
    constructor Create; virtual;//v2C//00494714
    procedure CreateParams(var Params:TCreateParams); virtual;//vAC//00494798
    procedure CreateWnd; virtual;//vB4//004947B4
    procedure Paint; virtual;//vEC//00494824
    procedure NCPaint(DC:HDC); virtual;//vF0//0049480C
    procedure CMTextChanged(var Message:TMessage); message CM_TEXTCHANGED;//0049470C
  end;
  TCustomHintShowHideThread = class(TThread)
  published
    procedure Execute;//004952FC
    procedure HideHint;//00495768
    procedure ResumeWork;//0049577C
    constructor Create(HintObject:TCustomHint);//004950A8
    destructor Destroy();//0049512C
  public
    FHintWindowQueue:TThreadList;//f40
    FHintObject:TCustomHint;//f44
    FHideHint:Boolean;//f48
    FActive:Boolean;//f49
    FDisplayTime:Cardinal;//f4C
    FWaitEvent:TEvent;//f50
    destructor Destroy(); virtual;//0049512C
    procedure Execute; virtual;//v4//004952FC
    procedure QueHintWindow(Value:TCustomHintWindow);//00495770
  end;
  TCustomHint = class(TComponent)
  published
    procedure HideHint(HidingControl:TControl);//00494BC8
    procedure HideHint;//00494BD4
    procedure PaintHint(HintWindow:TCustomHintWindow);//00494C0C
    procedure SetHintSize(HintWindow:TCustomHintWindow);//004949C0
    procedure NCPaintHint(HintWindow:TCustomHintWindow; DC:HDC);//00494BDC
    procedure ShowHint(Control:TControl);//00494E60
    destructor Destroy();//00494B74
    constructor Create;//00494B24
    procedure ShowHint;//00495090
    procedure ShowHint(Rect:TRect);//00494FBC
    procedure ShowHint(Point:TPoint);//00495054
  public
    FTitle:string;//f34
    FDescription:string;//f38
    FImages:TImageList;//f3C
    FImageIndex:TImageIndex;//f40
    FStyle:TBalloonHintStyle;//f44
    FAnimateThread:TCustomHintShowHideThread;//f48
    FShowDelay:Cardinal;//f4C
    FShow:Boolean;//f50
    FHideAfter:Integer;//f54
    FLatestHintControl:TControl;//f58
    FWorkComplete:Boolean;//f5C
    destructor Destroy(); virtual;//00494B74
    procedure Notification(AComponent:TComponent; Operation:TOperation); virtual;//v10//00494BE0
    constructor Create; virtual;//v2C//00494B24
    procedure PaintHint(HintWindow:TCustomHintWindow); virtual;//v34//00494C0C
    procedure NCPaintHint(HintWindow:TCustomHintWindow; DC:HDC); virtual;//v38//00494BDC
    procedure SetHintSize(HintWindow:TCustomHintWindow); virtual;//v3C//004949C0
    procedure SetImages(Value:TImageList);//00494B0C
    procedure ShowAnotherHint;//00494E58
  end;
  TSiteList = class(TList)
  published
    function GetTopSite:TWinControl;//004817B0
    procedure Clear;//0048177C
    procedure AddSite(ASite:TWinControl);//004816F8
    function Find(ParentWnd:HWND; var Index:Integer):Boolean;//00481694
  public
    procedure Clear; virtual;//v8//0048177C
  end;
  :TWinControl.:1 = array of Integer;
//elSize = 4
//varType equivalent: varInteger;
  :TWinControl.:2 = array of GESTURECONFIG;
//elSize = C;
  :TDockTree.:1 = array of Byte;
//elSize = 1
//varType equivalent: varByte;
    procedure DLL;//00475BA8
    procedure $thunk_DwmAttachMilContent;//00475BB8
    function DwmExtendFrameIntoClientArea(hWnd:HWND; const pMarInset:TMargins):HRESULT; stdcall;//00475BC8
    procedure $thunk_DwmDefWindowProc;//00475BD0
    function DwmIsCompositionEnabled(var pfEnabled:BOOL):HRESULT; stdcall;//00475BE0
    function DwmCompositionEnabled:Boolean;//00475BE8
    function MouseOriginToShiftState:TShiftState;//00480DE4
    procedure ChangeBiDiModeAlignment(var Alignment:TAlignment);//00480E20
    function InitWndProc(HWindow:HWND; Msg:UINT; WParam:WPARAM; LParam:LPARAM):LRESULT; stdcall;//00480E34
    function ObjectFromHWnd(Handle:HWND):TWinControl;//00480F44
    function FindControl(Handle:HWND):TWinControl;//00480F78
    function IsVCLControl(Handle:HWND):Boolean;//00480FD4
    function SendAppMessage(Msg:Cardinal; WParam:LongInt; LParam:LongInt):LongInt;//00481004
    function CursorToIdent(Cursor:LongInt; var Ident:UnicodeString):Boolean;//004812E8
    function IdentToCursor(const Ident:UnicodeString; var Cursor:LongInt):Boolean;//004812F8
    function GetShortHint(const Hint:UnicodeString):UnicodeString;//00481308
    function GetLongHint(const Hint:UnicodeString):UnicodeString;//00481350
    procedure PerformEraseBackground(Control:TControl; DC:HDC);//00481398
    procedure PerformBufferedPrintClient(Handle:HWND; const Rect:TRect);//004813E8
    function GetCaptureControl:TControl;//0048149C
    procedure SetCaptureControl(Control:TControl);//004814C4
    function GetTopParent:HWND;//004816CC
    procedure sub_0048186C;//0048186C
    procedure WndProc(var Msg:TMessage);//0048189C
    //function sub_004819CC:?;//004819CC
    function GetDragCursor(Accepted:Boolean; X:Integer; Y:Integer):TCursor;//004819D0
    procedure EndDrag(Target:TObject; X:Integer; Y:Integer);//00481ACC
    procedure Finished(Target:TObject; X:Integer; Y:Integer; Accepted:Boolean);//00481AF8
    function GetDragCursor(Accepted:Boolean; X:Integer; Y:Integer):TCursor;//00481B2C
    function GetDragImages:TDragImageList;//00481B44
    procedure EndDrag(Target:TObject; X:Integer; Y:Integer);//00481CA0
    function AbsMin(Value1:Integer; Value2:Integer):Integer;//00481CBC
    procedure AdjustDockRect(ARect:TRect);//00481CE0
    procedure DrawDragDockImage;//00481D5C
    procedure EraseDragDockImage;//00481D70
    function GetDragCursor(Accepted:Boolean; X:Integer; Y:Integer):TCursor;//00481D84
    //function sub_00481D90:?;//00481D90
    //function sub_00481D94:?;//00481D94
    function IsBeforeTargetWindow(Window:HWND; Data:LongInt):BOOL; stdcall;//00481DA0
    function ValidDockTarget(Target:TWinControl):Boolean;//00481E00
    function IsSiteChildOfClient:Boolean;//00481F9C
    function GetDockSiteAtPos(MousePos:TPoint; Client:TControl):TWinControl;//00481FE0
    procedure RegisterDockSite(Site:TWinControl; DoRegister:Boolean);//0048212C
    function DragMessage(Handle:HWND; Msg:TDragMessage; Source:TDragObject; Target:Pointer; const Pos:TPoint):LongInt;//00482188
    function IsDelphiHandle(Handle:HWND):Boolean;//004821E0
    function DragFindWindow(const Pos:TPoint):HWND;//00482240
    function DragFindTarget(const Pos:TPoint; var Handle:HWND; DragKind:TDragKind; Client:TControl):Pointer;//0048226C
    function DoDragOver(DragMsg:TDragMessage):Boolean;//004822BC
    function GetDropCtl:TControl;//004822F8
    procedure DragTo(const Pos:TPoint);//00482398
    procedure DragInit(ADragObject:TDragObject; Immediate:Boolean; Threshold:Integer);//00482680
    procedure DragInitControl(Control:TControl; Immediate:Boolean; Threshold:Integer);//004827F0
    function CheckUndock:Boolean;//004829A8
    procedure DragDone(Drop:Boolean);//00482A1C
    procedure CancelDrag;//00482D40
    function FindVCLWindow(const Pos:TPoint):TWinControl;//00482D58
    function FindDragTarget(const Pos:TPoint; AllowDisabled:Boolean):TControl;//00482D8C
    procedure ListAdd(var List:TList; Item:Pointer);//00482DD8
    procedure ListRemove(var List:TList; Item:Pointer);//00482E00
    procedure MoveWindowOrg(DC:HDC; DX:Integer; DY:Integer);//00482E50
    procedure FreeDeviceContext;//00482E80
    procedure FreeDeviceContexts;//00482F40
    procedure CreateHandle;//00483018
    procedure AssignTo(Dest:TPersistent);//004831A0
    procedure Change;//00483274
    procedure AssignClient(AClient:TObject);//00483288
    function DoShowHint(var HintStr:UnicodeString):Boolean;//004832A4
    function IsCaptionLinked:Boolean;//004833A0
    function IsDropdownMenuLinked:Boolean;//00483408
    function IsEnabledLinked:Boolean;//0048341C
    function IsEnableDropdownLinked:Boolean;//00483444
    function IsHintLinked:Boolean;//00483458
    function IsPopupMenuLinked:Boolean;//00483484
    function IsVisibleLinked:Boolean;//004834B4
    function IsOnExecuteLinked:Boolean;//004834DC
    procedure SetCaption(const Value:UnicodeString);//00483504
    procedure sub_00483524;//00483524
    procedure SetEnabled(Value:Boolean);//00483528
    procedure sub_00483548;//00483548
    procedure SetHint(const Value:UnicodeString);//0048354C
    procedure SetVisible(Value:Boolean);//00483570
    procedure SetOnExecute(Value:TNotifyEvent);//00483590
    function IsHelpLinked:Boolean;//004835BC
    procedure SetHelpContext(Value:THelpContext);//0048360C
    procedure SetHelpKeyword(const Value:UnicodeString);//0048362C
    procedure SetHelpType(Value:THelpType);//0048364C
    procedure SetPopupMenu(Value:TPopupMenu);//0048366C
    //function sub_004838D4:?;//004838D4
    function GetEnabled:Boolean;//004838D8
    procedure sub_004838E0;//004838E0
    procedure PaletteChanged(Foreground:Boolean);//00483918
    function GetAction:TBasicAction;//00483994
    procedure IsTouchPropertyStored(AProperty:TTouchProperty);//00483AD8
    procedure SetDragMode(Value:TDragMode);//00483B70
    procedure RequestAlign;//00483B74
    procedure Resize;//00483B8C
    procedure ReadState(Reader:TReader);//00483BAC
    procedure Notification(AComponent:TComponent; Operation:TOperation);//00483C5C
    procedure DoDock(NewDockSite:TWinControl; var ARect:TRect);//00484208
    function GetClientRect:TRect;//00484304
    function GetClientOrigin:TPoint;//0048439C
    procedure ChangeScale(M:Integer; D:Integer);//00484638
    procedure SetAutoSize(Value:Boolean);//00484800
    procedure SetName(const Value:TComponentName);//00484818
    procedure SetParent(AParent:TWinControl);//00484904
    procedure SetEnabled(Value:Boolean);//00484988
    procedure SetBiDiMode(Value:TBiDiMode);//00484ACC
    procedure IsStoredBiDiMode(Value:TBiDiMode);//00484B5C
    procedure IsStoredColor(Value:TColor);//00484C34
    procedure SetParentBiDiMode(Value:Boolean);//00484C60
    procedure SetZOrder(TopMost:Boolean);//00484D84
    function GetDeviceContext(var WindowHandle:HWND):HDC;//00484DE0
    function BackgroundClipped:Boolean;//00484E88
    procedure MouseActivate(Button:TMouseButton; Shift:TShiftState; X:Integer; Y:Integer; HitTest:Integer);//00484FB8
    procedure BeginAutoDrag;//00485228
    procedure sub_00485358;//00485358
    procedure DragOver(Source:TObject; X:Integer; Y:Integer; State:TDragState; var Accept:Boolean);//00485368
    procedure DoStartDrag(var DragObject:TDragObject);//004853D0
    //procedure sub_004853F0(?:?; ?:?);//004853F0
    procedure DoGetGestureOptions(var Gestures:TInteractiveGestures; var Options:TInteractiveGestureOptions);//004853F4
    procedure DoEndDrag(Target:TObject; X:Integer; Y:Integer);//00485410
    procedure PositionDockRect(DragDockObject:TDragDockObject);//0048543C
    procedure DockTrackNoTarget(Source:TDragDockObject; X:Integer; Y:Integer);//00485510
    procedure DoEndDock(Target:TObject; X:Integer; Y:Integer);//00485528
    procedure DoStartDock(var DragObject:TDragObject);//00485554
    procedure DoMouseWheel(Shift:TShiftState; WheelDelta:Integer; MousePos:TPoint);//004855B8
    procedure DoMouseWheelDown(Shift:TShiftState; MousePos:TPoint);//0048568C
    procedure DoMouseWheelUp(Shift:TShiftState; MousePos:TPoint);//004856D8
    procedure DefaultDockImage(DragDockObject:TDragDockObject; Erase:Boolean);//00485724
    procedure DrawDragDockImage(DragDockObject:TDragDockObject);//00485850
    procedure EraseDragDockImage(DragDockObject:TDragDockObject);//00485860
    //function sub_00485D14:?;//00485D14
    function CanResize(var NewWidth:Integer; var NewHeight:Integer):Boolean;//00485D18
    procedure ConstrainedResize(var MinWidth:Integer; var MinHeight:Integer; var MaxWidth:Integer; var MaxHeight:Integer);//00485DE4
    procedure DesignWndProc(var Message:TMessage);//00485E40
    procedure sub_00486070;//00486070
    procedure WndProc(var Message:TMessage);//00486074
    function DoWriteIsControl:Boolean;//00486410
    function DoWriteExplicit(Dim:TExplicitDimension):Boolean;//00486444
    procedure DefineProperties(Filer:TFiler);//00486664
    procedure Click;//00486844
    procedure DblClick;//004868BC
    procedure MouseDown(Button:TMouseButton; Shift:TShiftState; X:Integer; Y:Integer);//004868DC
    procedure WMLButtonDown(var Message:TWMLButtonDown);//004869B0
    procedure WMNCLButtonDown(var Message:TWMNCLButtonDown);//004869FC
    procedure WMLButtonDblClk(var Message:TWMLButtonDblClk);//00486A18
    procedure sub_00486A6C;//00486A6C
    procedure WMRButtonDown(var Message:TWMRButtonDown);//00486B0C
    procedure WMRButtonDblClk(var Message:TWMRButtonDblClk);//00486B38
    procedure WMMButtonDown(var Message:TWMMButtonDown);//00486B64
    procedure WMMButtonDblClk(var Message:TWMMButtonDblClk);//00486B90
    procedure MouseMove(Shift:TShiftState; X:Integer; Y:Integer);//00486BBC
    procedure WMMouseMove(var Message:TWMMouseMove);//00486BF0
    procedure MouseUp(Button:TMouseButton; Shift:TShiftState; X:Integer; Y:Integer);//00486C78
    procedure WMLButtonUp(var Message:TWMLButtonUp);//00486CF4
    procedure WMRButtonUp(var Message:TWMRButtonUp);//00486D70
    procedure WMMButtonUp(var Message:TWMMButtonUp);//00486D90
    procedure WMMouseWheel(var Message:TWMMouseWheel);//00486DB0
    procedure WMCancelMode(var Message:TWMCancelMode);//00486E08
    procedure WMWindowPosChanged(var Message:TWMWindowPosChanged);//00486E44
    procedure CMVisibleChanged(var Message:TMessage);//00486EF4
    procedure CMColorChanged(var Message:TMessage);//00486F1C
    procedure CMEnabledChanged(var Message:TMessage);//00486F28
    procedure CMFontChanged(var Message:TMessage);//00486F34
    procedure SetParentColor(Value:TColor);//00486F40
    procedure CMParentColorChanged(var Message:TMessage);//00486F78
    procedure CMParentBiDiModeChanged(var Message:TMessage);//00486FB4
    procedure CMMouseWheel(var Message:TCMMouseWheel);//00486FD8
    procedure CMGesture(var Message:TCMGesture);//00487048
    procedure CMBiDiModeChanged(var Message:TMessage);//004870BC
    procedure CMParentShowHintChanged(var Message:TMessage);//004870D8
    procedure CMParentFontChanged(var Message:TCMParentFontChanged);//00487114
    procedure CMSysFontChanged(var Message:TMessage);//00487144
    procedure CMHitTest(var Message:TWMNCHitTest);//00487168
    procedure CMMouseEnter(var Message:TMessage);//00487170
    procedure CMMouseLeave(var Message:TMessage);//004871D4
    procedure CMDesignHitTest(var Message:TWMMouse);//00487238
    procedure CMParentTabletOptionsChanged(var Message:TMessage);//00487240
    procedure CreateTouchManager;//004872F4
    procedure UpdateFloatingDockSitePos;//00487310
    procedure CMFloat(var Message:TCMFloat);//00487398
    procedure ActionChange(Sender:TObject; CheckDefaults:Boolean);//004873F8
    procedure sub_0048751C;//0048751C
    procedure Loaded;//004875E4
    procedure AssignTo(Dest:TPersistent);//0048761C
    function MinVar(const Data:array[$0..-$1] of System.Double; const _Dv_:$0..-$1):Integer;//004876C8
    procedure GetDockEdge(MousePos:TPoint);//00487704
    function GetFloating:Boolean;//004877B4
    //function sub_004877E0:?;//004877E0
    procedure AdjustSize;//004877E8
    procedure CMHintShow(var Message:TCMHintShow);//00487874
    procedure WMContextMenu(var Message:TWMContextMenu);//004878A4
    procedure DoContextPopup(MousePos:TPoint; var Handled:Boolean);//004879E4
    procedure CMMouseActivate(var Message:TCMMouseActivate);//00487C44
    procedure AssignClient(AClient:TObject);//00487D94
    procedure IsHelpContextLinked;//00487DB8
    procedure SetHelpKeyword(const Value:UnicodeString);//00487DC0
    procedure ReadState(Reader:TReader);//00488184
    procedure AdjustClientRect(var Rect:TRect);//004881FC
    function GetClientSize(Control:TWinControl):TPoint;//00488654
    function InsertBefore(C1:TControl; C2:TControl; AAlign:TAlign):Boolean;//004886BC
    procedure DoPosition(Control:TControl; AAlign:TAlign; AlignInfo:TAlignInfo);//004887EC
    procedure DoAlign(AAlign:TAlign);//00488834
    function AlignWork:Boolean;//004889C0
    procedure AlignNestedControls;//00488A14
    procedure DoAdjustSize;//00488C8C
    procedure AlignControls(AControl:TControl; var Rect:TRect);//00488D58
    procedure DoFlipChildren;//00488FF8
    procedure Notification(AComponent:TComponent; Operation:TOperation);//00489538
    procedure CreateParams(var Params:TCreateParams);//00489664
    procedure CreateWnd;//00489778
    procedure CreateWindowHandle(const Params:TCreateParams);//00489980
    function PointsEqual(const P1:TPoint; const P2:TPoint):Boolean;//00489A54
    function DoWriteDesignSize:Boolean;//00489A68
    procedure DefineProperties(Filer:TFiler);//00489B48
    procedure DestroyWnd;//00489BB4
    procedure DestroyWindowHandle;//00489C1C
    procedure CreateHandle;//00489CE0
    function CustomAlignInsertBefore(C1:TControl; C2:TControl):Boolean;//00489D78
    procedure CustomAlignPosition(Control:TControl; var NewLeft:Integer; var NewTop:Integer; var NewWidth:Integer; var NewHeight:Integer; var AlignRect:TRect; AlignInfo:TAlignInfo);//00489D9C
    function DestroyChildWindow(Window:HWND; Data:PDestroyChildData):BOOL; stdcall;//00489DEC
    procedure DestroyHandle;//00489E30
    procedure CMRecreateWnd(var Message:TMessage);//00489EBC
    procedure SetParentDoubleBuffered(Value:Boolean);//0048A170
    function GetControlAtPos(AControl:TControl):Boolean;//0048A2F8
    procedure WndProc(var Message:TMessage);//0048A6A4
    function DoControlMsg(ControlHandle:HWND; var Message:void ):Boolean;//0048AD3C
    procedure PaintWindow(DC:HDC);//0048AEE0
    procedure DrawThemeEdge(DC:HDC; var DrawRect:TRect);//0048B258
    procedure WMPaint(var Message:TWMPaint);//0048B55C
    procedure WMCharToItem(var Message:TWMCharToItem);//0048B7B0
    procedure WMNotify(var Message:TWMNotify);//0048B7D0
    procedure WMSysColorChange(var Message:TWMSysColorChange);//0048B7F4
    procedure WMWinIniChange(var Message:TMessage);//0048B810
    procedure WMFontChange(var Message:TMessage);//0048B824
    procedure WMTimeChange(var Message:TMessage);//0048B834
    procedure WMCommand(var Message:TWMCommand);//0048B844
    procedure WMHScroll(var Message:TWMHScroll);//0048B864
    procedure WMCompareItem(var Message:TWMCompareItem);//0048B884
    procedure WMDeleteItem(var Message:TWMDeleteItem);//0048B8A8
    procedure WMDrawItem(var Message:TWMDrawItem);//0048B8CC
    procedure WMMeasureItem(var Message:TWMMeasureItem);//0048B8F0
    procedure WMMouseActivate(var Message:TWMMouseActivate);//0048B910
    procedure WMEraseBkgnd(var Message:TWMEraseBkgnd);//0048B944
    procedure WMWindowPosChanged(var Message:TWMWindowPosChanged);//0048B9E4
    procedure WMWindowPosChanging(var Message:TWMWindowPosChanging);//0048BA9C
    procedure WMSize(var Message:TWMSize);//0048BAF0
    procedure WMMove(var Message:TWMMove);//0048BB6C
    procedure WMSetCursor(var Message:TWMSetCursor);//0048BB88
    procedure WMSetFocus(var Message:TWMSetFocus);//0048BC90
    procedure WMKillFocus(var Message:TWMKillFocus);//0048BCAC
    procedure WMIMEStartComp(var Message:TMessage);//0048BCC8
    procedure WMInputLangChange(var Message:TMessage);//0048BCDC
    procedure WMIMEEndComp(var Message:TMessage);//0048BD34
    procedure RequestAlign;//0048BDCC
    procedure DoAddDockClient(Client:TControl; const ARect:TRect);//0048BFDC
    procedure DoRemoveDockClient(Client:TControl);//0048BFE4
    procedure DoEnter;//0048BFE8
    procedure DoExit;//0048C008
    procedure DoDockOver(Source:TDragDockObject; X:Integer; Y:Integer; State:TDragState; var Accept:Boolean);//0048C080
    procedure DockOver(Source:TDragDockObject; X:Integer; Y:Integer; State:TDragState; var Accept:Boolean);//0048C0B4
    procedure DoUnDock(NewTarget:TWinControl; Client:TControl);//0048C0F4
    procedure ReloadDockedControl(const AControlName:UnicodeString; var AControl:TControl);//0048C150
    procedure GetSiteInfo(Client:TControl; var InfluenceRect:TRect; MousePos:TPoint; var CanDock:Boolean);//0048C1AC
    procedure sub_0048C244;//0048C244
    procedure CreateDockManager;//0048C248
    procedure CMDockClient(var Message:TCMDockClient);//0048C3C4
    procedure CMUnDockClient(var Message:TCMUnDockClient);//0048C4B4
    procedure CMFloat(var Message:TCMFloat);//0048C4DC
    procedure KeyDown(var Key:Word; Shift:TShiftState);//0048C55C
    procedure WMKeyDown(var Message:TWMKeyDown);//0048C63C
    procedure WMSysKeyDown(var Message:TWMSysKeyDown);//0048C668
    procedure KeyUp(var Key:Word; Shift:TShiftState);//0048C694
    procedure WMKeyUp(var Message:TWMKeyUp);//0048C774
    procedure WMSysKeyUp(var Message:TWMSysKeyUp);//0048C794
    procedure KeyPress(var Key:Char);//0048C7B4
    procedure WMChar(var Message:TWMChar);//0048C83C
    function TraverseControls(Container:TWinControl):Boolean;//0048C85C
    procedure WMSysCommand(var Message:TWMSysCommand);//0048C90C
    procedure WMVKeyToItem(var Message:TWMVKeyToItem);//0048C9B8
    procedure WMParentNotify(var Message:TWMParentNotify);//0048C9D8
    procedure WMVScroll(var Message:TWMVScroll);//0048CA0C
    procedure WMDestroy(var Message:TWMDestroy);//0048CA2C
    procedure WMNCDestroy(var Message:TWMNCDestroy);//0048CA98
    procedure WMNCHitTest(var Message:TWMNCHitTest);//0048CAB4
    procedure PaletteChanged(Foreground:Boolean);//0048CAD8
    procedure WMQueryNewPalette(var Message:TMessage);//0048CB30
    procedure WMPaletteChanged(var Message:TMessage);//0048CB54
    procedure CMShowHintChanged(var Message:TMessage);//0048CB74
    procedure CMBiDiModeChanged(var Message:TMessage);//0048CB8C
    procedure CMDoubleBufferedChanged(var Message:TMessage);//0048CBC4
    procedure CMEnter(var Message:TWMNoParams);//0048CBE8
    procedure CMExit(var Message:TWMNoParams);//0048CC6C
    procedure CMDesignHitTest(var Message:TWMMouse);//0048CC78
    procedure CMChanged(var Message:TCMChanged);//0048CC98
    procedure CMChildKey(var Message:TCMChildKey);//0048CCAC
    procedure CMDialogKey(var Message:TWMKey);//0048CCC0
    procedure CMDialogChar(var Message:TWMKey);//0048CCC8
    procedure CMFocusChanged(var Message:TCMFocusChanged);//0048CCD0
    procedure CMVisibleChanged(var Message:TMessage);//0048CCD8
    procedure CMShowingChanged(var Message:TMessage);//0048CD08
    procedure CMEnabledChanged(var Message:TMessage);//0048CD30
    procedure CMColorChanged(var Message:TMessage);//0048CD78
    procedure CMFontChanged(var Message:TMessage);//0048CDA0
    procedure CMCursorChanged(var Message:TMessage);//0048CDDC
    procedure CMBorderChanged(var Message:TMessage);//0048CE1C
    procedure CMCtl3DChanged(var Message:TMessage);//0048CE5C
    procedure CMParentCtl3DChanged(var Message:TMessage);//0048CE9C
    procedure CMParentDoubleBufferedChanged(var Message:TMessage);//0048CEDC
    procedure CMSysColorChange(var Message:TMessage);//0048CF08
    procedure CMWinIniChange(var Message:TWMWinIniChange);//0048CF10
    procedure CMFontChange;//0048CF18
    procedure CMTabletOptionsChanged(var Message:TMessage);//0048CF20
    procedure CMTimeChange;//0048CF3C
    procedure CMDrag(var Message:TCMDrag);//0048CF44
    procedure CMControlListChange(var Message:TMessage);//0048CFA4
    procedure CMControlListChanging(var Message:TMessage);//0048CFB8
    procedure CMSysFontChanged(var Message:TMessage);//0048CFCC
    procedure CNKeyDown(var Message:TWMKeyDown);//0048D080
    procedure CNKeyUp(var Message:TWMKeyUp);//0048D164
    procedure CNChar(var Message:TWMChar);//0048D1B8
    procedure CNSysKeyDown(var Message:TWMKeyDown);//0048D208
    procedure CNSysChar(var Message:TWMChar);//0048D264
    procedure ChangeScale(M:Integer; D:Integer);//0048D440
    procedure ShowControl(AControl:TControl);//0048D684
    procedure SetZOrder(TopMost:Boolean);//0048D778
    function GetDeviceContext(var WindowHandle:HWND):HDC;//0048D7D8
    procedure CMInputLangChange(var Message:TMessage);//0048D874
    procedure CMInvalidate(var Message:TMessage);//0048D8C8
    function GetControlExtents:TRect;//0048DAA4
    function GetClientOrigin:TPoint;//0048DBD8
    function GetClientRect:TRect;//0048DBF8
    procedure AdjustSize;//0048DC10
    procedure SetChildOrder(Child:TComponent; Order:Integer);//0048E1CC
    procedure CanResize(var NewWidth:Integer; var NewHeight:Integer);//0048E20C
    procedure DoCalcConstraints(Control:TControl; var MinWidth:Integer; var MinHeight:Integer; var MaxWidth:Integer; var MaxHeight:Integer);//0048E214
    procedure ConstrainedResize(var MinWidth:Integer; var MinHeight:Integer; var MaxWidth:Integer; var MaxHeight:Integer);//0048E764
    procedure ActionChange(Sender:TObject; CheckDefaults:Boolean);//0048E7A0
    procedure sub_0048751C;//0048E7E0
    procedure AssignTo(Dest:TPersistent);//0048E7E8
    function CanAutoSize(var NewWidth:Integer; var NewHeight:Integer):Boolean;//0048E818
    procedure WMNCCalcSize(var Message:TWMNCCalcSize);//0048EA90
    procedure WMNCPaint(var Message:TWMNCPaint);//0048EB24
    procedure WMContextMenu(var Message:TWMContextMenu);//0048EE7C
    procedure WMPrintClient(var Message:TWMPrintClient);//0048EF80
    procedure WMGesture(var Message:TMessage);//0048F05C
    procedure WMGestureNotify(var Message:TWMGestureNotify);//0048F44C
    procedure WMTabletQuerySystemGestureStatus(var Message:TMessage);//0048F828
    procedure SetParentBackground(Value:Boolean);//0048F8D8
    procedure CMTextChanged(var Message:TMessage);//0048F914
    function DockReplaceDockClient(Client:TControl; NewDockSite:TWinControl; DropControl:TControl; ControlSide:TAlign; ReplacementClient:TControl):Boolean;//0048F960
    procedure IsQualifyingSite(const Client:TControl);//0048F9A0
    procedure UpdateControlOriginalParentSize(AControl:TControl; var AOriginalParentSize:TPoint);//0048FA28
    procedure SetParent(AParent:TWinControl);//0048FAA4
    procedure WMPaint(var Message:TWMPaint);//0048FBBC
    procedure sub_0048FC70;//0048FC70
    procedure CreateParams(var Params:TCreateParams);//0048FCDC
    procedure WMNCHitTest(var Message:TWMNCHitTest);//0048FD30
    procedure WMNCPaint(var Message:TWMNCPaint);//0048FD38
    procedure Paint;//0048FD9C
    procedure CMTextChanged(var Message:TMessage);//0048FF30
    procedure NCPaint(DC:HDC);//004902CC
    procedure WMPrint(var Message:TMessage);//00490334
    function ClientToWindow(Handle:HWND; X:Integer; Y:Integer):TPoint;//0049035C
    procedure Initialize;//0049039C
    procedure WMPaint(var Message:TWMPaint);//004906B0
    procedure PaintWindow(DC:HDC);//004906D0
    procedure sub_0049077C;//0049077C
    function NextVisibleZone(StartZone:TDockZone):TDockZone;//00490780
    function IsOrientationSet(Zone:TDockZone):Boolean;//0049079C
    function ParentNotLast:Boolean;//00490BA8
    function GetLastChildZone(Zone:TDockZone):TDockZone;//00490D80
    procedure AdjustDockRect(Control:TControl; var ARect:TRect);//00491020
    procedure DoFindControlZone(StartZone:TDockZone);//00491050
    procedure DoForEach(Zone:TDockZone);//004910D4
    function HitTest(const MousePos:TPoint; var HTFlag:Integer):TControl;//004911A0
    procedure InsertControl(Control:TControl; InsertAt:TAlign; DropCtl:TControl);//004911B0
    function ZoneCaptionHitTest(const Zone:TDockZone; const MousePos:TPoint; var HTFlag:Integer):Boolean;//004915E0
    procedure DoFindZone(Zone:TDockZone);//0049177C
    procedure ReadControlName(var ControlName:UnicodeString);//00491918
    procedure LoadFromStream(Stream:TStream);//004919C8
    procedure DrawCloseButton(Left:Integer; Top:Integer);//00491D04
    procedure DrawGrabberLine(Left:Integer; Top:Integer; Right:Integer; Bottom:Integer);//00491D98
    procedure DrawThemedGrabber(const GripperType:TThemedRebar; const Left:Integer; const Top:Integer; const Right:Integer; const Bottom:Integer);//00491E24
    procedure PaintDockFrame(Canvas:TCanvas; Control:TControl; const ARect:TRect);//00491E80
    procedure PositionDockRect(Client:TControl; DropCtl:TControl; DropAlign:TAlign; var DockRect:TRect);//00492108
    procedure DoPrune(Zone:TDockZone);//00492284
    procedure RemoveControl(Control:TControl);//00492314
    procedure ResetBounds(Force:Boolean);//004925F4
    procedure WriteControlName(const ControlName:UnicodeString);//00492744
    procedure DoSaveZone(Zone:TDockZone; Level:Integer);//004927CC
    procedure SaveToStream(Stream:TStream);//004928E0
    procedure DoSetNewBounds(Zone:TDockZone);//00492AD0
    procedure DoGetNextLimit(Zone:TDockZone);//00492DD8
    function GetDockAlign(Client:TControl; DropCtl:TControl):TAlign;//00492EC0
    procedure HideZone(const Zone:TDockZone);//00492F3C
    procedure ShowZone(const Zone:TDockZone);//00492FBC
    procedure WndProc(var Message:TMessage);//0049317C
    function ReferenceFromOrient(const Orient:TDockOrientation):Integer;//0049347C
    procedure AdjustFrameRect(Control:TControl; var ARect:TRect);//004934A8
    procedure MouseDown(Button:TMouseButton; Shift:TShiftState; X:Integer; Y:Integer; var Handled:Boolean);//004934E8
    procedure CalcSplitterPos;//00493610
    procedure MouseMove(Shift:TShiftState; X:Integer; Y:Integer; var Handled:Boolean);//004936A0
    procedure MouseUp(Button:TMouseButton; Shift:TShiftState; X:Integer; Y:Integer; var Handled:Boolean);//004936EC
    procedure ShowHint(CursorPos:TPoint; var CursorRect:TRect; var HintStr:UnicodeString);//00493758
    procedure InitIMM32;//00493ACC
    function Win32NLSEnableIME(hWnd:HWND; Enable:Boolean):Boolean;//00493E0C
    procedure SetImeMode(hWnd:HWND; Mode:TImeMode);//00493E28
    function Imm32GetContext(hWnd:HWND):HIMC;//00493F00
    function Imm32ReleaseContext(hWnd:HWND; hImc:HIMC):Boolean;//00493F14
    function Imm32SetCompositionWindow(hImc:HIMC; lpCompForm:TCompositionForm):Boolean;//00493F2C
    function Imm32SetCompositionFont(hImc:HIMC; var lpLogfont:LOGFONT):Boolean;//00493F58
    function Imm32IsIME(hKl:HKL):Boolean;//00493F70
    procedure DoneControls;//00493F84
    procedure InitControls;//00494020
    procedure IsTouchPropertyStored(AProperty:TTouchProperty);//0049429C
    procedure AssignTo(Dest:TPersistent);//00494348
    procedure Change;//00494390
    procedure InitDefaults(Margins:TMargins);//004943A4
    function GetControlBound(Index:Integer):Integer;//00494568
    procedure InitDefaults(Margins:TMargins);//004946F8
    procedure CMTextChanged(var Message:TMessage);//0049470C
    procedure CreateParams(var Params:TCreateParams);//00494798
    procedure CreateWnd;//004947B4
    procedure NCPaint(DC:HDC);//0049480C
    procedure Paint;//00494824
    procedure WMNCHitTest(var Message:TWMNCHitTest);//00494930
    procedure WMNCPaint(var Message:TWMNCPaint);//00494938
    procedure WMPrint(var Message:TMessage);//0049499C
    procedure Notification(AComponent:TComponent; Operation:TOperation);//00494BE0
    function LatestHintWindow:TCustomHintWindow;//004951F0
    procedure AssignTo(Dest:TPersistent);//0049583C

implementation

//00475BA8
procedure DWMAPI.DLL;
begin
{*
 00475BA8    push        82A080
 00475BAD    call        @delayLoadHelper
 00475BB2    pop         ecx
 00475BB3    pop         edx
 00475BB4    xchg        eax,dword ptr [esp]
 00475BB7    ret
*}
end;

//00475BB8
procedure $thunk_DwmAttachMilContent;
begin
{*
 00475BB8    push        eax
 00475BB9    push        edx
 00475BBA    push        ecx
 00475BBB    push        82A10C;^$thunk_DwmAttachMilContent
>00475BC0    jmp         DWMAPI.DLL
*}
end;

//00475BC8
function DwmExtendFrameIntoClientArea(hWnd:HWND; const pMarInset:TMargins):HRESULT; stdcall;
begin
{*
 00475BC8    jmp         dword ptr ds:[82A10C]
*}
end;

//00475BD0
procedure $thunk_DwmDefWindowProc;
begin
{*
 00475BD0    push        eax
 00475BD1    push        edx
 00475BD2    push        ecx
 00475BD3    push        82A108;^$thunk_DwmDefWindowProc
>00475BD8    jmp         DWMAPI.DLL
*}
end;

//00475BE0
function DwmIsCompositionEnabled(var pfEnabled:BOOL):HRESULT; stdcall;
begin
{*
 00475BE0    jmp         dword ptr ds:[82A108]
*}
end;

//00475BE8
function DwmCompositionEnabled:Boolean;
begin
{*
 00475BE8    push        ecx
 00475BE9    mov         eax,[0078D080];^gvar_00784C80
 00475BEE    cmp         dword ptr [eax],6
>00475BF1    jl          00475C03
 00475BF3    push        esp
 00475BF4    call        DwmIsCompositionEnabled
 00475BF9    test        eax,eax
>00475BFB    jne         00475C03
 00475BFD    cmp         dword ptr [esp],0
>00475C01    jne         00475C07
 00475C03    xor         eax,eax
 00475C05    pop         edx
 00475C06    ret
 00475C07    mov         al,1
 00475C09    pop         edx
 00475C0A    ret
*}
end;

//00478990
procedure TCustomGestureManager.AddRecordedGesture(Item:TCustomGestureCollectionItem);
begin
{*
>00478990    jmp         @AbstractError
*}
end;

//00478998
procedure TCustomGestureManager.FindCustomGesture(AGestureID:TGestureID);
begin
{*
>00478998    jmp         @AbstractError
*}
end;

//004789A0
procedure TCustomGestureManager.FindCustomGesture(AName:string);
begin
{*
>004789A0    jmp         @AbstractError
*}
end;

//004789A8
procedure TCustomGestureManager.FindGesture(AControl:TControl; AGestureID:TGestureID);
begin
{*
>004789A8    jmp         @AbstractError
*}
end;

//004789B0
procedure TCustomGestureManager.FindGesture(AControl:TControl; AName:string);
begin
{*
>004789B0    jmp         @AbstractError
*}
end;

//004789B8
procedure TCustomGestureManager.RegisterControl(AControl:TControl);
begin
{*
>004789B8    jmp         @AbstractError
*}
end;

//004789C0
procedure TCustomGestureManager.RemoveRecordedGesture(AGestureID:TGestureID);
begin
{*
>004789C0    jmp         @AbstractError
*}
end;

//004789C8
procedure TCustomGestureManager.RemoveRecordedGesture(AGesture:TCustomGestureCollectionItem);
begin
{*
>004789C8    jmp         @AbstractError
*}
end;

//004789D0
procedure TCustomGestureManager.SelectGesture(AControl:TControl; AGestureID:TGestureID);
begin
{*
>004789D0    jmp         @AbstractError
*}
end;

//004789D8
procedure TCustomGestureManager.SelectGesture(AControl:TControl; AName:string);
begin
{*
>004789D8    jmp         @AbstractError
*}
end;

//004789E0
procedure TCustomGestureManager.UnregisterControl(AControl:TControl);
begin
{*
>004789E0    jmp         @AbstractError
*}
end;

//004789E8
procedure TCustomGestureManager.UnselectGesture(AControl:TControl; AGestureID:TGestureID);
begin
{*
>004789E8    jmp         @AbstractError
*}
end;

//00478C50
procedure TCustomGestureEngine.Create(AControl:TWinControl);
begin
{*
>00478C50    jmp         @AbstractError
*}
end;

//00478C58
procedure TCustomGestureEngine.Notification(Message:TMessage);
begin
{*
>00478C58    jmp         @AbstractError
*}
end;

//0047F5A4
procedure TCustomPanningWindow.GetIsPanning;
begin
{*
>0047F5A4    jmp         @AbstractError
*}
end;

//0047F5AC
procedure TCustomPanningWindow.StartPanning(AHandle:Cardinal; AControl:TControl);
begin
{*
>0047F5AC    jmp         @AbstractError
*}
end;

//0047F5B4
procedure TCustomPanningWindow.StopPanning;
begin
{*
>0047F5B4    jmp         @AbstractError
*}
end;

//0047FEA0
procedure TCustomListControl.AddItem(Item:string; AObject:TObject);
begin
{*
>0047FEA0    jmp         @AbstractError
*}
end;

//0047FEA8
procedure TCustomListControl.Clear;
begin
{*
>0047FEA8    jmp         @AbstractError
*}
end;

//0047FEB0
procedure TCustomListControl.ClearSelection;
begin
{*
>0047FEB0    jmp         @AbstractError
*}
end;

//0047FEB8
procedure TCustomListControl.CopySelection(Destination:TCustomListControl);
begin
{*
>0047FEB8    jmp         @AbstractError
*}
end;

//0047FEC0
procedure TCustomListControl.DeleteSelected;
begin
{*
>0047FEC0    jmp         @AbstractError
*}
end;

//0047FEC8
procedure TCustomListControl.GetCount;
begin
{*
>0047FEC8    jmp         @AbstractError
*}
end;

//0047FED0
procedure TCustomListControl.SelectAll;
begin
{*
>0047FED0    jmp         @AbstractError
*}
end;

//00480DE4
function MouseOriginToShiftState:TShiftState;
begin
{*
 00480DE4    call        user32.GetMessageExtraInfo
 00480DE9    and         eax,0FFFFFF80
 00480DEC    cmp         eax,0FF515700
>00480DF1    jne         00480DFB
 00480DF3    movzx       eax,word ptr ds:[480E14]
 00480DFA    ret
 00480DFB    cmp         eax,0FF515780
>00480E00    jne         00480E0B
 00480E02    movzx       eax,word ptr ds:[480E18]
>00480E09    jmp         00480E12
 00480E0B    movzx       eax,word ptr ds:[480E1C]
 00480E12    ret
*}
end;

//00480E20
procedure ChangeBiDiModeAlignment(var Alignment:TAlignment);
begin
{*
 00480E20    movzx       edx,byte ptr [eax]
 00480E23    sub         dl,1
>00480E26    jb          00480E2C
>00480E28    je          00480E30
>00480E2A    jmp         00480E33
 00480E2C    mov         byte ptr [eax],1
 00480E2F    ret
 00480E30    mov         byte ptr [eax],0
 00480E33    ret
*}
end;

//00480E34
function InitWndProc(HWindow:HWND; Msg:UINT; WParam:WPARAM; LParam:LPARAM):LRESULT; stdcall;
begin
{*
 00480E34    push        ebp
 00480E35    mov         ebp,esp
 00480E37    push        ecx
 00480E38    push        ebx
 00480E39    lea         ebx,[ebp-4]
 00480E3C    mov         eax,[007859A0]
 00480E41    mov         edx,dword ptr [ebp+8]
 00480E44    mov         dword ptr [eax+258],edx
 00480E4A    mov         eax,dword ptr [ebp+8]
 00480E4D    push        eax
 00480E4E    call        user32.IsWindowUnicode
 00480E53    test        eax,eax
>00480E55    je          00480EA0
 00480E57    mov         eax,[007859A0]
 00480E5C    mov         eax,dword ptr [eax+25C]
 00480E62    push        eax
 00480E63    push        0FC
 00480E65    mov         eax,dword ptr [ebp+8]
 00480E68    push        eax
 00480E69    call        user32.SetWindowLongW
 00480E6E    push        0F0
 00480E70    mov         eax,dword ptr [ebp+8]
 00480E73    push        eax
 00480E74    call        user32.GetWindowLongW
 00480E79    test        eax,40000000
>00480E7E    je          00480EE7
 00480E80    push        0F4
 00480E82    mov         eax,dword ptr [ebp+8]
 00480E85    push        eax
 00480E86    call        user32.GetWindowLongW
 00480E8B    test        eax,eax
>00480E8D    jne         00480EE7
 00480E8F    mov         eax,dword ptr [ebp+8]
 00480E92    push        eax
 00480E93    push        0F4
 00480E95    mov         eax,dword ptr [ebp+8]
 00480E98    push        eax
 00480E99    call        user32.SetWindowLongW
>00480E9E    jmp         00480EE7
 00480EA0    mov         eax,[007859A0]
 00480EA5    mov         eax,dword ptr [eax+25C]
 00480EAB    push        eax
 00480EAC    push        0FC
 00480EAE    mov         eax,dword ptr [ebp+8]
 00480EB1    push        eax
 00480EB2    call        user32.SetWindowLongW
 00480EB7    push        0F0
 00480EB9    mov         eax,dword ptr [ebp+8]
 00480EBC    push        eax
 00480EBD    call        user32.GetWindowLongW
 00480EC2    test        eax,40000000
>00480EC7    je          00480EE7
 00480EC9    push        0F4
 00480ECB    mov         eax,dword ptr [ebp+8]
 00480ECE    push        eax
 00480ECF    call        user32.GetWindowLongW
 00480ED4    test        eax,eax
>00480ED6    jne         00480EE7
 00480ED8    mov         eax,dword ptr [ebp+8]
 00480EDB    push        eax
 00480EDC    push        0F4
 00480EDE    mov         eax,dword ptr [ebp+8]
 00480EE1    push        eax
 00480EE2    call        user32.SetWindowLongW
 00480EE7    mov         eax,[007859A0]
 00480EEC    push        eax
 00480EED    movzx       eax,word ptr ds:[7931A2]
 00480EF4    push        eax
 00480EF5    mov         eax,dword ptr [ebp+8]
 00480EF8    push        eax
 00480EF9    call        user32.SetPropW
 00480EFE    mov         eax,[007859A0]
 00480F03    push        eax
 00480F04    movzx       eax,word ptr ds:[7931A0]
 00480F0B    push        eax
 00480F0C    mov         eax,dword ptr [ebp+8]
 00480F0F    push        eax
 00480F10    call        user32.SetPropW
 00480F15    push        dword ptr [ebp+14]
 00480F18    push        dword ptr [ebp+10]
 00480F1B    push        dword ptr [ebp+0C]
 00480F1E    push        dword ptr [ebp+8]
 00480F21    mov         eax,[007859A0]
 00480F26    mov         dword ptr ds:[7859A0],0
 00480F30    call        dword ptr [eax+25C]
 00480F36    mov         dword ptr [ebp-4],eax
 00480F39    mov         eax,dword ptr [ebx]
 00480F3B    pop         ebx
 00480F3C    pop         ecx
 00480F3D    pop         ebp
 00480F3E    ret         10
*}
end;

//00480F44
function ObjectFromHWnd(Handle:HWND):TWinControl;
begin
{*
 00480F44    push        ebx
 00480F45    push        ecx
 00480F46    mov         ebx,eax
 00480F48    push        esp
 00480F49    push        ebx
 00480F4A    call        user32.GetWindowThreadProcessId
 00480F4F    test        eax,eax
>00480F51    je          00480F70
 00480F53    call        kernel32.GetCurrentProcessId
 00480F58    cmp         eax,dword ptr [esp]
>00480F5B    jne         00480F70
 00480F5D    push        0
 00480F5F    push        0
 00480F61    mov         eax,[007931AC]
 00480F66    push        eax
 00480F67    push        ebx
 00480F68    call        user32.SendMessageW
 00480F6D    pop         edx
 00480F6E    pop         ebx
 00480F6F    ret
 00480F70    xor         eax,eax
 00480F72    pop         edx
 00480F73    pop         ebx
 00480F74    ret
*}
end;

//00480F78
function FindControl(Handle:HWND):TWinControl;
begin
{*
 00480F78    push        ebx
 00480F79    push        esi
 00480F7A    push        ecx
 00480F7B    mov         ebx,eax
 00480F7D    xor         esi,esi
 00480F7F    test        ebx,ebx
>00480F81    je          00480FCC
 00480F83    push        esp
 00480F84    push        ebx
 00480F85    call        user32.GetWindowThreadProcessId
 00480F8A    test        eax,eax
>00480F8C    je          00480FCC
 00480F8E    call        kernel32.GetCurrentProcessId
 00480F93    cmp         eax,dword ptr [esp]
>00480F96    jne         00480FCC
 00480F98    mov         eax,[007931A8]
 00480F9D    call        @UStrToPWChar
 00480FA2    push        eax
 00480FA3    call        kernel32.GlobalFindAtomW
 00480FA8    cmp         ax,word ptr ds:[7931A2]
>00480FAF    jne         00480FC3
 00480FB1    movzx       eax,word ptr ds:[7931A2]
 00480FB8    push        eax
 00480FB9    push        ebx
 00480FBA    call        user32.GetPropW
 00480FBF    mov         esi,eax
>00480FC1    jmp         00480FCC
 00480FC3    mov         eax,ebx
 00480FC5    call        ObjectFromHWnd
 00480FCA    mov         esi,eax
 00480FCC    mov         eax,esi
 00480FCE    pop         edx
 00480FCF    pop         esi
 00480FD0    pop         ebx
 00480FD1    ret
*}
end;

//00480FD4
function IsVCLControl(Handle:HWND):Boolean;
begin
{*
 00480FD4    push        ebx
 00480FD5    mov         ebx,eax
 00480FD7    mov         eax,ebx
 00480FD9    call        FindControl
 00480FDE    test        eax,eax
 00480FE0    setne       al
 00480FE3    test        al,al
>00480FE5    jne         00480FFF
 00480FE7    cmp         word ptr ds:[793192],0
>00480FEF    je          00480FFF
 00480FF1    mov         edx,ebx
 00480FF3    mov         eax,dword ptr ds:[793194]
 00480FF9    call        dword ptr ds:[793190]
 00480FFF    pop         ebx
 00481000    ret
*}
end;

//00481004
function SendAppMessage(Msg:Cardinal; WParam:LongInt; LParam:LongInt):LongInt;
begin
{*
 00481004    push        ebx
 00481005    push        esi
 00481006    mov         ebx,dword ptr ds:[78D590];^Application:TApplication
 0048100C    mov         ebx,dword ptr [ebx]
 0048100E    mov         esi,dword ptr [ebx+170]
 00481014    test        esi,esi
>00481016    je          00481029
 00481018    push        ecx
 00481019    push        edx
 0048101A    push        eax
 0048101B    mov         eax,[0078D590];^Application:TApplication
 00481020    push        esi
 00481021    call        user32.SendMessageW
 00481026    pop         esi
 00481027    pop         ebx
 00481028    ret
 00481029    xor         eax,eax
 0048102B    pop         esi
 0048102C    pop         ebx
 0048102D    ret
*}
end;

//004812E8
function CursorToIdent(Cursor:LongInt; var Ident:UnicodeString):Boolean;
begin
{*
 004812E8    push        15
 004812EA    mov         ecx,7859AC
 004812EF    call        IntToIdent
 004812F4    ret
*}
end;

//004812F8
function IdentToCursor(const Ident:UnicodeString; var Cursor:LongInt):Boolean;
begin
{*
 004812F8    push        15
 004812FA    mov         ecx,7859AC
 004812FF    call        IdentToInt
 00481304    ret
*}
end;

//00481308
function GetShortHint(const Hint:UnicodeString):UnicodeString;
begin
{*
 00481308    push        ebx
 00481309    push        esi
 0048130A    push        edi
 0048130B    mov         edi,edx
 0048130D    mov         esi,eax
 0048130F    mov         edx,esi
 00481311    mov         eax,48134C;'|'
 00481316    call        AnsiPos
 0048131B    mov         ebx,eax
 0048131D    test        ebx,ebx
>0048131F    jne         0048132C
 00481321    mov         eax,edi
 00481323    mov         edx,esi
 00481325    call        @UStrAsg
>0048132A    jmp         0048133C
 0048132C    push        edi
 0048132D    mov         ecx,ebx
 0048132F    dec         ecx
 00481330    mov         edx,1
 00481335    mov         eax,esi
 00481337    call        @UStrCopy
 0048133C    pop         edi
 0048133D    pop         esi
 0048133E    pop         ebx
 0048133F    ret
*}
end;

//00481350
function GetLongHint(const Hint:UnicodeString):UnicodeString;
begin
{*
 00481350    push        ebx
 00481351    push        esi
 00481352    push        edi
 00481353    mov         edi,edx
 00481355    mov         esi,eax
 00481357    mov         edx,esi
 00481359    mov         eax,481394;'|'
 0048135E    call        AnsiPos
 00481363    mov         ebx,eax
 00481365    test        ebx,ebx
>00481367    jne         00481374
 00481369    mov         eax,edi
 0048136B    mov         edx,esi
 0048136D    call        @UStrAsg
>00481372    jmp         00481384
 00481374    push        edi
 00481375    lea         edx,[ebx+1]
 00481378    mov         ecx,7FFFFFFF
 0048137D    mov         eax,esi
 0048137F    call        @UStrCopy
 00481384    pop         edi
 00481385    pop         esi
 00481386    pop         ebx
 00481387    ret
*}
end;

//00481398
procedure PerformEraseBackground(Control:TControl; DC:HDC);
begin
{*
 00481398    push        ebx
 00481399    push        esi
 0048139A    add         esp,0FFFFFFF8
 0048139D    mov         ebx,edx
 0048139F    mov         esi,eax
 004813A1    push        esp
 004813A2    push        ebx
 004813A3    call        gdi32.GetWindowOrgEx
 004813A8    push        0
 004813AA    mov         eax,dword ptr [esp+8]
 004813AE    add         eax,dword ptr [esi+44]
 004813B1    push        eax
 004813B2    mov         eax,dword ptr [esp+8]
 004813B6    add         eax,dword ptr [esi+40]
 004813B9    push        eax
 004813BA    push        ebx
 004813BB    call        gdi32.SetWindowOrgEx
 004813C0    push        ebx
 004813C1    mov         ecx,ebx
 004813C3    mov         edx,14
 004813C8    mov         eax,dword ptr [esi+34]
 004813CB    call        TControl.Perform
 004813D0    push        0
 004813D2    mov         eax,dword ptr [esp+8]
 004813D6    push        eax
 004813D7    mov         eax,dword ptr [esp+8]
 004813DB    push        eax
 004813DC    push        ebx
 004813DD    call        gdi32.SetWindowOrgEx
 004813E2    pop         ecx
 004813E3    pop         edx
 004813E4    pop         esi
 004813E5    pop         ebx
 004813E6    ret
*}
end;

//004813E8
procedure PerformBufferedPrintClient(Handle:HWND; const Rect:TRect);
begin
{*
 004813E8    push        ebp
 004813E9    mov         ebp,esp
 004813EB    add         esp,0FFFFFFF0
 004813EE    push        ebx
 004813EF    mov         ebx,edx
 004813F1    mov         dword ptr [ebp-4],eax
 004813F4    mov         eax,dword ptr [ebp-4]
 004813F7    push        eax
 004813F8    call        user32.GetDC
 004813FD    mov         dword ptr [ebp-8],eax
 00481400    xor         eax,eax
 00481402    push        ebp
 00481403    push        48148F
 00481408    push        dword ptr fs:[eax]
 0048140B    mov         dword ptr fs:[eax],esp
 0048140E    lea         eax,[ebp-0C]
 00481411    push        eax
 00481412    push        0
 00481414    push        2
 00481416    push        ebx
 00481417    mov         eax,dword ptr [ebp-8]
 0048141A    push        eax
 0048141B    call        BeginBufferedPaint
 00481420    mov         dword ptr [ebp-10],eax
 00481423    xor         eax,eax
 00481425    push        ebp
 00481426    push        48146D
 0048142B    push        dword ptr fs:[eax]
 0048142E    mov         dword ptr fs:[eax],esp
 00481431    push        4
 00481433    mov         eax,dword ptr [ebp-0C]
 00481436    push        eax
 00481437    push        318
 0048143C    mov         eax,dword ptr [ebp-4]
 0048143F    push        eax
 00481440    call        user32.SendMessageW
 00481445    push        0FF
 0048144A    push        ebx
 0048144B    mov         eax,dword ptr [ebp-10]
 0048144E    push        eax
 0048144F    call        BufferedPaintSetAlpha
 00481454    xor         eax,eax
 00481456    pop         edx
 00481457    pop         ecx
 00481458    pop         ecx
 00481459    mov         dword ptr fs:[eax],edx
 0048145C    push        481474
 00481461    push        0FF
 00481463    mov         eax,dword ptr [ebp-10]
 00481466    push        eax
 00481467    call        EndBufferedPaint
 0048146C    ret
>0048146D    jmp         @HandleFinally
>00481472    jmp         00481461
 00481474    xor         eax,eax
 00481476    pop         edx
 00481477    pop         ecx
 00481478    pop         ecx
 00481479    mov         dword ptr fs:[eax],edx
 0048147C    push        481496
 00481481    mov         eax,dword ptr [ebp-8]
 00481484    push        eax
 00481485    mov         eax,dword ptr [ebp-4]
 00481488    push        eax
 00481489    call        user32.ReleaseDC
 0048148E    ret
>0048148F    jmp         @HandleFinally
>00481494    jmp         00481481
 00481496    pop         ebx
 00481497    mov         esp,ebp
 00481499    pop         ebp
 0048149A    ret
*}
end;

//0048149C
function GetCaptureControl:TControl;
begin
{*
 0048149C    call        user32.GetCapture
 004814A1    call        FindControl
 004814A6    test        eax,eax
>004814A8    je          004814C3
 004814AA    cmp         dword ptr ds:[785A5C],0
>004814B1    je          004814C3
 004814B3    mov         edx,dword ptr ds:[785A5C]
 004814B9    cmp         eax,dword ptr [edx+34]
>004814BC    jne         004814C3
 004814BE    mov         eax,[00785A5C]
 004814C3    ret
*}
end;

//004814C4
procedure SetCaptureControl(Control:TControl);
begin
{*
 004814C4    push        ebx
 004814C5    mov         ebx,eax
 004814C7    call        user32.ReleaseCapture
 004814CC    xor         eax,eax
 004814CE    mov         [00785A5C],eax
 004814D3    test        ebx,ebx
>004814D5    je          00481504
 004814D7    mov         eax,ebx
 004814D9    mov         edx,dword ptr ds:[47C4E8];TWinControl
 004814DF    call        @IsClass
 004814E4    test        al,al
>004814E6    jne         004814F7
 004814E8    cmp         dword ptr [ebx+34],0
>004814EC    je          00481504
 004814EE    mov         dword ptr ds:[785A5C],ebx
 004814F4    mov         ebx,dword ptr [ebx+34]
 004814F7    mov         eax,ebx
 004814F9    call        TWinControl.GetHandle
 004814FE    push        eax
 004814FF    call        user32.SetCapture
 00481504    pop         ebx
 00481505    ret
*}
end;

//00481694
function TSiteList.Find(ParentWnd:HWND; var Index:Integer):Boolean;
begin
{*
 00481694    push        ebx
 00481695    push        esi
 00481696    push        edi
 00481697    push        ebp
 00481698    mov         edi,ecx
 0048169A    mov         ebp,edx
 0048169C    mov         esi,eax
 0048169E    xor         eax,eax
 004816A0    mov         dword ptr [edi],eax
 004816A2    xor         ebx,ebx
>004816A4    jmp         004816BB
 004816A6    mov         edx,dword ptr [edi]
 004816A8    mov         eax,esi
 004816AA    call        TList.Get
 004816AF    cmp         ebp,dword ptr [eax+4]
 004816B2    sete        bl
 004816B5    test        bl,bl
>004816B7    jne         004816C2
 004816B9    inc         dword ptr [edi]
 004816BB    mov         eax,dword ptr [edi]
 004816BD    cmp         eax,dword ptr [esi+8]
>004816C0    jl          004816A6
 004816C2    mov         eax,ebx
 004816C4    pop         ebp
 004816C5    pop         edi
 004816C6    pop         esi
 004816C7    pop         ebx
 004816C8    ret
*}
end;

//004816CC
function GetTopParent:HWND;
begin
{*
 004816CC    push        ebp
 004816CD    mov         ebp,esp
 004816CF    push        ebx
 004816D0    push        esi
 004816D1    mov         eax,dword ptr [ebp+8]
 004816D4    mov         eax,dword ptr [eax-4]
 004816D7    call        TWinControl.GetHandle
 004816DC    mov         ebx,eax
 004816DE    mov         esi,ebx
 004816E0    test        ebx,ebx
>004816E2    je          004816F2
 004816E4    mov         esi,ebx
 004816E6    push        ebx
 004816E7    call        user32.GetParent
 004816EC    mov         ebx,eax
 004816EE    test        ebx,ebx
>004816F0    jne         004816E4
 004816F2    mov         eax,esi
 004816F4    pop         esi
 004816F5    pop         ebx
 004816F6    pop         ebp
 004816F7    ret
*}
end;

//004816F8
procedure TSiteList.AddSite(ASite:TWinControl);
begin
{*
 004816F8    push        ebp
 004816F9    mov         ebp,esp
 004816FB    add         esp,0FFFFFFF8
 004816FE    push        ebx
 004816FF    push        esi
 00481700    push        edi
 00481701    mov         dword ptr [ebp-4],edx
 00481704    mov         esi,eax
 00481706    mov         eax,8
 0048170B    call        @GetMem
 00481710    mov         ebx,eax
 00481712    mov         eax,dword ptr [ebp-4]
 00481715    mov         dword ptr [ebx],eax
 00481717    push        ebp
 00481718    call        GetTopParent
 0048171D    pop         ecx
 0048171E    mov         edi,eax
 00481720    mov         dword ptr [ebx+4],edi
 00481723    lea         ecx,[ebp-8]
 00481726    mov         edx,edi
 00481728    mov         eax,esi
 0048172A    call        TSiteList.Find
 0048172F    test        al,al
>00481731    je          00481769
 00481733    mov         edx,dword ptr [ebp-8]
 00481736    mov         eax,esi
 00481738    call        TList.Get
 0048173D    mov         edi,eax
 0048173F    mov         eax,dword ptr [edi]
 00481741    call        TWinControl.GetHandle
 00481746    push        eax
 00481747    mov         eax,dword ptr [ebx]
 00481749    call        TWinControl.GetHandle
 0048174E    push        eax
 0048174F    call        user32.IsChild
 00481754    test        eax,eax
>00481756    je          0048175B
 00481758    inc         dword ptr [ebp-8]
 0048175B    mov         ecx,ebx
 0048175D    mov         edx,dword ptr [ebp-8]
 00481760    mov         eax,esi
 00481762    call        TList.Insert
>00481767    jmp         00481772
 00481769    mov         edx,ebx
 0048176B    mov         eax,esi
 0048176D    call        TList.Add
 00481772    pop         edi
 00481773    pop         esi
 00481774    pop         ebx
 00481775    pop         ecx
 00481776    pop         ecx
 00481777    pop         ebp
 00481778    ret
*}
end;

//0048177C
procedure TSiteList.Clear;
begin
{*
 0048177C    push        ebx
 0048177D    push        esi
 0048177E    push        edi
 0048177F    mov         edi,eax
 00481781    mov         ebx,dword ptr [edi+8]
 00481784    dec         ebx
 00481785    test        ebx,ebx
>00481787    jl          004817A3
 00481789    inc         ebx
 0048178A    xor         esi,esi
 0048178C    mov         edx,esi
 0048178E    mov         eax,edi
 00481790    call        TList.Get
 00481795    mov         edx,8
 0048179A    call        @FreeMem
 0048179F    inc         esi
 004817A0    dec         ebx
>004817A1    jne         0048178C
 004817A3    mov         eax,edi
 004817A5    call        TList.Clear
 004817AA    pop         edi
 004817AB    pop         esi
 004817AC    pop         ebx
 004817AD    ret
*}
end;

//004817B0
function TSiteList.GetTopSite:TWinControl;
begin
{*
 004817B0    push        ebx
 004817B1    push        esi
 004817B2    push        edi
 004817B3    push        ecx
 004817B4    mov         ebx,eax
 004817B6    xor         edi,edi
 004817B8    mov         eax,dword ptr [ebx+8]
 004817BB    test        eax,eax
>004817BD    je          0048180C
 004817BF    dec         eax
>004817C0    jne         004817CF
 004817C2    xor         edx,edx
 004817C4    mov         eax,ebx
 004817C6    call        TList.Get
 004817CB    mov         edi,dword ptr [eax]
>004817CD    jmp         0048180C
 004817CF    call        user32.GetDesktopWindow
 004817D4    push        eax
 004817D5    call        user32.GetTopWindow
 004817DA    mov         esi,eax
>004817DC    jmp         00481804
 004817DE    mov         ecx,esp
 004817E0    mov         edx,esi
 004817E2    mov         eax,ebx
 004817E4    call        TSiteList.Find
 004817E9    test        al,al
>004817EB    je          004817FA
 004817ED    mov         eax,dword ptr [ebx+4]
 004817F0    mov         edx,dword ptr [esp]
 004817F3    mov         eax,dword ptr [eax+edx*4]
 004817F6    mov         edi,dword ptr [eax]
>004817F8    jmp         00481804
 004817FA    push        2
 004817FC    push        esi
 004817FD    call        user32.GetWindow
 00481802    mov         esi,eax
 00481804    test        edi,edi
>00481806    jne         0048180C
 00481808    test        esi,esi
>0048180A    jne         004817DE
 0048180C    mov         eax,edi
 0048180E    pop         edx
 0048180F    pop         edi
 00481810    pop         esi
 00481811    pop         ebx
 00481812    ret
*}
end;

//00481814
procedure TDragObject.Assign(Source:TDragObject);
begin
{*
 00481814    mov         ecx,dword ptr [edx+14]
 00481817    mov         dword ptr [eax+14],ecx
 0048181A    mov         ecx,dword ptr [edx+8]
 0048181D    mov         dword ptr [eax+8],ecx
 00481820    mov         ecx,dword ptr [edx+0C]
 00481823    mov         dword ptr [eax+0C],ecx
 00481826    mov         ecx,dword ptr [edx+10]
 00481829    mov         dword ptr [eax+10],ecx
 0048182C    mov         ecx,dword ptr [edx+18]
 0048182F    mov         dword ptr [eax+18],ecx
 00481832    mov         ecx,dword ptr [edx+1C]
 00481835    mov         dword ptr [eax+1C],ecx
 00481838    mov         ecx,dword ptr [edx+28]
 0048183B    mov         dword ptr [eax+28],ecx
 0048183E    mov         ecx,dword ptr [edx+2C]
 00481841    mov         dword ptr [eax+2C],ecx
 00481844    mov         ecx,dword ptr [edx+30]
 00481847    mov         dword ptr [eax+30],ecx
 0048184A    mov         ecx,dword ptr [edx+34]
 0048184D    mov         dword ptr [eax+34],ecx
 00481850    ret
*}
end;

//00481854
function TDragObject.Capture:HWND;
begin
{*
 00481854    push        ebx
 00481855    push        eax
 00481856    push        4819F8;TDragObject.MainWndProc
 0048185B    call        AllocateHWnd
 00481860    mov         ebx,eax
 00481862    push        ebx
 00481863    call        user32.SetCapture
 00481868    mov         eax,ebx
 0048186A    pop         ebx
 0048186B    ret
*}
end;

//0048186C
procedure sub_0048186C;
begin
{*
 0048186C    push        ebp
 0048186D    mov         ebp,esp
 0048186F    pop         ebp
 00481870    ret         8
*}
end;

//00481874
function TDragObject.GetName:string;
begin
{*
 00481874    push        ebx
 00481875    push        esi
 00481876    mov         esi,edx
 00481878    mov         ebx,eax
 0048187A    mov         edx,esi
 0048187C    mov         eax,dword ptr [ebx]
 0048187E    call        TObject.ClassName
 00481883    pop         esi
 00481884    pop         ebx
 00481885    ret
*}
end;

//00481888
procedure TDragObject.ReleaseCapture(Handle:HWND);
begin
{*
 00481888    push        ebx
 00481889    mov         ebx,edx
 0048188B    call        user32.ReleaseCapture
 00481890    mov         eax,ebx
 00481892    call        DeallocateHWnd
 00481897    pop         ebx
 00481898    ret
*}
end;

//0048189C
procedure TDragObject.WndProc(var Msg:TMessage);
begin
{*
 0048189C    push        ebp
 0048189D    mov         ebp,esp
 0048189F    add         esp,0FFFFFFE8
 004818A2    push        ebx
 004818A3    push        esi
 004818A4    push        edi
 004818A5    mov         dword ptr [ebp-4],eax
 004818A8    xor         eax,eax
 004818AA    push        ebp
 004818AB    push        48199B
 004818B0    push        dword ptr fs:[eax]
 004818B3    mov         dword ptr fs:[eax],esp
 004818B6    mov         eax,dword ptr [edx]
 004818B8    cmp         eax,215
>004818BD    jg          004818D7
>004818BF    je          00481923
 004818C1    sub         eax,200
>004818C6    je          004818EA
 004818C8    sub         eax,2
>004818CB    je          0048192C
 004818CD    sub         eax,3
>004818D0    je          00481935
>004818D2    jmp         00481991
 004818D7    sub         eax,0BD00
>004818DC    je          00481965
 004818E2    dec         eax
>004818E3    je          00481950
>004818E5    jmp         00481991
 004818EA    mov         eax,dword ptr [edx+8]
 004818ED    mov         dword ptr [ebp-10],eax
 004818F0    movsx       eax,word ptr [ebp-10]
 004818F4    mov         dword ptr [ebp-18],eax
 004818F7    movsx       eax,word ptr [ebp-0E]
 004818FB    mov         dword ptr [ebp-14],eax
 004818FE    mov         eax,dword ptr [ebp-18]
 00481901    mov         dword ptr [ebp-0C],eax
 00481904    mov         eax,dword ptr [ebp-14]
 00481907    mov         dword ptr [ebp-8],eax
 0048190A    lea         eax,[ebp-0C]
 0048190D    push        eax
 0048190E    mov         eax,[007931BC]
 00481913    push        eax
 00481914    call        user32.ClientToScreen
 00481919    lea         eax,[ebp-0C]
 0048191C    call        DragTo
>00481921    jmp         00481991
 00481923    xor         eax,eax
 00481925    call        DragDone
>0048192A    jmp         00481991
 0048192C    mov         al,1
 0048192E    call        DragDone
>00481933    jmp         00481991
 00481935    mov         eax,dword ptr [ebp-4]
 00481938    cmp         byte ptr [eax+38],0
>0048193C    je          00481947
 0048193E    xor         eax,eax
 00481940    call        DragDone
>00481945    jmp         00481991
 00481947    mov         al,1
 00481949    call        DragDone
>0048194E    jmp         00481991
 00481950    cmp         dword ptr [edx+4],11
>00481954    jne         00481991
 00481956    mov         eax,[007931B4]
 0048195B    add         eax,0C
 0048195E    call        DragTo
>00481963    jmp         00481991
 00481965    mov         eax,dword ptr [edx+4]
 00481968    sub         eax,11
>0048196B    je          00481974
 0048196D    sub         eax,0A
>00481970    je          00481983
>00481972    jmp         00481991
 00481974    mov         eax,[007931B4]
 00481979    add         eax,0C
 0048197C    call        DragTo
>00481981    jmp         00481991
 00481983    mov         dword ptr [edx+0C],1
 0048198A    xor         eax,eax
 0048198C    call        DragDone
 00481991    xor         eax,eax
 00481993    pop         edx
 00481994    pop         ecx
 00481995    pop         ecx
 00481996    mov         dword ptr fs:[eax],edx
>00481999    jmp         004819C4
>0048199B    jmp         @HandleAnyException
 004819A0    cmp         dword ptr ds:[7931B0],0
>004819A7    je          004819B0
 004819A9    xor         eax,eax
 004819AB    call        DragDone
 004819B0    mov         eax,[0078D590];^Application:TApplication
 004819B5    mov         eax,dword ptr [eax]
 004819B7    mov         edx,dword ptr [ebp-4]
 004819BA    call        TApplication.HandleException
 004819BF    call        @DoneExcept
 004819C4    pop         edi
 004819C5    pop         esi
 004819C6    pop         ebx
 004819C7    mov         esp,ebp
 004819C9    pop         ebp
 004819CA    ret
*}
end;

//004819CC
{*function sub_004819CC:?;
begin
 004819CC    xor         eax,eax
 004819CE    ret
end;*}

//004819D0
function TDragObject.GetDragCursor(Accepted:Boolean; X:Integer; Y:Integer):TCursor;
begin
{*
 004819D0    push        ebp
 004819D1    mov         ebp,esp
 004819D3    test        dl,dl
>004819D5    je          004819DD
 004819D7    mov         ax,0FFF4
>004819DB    jmp         004819E1
 004819DD    mov         ax,0FFF3
 004819E1    pop         ebp
 004819E2    ret         4
*}
end;

//004819E8
procedure TDragObject.HideDragImage;
begin
{*
 004819E8    ret
*}
end;

//004819EC
function TDragObject.Instance:Cardinal;
begin
{*
 004819EC    mov         eax,[00790C38];gvar_00790C38
 004819F1    ret
*}
end;

//004819F4
procedure TDragObject.ShowDragImage;
begin
{*
 004819F4    ret
*}
end;

//004819F8
procedure TDragObject.MainWndProc(var Message:TMessage);
begin
{*
 004819F8    push        ebp
 004819F9    mov         ebp,esp
 004819FB    push        ecx
 004819FC    push        ebx
 004819FD    push        esi
 004819FE    push        edi
 004819FF    mov         dword ptr [ebp-4],eax
 00481A02    xor         eax,eax
 00481A04    push        ebp
 00481A05    push        481A22
 00481A0A    push        dword ptr fs:[eax]
 00481A0D    mov         dword ptr fs:[eax],esp
 00481A10    mov         eax,dword ptr [ebp-4]
 00481A13    mov         ecx,dword ptr [eax]
 00481A15    call        dword ptr [ecx+0C]
 00481A18    xor         eax,eax
 00481A1A    pop         edx
 00481A1B    pop         ecx
 00481A1C    pop         ecx
 00481A1D    mov         dword ptr fs:[eax],edx
>00481A20    jmp         00481A3B
>00481A22    jmp         @HandleAnyException
 00481A27    mov         eax,[0078D590];^Application:TApplication
 00481A2C    mov         eax,dword ptr [eax]
 00481A2E    mov         edx,dword ptr [ebp-4]
 00481A31    call        TApplication.HandleException
 00481A36    call        @DoneExcept
 00481A3B    pop         edi
 00481A3C    pop         esi
 00481A3D    pop         ebx
 00481A3E    pop         ecx
 00481A3F    pop         ebp
 00481A40    ret
*}
end;

//00481A44
procedure TDragObject.BeforeDestruction;
begin
{*
 00481A44    call        TObject.BeforeDestruction
 00481A49    xor         eax,eax
 00481A4B    mov         [007931E0],eax
 00481A50    ret
*}
end;

//00481A54
procedure TDragObject.AfterConstruction;
begin
{*
 00481A54    call        TObject.AfterConstruction
 00481A59    xor         eax,eax
 00481A5B    mov         [007931E0],eax
 00481A60    ret
*}
end;

//00481A64
constructor TBaseDragControlObject.Create;
begin
{*
 00481A64    push        ebx
 00481A65    push        esi
 00481A66    push        edi
 00481A67    test        dl,dl
>00481A69    je          00481A73
 00481A6B    add         esp,0FFFFFFF0
 00481A6E    call        @ClassCreate
 00481A73    mov         esi,ecx
 00481A75    mov         ebx,edx
 00481A77    mov         edi,eax
 00481A79    xor         edx,edx
 00481A7B    mov         eax,edi
 00481A7D    call        TObject.Create
 00481A82    mov         dword ptr [edi+40],esi
 00481A85    mov         eax,edi
 00481A87    test        bl,bl
>00481A89    je          00481A9A
 00481A8B    call        @AfterConstruction
 00481A90    pop         dword ptr fs:[0]
 00481A97    add         esp,0C
 00481A9A    mov         eax,edi
 00481A9C    pop         edi
 00481A9D    pop         esi
 00481A9E    pop         ebx
 00481A9F    ret
*}
end;

//00481AA0
procedure TBaseDragControlObject.Assign(Source:TDragObject);
begin
{*
 00481AA0    push        ebx
 00481AA1    push        esi
 00481AA2    mov         esi,edx
 00481AA4    mov         ebx,eax
 00481AA6    mov         edx,esi
 00481AA8    mov         eax,ebx
 00481AAA    call        TDragObject.Assign
 00481AAF    mov         eax,esi
 00481AB1    mov         edx,dword ptr ds:[4764C0];TBaseDragControlObject
 00481AB7    call        @IsClass
 00481ABC    test        al,al
>00481ABE    je          00481AC6
 00481AC0    mov         eax,dword ptr [esi+40]
 00481AC3    mov         dword ptr [ebx+40],eax
 00481AC6    pop         esi
 00481AC7    pop         ebx
 00481AC8    ret
*}
end;

//00481ACC
procedure TBaseDragControlObject.EndDrag(Target:TObject; X:Integer; Y:Integer);
begin
{*
 00481ACC    push        ebp
 00481ACD    mov         ebp,esp
 00481ACF    push        ecx
 00481AD0    push        esi
 00481AD1    push        edi
 00481AD2    mov         dword ptr [ebp-4],ecx
 00481AD5    mov         esi,eax
 00481AD7    mov         edi,dword ptr [esi+40]
 00481ADA    test        edi,edi
>00481ADC    je          00481AF0
 00481ADE    mov         eax,dword ptr [ebp+8]
 00481AE1    push        eax
 00481AE2    mov         ecx,dword ptr [ebp-4]
 00481AE5    mov         eax,edi
 00481AE7    mov         si,0FFDF
 00481AEB    call        @CallDynaInst
 00481AF0    pop         edi
 00481AF1    pop         esi
 00481AF2    pop         ecx
 00481AF3    pop         ebp
 00481AF4    ret         4
*}
end;

//00481AF8
procedure TBaseDragControlObject.Finished(Target:TObject; X:Integer; Y:Integer; Accepted:Boolean);
begin
{*
 00481AF8    push        ebp
 00481AF9    mov         ebp,esp
 00481AFB    push        ebx
 00481AFC    push        esi
 00481AFD    push        edi
 00481AFE    mov         edi,ecx
 00481B00    mov         ebx,eax
 00481B02    cmp         byte ptr [ebp+8],0
>00481B06    jne         00481B16
 00481B08    mov         eax,dword ptr [ebx+40]
 00481B0B    mov         si,0FFE1
 00481B0F    call        @CallDynaInst
 00481B14    xor         edx,edx
 00481B16    mov         eax,dword ptr [ebp+0C]
 00481B19    push        eax
 00481B1A    mov         ecx,edi
 00481B1C    mov         eax,ebx
 00481B1E    mov         ebx,dword ptr [eax]
 00481B20    call        dword ptr [ebx+24]
 00481B23    pop         edi
 00481B24    pop         esi
 00481B25    pop         ebx
 00481B26    pop         ebp
 00481B27    ret         8
*}
end;

//00481B2C
function TDragControlObject.GetDragCursor(Accepted:Boolean; X:Integer; Y:Integer):TCursor;
begin
{*
 00481B2C    push        ebp
 00481B2D    mov         ebp,esp
 00481B2F    test        dl,dl
>00481B31    je          00481B3C
 00481B33    mov         eax,dword ptr [eax+40]
 00481B36    movzx       eax,word ptr [eax+7A]
>00481B3A    jmp         00481B40
 00481B3C    mov         ax,0FFF3
 00481B40    pop         ebp
 00481B41    ret         4
*}
end;

//00481B44
function TDragControlObject.GetDragImages:TDragImageList;
begin
{*
 00481B44    mov         eax,dword ptr [eax+40]
 00481B47    mov         edx,dword ptr [eax]
 00481B49    call        dword ptr [edx+88]
 00481B4F    ret
*}
end;

//00481B50
procedure TDragControlObject.HideDragImage;
begin
{*
 00481B50    push        ebx
 00481B51    mov         ebx,eax
 00481B53    mov         eax,dword ptr [ebx+40]
 00481B56    mov         edx,dword ptr [eax]
 00481B58    call        dword ptr [edx+88]
 00481B5E    test        eax,eax
>00481B60    je          00481B72
 00481B62    mov         eax,dword ptr [ebx+40]
 00481B65    mov         edx,dword ptr [eax]
 00481B67    call        dword ptr [edx+88]
 00481B6D    call        TDragImageList.HideDragImage
 00481B72    pop         ebx
 00481B73    ret
*}
end;

//00481B74
procedure TDragControlObject.ShowDragImage;
begin
{*
 00481B74    push        ebx
 00481B75    mov         ebx,eax
 00481B77    mov         eax,dword ptr [ebx+40]
 00481B7A    mov         edx,dword ptr [eax]
 00481B7C    call        dword ptr [edx+88]
 00481B82    test        eax,eax
>00481B84    je          00481B96
 00481B86    mov         eax,dword ptr [ebx+40]
 00481B89    mov         edx,dword ptr [eax]
 00481B8B    call        dword ptr [edx+88]
 00481B91    call        TDragImageList.ShowDragImage
 00481B96    pop         ebx
 00481B97    ret
*}
end;

//00481B98
procedure TDragControlObjectEx.BeforeDestruction;
begin
{*
 00481B98    ret
*}
end;

//00481B9C
constructor TDragDockObject.Create;
begin
{*
 00481B9C    push        ebp
 00481B9D    mov         ebp,esp
 00481B9F    push        ecx
 00481BA0    push        ebx
 00481BA1    push        esi
 00481BA2    test        dl,dl
>00481BA4    je          00481BAE
 00481BA6    add         esp,0FFFFFFF0
 00481BA9    call        @ClassCreate
 00481BAE    mov         byte ptr [ebp-1],dl
 00481BB1    mov         ebx,eax
 00481BB3    xor         edx,edx
 00481BB5    mov         eax,ebx
 00481BB7    call        TBaseDragControlObject.Create
 00481BBC    mov         byte ptr [ebx+38],1
 00481BC0    mov         dl,1
 00481BC2    mov         eax,[00460070];TBrush
 00481BC7    call        TBrush.Create
 00481BCC    mov         esi,eax
 00481BCE    mov         dword ptr [ebx+48],esi
 00481BD1    mov         edx,0FFFFFF
 00481BD6    xor         eax,eax
 00481BD8    call        AllocPatternBitmap
 00481BDD    mov         edx,eax
 00481BDF    mov         eax,esi
 00481BE1    call        TBrush.SetBitmap
 00481BE6    mov         eax,ebx
 00481BE8    cmp         byte ptr [ebp-1],0
>00481BEC    je          00481BFD
 00481BEE    call        @AfterConstruction
 00481BF3    pop         dword ptr fs:[0]
 00481BFA    add         esp,0C
 00481BFD    mov         eax,ebx
 00481BFF    pop         esi
 00481C00    pop         ebx
 00481C01    pop         ecx
 00481C02    pop         ebp
 00481C03    ret
*}
end;

//00481C04
destructor TDragDockObject.Destroy();
begin
{*
 00481C04    push        ebx
 00481C05    push        esi
 00481C06    call        @BeforeDestruction
 00481C0B    mov         ebx,edx
 00481C0D    mov         esi,eax
 00481C0F    mov         eax,dword ptr [esi+48]
 00481C12    call        TObject.Free
 00481C17    mov         edx,ebx
 00481C19    and         dl,0FC
 00481C1C    mov         eax,esi
 00481C1E    call        TObject.Destroy
 00481C23    test        bl,bl
>00481C25    jle         00481C2E
 00481C27    mov         eax,esi
 00481C29    call        @ClassDestroy
 00481C2E    pop         esi
 00481C2F    pop         ebx
 00481C30    ret
*}
end;

//00481C34
procedure TDragDockObject.Assign(Source:TDragObject);
begin
{*
 00481C34    push        ebx
 00481C35    push        esi
 00481C36    push        edi
 00481C37    mov         esi,edx
 00481C39    mov         ebx,eax
 00481C3B    mov         edx,esi
 00481C3D    mov         eax,ebx
 00481C3F    call        TBaseDragControlObject.Assign
 00481C44    mov         eax,esi
 00481C46    mov         edx,dword ptr ds:[4768A4];TDragDockObject
 00481C4C    call        @IsClass
 00481C51    test        al,al
>00481C53    je          00481C8E
 00481C55    mov         eax,esi
 00481C57    movzx       edx,byte ptr [eax+5C]
 00481C5B    mov         byte ptr [ebx+5C],dl
 00481C5E    mov         edx,dword ptr [eax+60]
 00481C61    mov         dword ptr [ebx+60],edx
 00481C64    movzx       edx,byte ptr [eax+74]
 00481C68    mov         byte ptr [ebx+74],dl
 00481C6B    push        esi
 00481C6C    lea         esi,[eax+4C]
 00481C6F    lea         edi,[ebx+4C]
 00481C72    movs        dword ptr [edi],dword ptr [esi]
 00481C73    movs        dword ptr [edi],dword ptr [esi]
 00481C74    movs        dword ptr [edi],dword ptr [esi]
 00481C75    movs        dword ptr [edi],dword ptr [esi]
 00481C76    pop         esi
 00481C77    push        esi
 00481C78    lea         esi,[eax+64]
 00481C7B    lea         edi,[ebx+64]
 00481C7E    movs        dword ptr [edi],dword ptr [esi]
 00481C7F    movs        dword ptr [edi],dword ptr [esi]
 00481C80    movs        dword ptr [edi],dword ptr [esi]
 00481C81    movs        dword ptr [edi],dword ptr [esi]
 00481C82    pop         esi
 00481C83    mov         edx,dword ptr [eax+48]
 00481C86    mov         eax,dword ptr [ebx+48]
 00481C89    mov         ecx,dword ptr [eax]
 00481C8B    call        dword ptr [ecx+8]
 00481C8E    pop         edi
 00481C8F    pop         esi
 00481C90    pop         ebx
 00481C91    ret
*}
end;

//00481C94
procedure TDragDockObject.SetBrush(Value:TBrush);
begin
{*
 00481C94    mov         eax,dword ptr [eax+48]
 00481C97    mov         ecx,dword ptr [eax]
 00481C99    call        dword ptr [ecx+8]
 00481C9C    ret
*}
end;

//00481CA0
procedure TDragDockObject.EndDrag(Target:TObject; X:Integer; Y:Integer);
begin
{*
 00481CA0    push        ebp
 00481CA1    mov         ebp,esp
 00481CA3    push        esi
 00481CA4    mov         esi,eax
 00481CA6    mov         eax,dword ptr [ebp+8]
 00481CA9    push        eax
 00481CAA    mov         eax,dword ptr [esi+40]
 00481CAD    mov         si,0FFE7
 00481CB1    call        @CallDynaInst
 00481CB6    pop         esi
 00481CB7    pop         ebp
 00481CB8    ret         4
*}
end;

//00481CBC
function AbsMin(Value1:Integer; Value2:Integer):Integer;
begin
{*
 00481CBC    push        ebx
 00481CBD    push        esi
 00481CBE    mov         ebx,edx
 00481CC0    mov         ecx,eax
 00481CC2    mov         eax,ecx
 00481CC4    cdq
 00481CC5    xor         eax,edx
 00481CC7    sub         eax,edx
 00481CC9    mov         esi,eax
 00481CCB    mov         eax,ebx
 00481CCD    cdq
 00481CCE    xor         eax,edx
 00481CD0    sub         eax,edx
 00481CD2    cmp         esi,eax
>00481CD4    jge         00481CDB
 00481CD6    mov         eax,ecx
 00481CD8    pop         esi
 00481CD9    pop         ebx
 00481CDA    ret
 00481CDB    mov         eax,ebx
 00481CDD    pop         esi
 00481CDE    pop         ebx
 00481CDF    ret
*}
end;

//00481CE0
procedure TDragDockObject.AdjustDockRect(ARect:TRect);
begin
{*
 00481CE0    push        ebx
 00481CE1    push        esi
 00481CE2    push        edi
 00481CE3    add         esp,0FFFFFFF0
 00481CE6    mov         esi,edx
 00481CE8    lea         edi,[esp]
 00481CEB    movs        dword ptr [edi],dword ptr [esi]
 00481CEC    movs        dword ptr [edi],dword ptr [esi]
 00481CED    movs        dword ptr [edi],dword ptr [esi]
 00481CEE    movs        dword ptr [edi],dword ptr [esi]
 00481CEF    mov         ebx,eax
 00481CF1    mov         eax,dword ptr [ebx+0C]
 00481CF4    mov         edx,dword ptr [esp]
 00481CF7    cmp         eax,edx
>00481CF9    jl          00481D01
 00481CFB    cmp         eax,dword ptr [esp+8]
>00481CFF    jle         00481D15
 00481D01    sub         edx,eax
 00481D03    mov         ecx,dword ptr [esp+8]
 00481D07    sub         ecx,eax
 00481D09    mov         eax,ecx
 00481D0B    xchg        eax,edx
 00481D0C    call        AbsMin
 00481D11    mov         esi,eax
>00481D13    jmp         00481D17
 00481D15    xor         esi,esi
 00481D17    mov         eax,dword ptr [ebx+10]
 00481D1A    mov         edx,dword ptr [esp+4]
 00481D1E    cmp         eax,edx
>00481D20    jl          00481D28
 00481D22    cmp         eax,dword ptr [esp+0C]
>00481D26    jle         00481D3A
 00481D28    sub         edx,eax
 00481D2A    mov         ecx,dword ptr [esp+0C]
 00481D2E    sub         ecx,eax
 00481D30    mov         eax,ecx
 00481D32    xchg        eax,edx
 00481D33    call        AbsMin
>00481D38    jmp         00481D3C
 00481D3A    xor         eax,eax
 00481D3C    test        esi,esi
>00481D3E    jne         00481D44
 00481D40    test        eax,eax
>00481D42    je          00481D54
 00481D44    mov         ecx,eax
 00481D46    neg         ecx
 00481D48    mov         edx,esi
 00481D4A    neg         edx
 00481D4C    lea         eax,[ebx+4C]
 00481D4F    call        OffsetRect
 00481D54    add         esp,10
 00481D57    pop         edi
 00481D58    pop         esi
 00481D59    pop         ebx
 00481D5A    ret
*}
end;

//00481D5C
procedure TDragDockObject.DrawDragDockImage;
begin
{*
 00481D5C    push        esi
 00481D5D    mov         edx,eax
 00481D5F    mov         eax,dword ptr [eax+40]
 00481D62    mov         si,0FFDD
 00481D66    call        @CallDynaInst
 00481D6B    pop         esi
 00481D6C    ret
*}
end;

//00481D70
procedure TDragDockObject.EraseDragDockImage;
begin
{*
 00481D70    push        esi
 00481D71    mov         edx,eax
 00481D73    mov         eax,dword ptr [eax+40]
 00481D76    mov         si,0FFDC
 00481D7A    call        @CallDynaInst
 00481D7F    pop         esi
 00481D80    ret
*}
end;

//00481D84
function TDragDockObject.GetDragCursor(Accepted:Boolean; X:Integer; Y:Integer):TCursor;
begin
{*
 00481D84    push        ebp
 00481D85    mov         ebp,esp
 00481D87    xor         eax,eax
 00481D89    pop         ebp
 00481D8A    ret         4
*}
end;

//00481D90
{*function sub_00481D90:?;
begin
 00481D90    mov         al,1
 00481D92    ret
end;*}

//00481D94
{*function sub_00481D94:?;
begin
 00481D94    mov         eax,4
 00481D99    ret
end;*}

//00481D9C
procedure TDragDockObjectEx.BeforeDestruction;
begin
{*
 00481D9C    ret
*}
end;

//00481DA0
function IsBeforeTargetWindow(Window:HWND; Data:LongInt):BOOL; stdcall;
begin
{*
 00481DA0    push        ebp
 00481DA1    mov         ebp,esp
 00481DA3    add         esp,0FFFFFFF0
 00481DA6    push        ebx
 00481DA7    push        esi
 00481DA8    mov         esi,dword ptr [ebp+8]
 00481DAB    mov         ebx,dword ptr [ebp+0C]
 00481DAE    cmp         esi,dword ptr [ebx+4]
>00481DB1    jne         00481DB7
 00481DB3    xor         eax,eax
>00481DB5    jmp         00481DF7
 00481DB7    cmp         dword ptr [ebx+8],0
>00481DBB    jne         00481DD9
 00481DBD    lea         eax,[ebp-10]
 00481DC0    push        eax
 00481DC1    push        esi
 00481DC2    call        user32.GetWindowRect
 00481DC7    lea         edx,[ebx+0C]
 00481DCA    lea         eax,[ebp-10]
 00481DCD    call        PtInRect
 00481DD2    test        al,al
>00481DD4    je          00481DD9
 00481DD6    mov         dword ptr [ebx+8],esi
 00481DD9    cmp         esi,dword ptr [ebx+8]
>00481DDC    jne         00481DE6
 00481DDE    xor         eax,eax
 00481DE0    mov         byte ptr [ebx+14],1
>00481DE4    jmp         00481DF7
 00481DE6    cmp         esi,dword ptr [ebx]
>00481DE8    jne         00481DF4
 00481DEA    or          eax,0FFFFFFFF
 00481DED    xor         edx,edx
 00481DEF    mov         dword ptr [ebx+8],edx
>00481DF2    jmp         00481DF7
 00481DF4    or          eax,0FFFFFFFF
 00481DF7    pop         esi
 00481DF8    pop         ebx
 00481DF9    mov         esp,ebp
 00481DFB    pop         ebp
 00481DFC    ret         8
*}
end;

//00481E00
function ValidDockTarget(Target:TWinControl):Boolean;
begin
{*
 00481E00    push        ebp
 00481E01    mov         ebp,esp
 00481E03    add         esp,0FFFFFFC4
 00481E06    push        ebx
 00481E07    push        esi
 00481E08    push        edi
 00481E09    mov         esi,eax
 00481E0B    mov         byte ptr [ebp-1],1
 00481E0F    mov         eax,dword ptr [ebp+8]
 00481E12    add         eax,0FFFFFFF4
 00481E15    call        DragFindWindow
 00481E1A    mov         ebx,eax
 00481E1C    mov         dword ptr [ebp-14],ebx
 00481E1F    push        4
 00481E21    push        ebx
 00481E22    call        user32.GetWindow
 00481E27    mov         edx,dword ptr ds:[78D590];^Application:TApplication
 00481E2D    mov         edx,dword ptr [edx]
 00481E2F    cmp         eax,dword ptr [edx+170]
>00481E35    je          00481E5E
 00481E37    mov         eax,dword ptr [ebp-14]
 00481E3A    call        FindControl
 00481E3F    mov         ebx,eax
 00481E41    test        ebx,ebx
>00481E43    je          00481F8E
>00481E49    jmp         00481E4D
 00481E4B    mov         ebx,eax
 00481E4D    mov         eax,dword ptr [ebx+34]
 00481E50    test        eax,eax
>00481E52    jne         00481E4B
 00481E54    mov         eax,ebx
 00481E56    call        TWinControl.GetHandle
 00481E5B    mov         dword ptr [ebp-14],eax
 00481E5E    cmp         dword ptr [ebp-14],0
>00481E62    je          00481F8E
 00481E68    mov         ebx,esi
>00481E6A    jmp         00481E6E
 00481E6C    mov         ebx,eax
 00481E6E    mov         eax,dword ptr [ebx+34]
 00481E71    test        eax,eax
>00481E73    jne         00481E6C
 00481E75    mov         eax,ebx
 00481E77    call        TWinControl.GetHandle
 00481E7C    mov         edi,eax
 00481E7E    mov         dword ptr [ebp-18],edi
 00481E81    cmp         edi,dword ptr [ebp-14]
>00481E84    je          00481F8E
 00481E8A    mov         eax,dword ptr [ebp+8]
 00481E8D    mov         eax,dword ptr [eax-10]
 00481E90    mov         eax,dword ptr [eax+34]
 00481E93    test        eax,eax
>00481E95    je          00481EB3
 00481E97    mov         edx,dword ptr [ebp+8]
 00481E9A    mov         ebx,eax
>00481E9C    jmp         00481EA0
 00481E9E    mov         ebx,eax
 00481EA0    mov         eax,dword ptr [ebx+34]
 00481EA3    test        eax,eax
>00481EA5    jne         00481E9E
 00481EA7    mov         eax,ebx
 00481EA9    call        TWinControl.GetHandle
 00481EAE    mov         dword ptr [ebp-1C],eax
>00481EB1    jmp         00481EDD
 00481EB3    mov         eax,dword ptr [ebp+8]
 00481EB6    mov         eax,dword ptr [eax-10]
 00481EB9    mov         edx,dword ptr ds:[47C4E8];TWinControl
 00481EBF    call        @IsClass
 00481EC4    test        al,al
>00481EC6    je          00481ED8
 00481EC8    mov         eax,dword ptr [ebp+8]
 00481ECB    mov         eax,dword ptr [eax-10]
 00481ECE    call        TWinControl.GetHandle
 00481ED3    mov         dword ptr [ebp-1C],eax
>00481ED6    jmp         00481EDD
 00481ED8    xor         eax,eax
 00481EDA    mov         dword ptr [ebp-1C],eax
 00481EDD    mov         byte ptr [ebp-8],0
 00481EE1    mov         eax,dword ptr [ebp+8]
 00481EE4    mov         edx,dword ptr [eax-0C]
 00481EE7    mov         dword ptr [ebp-10],edx
 00481EEA    mov         edx,dword ptr [eax-8]
 00481EED    mov         dword ptr [ebp-0C],edx
 00481EF0    lea         eax,[ebp-1C]
 00481EF3    push        eax
 00481EF4    push        481DA0;IsBeforeTargetWindow:BOOL
 00481EF9    call        kernel32.GetCurrentThreadId
 00481EFE    push        eax
 00481EFF    call        user32.EnumThreadWindows
 00481F04    cmp         byte ptr [ebp-8],0
>00481F08    je          00481F8E
 00481F0E    lea         eax,[ebp-2C]
 00481F11    push        eax
 00481F12    mov         eax,dword ptr [ebp-14]
 00481F15    push        eax
 00481F16    call        user32.GetWindowRect
 00481F1B    mov         eax,dword ptr [ebp+8]
 00481F1E    add         eax,0FFFFFFF4
 00481F21    push        eax
 00481F22    mov         eax,dword ptr [ebp+8]
 00481F25    dec         eax
 00481F26    push        eax
 00481F27    lea         ecx,[ebp-3C]
 00481F2A    mov         eax,dword ptr [ebp+8]
 00481F2D    mov         edx,dword ptr [eax-10]
 00481F30    mov         eax,esi
 00481F32    mov         si,0FFBC
 00481F36    call        @CallDynaInst
 00481F3B    mov         eax,[007931B4]
 00481F40    mov         edx,dword ptr ds:[4768A4];TDragDockObject
 00481F46    call        @IsClass
 00481F4B    test        al,al
>00481F4D    je          00481F78
 00481F4F    mov         eax,[007931B4]
 00481F54    mov         eax,dword ptr [eax+40]
 00481F57    cmp         dword ptr [eax+90],0
>00481F5E    je          00481F78
 00481F60    mov         eax,[007931B4]
 00481F65    mov         eax,dword ptr [eax+40]
 00481F68    mov         eax,dword ptr [eax+90]
 00481F6E    call        TWinControl.GetHandle
 00481F73    cmp         eax,dword ptr [ebp-14]
>00481F76    je          00481F8E
 00481F78    lea         ecx,[ebp-3C]
 00481F7B    lea         edx,[ebp-2C]
 00481F7E    lea         eax,[ebp-2C]
 00481F81    call        IntersectRect
 00481F86    test        al,al
>00481F88    je          00481F8E
 00481F8A    mov         byte ptr [ebp-1],0
 00481F8E    movzx       eax,byte ptr [ebp-1]
 00481F92    pop         edi
 00481F93    pop         esi
 00481F94    pop         ebx
 00481F95    mov         esp,ebp
 00481F97    pop         ebp
 00481F98    ret
*}
end;

//00481F9C
function IsSiteChildOfClient:Boolean;
begin
{*
 00481F9C    push        ebp
 00481F9D    mov         ebp,esp
 00481F9F    mov         eax,dword ptr [ebp+8]
 00481FA2    mov         eax,dword ptr [eax-10]
 00481FA5    mov         edx,dword ptr ds:[47C4E8];TWinControl
 00481FAB    call        @IsClass
 00481FB0    test        al,al
>00481FB2    je          00481FD9
 00481FB4    mov         eax,dword ptr [ebp+8]
 00481FB7    mov         eax,dword ptr [eax-14]
 00481FBA    call        TWinControl.GetHandle
 00481FBF    push        eax
 00481FC0    mov         eax,dword ptr [ebp+8]
 00481FC3    mov         eax,dword ptr [eax-10]
 00481FC6    call        TWinControl.GetHandle
 00481FCB    push        eax
 00481FCC    call        user32.IsChild
 00481FD1    cmp         eax,1
 00481FD4    sbb         eax,eax
 00481FD6    inc         eax
 00481FD7    pop         ebp
 00481FD8    ret
 00481FD9    xor         eax,eax
 00481FDB    pop         ebp
 00481FDC    ret
*}
end;

//00481FE0
function GetDockSiteAtPos(MousePos:TPoint; Client:TControl):TWinControl;
begin
{*
 00481FE0    push        ebp
 00481FE1    mov         ebp,esp
 00481FE3    add         esp,0FFFFFFD8
 00481FE6    push        ebx
 00481FE7    push        esi
 00481FE8    push        edi
 00481FE9    mov         esi,eax
 00481FEB    lea         edi,[ebp-0C]
 00481FEE    movs        dword ptr [edi],dword ptr [esi]
 00481FEF    movs        dword ptr [edi],dword ptr [esi]
 00481FF0    mov         dword ptr [ebp-10],edx
 00481FF3    xor         eax,eax
 00481FF5    mov         dword ptr [ebp-18],eax
 00481FF8    cmp         dword ptr ds:[7931D8],0
>00481FFF    je          00482121
 00482005    push        11
 00482007    call        user32.GetKeyState
 0048200C    test        ax,8000
 00482010    setne       al
 00482013    mov         edx,dword ptr ds:[78D590];^Application:TApplication
 00482019    mov         edx,dword ptr [edx]
 0048201B    xor         al,byte ptr [edx+0BC]
>00482021    je          00482121
 00482027    mov         eax,[007931DC]
 0048202C    mov         edx,dword ptr [eax]
 0048202E    call        dword ptr [edx+8]
 00482031    mov         eax,[007931D8]
 00482036    mov         ebx,dword ptr [eax+8]
 00482039    dec         ebx
 0048203A    test        ebx,ebx
>0048203C    jl          004820F0
 00482042    inc         ebx
 00482043    xor         edi,edi
 00482045    mov         edx,edi
 00482047    mov         eax,[007931D8]
 0048204C    call        TList.Get
 00482051    mov         dword ptr [ebp-14],eax
 00482054    mov         eax,dword ptr [ebp-14]
 00482057    cmp         eax,dword ptr [ebp-10]
>0048205A    je          004820E8
 00482060    mov         eax,dword ptr [ebp-14]
 00482063    cmp         byte ptr [eax+1EA],0
>0048206A    je          004820E8
 0048206C    mov         eax,dword ptr [ebp-14]
 0048206F    mov         edx,dword ptr [eax]
 00482071    call        dword ptr [edx+5C]
 00482074    test        al,al
>00482076    je          004820E8
 00482078    mov         eax,dword ptr [ebp-14]
 0048207B    call        TWinControl.GetHandle
 00482080    push        eax
 00482081    call        user32.IsWindowVisible
 00482086    test        eax,eax
>00482088    je          004820E8
 0048208A    push        ebp
 0048208B    call        IsSiteChildOfClient
 00482090    pop         ecx
 00482091    test        al,al
>00482093    jne         004820E8
 00482095    mov         edx,dword ptr [ebp-10]
 00482098    mov         eax,dword ptr [ebp-14]
 0048209B    mov         si,0FFBB
 0048209F    call        @CallDynaInst
 004820A4    test        al,al
>004820A6    je          004820E8
 004820A8    mov         byte ptr [ebp-1],1
 004820AC    lea         eax,[ebp-0C]
 004820AF    push        eax
 004820B0    lea         eax,[ebp-1]
 004820B3    push        eax
 004820B4    lea         ecx,[ebp-28]
 004820B7    mov         edx,dword ptr [ebp-10]
 004820BA    mov         eax,dword ptr [ebp-14]
 004820BD    mov         si,0FFBC
 004820C1    call        @CallDynaInst
 004820C6    cmp         byte ptr [ebp-1],0
>004820CA    je          004820E8
 004820CC    lea         edx,[ebp-0C]
 004820CF    lea         eax,[ebp-28]
 004820D2    call        PtInRect
 004820D7    test        al,al
>004820D9    je          004820E8
 004820DB    mov         edx,dword ptr [ebp-14]
 004820DE    mov         eax,[007931DC]
 004820E3    call        TSiteList.AddSite
 004820E8    inc         edi
 004820E9    dec         ebx
>004820EA    jne         00482045
 004820F0    mov         eax,[007931DC]
 004820F5    cmp         dword ptr [eax+8],0
>004820F9    jle         00482108
 004820FB    mov         eax,[007931DC]
 00482100    call        TSiteList.GetTopSite
 00482105    mov         dword ptr [ebp-18],eax
 00482108    cmp         dword ptr [ebp-18],0
>0048210C    je          00482121
 0048210E    push        ebp
 0048210F    mov         eax,dword ptr [ebp-18]
 00482112    call        ValidDockTarget
 00482117    pop         ecx
 00482118    test        al,al
>0048211A    jne         00482121
 0048211C    xor         eax,eax
 0048211E    mov         dword ptr [ebp-18],eax
 00482121    mov         eax,dword ptr [ebp-18]
 00482124    pop         edi
 00482125    pop         esi
 00482126    pop         ebx
 00482127    mov         esp,ebp
 00482129    pop         ebp
 0048212A    ret
*}
end;

//0048212C
procedure RegisterDockSite(Site:TWinControl; DoRegister:Boolean);
begin
{*
 0048212C    push        ebx
 0048212D    push        esi
 0048212E    mov         ebx,edx
 00482130    mov         esi,eax
 00482132    test        esi,esi
>00482134    je          00482182
 00482136    cmp         dword ptr ds:[7931D8],0
>0048213D    jne         00482150
 0048213F    mov         dl,1
 00482141    mov         eax,[00439644];TList
 00482146    call        TObject.Create
 0048214B    mov         [007931D8],eax
 00482150    mov         edx,esi
 00482152    mov         eax,[007931D8]
 00482157    call        TList.IndexOf
 0048215C    test        bl,bl
>0048215E    je          00482171
 00482160    inc         eax
>00482161    jne         00482182
 00482163    mov         edx,esi
 00482165    mov         eax,[007931D8]
 0048216A    call        TList.Add
>0048216F    jmp         00482182
 00482171    cmp         eax,0FFFFFFFF
>00482174    je          00482182
 00482176    mov         edx,eax
 00482178    mov         eax,[007931D8]
 0048217D    call        TList.Delete
 00482182    pop         esi
 00482183    pop         ebx
 00482184    ret
*}
end;

//00482188
function DragMessage(Handle:HWND; Msg:TDragMessage; Source:TDragObject; Target:Pointer; const Pos:TPoint):LongInt;
begin
{*
 00482188    push        ebp
 00482189    mov         ebp,esp
 0048218B    add         esp,0FFFFFFE8
 0048218E    push        ebx
 0048218F    mov         dword ptr [ebp-4],ecx
 00482192    xor         ecx,ecx
 00482194    test        eax,eax
>00482196    je          004821D4
 00482198    mov         ecx,dword ptr [ebp+8]
 0048219B    mov         ebx,dword ptr [ecx]
 0048219D    mov         dword ptr [ebp-18],ebx
 004821A0    mov         ebx,dword ptr [ecx+4]
 004821A3    mov         dword ptr [ebp-14],ebx
 004821A6    mov         ecx,dword ptr [ebp+0C]
 004821A9    mov         dword ptr [ebp-0C],ecx
 004821AC    mov         ecx,dword ptr [ebp-4]
 004821AF    mov         dword ptr [ebp-10],ecx
 004821B2    cmp         byte ptr ds:[7931D0],2
 004821B9    sete        cl
 004821BC    mov         byte ptr [ebp-8],cl
 004821BF    lea         ecx,[ebp-18]
 004821C2    push        ecx
 004821C3    and         edx,7F
 004821C6    push        edx
 004821C7    push        0B02F
 004821CC    push        eax
 004821CD    call        user32.SendMessageW
 004821D2    mov         ecx,eax
 004821D4    mov         eax,ecx
 004821D6    pop         ebx
 004821D7    mov         esp,ebp
 004821D9    pop         ebp
 004821DA    ret         8
*}
end;

//004821E0
function IsDelphiHandle(Handle:HWND):Boolean;
begin
{*
 004821E0    push        ebx
 004821E1    push        esi
 004821E2    push        ecx
 004821E3    mov         esi,eax
 004821E5    xor         ebx,ebx
 004821E7    test        esi,esi
>004821E9    je          0048223A
 004821EB    push        esp
 004821EC    push        esi
 004821ED    call        user32.GetWindowThreadProcessId
 004821F2    test        eax,eax
>004821F4    je          0048223A
 004821F6    call        kernel32.GetCurrentProcessId
 004821FB    cmp         eax,dword ptr [esp]
>004821FE    jne         0048223A
 00482200    mov         eax,[007931A4]
 00482205    call        @UStrToPWChar
 0048220A    push        eax
 0048220B    call        kernel32.GlobalFindAtomW
 00482210    cmp         ax,word ptr ds:[7931A0]
>00482217    jne         0048222E
 00482219    movzx       eax,word ptr ds:[7931A0]
 00482220    push        eax
 00482221    push        esi
 00482222    call        user32.GetPropW
 00482227    test        eax,eax
 00482229    setne       bl
>0048222C    jmp         0048223A
 0048222E    mov         eax,esi
 00482230    call        ObjectFromHWnd
 00482235    test        eax,eax
 00482237    setne       bl
 0048223A    mov         eax,ebx
 0048223C    pop         edx
 0048223D    pop         esi
 0048223E    pop         ebx
 0048223F    ret
*}
end;

//00482240
function DragFindWindow(const Pos:TPoint):HWND;
begin
{*
 00482240    push        ebx
 00482241    push        dword ptr [eax+4]
 00482244    push        dword ptr [eax]
 00482246    call        user32.WindowFromPoint
 0048224B    mov         ebx,eax
 0048224D    test        ebx,ebx
>0048224F    je          00482268
 00482251    mov         eax,ebx
 00482253    call        IsDelphiHandle
 00482258    test        al,al
>0048225A    jne         00482268
 0048225C    push        ebx
 0048225D    call        user32.GetParent
 00482262    mov         ebx,eax
 00482264    test        ebx,ebx
>00482266    jne         00482251
 00482268    mov         eax,ebx
 0048226A    pop         ebx
 0048226B    ret
*}
end;

//0048226C
function DragFindTarget(const Pos:TPoint; var Handle:HWND; DragKind:TDragKind; Client:TControl):Pointer;
begin
{*
 0048226C    push        ebp
 0048226D    mov         ebp,esp
 0048226F    push        ebx
 00482270    push        esi
 00482271    mov         esi,edx
 00482273    mov         ebx,eax
 00482275    test        cl,cl
>00482277    jne         00482298
 00482279    mov         eax,ebx
 0048227B    call        DragFindWindow
 00482280    mov         dword ptr [esi],eax
 00482282    push        0
 00482284    push        ebx
 00482285    mov         eax,dword ptr [esi]
 00482287    mov         ecx,dword ptr ds:[7931B4]
 0048228D    mov         dl,5
 0048228F    call        DragMessage
 00482294    mov         ebx,eax
>00482296    jmp         004822B1
 00482298    mov         eax,ebx
 0048229A    mov         edx,dword ptr [ebp+8]
 0048229D    call        GetDockSiteAtPos
 004822A2    mov         ebx,eax
 004822A4    test        ebx,ebx
>004822A6    je          004822B1
 004822A8    mov         eax,ebx
 004822AA    call        TWinControl.GetHandle
 004822AF    mov         dword ptr [esi],eax
 004822B1    mov         eax,ebx
 004822B3    pop         esi
 004822B4    pop         ebx
 004822B5    pop         ebp
 004822B6    ret         4
*}
end;

//004822BC
function DoDragOver(DragMsg:TDragMessage):Boolean;
begin
{*
 004822BC    push        ebx
 004822BD    push        esi
 004822BE    mov         ebx,eax
 004822C0    xor         eax,eax
 004822C2    mov         edx,dword ptr ds:[7931B4]
 004822C8    mov         esi,dword ptr [edx+14]
 004822CB    test        esi,esi
>004822CD    je          004822F4
 004822CF    push        esi
 004822D0    mov         eax,[007931B4]
 004822D5    add         eax,0C
 004822D8    push        eax
 004822D9    mov         eax,[007931B4]
 004822DE    mov         eax,dword ptr [eax+8]
 004822E1    mov         ecx,dword ptr ds:[7931B4]
 004822E7    mov         edx,ebx
 004822E9    call        DragMessage
 004822EE    cmp         eax,1
 004822F1    sbb         eax,eax
 004822F3    inc         eax
 004822F4    pop         esi
 004822F5    pop         ebx
 004822F6    ret
*}
end;

//004822F8
function GetDropCtl:TControl;
begin
{*
 004822F8    push        ebp
 004822F9    mov         ebp,esp
 004822FB    push        ecx
 004822FC    push        ebx
 004822FD    push        esi
 004822FE    push        edi
 004822FF    xor         eax,eax
 00482301    mov         dword ptr [ebp-4],eax
 00482304    mov         eax,[007931B4]
 00482309    mov         esi,dword ptr [eax+14]
 0048230C    test        esi,esi
>0048230E    je          0048238F
 00482310    cmp         byte ptr [esi+1EB],0
>00482317    je          0048238F
 00482319    cmp         dword ptr [esi+1C4],0
>00482320    je          0048238F
 00482322    mov         eax,esi
 00482324    call        TWinControl.GetDockClientCount
 00482329    test        eax,eax
>0048232B    je          0048238F
 0048232D    mov         eax,esi
 0048232F    call        TWinControl.GetDockClientCount
 00482334    dec         eax
>00482335    jne         0048234F
 00482337    xor         edx,edx
 00482339    mov         eax,dword ptr [esi+1C4]
 0048233F    call        TList.Get
 00482344    mov         edx,dword ptr ds:[7931B4]
 0048234A    cmp         eax,dword ptr [edx+40]
>0048234D    je          0048238F
 0048234F    mov         eax,[007931B4]
 00482354    add         eax,0C
 00482357    xor         edx,edx
 00482359    call        FindDragTarget
 0048235E    mov         ebx,eax
>00482360    jmp         00482387
 00482362    mov         edx,ebx
 00482364    mov         eax,dword ptr [esi+1C4]
 0048236A    call        TList.IndexOf
 0048236F    mov         edi,eax
 00482371    cmp         edi,0FFFFFFFF
>00482374    je          00482384
 00482376    mov         edx,edi
 00482378    mov         eax,esi
 0048237A    call        TWinControl.GetDockClients
 0048237F    mov         dword ptr [ebp-4],eax
>00482382    jmp         0048238F
 00482384    mov         ebx,dword ptr [ebx+34]
 00482387    test        ebx,ebx
>00482389    je          0048238F
 0048238B    cmp         esi,ebx
>0048238D    jne         00482362
 0048238F    mov         eax,dword ptr [ebp-4]
 00482392    pop         edi
 00482393    pop         esi
 00482394    pop         ebx
 00482395    pop         ecx
 00482396    pop         ebp
 00482397    ret
*}
end;

//00482398
procedure DragTo(const Pos:TPoint);
begin
{*
 00482398    push        ebx
 00482399    push        esi
 0048239A    push        edi
 0048239B    add         esp,0FFFFFFF0
 0048239E    mov         ebx,eax
 004823A0    cmp         byte ptr ds:[7931D0],0
>004823A7    jne         004823D6
 004823A9    mov         eax,[007931C0]
 004823AE    sub         eax,dword ptr [ebx]
 004823B0    cdq
 004823B1    xor         eax,edx
 004823B3    sub         eax,edx
 004823B5    cmp         eax,dword ptr ds:[7931CC]
>004823BB    jge         004823D6
 004823BD    mov         eax,[007931C4]
 004823C2    sub         eax,dword ptr [ebx+4]
 004823C5    cdq
 004823C6    xor         eax,edx
 004823C8    sub         eax,edx
 004823CA    cmp         eax,dword ptr ds:[7931CC]
>004823D0    jl          00482679
 004823D6    mov         eax,[007931B0]
 004823DB    push        eax
 004823DC    mov         eax,[007931B0]
 004823E1    movzx       ecx,byte ptr [eax+8B]
 004823E8    lea         edx,[esp+4]
 004823EC    mov         eax,ebx
 004823EE    call        DragFindTarget
 004823F3    mov         esi,eax
 004823F5    cmp         byte ptr ds:[7931D0],0
>004823FC    jne         00482424
 004823FE    cmp         dword ptr ds:[7931D4],0
>00482405    je          00482424
 00482407    mov         eax,[007931C4]
 0048240C    push        eax
 0048240D    call        user32.GetDesktopWindow
 00482412    mov         edx,eax
 00482414    mov         ecx,dword ptr ds:[7931C0]
 0048241A    mov         eax,[007931D4]
 0048241F    call        TDragImageList.BeginDrag
 00482424    mov         eax,[007931B0]
 00482429    cmp         byte ptr [eax+8B],0
>00482430    jne         00482440
 00482432    mov         byte ptr ds:[7931D0],1
 00482439    mov         byte ptr [esp+4],0
>0048243E    jmp         00482453
 00482440    cmp         byte ptr ds:[7931D0],0
 00482447    setne       byte ptr [esp+4]
 0048244C    mov         byte ptr ds:[7931D0],2
 00482453    mov         eax,[007931B4]
 00482458    cmp         esi,dword ptr [eax+14]
>0048245B    je          004824A8
 0048245D    mov         al,1
 0048245F    call        DoDragOver
 00482464    cmp         dword ptr ds:[7931B4],0
>0048246B    je          00482679
 00482471    mov         eax,[007931B4]
 00482476    mov         dword ptr [eax+14],esi
 00482479    mov         eax,[007931B4]
 0048247E    mov         edx,dword ptr [esp]
 00482481    mov         dword ptr [eax+8],edx
 00482484    mov         eax,[007931B4]
 00482489    mov         edx,dword ptr [ebx]
 0048248B    mov         dword ptr [eax+0C],edx
 0048248E    mov         edx,dword ptr [ebx+4]
 00482491    mov         dword ptr [eax+10],edx
 00482494    xor         eax,eax
 00482496    call        DoDragOver
 0048249B    cmp         dword ptr ds:[7931B4],0
>004824A2    je          00482679
 004824A8    mov         eax,[007931B4]
 004824AD    mov         edx,dword ptr [ebx]
 004824AF    mov         dword ptr [eax+0C],edx
 004824B2    mov         edx,dword ptr [ebx+4]
 004824B5    mov         dword ptr [eax+10],edx
 004824B8    mov         eax,[007931B4]
 004824BD    cmp         dword ptr [eax+14],0
>004824C1    je          004824E9
 004824C3    lea         ecx,[esp+8]
 004824C7    mov         edx,ebx
 004824C9    mov         eax,[007931B4]
 004824CE    mov         eax,dword ptr [eax+14]
 004824D1    call        TControl.ScreenToClient
 004824D6    mov         eax,[007931B4]
 004824DB    mov         edx,dword ptr [esp+8]
 004824DF    mov         dword ptr [eax+18],edx
 004824E2    mov         edx,dword ptr [esp+0C]
 004824E6    mov         dword ptr [eax+1C],edx
 004824E9    mov         eax,dword ptr [ebx+4]
 004824EC    push        eax
 004824ED    mov         al,2
 004824EF    call        DoDragOver
 004824F4    mov         edx,eax
 004824F6    mov         ecx,dword ptr [ebx]
 004824F8    mov         eax,[007931B4]
 004824FD    mov         edi,dword ptr [eax]
 004824FF    call        dword ptr [edi+4]
 00482502    mov         edi,eax
 00482504    cmp         dword ptr ds:[7931D4],0
>0048250B    je          00482582
 0048250D    test        esi,esi
>0048250F    je          00482522
 00482511    test        byte ptr [esi+51],20
>00482515    jne         00482522
 00482517    mov         eax,[007931B4]
 0048251C    cmp         byte ptr [eax+4],0
>00482520    je          00482563
 00482522    mov         edx,edi
 00482524    mov         eax,[007931D4]
 00482529    call        TDragImageList.SetDragCursor
 0048252E    mov         eax,[007931D4]
 00482533    cmp         byte ptr [eax+7A],0
>00482537    jne         00482552
 00482539    mov         eax,dword ptr [ebx+4]
 0048253C    push        eax
 0048253D    call        user32.GetDesktopWindow
 00482542    mov         edx,eax
 00482544    mov         ecx,dword ptr [ebx]
 00482546    mov         eax,[007931D4]
 0048254B    call        TDragImageList.BeginDrag
>00482550    jmp         00482582
 00482552    mov         ecx,dword ptr [ebx+4]
 00482555    mov         edx,dword ptr [ebx]
 00482557    mov         eax,[007931D4]
 0048255C    call        TDragImageList.DragMove
>00482561    jmp         00482582
 00482563    mov         eax,[007931D4]
 00482568    call        TDragImageList.EndDrag
 0048256D    movsx       edx,di
 00482570    mov         eax,[0078DB00];^Screen:TScreen
 00482575    mov         eax,dword ptr [eax]
 00482577    call        TScreen.GetCursors
 0048257C    push        eax
 0048257D    call        user32.SetCursor
 00482582    movsx       edx,di
 00482585    mov         eax,[0078DB00];^Screen:TScreen
 0048258A    mov         eax,dword ptr [eax]
 0048258C    call        TScreen.GetCursors
 00482591    push        eax
 00482592    call        user32.SetCursor
 00482597    cmp         byte ptr ds:[7931D0],2
>0048259E    jne         00482679
 004825A4    test        esi,esi
>004825A6    jne         004825C2
 004825A8    mov         edx,dword ptr [ebx+4]
 004825AB    push        edx
 004825AC    mov         ecx,dword ptr [ebx]
 004825AE    mov         eax,[007931B4]
 004825B3    mov         edx,dword ptr [eax+40]
 004825B6    xchg        eax,edx
 004825B7    mov         si,0FFE9
 004825BB    call        @CallDynaInst
>004825C0    jmp         0048261E
 004825C2    call        GetDropCtl
 004825C7    mov         edi,eax
 004825C9    mov         eax,[007931B4]
 004825CE    mov         dword ptr [eax+60],edi
 004825D1    test        edi,edi
>004825D3    jne         004825F9
 004825D5    mov         eax,[007931B4]
 004825DA    lea         edx,[eax+18]
 004825DD    mov         eax,[007931B4]
 004825E2    mov         eax,dword ptr [eax+14]
 004825E5    mov         si,0FFDA
 004825E9    call        @CallDynaInst
 004825EE    mov         edx,dword ptr ds:[7931B4]
 004825F4    mov         byte ptr [edx+5C],al
>004825F7    jmp         0048261E
 004825F9    lea         ecx,[esp+8]
 004825FD    mov         edx,ebx
 004825FF    mov         eax,edi
 00482601    call        TControl.ScreenToClient
 00482606    lea         edx,[esp+8]
 0048260A    mov         eax,edi
 0048260C    mov         si,0FFDA
 00482610    call        @CallDynaInst
 00482615    mov         edx,dword ptr ds:[7931B4]
 0048261B    mov         byte ptr [edx+5C],al
 0048261E    cmp         dword ptr ds:[7931B4],0
>00482625    je          00482679
 00482627    mov         ebx,dword ptr ds:[7931B4]
 0048262D    lea         edx,[ebx+64]
 00482630    lea         eax,[ebx+4C]
 00482633    mov         ecx,10
 00482638    call        CompareMem
 0048263D    test        al,al
>0048263F    jne         00482679
 00482641    cmp         byte ptr [esp+4],0
>00482646    je          00482660
 00482648    mov         eax,[007931B4]
 0048264D    mov         edx,dword ptr [eax]
 0048264F    call        dword ptr [edx+3C]
 00482652    test        al,al
>00482654    je          00482660
 00482656    mov         eax,[007931B4]
 0048265B    mov         edx,dword ptr [eax]
 0048265D    call        dword ptr [edx+34]
 00482660    mov         eax,[007931B4]
 00482665    mov         edx,dword ptr [eax]
 00482667    call        dword ptr [edx+30]
 0048266A    mov         eax,[007931B4]
 0048266F    lea         esi,[eax+4C]
 00482672    lea         edi,[eax+64]
 00482675    movs        dword ptr [edi],dword ptr [esi]
 00482676    movs        dword ptr [edi],dword ptr [esi]
 00482677    movs        dword ptr [edi],dword ptr [esi]
 00482678    movs        dword ptr [edi],dword ptr [esi]
 00482679    add         esp,10
 0048267C    pop         edi
 0048267D    pop         esi
 0048267E    pop         ebx
 0048267F    ret
*}
end;

//00482680
procedure DragInit(ADragObject:TDragObject; Immediate:Boolean; Threshold:Integer);
begin
{*
 00482680    push        ebx
 00482681    push        esi
 00482682    push        edi
 00482683    add         esp,0FFFFFFF8
 00482686    mov         edi,ecx
 00482688    mov         ebx,edx
 0048268A    mov         esi,eax
 0048268C    mov         dword ptr ds:[7931B4],esi
 00482692    mov         eax,[007931B4]
 00482697    xor         edx,edx
 00482699    mov         dword ptr [eax+14],edx
 0048269C    push        7931C0
 004826A1    call        user32.GetCursorPos
 004826A6    mov         eax,[007931B4]
 004826AB    mov         edx,dword ptr ds:[7931C0]
 004826B1    mov         dword ptr [eax+0C],edx
 004826B4    mov         edx,dword ptr ds:[7931C4]
 004826BA    mov         dword ptr [eax+10],edx
 004826BD    call        user32.GetCursor
 004826C2    mov         [007931C8],eax
 004826C7    mov         eax,[007931B4]
 004826CC    call        TDragObject.Capture
 004826D1    mov         [007931BC],eax
 004826D6    mov         dword ptr ds:[7931CC],edi
 004826DC    mov         eax,esi
 004826DE    mov         edx,dword ptr ds:[4768A4];TDragDockObject
 004826E4    call        @IsClass
 004826E9    test        al,al
>004826EB    je          0048277D
 004826F1    mov         edx,esi
 004826F3    lea         eax,[edx+4C]
 004826F6    mov         edi,dword ptr [eax+8]
 004826F9    mov         ecx,dword ptr [eax]
 004826FB    sub         edi,ecx
 004826FD    test        edi,edi
>004826FF    jle         00482721
 00482701    mov         edi,dword ptr [edx+0C]
 00482704    sub         edi,ecx
 00482706    mov         dword ptr [esp],edi
 00482709    fild        dword ptr [esp]
 0048270C    mov         ecx,dword ptr [eax+8]
 0048270F    sub         ecx,dword ptr [eax]
 00482711    mov         dword ptr [esp+4],ecx
 00482715    fild        dword ptr [esp+4]
 00482719    fdivp       st(1),st
 0048271B    fstp        qword ptr [edx+28]
 0048271E    wait
>0048271F    jmp         00482729
 00482721    xor         ecx,ecx
 00482723    mov         dword ptr [edx+28],ecx
 00482726    mov         dword ptr [edx+2C],ecx
 00482729    mov         ecx,dword ptr [eax+0C]
 0048272C    mov         edx,dword ptr [eax+4]
 0048272F    sub         ecx,edx
 00482731    test        ecx,ecx
>00482733    jle         00482758
 00482735    mov         ecx,esi
 00482737    mov         edi,dword ptr [ecx+10]
 0048273A    sub         edi,edx
 0048273C    mov         dword ptr [esp],edi
 0048273F    fild        dword ptr [esp]
 00482742    mov         edx,dword ptr [eax+0C]
 00482745    sub         edx,dword ptr [eax+4]
 00482748    mov         dword ptr [esp+4],edx
 0048274C    fild        dword ptr [esp+4]
 00482750    fdivp       st(1),st
 00482752    fstp        qword ptr [ecx+30]
 00482755    wait
>00482756    jmp         00482760
 00482758    xor         eax,eax
 0048275A    mov         dword ptr [esi+30],eax
 0048275D    mov         dword ptr [esi+34],eax
 00482760    test        bl,bl
>00482762    je          00482774
 00482764    mov         byte ptr ds:[7931D0],2
 0048276B    mov         eax,esi
 0048276D    mov         edx,dword ptr [eax]
 0048276F    call        dword ptr [edx+30]
>00482772    jmp         00482791
 00482774    mov         byte ptr ds:[7931D0],0
>0048277B    jmp         00482791
 0048277D    test        bl,bl
>0048277F    je          0048278A
 00482781    mov         byte ptr ds:[7931D0],1
>00482788    jmp         00482791
 0048278A    mov         byte ptr ds:[7931D0],0
 00482791    mov         eax,[007931B4]
 00482796    mov         edx,dword ptr [eax]
 00482798    call        dword ptr [edx+8]
 0048279B    mov         [007931D4],eax
 004827A0    cmp         dword ptr ds:[7931D4],0
>004827A7    je          004827C6
 004827A9    mov         eax,[007931C4]
 004827AE    push        eax
 004827AF    call        user32.GetDesktopWindow
 004827B4    mov         edx,eax
 004827B6    mov         ecx,dword ptr ds:[7931C0]
 004827BC    mov         eax,[007931D4]
 004827C1    call        TDragImageList.BeginDrag
 004827C6    mov         dl,1
 004827C8    mov         eax,[00481508];TSiteList
 004827CD    call        TObject.Create
 004827D2    mov         [007931DC],eax
 004827D7    cmp         byte ptr ds:[7931D0],0
>004827DE    je          004827EA
 004827E0    mov         eax,7931C0
 004827E5    call        DragTo
 004827EA    pop         ecx
 004827EB    pop         edx
 004827EC    pop         edi
 004827ED    pop         esi
 004827EE    pop         ebx
 004827EF    ret
*}
end;

//004827F0
procedure DragInitControl(Control:TControl; Immediate:Boolean; Threshold:Integer);
begin
{*
 004827F0    push        ebp
 004827F1    mov         ebp,esp
 004827F3    add         esp,0FFFFFFD8
 004827F6    push        ebx
 004827F7    push        esi
 004827F8    push        edi
 004827F9    mov         dword ptr [ebp-4],ecx
 004827FC    mov         ebx,edx
 004827FE    mov         edi,eax
 00482800    mov         dword ptr ds:[7931B0],edi
 00482806    xor         ecx,ecx
 00482808    push        ebp
 00482809    push        48298B
 0048280E    push        dword ptr fs:[ecx]
 00482811    mov         dword ptr fs:[ecx],esp
 00482814    xor         eax,eax
 00482816    mov         dword ptr [ebp-8],eax
 00482819    mov         byte ptr ds:[7931B8],0
 00482820    cmp         byte ptr [edi+8B],0
>00482827    jne         00482874
 00482829    lea         edx,[ebp-8]
 0048282C    mov         eax,edi
 0048282E    mov         si,0FFDE
 00482832    call        @CallDynaInst
 00482837    cmp         dword ptr ds:[7931B0],0
>0048283E    jne         0048284D
 00482840    xor         eax,eax
 00482842    pop         edx
 00482843    pop         ecx
 00482844    pop         ecx
 00482845    mov         dword ptr fs:[eax],edx
>00482848    jmp         004829A1
 0048284D    cmp         dword ptr [ebp-8],0
>00482851    jne         00482974
 00482857    mov         ecx,edi
 00482859    mov         dl,1
 0048285B    mov         eax,[00476798];TDragControlObjectEx
 00482860    call        TBaseDragControlObject.Create
 00482865    mov         dword ptr [ebp-8],eax
 00482868    mov         byte ptr ds:[7931B8],1
>0048286F    jmp         00482974
 00482874    lea         edx,[ebp-8]
 00482877    mov         eax,edi
 00482879    mov         si,0FFE5
 0048287D    call        @CallDynaInst
 00482882    cmp         dword ptr ds:[7931B0],0
>00482889    jne         00482898
 0048288B    xor         eax,eax
 0048288D    pop         edx
 0048288E    pop         ecx
 0048288F    pop         ecx
 00482890    mov         dword ptr fs:[eax],edx
>00482893    jmp         004829A1
 00482898    cmp         dword ptr [ebp-8],0
>0048289C    jne         004828B6
 0048289E    mov         ecx,edi
 004828A0    mov         dl,1
 004828A2    mov         eax,[00476C1C];TDragDockObjectEx
 004828A7    call        TDragDockObject.Create
 004828AC    mov         dword ptr [ebp-8],eax
 004828AF    mov         byte ptr ds:[7931B8],1
 004828B6    mov         eax,dword ptr [ebp-8]
 004828B9    mov         esi,dword ptr [eax+40]
 004828BC    mov         eax,esi
 004828BE    mov         edx,dword ptr ds:[47C4E8];TWinControl
 004828C4    call        @IsClass
 004828C9    test        al,al
>004828CB    je          004828E6
 004828CD    mov         eax,dword ptr [ebp-8]
 004828D0    add         eax,4C
 004828D3    push        eax
 004828D4    mov         eax,esi
 004828D6    call        TWinControl.GetHandle
 004828DB    push        eax
 004828DC    call        user32.GetWindowRect
>004828E1    jmp         00482967
 004828E6    mov         eax,dword ptr [ebp-8]
 004828E9    mov         esi,dword ptr [eax+40]
 004828EC    cmp         dword ptr [esi+34],0
>004828F0    jne         0048291D
 004828F2    mov         eax,esi
 004828F4    mov         edx,dword ptr ds:[47C4E8];TWinControl
 004828FA    call        @IsClass
 004828FF    test        al,al
>00482901    jne         0048291D
 00482903    lea         eax,[ebp-10]
 00482906    push        eax
 00482907    call        user32.GetCursorPos
 0048290C    mov         eax,dword ptr [ebp-8]
 0048290F    mov         edx,dword ptr [ebp-10]
 00482912    mov         dword ptr [eax+4C],edx
 00482915    mov         edx,dword ptr [ebp-0C]
 00482918    mov         dword ptr [eax+50],edx
>0048291B    jmp         00482943
 0048291D    xor         eax,eax
 0048291F    mov         dword ptr [ebp-18],eax
 00482922    xor         eax,eax
 00482924    mov         dword ptr [ebp-14],eax
 00482927    lea         ecx,[ebp-28]
 0048292A    lea         edx,[ebp-18]
 0048292D    mov         eax,esi
 0048292F    call        TControl.ClientToScreen
 00482934    mov         eax,dword ptr [ebp-8]
 00482937    mov         edx,dword ptr [ebp-28]
 0048293A    mov         dword ptr [eax+4C],edx
 0048293D    mov         edx,dword ptr [ebp-24]
 00482940    mov         dword ptr [eax+50],edx
 00482943    mov         eax,dword ptr [ebp-8]
 00482946    mov         ecx,dword ptr [eax+4C]
 00482949    mov         edx,dword ptr [eax+40]
 0048294C    add         ecx,dword ptr [edx+48]
 0048294F    mov         dword ptr [ebp-20],ecx
 00482952    mov         ecx,dword ptr [eax+50]
 00482955    add         ecx,dword ptr [edx+4C]
 00482958    mov         dword ptr [ebp-1C],ecx
 0048295B    mov         edx,dword ptr [ebp-20]
 0048295E    mov         dword ptr [eax+54],edx
 00482961    mov         edx,dword ptr [ebp-1C]
 00482964    mov         dword ptr [eax+58],edx
 00482967    mov         eax,dword ptr [ebp-8]
 0048296A    lea         esi,[eax+4C]
 0048296D    lea         edi,[eax+64]
 00482970    movs        dword ptr [edi],dword ptr [esi]
 00482971    movs        dword ptr [edi],dword ptr [esi]
 00482972    movs        dword ptr [edi],dword ptr [esi]
 00482973    movs        dword ptr [edi],dword ptr [esi]
 00482974    mov         ecx,dword ptr [ebp-4]
 00482977    mov         edx,ebx
 00482979    mov         eax,dword ptr [ebp-8]
 0048297C    call        DragInit
 00482981    xor         eax,eax
 00482983    pop         edx
 00482984    pop         ecx
 00482985    pop         ecx
 00482986    mov         dword ptr fs:[eax],edx
>00482989    jmp         004829A1
>0048298B    jmp         @HandleAnyException
 00482990    xor         eax,eax
 00482992    mov         [007931B0],eax
 00482997    call        @RaiseAgain
 0048299C    call        @DoneExcept
 004829A1    pop         edi
 004829A2    pop         esi
 004829A3    pop         ebx
 004829A4    mov         esp,ebp
 004829A6    pop         ebp
 004829A7    ret
*}
end;

//004829A8
function CheckUndock:Boolean;
begin
{*
 004829A8    push        ebp
 004829A9    mov         ebp,esp
 004829AB    push        ebx
 004829AC    push        esi
 004829AD    mov         eax,[007931B4]
 004829B2    cmp         dword ptr [eax+14],0
 004829B6    setne       bl
 004829B9    mov         eax,dword ptr [ebp+8]
 004829BC    cmp         byte ptr [eax-1],0
>004829C0    je          00482A14
 004829C2    cmp         byte ptr ds:[7931D0],2
>004829C9    jne         00482A14
 004829CB    mov         eax,[007931B0]
 004829D0    mov         edx,dword ptr [eax]
 004829D2    call        dword ptr [edx+60]
 004829D5    test        al,al
>004829D7    jne         004829E7
 004829D9    mov         eax,[007931B0]
 004829DE    cmp         dword ptr [eax+90],0
>004829E5    jne         004829EB
 004829E7    mov         bl,1
>004829E9    jmp         00482A14
 004829EB    mov         eax,[007931B0]
 004829F0    mov         eax,dword ptr [eax+90]
 004829F6    test        eax,eax
>004829F8    je          00482A14
 004829FA    mov         edx,dword ptr ds:[7931B4]
 00482A00    mov         edx,dword ptr [edx+14]
 00482A03    mov         ecx,dword ptr ds:[7931B0]
 00482A09    mov         si,0FFBD
 00482A0D    call        @CallDynaInst
 00482A12    mov         ebx,eax
 00482A14    mov         eax,ebx
 00482A16    pop         esi
 00482A17    pop         ebx
 00482A18    pop         ebp
 00482A19    ret
*}
end;

//00482A1C
procedure DragDone(Drop:Boolean);
begin
{*
 00482A1C    push        ebp
 00482A1D    mov         ebp,esp
 00482A1F    add         esp,0FFFFFFEC
 00482A22    push        ebx
 00482A23    mov         byte ptr [ebp-1],al
 00482A26    xor         ebx,ebx
 00482A28    mov         byte ptr [ebp-9],0
 00482A2C    cmp         dword ptr ds:[7931B4],0
>00482A33    je          00482D38
 00482A39    mov         eax,[007931B4]
 00482A3E    cmp         byte ptr [eax+5],0
>00482A42    jne         00482D38
 00482A48    xor         edx,edx
 00482A4A    push        ebp
 00482A4B    push        482D31
 00482A50    push        dword ptr fs:[edx]
 00482A53    mov         dword ptr fs:[edx],esp
 00482A56    mov         eax,[007931B4]
 00482A5B    mov         [007931E0],eax
 00482A60    xor         edx,edx
 00482A62    push        ebp
 00482A63    push        482CBF
 00482A68    push        dword ptr fs:[edx]
 00482A6B    mov         dword ptr fs:[edx],esp
 00482A6E    mov         eax,[007931B4]
 00482A73    mov         byte ptr [eax+5],1
 00482A77    mov         eax,[007931B4]
 00482A7C    movzx       edx,byte ptr [ebp-1]
 00482A80    mov         byte ptr [eax+20],dl
 00482A83    mov         edx,dword ptr ds:[7931BC]
 00482A89    mov         eax,[007931B4]
 00482A8E    call        TDragObject.ReleaseCapture
 00482A93    cmp         byte ptr ds:[7931D0],2
>00482A9A    jne         00482ABF
 00482A9C    mov         eax,[007931B4]
 00482AA1    mov         edx,dword ptr ds:[4768A4];TDragDockObject
 00482AA7    call        @AsClass
 00482AAC    mov         ebx,eax
 00482AAE    mov         eax,ebx
 00482AB0    mov         edx,dword ptr [eax]
 00482AB2    call        dword ptr [edx+34]
 00482AB5    cmp         dword ptr [ebx+14],0
 00482AB9    sete        al
 00482ABC    mov         byte ptr [ebx+74],al
 00482ABF    mov         eax,[007931B4]
 00482AC4    cmp         dword ptr [eax+14],0
>00482AC8    je          00482AF4
 00482ACA    mov         eax,[007931B4]
 00482ACF    mov         eax,dword ptr [eax+14]
 00482AD2    mov         edx,dword ptr ds:[47A16C];TControl
 00482AD8    call        @IsClass
 00482ADD    test        al,al
>00482ADF    je          00482AF4
 00482AE1    mov         eax,[007931B4]
 00482AE6    mov         edx,dword ptr [eax+18]
 00482AE9    mov         dword ptr [ebp-14],edx
 00482AEC    mov         edx,dword ptr [eax+1C]
 00482AEF    mov         dword ptr [ebp-10],edx
>00482AF2    jmp         00482B05
 00482AF4    mov         eax,[007931B4]
 00482AF9    mov         edx,dword ptr [eax+0C]
 00482AFC    mov         dword ptr [ebp-14],edx
 00482AFF    mov         edx,dword ptr [eax+10]
 00482B02    mov         dword ptr [ebp-10],edx
 00482B05    push        ebp
 00482B06    call        CheckUndock
 00482B0B    pop         ecx
 00482B0C    test        al,al
>00482B0E    je          00482B39
 00482B10    cmp         byte ptr ds:[7931D0],2
>00482B17    jne         00482B1F
 00482B19    cmp         byte ptr [ebx+74],0
>00482B1D    jne         00482B33
 00482B1F    cmp         byte ptr ds:[7931D0],0
>00482B26    je          00482B39
 00482B28    mov         al,1
 00482B2A    call        DoDragOver
 00482B2F    test        al,al
>00482B31    je          00482B39
 00482B33    cmp         byte ptr [ebp-1],0
>00482B37    jne         00482B3D
 00482B39    xor         eax,eax
>00482B3B    jmp         00482B3F
 00482B3D    mov         al,1
 00482B3F    mov         byte ptr [ebp-9],al
 00482B42    cmp         byte ptr ds:[7931D0],2
>00482B49    jne         00482B90
 00482B4B    cmp         byte ptr [ebp-9],0
>00482B4F    je          00482BB0
 00482B51    cmp         byte ptr [ebx+74],0
>00482B55    je          00482BB0
 00482B57    mov         eax,dword ptr [ebx+40]
 00482B5A    mov         dl,1
 00482B5C    call        GetParentForm
 00482B61    test        eax,eax
>00482B63    je          00482B77
 00482B65    mov         edx,dword ptr [eax+290]
 00482B6B    cmp         edx,dword ptr [ebx+40]
>00482B6E    jne         00482B77
 00482B70    xor         edx,edx
 00482B72    call        TCustomForm.SetActiveControl
 00482B77    mov         eax,[007931B4]
 00482B7C    push        eax
 00482B7D    xor         ecx,ecx
 00482B7F    mov         edx,0B03A
 00482B84    mov         eax,[007931B0]
 00482B89    call        TControl.Perform
>00482B8E    jmp         00482BB0
 00482B90    cmp         dword ptr ds:[7931D4],0
>00482B97    je          00482BA5
 00482B99    mov         eax,[007931D4]
 00482B9E    call        TDragImageList.EndDrag
>00482BA3    jmp         00482BB0
 00482BA5    mov         eax,[007931C8]
 00482BAA    push        eax
 00482BAB    call        user32.SetCursor
 00482BB0    xor         eax,eax
 00482BB2    mov         [007931B0],eax
 00482BB7    xor         eax,eax
 00482BB9    mov         [007931B4],eax
 00482BBE    cmp         dword ptr ds:[7931E0],0
>00482BC5    je          00482C6A
 00482BCB    mov         eax,[007931E0]
 00482BD0    cmp         dword ptr [eax+14],0
>00482BD4    je          00482C6A
 00482BDA    mov         al,3
 00482BDC    cmp         byte ptr [ebp-9],0
>00482BE0    jne         00482C04
 00482BE2    mov         al,4
 00482BE4    mov         edx,dword ptr ds:[7931E0]
 00482BEA    xor         ecx,ecx
 00482BEC    mov         dword ptr [edx+0C],ecx
 00482BEF    mov         edx,dword ptr ds:[7931E0]
 00482BF5    xor         ecx,ecx
 00482BF7    mov         dword ptr [edx+10],ecx
 00482BFA    xor         edx,edx
 00482BFC    mov         dword ptr [ebp-14],edx
 00482BFF    xor         edx,edx
 00482C01    mov         dword ptr [ebp-10],edx
 00482C04    mov         edx,dword ptr ds:[7931E0]
 00482C0A    mov         dword ptr [ebp-8],edx
 00482C0D    xor         edx,edx
 00482C0F    push        ebp
 00482C10    push        482C63
 00482C15    push        dword ptr fs:[edx]
 00482C18    mov         dword ptr fs:[edx],esp
 00482C1B    mov         edx,dword ptr ds:[7931E0]
 00482C21    mov         edx,dword ptr [edx+14]
 00482C24    push        edx
 00482C25    mov         edx,dword ptr ds:[7931E0]
 00482C2B    add         edx,0C
 00482C2E    push        edx
 00482C2F    mov         edx,dword ptr ds:[7931E0]
 00482C35    mov         edx,dword ptr [edx+8]
 00482C38    mov         ecx,dword ptr ds:[7931E0]
 00482C3E    xchg        eax,edx
 00482C3F    call        DragMessage
 00482C44    xor         eax,eax
 00482C46    pop         edx
 00482C47    pop         ecx
 00482C48    pop         ecx
 00482C49    mov         dword ptr fs:[eax],edx
 00482C4C    push        482C6A
 00482C51    cmp         dword ptr ds:[7931E0],0
>00482C58    jne         00482C62
 00482C5A    mov         eax,dword ptr [ebp-8]
 00482C5D    mov         [007931E0],eax
 00482C62    ret
>00482C63    jmp         @HandleFinally
>00482C68    jmp         00482C51
 00482C6A    xor         eax,eax
 00482C6C    pop         edx
 00482C6D    pop         ecx
 00482C6E    pop         ecx
 00482C6F    mov         dword ptr fs:[eax],edx
 00482C72    push        482CC6
 00482C77    mov         eax,[007931DC]
 00482C7C    call        TObject.Free
 00482C81    xor         eax,eax
 00482C83    mov         [007931DC],eax
 00482C88    cmp         dword ptr ds:[7931E0],0
>00482C8F    je          00482CB7
 00482C91    mov         eax,[007931E0]
 00482C96    mov         byte ptr [eax+5],0
 00482C9A    mov         eax,dword ptr [ebp-10]
 00482C9D    push        eax
 00482C9E    movzx       eax,byte ptr [ebp-9]
 00482CA2    push        eax
 00482CA3    mov         eax,[007931E0]
 00482CA8    mov         edx,dword ptr [eax+14]
 00482CAB    mov         ecx,dword ptr [ebp-14]
 00482CAE    mov         eax,[007931E0]
 00482CB3    mov         ebx,dword ptr [eax]
 00482CB5    call        dword ptr [ebx]
 00482CB7    xor         eax,eax
 00482CB9    mov         [007931B4],eax
 00482CBE    ret
>00482CBF    jmp         @HandleFinally
>00482CC4    jmp         00482C77
 00482CC6    xor         eax,eax
 00482CC8    pop         edx
 00482CC9    pop         ecx
 00482CCA    pop         ecx
 00482CCB    mov         dword ptr fs:[eax],edx
 00482CCE    push        482D38
 00482CD3    xor         eax,eax
 00482CD5    mov         [007931B0],eax
 00482CDA    cmp         dword ptr ds:[7931E0],0
>00482CE1    je          00482D29
 00482CE3    mov         eax,[007931E0]
 00482CE8    mov         edx,dword ptr ds:[476798];TDragControlObjectEx
 00482CEE    call        @IsClass
 00482CF3    test        al,al
>00482CF5    jne         00482D1F
 00482CF7    mov         eax,[007931E0]
 00482CFC    mov         edx,dword ptr ds:[784A2C];gvar_00784A2C
 00482D02    call        @IsClass
 00482D07    test        al,al
>00482D09    jne         00482D1F
 00482D0B    mov         eax,[007931E0]
 00482D10    mov         edx,dword ptr ds:[476C1C];TDragDockObjectEx
 00482D16    call        @IsClass
 00482D1B    test        al,al
>00482D1D    je          00482D29
 00482D1F    mov         eax,[007931E0]
 00482D24    call        TObject.Free
 00482D29    mov         byte ptr ds:[7931D0],0
 00482D30    ret
>00482D31    jmp         @HandleFinally
>00482D36    jmp         00482CD3
 00482D38    pop         ebx
 00482D39    mov         esp,ebp
 00482D3B    pop         ebp
 00482D3C    ret
*}
end;

//00482D40
procedure CancelDrag;
begin
{*
 00482D40    cmp         dword ptr ds:[7931B4],0
>00482D47    je          00482D50
 00482D49    xor         eax,eax
 00482D4B    call        DragDone
 00482D50    xor         eax,eax
 00482D52    mov         [007931B0],eax
 00482D57    ret
*}
end;

//00482D58
function FindVCLWindow(const Pos:TPoint):TWinControl;
begin
{*
 00482D58    push        ebx
 00482D59    push        esi
 00482D5A    push        dword ptr [eax+4]
 00482D5D    push        dword ptr [eax]
 00482D5F    call        user32.WindowFromPoint
 00482D64    mov         ebx,eax
 00482D66    xor         esi,esi
 00482D68    test        ebx,ebx
>00482D6A    je          00482D85
 00482D6C    mov         eax,ebx
 00482D6E    call        FindControl
 00482D73    mov         esi,eax
 00482D75    test        esi,esi
>00482D77    jne         00482D85
 00482D79    push        ebx
 00482D7A    call        user32.GetParent
 00482D7F    mov         ebx,eax
 00482D81    test        ebx,ebx
>00482D83    jne         00482D6C
 00482D85    mov         eax,esi
 00482D87    pop         esi
 00482D88    pop         ebx
 00482D89    ret
*}
end;

//00482D8C
function FindDragTarget(const Pos:TPoint; AllowDisabled:Boolean):TControl;
begin
{*
 00482D8C    push        ebx
 00482D8D    push        esi
 00482D8E    push        edi
 00482D8F    push        ebp
 00482D90    add         esp,0FFFFFFF8
 00482D93    mov         ebx,edx
 00482D95    mov         edi,eax
 00482D97    xor         esi,esi
 00482D99    mov         eax,edi
 00482D9B    call        FindVCLWindow
 00482DA0    mov         ebp,eax
 00482DA2    test        ebp,ebp
>00482DA4    je          00482DCC
 00482DA6    mov         esi,ebp
 00482DA8    push        0
 00482DAA    push        0
 00482DAC    lea         ecx,[esp+8]
 00482DB0    mov         edx,edi
 00482DB2    mov         eax,ebp
 00482DB4    call        TControl.ScreenToClient
 00482DB9    lea         edx,[esp+8]
 00482DBD    mov         ecx,ebx
 00482DBF    mov         eax,ebp
 00482DC1    call        TWinControl.ControlAtPos
 00482DC6    test        eax,eax
>00482DC8    je          00482DCC
 00482DCA    mov         esi,eax
 00482DCC    mov         eax,esi
 00482DCE    pop         ecx
 00482DCF    pop         edx
 00482DD0    pop         ebp
 00482DD1    pop         edi
 00482DD2    pop         esi
 00482DD3    pop         ebx
 00482DD4    ret
*}
end;

//00482DD8
procedure ListAdd(var List:TList; Item:Pointer);
begin
{*
 00482DD8    push        ebx
 00482DD9    push        esi
 00482DDA    mov         esi,edx
 00482DDC    mov         ebx,eax
 00482DDE    cmp         dword ptr [ebx],0
>00482DE1    jne         00482DF1
 00482DE3    mov         dl,1
 00482DE5    mov         eax,[00439644];TList
 00482DEA    call        TObject.Create
 00482DEF    mov         dword ptr [ebx],eax
 00482DF1    mov         eax,dword ptr [ebx]
 00482DF3    mov         edx,esi
 00482DF5    call        TList.Add
 00482DFA    pop         esi
 00482DFB    pop         ebx
 00482DFC    ret
*}
end;

//00482E00
procedure ListRemove(var List:TList; Item:Pointer);
begin
{*
 00482E00    push        ebx
 00482E01    push        esi
 00482E02    push        edi
 00482E03    push        ebp
 00482E04    mov         edi,edx
 00482E06    mov         ebx,eax
 00482E08    mov         eax,dword ptr [ebx]
 00482E0A    mov         esi,dword ptr [eax+8]
 00482E0D    test        esi,esi
>00482E0F    jle         00482E37
 00482E11    mov         ebp,esi
 00482E13    dec         ebp
 00482E14    mov         edx,ebp
 00482E16    mov         eax,dword ptr [ebx]
 00482E18    call        TList.Get
 00482E1D    cmp         edi,eax
>00482E1F    jne         00482E2C
 00482E21    mov         edx,ebp
 00482E23    mov         eax,dword ptr [ebx]
 00482E25    call        TList.Delete
>00482E2A    jmp         00482E37
 00482E2C    mov         eax,dword ptr [ebx]
 00482E2E    xor         ecx,ecx
 00482E30    mov         edx,edi
 00482E32    call        TList.RemoveItem
 00482E37    mov         eax,dword ptr [ebx]
 00482E39    cmp         dword ptr [eax+8],0
>00482E3D    jne         00482E4A
 00482E3F    mov         eax,dword ptr [ebx]
 00482E41    call        TObject.Free
 00482E46    xor         eax,eax
 00482E48    mov         dword ptr [ebx],eax
 00482E4A    pop         ebp
 00482E4B    pop         edi
 00482E4C    pop         esi
 00482E4D    pop         ebx
 00482E4E    ret
*}
end;

//00482E50
procedure MoveWindowOrg(DC:HDC; DX:Integer; DY:Integer);
begin
{*
 00482E50    push        ebx
 00482E51    push        esi
 00482E52    push        edi
 00482E53    add         esp,0FFFFFFF8
 00482E56    mov         edi,ecx
 00482E58    mov         esi,edx
 00482E5A    mov         ebx,eax
 00482E5C    push        esp
 00482E5D    push        ebx
 00482E5E    call        gdi32.GetWindowOrgEx
 00482E63    push        0
 00482E65    mov         eax,dword ptr [esp+8]
 00482E69    sub         eax,edi
 00482E6B    push        eax
 00482E6C    mov         eax,dword ptr [esp+8]
 00482E70    sub         eax,esi
 00482E72    push        eax
 00482E73    push        ebx
 00482E74    call        gdi32.SetWindowOrgEx
 00482E79    pop         ecx
 00482E7A    pop         edx
 00482E7B    pop         edi
 00482E7C    pop         esi
 00482E7D    pop         ebx
 00482E7E    ret
*}
end;

//00482E80
procedure FreeDeviceContext;
begin
{*
 00482E80    push        ebp
 00482E81    mov         ebp,esp
 00482E83    add         esp,0FFFFFFF0
 00482E86    mov         eax,[007931E4]
 00482E8B    call        TThreadList.LockList
 00482E90    mov         dword ptr [ebp-8],eax
 00482E93    xor         edx,edx
 00482E95    push        ebp
 00482E96    push        482F33
 00482E9B    push        dword ptr fs:[edx]
 00482E9E    mov         dword ptr fs:[edx],esp
 00482EA1    mov         eax,dword ptr [ebp-8]
 00482EA4    mov         eax,dword ptr [eax+8]
 00482EA7    dec         eax
 00482EA8    test        eax,eax
>00482EAA    jl          00482F18
 00482EAC    inc         eax
 00482EAD    mov         dword ptr [ebp-0C],eax
 00482EB0    mov         dword ptr [ebp-4],0
 00482EB7    mov         edx,dword ptr [ebp-4]
 00482EBA    mov         eax,dword ptr [ebp-8]
 00482EBD    call        TList.Get
 00482EC2    mov         dword ptr [ebp-10],eax
 00482EC5    mov         eax,dword ptr [ebp-10]
 00482EC8    call        TCustomCanvas.TryLock
 00482ECD    test        al,al
>00482ECF    je          00482F10
 00482ED1    xor         eax,eax
 00482ED3    push        ebp
 00482ED4    push        482F09
 00482ED9    push        dword ptr fs:[eax]
 00482EDC    mov         dword ptr fs:[eax],esp
 00482EDF    mov         eax,dword ptr [ebp-10]
 00482EE2    call        TControlCanvas.FreeHandle
 00482EE7    call        @TryFinallyExit
 00482EEC    call        @TryFinallyExit
>00482EF1    jmp         00482F3A
 00482EF3    xor         eax,eax
 00482EF5    pop         edx
 00482EF6    pop         ecx
 00482EF7    pop         ecx
 00482EF8    mov         dword ptr fs:[eax],edx
 00482EFB    push        482F10
 00482F00    mov         eax,dword ptr [ebp-10]
 00482F03    call        TCustomCanvas.Unlock
 00482F08    ret
>00482F09    jmp         @HandleFinally
>00482F0E    jmp         00482F00
 00482F10    inc         dword ptr [ebp-4]
 00482F13    dec         dword ptr [ebp-0C]
>00482F16    jne         00482EB7
 00482F18    xor         eax,eax
 00482F1A    pop         edx
 00482F1B    pop         ecx
 00482F1C    pop         ecx
 00482F1D    mov         dword ptr fs:[eax],edx
 00482F20    push        482F3A
 00482F25    mov         eax,[007931E4]
 00482F2A    mov         eax,dword ptr [eax+8]
 00482F2D    call        TMonitor.Exit
 00482F32    ret
>00482F33    jmp         @HandleFinally
>00482F38    jmp         00482F25
 00482F3A    mov         esp,ebp
 00482F3C    pop         ebp
 00482F3D    ret
*}
end;

//00482F40
procedure FreeDeviceContexts;
begin
{*
 00482F40    push        ebp
 00482F41    mov         ebp,esp
 00482F43    add         esp,0FFFFFFF4
 00482F46    mov         eax,[007931E4]
 00482F4B    call        TThreadList.LockList
 00482F50    mov         dword ptr [ebp-8],eax
 00482F53    xor         edx,edx
 00482F55    push        ebp
 00482F56    push        482FE1
 00482F5B    push        dword ptr fs:[edx]
 00482F5E    mov         dword ptr fs:[edx],esp
 00482F61    mov         eax,dword ptr [ebp-8]
 00482F64    mov         eax,dword ptr [eax+8]
 00482F67    dec         eax
 00482F68    cmp         eax,0
>00482F6B    jl          00482FC6
 00482F6D    mov         dword ptr [ebp-4],eax
 00482F70    mov         edx,dword ptr [ebp-4]
 00482F73    mov         eax,dword ptr [ebp-8]
 00482F76    call        TList.Get
 00482F7B    mov         dword ptr [ebp-0C],eax
 00482F7E    mov         eax,dword ptr [ebp-0C]
 00482F81    call        TCustomCanvas.TryLock
 00482F86    test        al,al
>00482F88    je          00482FBD
 00482F8A    xor         eax,eax
 00482F8C    push        ebp
 00482F8D    push        482FB6
 00482F92    push        dword ptr fs:[eax]
 00482F95    mov         dword ptr fs:[eax],esp
 00482F98    mov         eax,dword ptr [ebp-0C]
 00482F9B    call        TControlCanvas.FreeHandle
 00482FA0    xor         eax,eax
 00482FA2    pop         edx
 00482FA3    pop         ecx
 00482FA4    pop         ecx
 00482FA5    mov         dword ptr fs:[eax],edx
 00482FA8    push        482FBD
 00482FAD    mov         eax,dword ptr [ebp-0C]
 00482FB0    call        TCustomCanvas.Unlock
 00482FB5    ret
>00482FB6    jmp         @HandleFinally
>00482FBB    jmp         00482FAD
 00482FBD    dec         dword ptr [ebp-4]
 00482FC0    cmp         dword ptr [ebp-4],0FFFFFFFF
>00482FC4    jne         00482F70
 00482FC6    xor         eax,eax
 00482FC8    pop         edx
 00482FC9    pop         ecx
 00482FCA    pop         ecx
 00482FCB    mov         dword ptr fs:[eax],edx
 00482FCE    push        482FE8
 00482FD3    mov         eax,[007931E4]
 00482FD8    mov         eax,dword ptr [eax+8]
 00482FDB    call        TMonitor.Exit
 00482FE0    ret
>00482FE1    jmp         @HandleFinally
>00482FE6    jmp         00482FD3
 00482FE8    mov         esp,ebp
 00482FEA    pop         ebp
 00482FEB    ret
*}
end;

//00482FEC
destructor TControlCanvas.Destroy();
begin
{*
 00482FEC    push        ebx
 00482FED    push        esi
 00482FEE    call        @BeforeDestruction
 00482FF3    mov         ebx,edx
 00482FF5    mov         esi,eax
 00482FF7    mov         eax,esi
 00482FF9    call        TControlCanvas.FreeHandle
 00482FFE    mov         edx,ebx
 00483000    and         dl,0FC
 00483003    mov         eax,esi
 00483005    call        TCanvas.Destroy
 0048300A    test        bl,bl
>0048300C    jle         00483015
 0048300E    mov         eax,esi
 00483010    call        @ClassDestroy
 00483015    pop         esi
 00483016    pop         ebx
 00483017    ret
*}
end;

//00483018
procedure TControlCanvas.CreateHandle;
begin
{*
 00483018    push        ebp
 00483019    mov         ebp,esp
 0048301B    push        ecx
 0048301C    push        ebx
 0048301D    mov         dword ptr [ebp-4],eax
 00483020    mov         eax,dword ptr [ebp-4]
 00483023    cmp         dword ptr [eax+58],0
>00483027    jne         00483036
 00483029    mov         eax,dword ptr [ebp-4]
 0048302C    call        TCanvas.CreateHandle
>00483031    jmp         004830E6
 00483036    mov         eax,dword ptr [ebp-4]
 00483039    cmp         dword ptr [eax+5C],0
>0048303D    jne         0048305F
 0048303F    mov         eax,dword ptr [ebp-4]
 00483042    mov         eax,dword ptr [eax+58]
 00483045    mov         edx,dword ptr ds:[47C4E8];TWinControl
 0048304B    call        @IsClass
 00483050    test        al,al
>00483052    je          0048305F
 00483054    mov         eax,dword ptr [ebp-4]
 00483057    mov         eax,dword ptr [eax+58]
 0048305A    call        TWinControl.HandleNeeded
 0048305F    mov         eax,dword ptr [ebp-4]
 00483062    cmp         dword ptr [eax+5C],0
>00483066    jne         004830D0
 00483068    mov         eax,[007931E4]
 0048306D    call        TThreadList.LockList
 00483072    mov         ebx,eax
 00483074    xor         edx,edx
 00483076    push        ebp
 00483077    push        4830C9
 0048307C    push        dword ptr fs:[edx]
 0048307F    mov         dword ptr fs:[edx],esp
 00483082    cmp         dword ptr [ebx+8],4
>00483086    jl          0048308D
 00483088    call        FreeDeviceContext
 0048308D    mov         eax,dword ptr [ebp-4]
 00483090    lea         edx,[eax+60]
 00483093    mov         eax,dword ptr [ebp-4]
 00483096    mov         eax,dword ptr [eax+58]
 00483099    mov         ecx,dword ptr [eax]
 0048309B    call        dword ptr [ecx+58]
 0048309E    mov         edx,dword ptr [ebp-4]
 004830A1    mov         dword ptr [edx+5C],eax
 004830A4    mov         edx,dword ptr [ebp-4]
 004830A7    mov         eax,ebx
 004830A9    call        TList.Add
 004830AE    xor         eax,eax
 004830B0    pop         edx
 004830B1    pop         ecx
 004830B2    pop         ecx
 004830B3    mov         dword ptr fs:[eax],edx
 004830B6    push        4830D0
 004830BB    mov         eax,[007931E4]
 004830C0    mov         eax,dword ptr [eax+8]
 004830C3    call        TMonitor.Exit
 004830C8    ret
>004830C9    jmp         @HandleFinally
>004830CE    jmp         004830BB
 004830D0    mov         eax,dword ptr [ebp-4]
 004830D3    mov         edx,dword ptr [eax+5C]
 004830D6    mov         eax,dword ptr [ebp-4]
 004830D9    call        TCanvas.SetHandle
 004830DE    mov         eax,dword ptr [ebp-4]
 004830E1    call        TControlCanvas.UpdateTextFlags
 004830E6    pop         ebx
 004830E7    pop         ecx
 004830E8    pop         ebp
 004830E9    ret
*}
end;

//004830EC
procedure TControlCanvas.FreeHandle;
begin
{*
 004830EC    push        ebx
 004830ED    mov         ebx,eax
 004830EF    cmp         dword ptr [ebx+5C],0
>004830F3    je          0048311E
 004830F5    xor         edx,edx
 004830F7    mov         eax,ebx
 004830F9    call        TCanvas.SetHandle
 004830FE    mov         cl,1
 00483100    mov         edx,ebx
 00483102    mov         eax,[007931E4]
 00483107    call        TThreadList.RemoveItem
 0048310C    mov         eax,dword ptr [ebx+5C]
 0048310F    push        eax
 00483110    mov         eax,dword ptr [ebx+60]
 00483113    push        eax
 00483114    call        user32.ReleaseDC
 00483119    xor         eax,eax
 0048311B    mov         dword ptr [ebx+5C],eax
 0048311E    pop         ebx
 0048311F    ret
*}
end;

//00483120
procedure TControlCanvas.SetControl(AControl:TControl);
begin
{*
 00483120    push        ebx
 00483121    push        esi
 00483122    mov         esi,edx
 00483124    mov         ebx,eax
 00483126    cmp         esi,dword ptr [ebx+58]
>00483129    je          00483135
 0048312B    mov         eax,ebx
 0048312D    call        TControlCanvas.FreeHandle
 00483132    mov         dword ptr [ebx+58],esi
 00483135    pop         esi
 00483136    pop         ebx
 00483137    ret
*}
end;

//00483138
procedure TControlCanvas.UpdateTextFlags;
begin
{*
 00483138    push        ebx
 00483139    push        esi
 0048313A    mov         ebx,eax
 0048313C    mov         esi,dword ptr [ebx+58]
 0048313F    test        esi,esi
>00483141    je          0048315E
 00483143    mov         eax,esi
 00483145    call        TControl.UseRightToLeftReading
 0048314A    test        al,al
>0048314C    je          00483157
 0048314E    or          dword ptr [ebx+18],80
>00483155    jmp         0048315E
 00483157    and         dword ptr [ebx+18],0FFFFFF7F
 0048315E    pop         esi
 0048315F    pop         ebx
 00483160    ret
*}
end;

//00483164
constructor TSizeConstraints.Create;
begin
{*
 00483164    push        ebx
 00483165    push        esi
 00483166    push        edi
 00483167    test        dl,dl
>00483169    je          00483173
 0048316B    add         esp,0FFFFFFF0
 0048316E    call        @ClassCreate
 00483173    mov         esi,ecx
 00483175    mov         ebx,edx
 00483177    mov         edi,eax
 00483179    xor         edx,edx
 0048317B    mov         eax,edi
 0048317D    call        TObject.Create
 00483182    mov         dword ptr [edi+4],esi
 00483185    mov         eax,edi
 00483187    test        bl,bl
>00483189    je          0048319A
 0048318B    call        @AfterConstruction
 00483190    pop         dword ptr fs:[0]
 00483197    add         esp,0C
 0048319A    mov         eax,edi
 0048319C    pop         edi
 0048319D    pop         esi
 0048319E    pop         ebx
 0048319F    ret
*}
end;

//004831A0
procedure TSizeConstraints.AssignTo(Dest:TPersistent);
begin
{*
 004831A0    push        ebx
 004831A1    push        esi
 004831A2    mov         ebx,edx
 004831A4    mov         esi,eax
 004831A6    mov         eax,ebx
 004831A8    mov         edx,dword ptr ds:[47761C];TSizeConstraints
 004831AE    call        @IsClass
 004831B3    test        al,al
>004831B5    je          004831D9
 004831B7    mov         eax,ebx
 004831B9    mov         edx,dword ptr [esi+10]
 004831BC    mov         dword ptr [eax+10],edx
 004831BF    mov         edx,dword ptr [esi+8]
 004831C2    mov         dword ptr [eax+8],edx
 004831C5    mov         edx,dword ptr [esi+14]
 004831C8    mov         dword ptr [eax+14],edx
 004831CB    mov         edx,dword ptr [esi+0C]
 004831CE    mov         dword ptr [eax+0C],edx
 004831D1    mov         edx,dword ptr [eax]
 004831D3    call        dword ptr [edx+0C]
 004831D6    pop         esi
 004831D7    pop         ebx
 004831D8    ret
 004831D9    mov         edx,ebx
 004831DB    mov         eax,esi
 004831DD    call        TPersistent.AssignTo
 004831E2    pop         esi
 004831E3    pop         ebx
 004831E4    ret
*}
end;

//004831E8
procedure TSizeConstraints.SetConstraints(Index:Integer; Value:TConstraintSize);
begin
{*
 004831E8    push        esi
 004831E9    mov         esi,eax
 004831EB    sub         edx,1
>004831EE    jb          004831FA
>004831F0    je          00483217
 004831F2    dec         edx
>004831F3    je          00483234
 004831F5    dec         edx
>004831F6    je          00483253
>004831F8    jmp         00483270
 004831FA    cmp         ecx,dword ptr [esi+8]
>004831FD    je          00483270
 004831FF    mov         dword ptr [esi+8],ecx
 00483202    test        ecx,ecx
>00483204    jbe         0048320E
 00483206    cmp         ecx,dword ptr [esi+10]
>00483209    jae         0048320E
 0048320B    mov         dword ptr [esi+10],ecx
 0048320E    mov         eax,esi
 00483210    mov         edx,dword ptr [eax]
 00483212    call        dword ptr [edx+0C]
 00483215    pop         esi
 00483216    ret
 00483217    cmp         ecx,dword ptr [esi+0C]
>0048321A    je          00483270
 0048321C    mov         dword ptr [esi+0C],ecx
 0048321F    test        ecx,ecx
>00483221    jbe         0048322B
 00483223    cmp         ecx,dword ptr [esi+14]
>00483226    jae         0048322B
 00483228    mov         dword ptr [esi+14],ecx
 0048322B    mov         eax,esi
 0048322D    mov         edx,dword ptr [eax]
 0048322F    call        dword ptr [edx+0C]
 00483232    pop         esi
 00483233    ret
 00483234    cmp         ecx,dword ptr [esi+10]
>00483237    je          00483270
 00483239    mov         dword ptr [esi+10],ecx
 0048323C    mov         eax,dword ptr [esi+8]
 0048323F    test        eax,eax
>00483241    jbe         0048324A
 00483243    cmp         eax,ecx
>00483245    jae         0048324A
 00483247    mov         dword ptr [esi+8],ecx
 0048324A    mov         eax,esi
 0048324C    mov         edx,dword ptr [eax]
 0048324E    call        dword ptr [edx+0C]
 00483251    pop         esi
 00483252    ret
 00483253    cmp         ecx,dword ptr [esi+14]
>00483256    je          00483270
 00483258    mov         dword ptr [esi+14],ecx
 0048325B    mov         eax,dword ptr [esi+0C]
 0048325E    test        eax,eax
>00483260    jbe         00483269
 00483262    cmp         eax,ecx
>00483264    jae         00483269
 00483266    mov         dword ptr [esi+0C],ecx
 00483269    mov         eax,esi
 0048326B    mov         edx,dword ptr [eax]
 0048326D    call        dword ptr [edx+0C]
 00483270    pop         esi
 00483271    ret
*}
end;

//00483274
procedure TMargins.Change;
begin
{*
 00483274    push        ebx
 00483275    cmp         word ptr [eax+1A],0
>0048327A    je          00483286
 0048327C    mov         ebx,eax
 0048327E    mov         edx,eax
 00483280    mov         eax,dword ptr [ebx+1C]
 00483283    call        dword ptr [ebx+18]
 00483286    pop         ebx
 00483287    ret
*}
end;

//00483288
procedure TControlActionLink.AssignClient(AClient:TObject);
begin
{*
 00483288    push        ebx
 00483289    push        esi
 0048328A    mov         esi,edx
 0048328C    mov         ebx,eax
 0048328E    mov         eax,esi
 00483290    mov         edx,dword ptr ds:[47A16C];TControl
 00483296    call        @AsClass
 0048329B    mov         dword ptr [ebx+18],eax
 0048329E    pop         esi
 0048329F    pop         ebx
 004832A0    ret
*}
end;

//004832A4
function TControlActionLink.DoShowHint(var HintStr:UnicodeString):Boolean;
begin
{*
 004832A4    push        ebp
 004832A5    mov         ebp,esp
 004832A7    add         esp,0FFFFFFE4
 004832AA    push        ebx
 004832AB    push        esi
 004832AC    push        edi
 004832AD    xor         ecx,ecx
 004832AF    mov         dword ptr [ebp-8],ecx
 004832B2    mov         dword ptr [ebp-1C],ecx
 004832B5    mov         edi,edx
 004832B7    mov         ebx,eax
 004832B9    xor         eax,eax
 004832BB    push        ebp
 004832BC    push        483371
 004832C1    push        dword ptr fs:[eax]
 004832C4    mov         dword ptr fs:[eax],esp
 004832C7    mov         byte ptr [ebp-1],1
 004832CB    mov         eax,dword ptr [ebx+10]
 004832CE    mov         edx,dword ptr ds:[4743FC];TCustomAction
 004832D4    call        @IsClass
 004832D9    test        al,al
>004832DB    je          00483353
 004832DD    mov         edx,edi
 004832DF    mov         eax,dword ptr [ebx+10]
 004832E2    mov         si,0FFEF
 004832E6    call        @CallDynaInst
 004832EB    test        al,al
>004832ED    je          00483353
 004832EF    mov         eax,[0078D590];^Application:TApplication
 004832F4    mov         eax,dword ptr [eax]
 004832F6    cmp         byte ptr [eax+7C],0
>004832FA    je          00483353
 004832FC    mov         eax,dword ptr [ebx+10]
 004832FF    cmp         word ptr [eax+84],0
>00483307    je          00483353
 00483309    cmp         dword ptr [edi],0
>0048330C    je          00483353
 0048330E    lea         eax,[ebp-8]
 00483311    push        eax
 00483312    mov         eax,dword ptr [edi]
 00483314    mov         dword ptr [ebp-18],eax
 00483317    mov         byte ptr [ebp-14],11
 0048331B    lea         edx,[ebp-1C]
 0048331E    mov         eax,dword ptr [ebx+10]
 00483321    movzx       eax,word ptr [eax+84]
 00483328    call        ShortCutToText
 0048332D    mov         eax,dword ptr [ebp-1C]
 00483330    mov         dword ptr [ebp-10],eax
 00483333    mov         byte ptr [ebp-0C],11
 00483337    lea         edx,[ebp-18]
 0048333A    mov         ecx,1
 0048333F    mov         eax,483390;'%s (%s)'
 00483344    call        Format
 00483349    mov         edx,dword ptr [ebp-8]
 0048334C    mov         eax,edi
 0048334E    call        @UStrAsg
 00483353    xor         eax,eax
 00483355    pop         edx
 00483356    pop         ecx
 00483357    pop         ecx
 00483358    mov         dword ptr fs:[eax],edx
 0048335B    push        483378
 00483360    lea         eax,[ebp-1C]
 00483363    call        @UStrClr
 00483368    lea         eax,[ebp-8]
 0048336B    call        @UStrClr
 00483370    ret
>00483371    jmp         @HandleFinally
>00483376    jmp         00483360
 00483378    movzx       eax,byte ptr [ebp-1]
 0048337C    pop         edi
 0048337D    pop         esi
 0048337E    pop         ebx
 0048337F    mov         esp,ebp
 00483381    pop         ebp
 00483382    ret
*}
end;

//004833A0
function TControlActionLink.IsCaptionLinked:Boolean;
begin
{*
 004833A0    push        ebp
 004833A1    mov         ebp,esp
 004833A3    push        0
 004833A5    push        ebx
 004833A6    mov         ebx,eax
 004833A8    xor         eax,eax
 004833AA    push        ebp
 004833AB    push        4833FA
 004833B0    push        dword ptr fs:[eax]
 004833B3    mov         dword ptr fs:[eax],esp
 004833B6    mov         eax,ebx
 004833B8    call        TActionLink.IsCaptionLinked
 004833BD    test        al,al
>004833BF    je          004833DC
 004833C1    lea         edx,[ebp-4]
 004833C4    mov         eax,dword ptr [ebx+18]
 004833C7    call        TControl.GetText
 004833CC    mov         eax,dword ptr [ebp-4]
 004833CF    mov         edx,dword ptr [ebx+10]
 004833D2    mov         edx,dword ptr [edx+64]
 004833D5    call        @UStrEqual
>004833DA    je          004833E0
 004833DC    xor         eax,eax
>004833DE    jmp         004833E2
 004833E0    mov         al,1
 004833E2    mov         ebx,eax
 004833E4    xor         eax,eax
 004833E6    pop         edx
 004833E7    pop         ecx
 004833E8    pop         ecx
 004833E9    mov         dword ptr fs:[eax],edx
 004833EC    push        483401
 004833F1    lea         eax,[ebp-4]
 004833F4    call        @UStrClr
 004833F9    ret
>004833FA    jmp         @HandleFinally
>004833FF    jmp         004833F1
 00483401    mov         eax,ebx
 00483403    pop         ebx
 00483404    pop         ecx
 00483405    pop         ebp
 00483406    ret
*}
end;

//00483408
function TControlActionLink.IsDropdownMenuLinked:Boolean;
begin
{*
 00483408    push        ebx
 00483409    mov         ebx,eax
 0048340B    mov         eax,dword ptr [ebx+10]
 0048340E    mov         edx,dword ptr ds:[784A2C];gvar_00784A2C
 00483414    call        @IsClass
 00483419    pop         ebx
 0048341A    ret
*}
end;

//0048341C
function TControlActionLink.IsEnabledLinked:Boolean;
begin
{*
 0048341C    push        ebx
 0048341D    mov         ebx,eax
 0048341F    mov         eax,ebx
 00483421    call        TActionLink.IsEnabledLinked
 00483426    test        al,al
>00483428    je          0048343A
 0048342A    mov         eax,dword ptr [ebx+18]
 0048342D    mov         edx,dword ptr [eax]
 0048342F    call        dword ptr [edx+5C]
 00483432    mov         edx,dword ptr [ebx+10]
 00483435    cmp         al,byte ptr [edx+6A]
>00483438    je          0048343E
 0048343A    xor         eax,eax
 0048343C    pop         ebx
 0048343D    ret
 0048343E    mov         al,1
 00483440    pop         ebx
 00483441    ret
*}
end;

//00483444
function TControlActionLink.IsEnableDropdownLinked:Boolean;
begin
{*
 00483444    push        ebx
 00483445    mov         ebx,eax
 00483447    mov         eax,dword ptr [ebx+10]
 0048344A    mov         edx,dword ptr ds:[784A2C];gvar_00784A2C
 00483450    call        @IsClass
 00483455    pop         ebx
 00483456    ret
*}
end;

//00483458
function TControlActionLink.IsHintLinked:Boolean;
begin
{*
 00483458    push        ebx
 00483459    mov         ebx,eax
 0048345B    mov         eax,ebx
 0048345D    call        TActionLink.IsHintLinked
 00483462    test        al,al
>00483464    je          0048347C
 00483466    mov         eax,dword ptr [ebx+18]
 00483469    mov         eax,dword ptr [eax+80]
 0048346F    mov         edx,dword ptr [ebx+10]
 00483472    mov         edx,dword ptr [edx+7C]
 00483475    call        @UStrEqual
>0048347A    je          00483480
 0048347C    xor         eax,eax
 0048347E    pop         ebx
 0048347F    ret
 00483480    mov         al,1
 00483482    pop         ebx
 00483483    ret
*}
end;

//00483484
function TControlActionLink.IsPopupMenuLinked:Boolean;
begin
{*
 00483484    push        ebx
 00483485    push        esi
 00483486    mov         ebx,eax
 00483488    mov         esi,dword ptr [ebx+10]
 0048348B    mov         eax,esi
 0048348D    mov         edx,dword ptr ds:[784A2C];gvar_00784A2C
 00483493    call        @IsClass
 00483498    test        al,al
>0048349A    je          004834AA
 0048349C    mov         eax,dword ptr [ebx+18]
 0048349F    mov         eax,dword ptr [eax+7C]
 004834A2    cmp         eax,dword ptr [esi+0A4]
>004834A8    je          004834AF
 004834AA    xor         eax,eax
 004834AC    pop         esi
 004834AD    pop         ebx
 004834AE    ret
 004834AF    mov         al,1
 004834B1    pop         esi
 004834B2    pop         ebx
 004834B3    ret
*}
end;

//004834B4
function TControlActionLink.IsVisibleLinked:Boolean;
begin
{*
 004834B4    push        ebx
 004834B5    mov         ebx,eax
 004834B7    mov         eax,ebx
 004834B9    call        TActionLink.IsVisibleLinked
 004834BE    test        al,al
>004834C0    je          004834D4
 004834C2    mov         eax,dword ptr [ebx+18]
 004834C5    movzx       eax,byte ptr [eax+59]
 004834C9    mov         edx,dword ptr [ebx+10]
 004834CC    cmp         al,byte ptr [edx+86]
>004834D2    je          004834D8
 004834D4    xor         eax,eax
 004834D6    pop         ebx
 004834D7    ret
 004834D8    mov         al,1
 004834DA    pop         ebx
 004834DB    ret
*}
end;

//004834DC
function TControlActionLink.IsOnExecuteLinked:Boolean;
begin
{*
 004834DC    push        ebx
 004834DD    mov         ebx,eax
 004834DF    mov         eax,ebx
 004834E1    call        TBasicActionLink.IsOnExecuteLinked
 004834E6    test        al,al
>004834E8    je          004834FE
 004834EA    mov         eax,dword ptr [ebx+18]
 004834ED    mov         eax,dword ptr [eax+110]
 004834F3    mov         edx,dword ptr [ebx+10]
 004834F6    cmp         eax,dword ptr [edx+40]
 004834F9    sete        al
 004834FC    pop         ebx
 004834FD    ret
 004834FE    xor         eax,eax
 00483500    pop         ebx
 00483501    ret
*}
end;

//00483504
procedure TControlActionLink.SetCaption(const Value:UnicodeString);
begin
{*
 00483504    push        ebx
 00483505    push        esi
 00483506    mov         esi,edx
 00483508    mov         ebx,eax
 0048350A    mov         eax,ebx
 0048350C    mov         edx,dword ptr [eax]
 0048350E    call        dword ptr [edx+20]
 00483511    test        al,al
>00483513    je          0048351F
 00483515    mov         edx,esi
 00483517    mov         eax,dword ptr [ebx+18]
 0048351A    call        TControl.SetText
 0048351F    pop         esi
 00483520    pop         ebx
 00483521    ret
*}
end;

//00483524
procedure sub_00483524;
begin
{*
 00483524    ret
*}
end;

//00483528
procedure TControlActionLink.SetEnabled(Value:Boolean);
begin
{*
 00483528    push        ebx
 00483529    push        esi
 0048352A    mov         ebx,edx
 0048352C    mov         esi,eax
 0048352E    mov         eax,esi
 00483530    mov         edx,dword ptr [eax]
 00483532    call        dword ptr [edx+28]
 00483535    test        al,al
>00483537    je          00483543
 00483539    mov         edx,ebx
 0048353B    mov         eax,dword ptr [esi+18]
 0048353E    mov         ecx,dword ptr [eax]
 00483540    call        dword ptr [ecx+74]
 00483543    pop         esi
 00483544    pop         ebx
 00483545    ret
*}
end;

//00483548
procedure sub_00483548;
begin
{*
 00483548    ret
*}
end;

//0048354C
procedure TControlActionLink.SetHint(const Value:UnicodeString);
begin
{*
 0048354C    push        ebx
 0048354D    push        esi
 0048354E    mov         esi,edx
 00483550    mov         ebx,eax
 00483552    mov         eax,ebx
 00483554    mov         edx,dword ptr [eax]
 00483556    call        dword ptr [edx+38]
 00483559    test        al,al
>0048355B    je          0048356C
 0048355D    mov         eax,dword ptr [ebx+18]
 00483560    add         eax,80
 00483565    mov         edx,esi
 00483567    call        @UStrAsg
 0048356C    pop         esi
 0048356D    pop         ebx
 0048356E    ret
*}
end;

//00483570
procedure TControlActionLink.SetVisible(Value:Boolean);
begin
{*
 00483570    push        ebx
 00483571    push        esi
 00483572    mov         ebx,edx
 00483574    mov         esi,eax
 00483576    mov         eax,esi
 00483578    mov         edx,dword ptr [eax]
 0048357A    call        dword ptr [edx+44]
 0048357D    test        al,al
>0048357F    je          0048358B
 00483581    mov         edx,ebx
 00483583    mov         eax,dword ptr [esi+18]
 00483586    call        TControl.SetVisible
 0048358B    pop         esi
 0048358C    pop         ebx
 0048358D    ret
*}
end;

//00483590
procedure TControlActionLink.SetOnExecute(Value:TNotifyEvent);
begin
{*
 00483590    push        ebp
 00483591    mov         ebp,esp
 00483593    push        ebx
 00483594    mov         ebx,eax
 00483596    mov         eax,ebx
 00483598    mov         edx,dword ptr [eax]
 0048359A    call        dword ptr [edx+8]
 0048359D    test        al,al
>0048359F    je          004835B6
 004835A1    mov         eax,dword ptr [ebx+18]
 004835A4    mov         edx,dword ptr [ebp+8]
 004835A7    mov         dword ptr [eax+110],edx
 004835AD    mov         edx,dword ptr [ebp+0C]
 004835B0    mov         dword ptr [eax+114],edx
 004835B6    pop         ebx
 004835B7    pop         ebp
 004835B8    ret         8
*}
end;

//004835BC
function TControlActionLink.IsHelpLinked:Boolean;
begin
{*
 004835BC    push        ebx
 004835BD    mov         ebx,eax
 004835BF    mov         eax,ebx
 004835C1    call        TActionLink.IsHelpLinked
 004835C6    test        al,al
>004835C8    je          00483603
 004835CA    mov         eax,dword ptr [ebx+18]
 004835CD    mov         eax,dword ptr [eax+168]
 004835D3    mov         edx,dword ptr [ebx+10]
 004835D6    cmp         eax,dword ptr [edx+74]
>004835D9    jne         00483603
 004835DB    mov         eax,dword ptr [ebx+18]
 004835DE    mov         eax,dword ptr [eax+164]
 004835E4    mov         edx,dword ptr [ebx+10]
 004835E7    mov         edx,dword ptr [edx+78]
 004835EA    call        @UStrEqual
>004835EF    jne         00483603
 004835F1    mov         eax,dword ptr [ebx+18]
 004835F4    movzx       eax,byte ptr [eax+160]
 004835FB    mov         edx,dword ptr [ebx+10]
 004835FE    cmp         al,byte ptr [edx+70]
>00483601    je          00483607
 00483603    xor         eax,eax
 00483605    pop         ebx
 00483606    ret
 00483607    mov         al,1
 00483609    pop         ebx
 0048360A    ret
*}
end;

//0048360C
procedure TControlActionLink.SetHelpContext(Value:THelpContext);
begin
{*
 0048360C    push        ebx
 0048360D    push        esi
 0048360E    mov         esi,edx
 00483610    mov         ebx,eax
 00483612    mov         eax,ebx
 00483614    mov         edx,dword ptr [eax]
 00483616    call        dword ptr [edx+34]
 00483619    test        al,al
>0048361B    je          00483627
 0048361D    mov         edx,esi
 0048361F    mov         eax,dword ptr [ebx+18]
 00483622    call        TControl.SetHelpContext
 00483627    pop         esi
 00483628    pop         ebx
 00483629    ret
*}
end;

//0048362C
procedure TControlActionLink.SetHelpKeyword(const Value:UnicodeString);
begin
{*
 0048362C    push        ebx
 0048362D    push        esi
 0048362E    mov         esi,edx
 00483630    mov         ebx,eax
 00483632    mov         eax,ebx
 00483634    mov         edx,dword ptr [eax]
 00483636    call        dword ptr [edx+34]
 00483639    test        al,al
>0048363B    je          00483647
 0048363D    mov         edx,esi
 0048363F    mov         eax,dword ptr [ebx+18]
 00483642    call        TControl.SetHelpKeyword
 00483647    pop         esi
 00483648    pop         ebx
 00483649    ret
*}
end;

//0048364C
procedure TControlActionLink.SetHelpType(Value:THelpType);
begin
{*
 0048364C    push        ebx
 0048364D    push        esi
 0048364E    mov         ebx,edx
 00483650    mov         esi,eax
 00483652    mov         eax,esi
 00483654    mov         edx,dword ptr [eax]
 00483656    call        dword ptr [edx+34]
 00483659    test        al,al
>0048365B    je          00483666
 0048365D    mov         eax,dword ptr [esi+18]
 00483660    mov         byte ptr [eax+160],bl
 00483666    pop         esi
 00483667    pop         ebx
 00483668    ret
*}
end;

//0048366C
procedure TControlActionLink.SetPopupMenu(Value:TPopupMenu);
begin
{*
 0048366C    push        ebx
 0048366D    push        esi
 0048366E    mov         esi,edx
 00483670    mov         ebx,eax
 00483672    mov         eax,ebx
 00483674    mov         edx,dword ptr [eax]
 00483676    call        dword ptr [edx+80]
 0048367C    test        al,al
>0048367E    je          0048368A
 00483680    mov         edx,esi
 00483682    mov         eax,dword ptr [ebx+18]
 00483685    call        TControl.SetPopupMenu
 0048368A    pop         esi
 0048368B    pop         ebx
 0048368C    ret
*}
end;

//00483690
constructor TControl.Create;
begin
{*
 00483690    push        ebp
 00483691    mov         ebp,esp
 00483693    push        ecx
 00483694    push        ebx
 00483695    push        esi
 00483696    test        dl,dl
>00483698    je          004836A2
 0048369A    add         esp,0FFFFFFF0
 0048369D    call        @ClassCreate
 004836A2    mov         byte ptr [ebp-1],dl
 004836A5    mov         ebx,eax
 004836A7    xor         edx,edx
 004836A9    mov         eax,ebx
 004836AB    call        TComponent.Create
 004836B0    mov         dword ptr [ebx+3C],ebx
 004836B3    mov         eax,dword ptr [ebx]
 004836B5    mov         eax,dword ptr [eax+84]
 004836BB    mov         dword ptr [ebx+38],eax
 004836BE    mov         eax,[004837C8]
 004836C3    mov         dword ptr [ebx+50],eax
 004836C6    mov         dl,1
 004836C8    mov         eax,[0045FAE8];TFont
 004836CD    call        TFont.Create
 004836D2    mov         esi,eax
 004836D4    mov         dword ptr [ebx+64],esi
 004836D7    mov         dword ptr [esi+0C],ebx
 004836DA    mov         dword ptr [esi+8],484AE8;TControl.FontChanged
 004836E1    movzx       eax,byte ptr ds:[4837CC]
 004836E8    mov         byte ptr [ebx+63],al
 004836EB    mov         ecx,ebx
 004836ED    mov         dl,1
 004836EF    mov         eax,[0047761C];TSizeConstraints
 004836F4    call        TSizeConstraints.Create
 004836F9    mov         esi,eax
 004836FB    mov         dword ptr [ebx+70],esi
 004836FE    mov         dword ptr [esi+1C],ebx
 00483701    mov         dword ptr [esi+18],485D08;TControl.DoConstraintsChange
 00483708    mov         ecx,ebx
 0048370A    mov         dl,1
 0048370C    mov         eax,[00477884];TMargins
 00483711    call        TMargins.Create
 00483716    mov         esi,eax
 00483718    mov         dword ptr [ebx+74],esi
 0048371B    mov         dword ptr [esi+1C],ebx
 0048371E    mov         dword ptr [esi+18],487C68;TControl.DoMarginChange
 00483725    mov         dword ptr [ebx+6C],0FF000005
 0048372C    mov         byte ptr [ebx+59],1
 00483730    mov         byte ptr [ebx+5A],1
 00483734    mov         byte ptr [ebx+5B],1
 00483738    mov         byte ptr [ebx+5C],1
 0048373C    mov         byte ptr [ebx+8A],1
 00483743    mov         byte ptr [ebx+62],1
 00483747    mov         byte ptr [ebx+60],0
 0048374B    mov         word ptr [ebx+7A],0FFF4
 00483751    mov         eax,[004E2058];TCustomDockForm
 00483756    mov         dword ptr [ebx+0A8],eax
 0048375C    mov         byte ptr [ebx+160],1
 00483763    xor         eax,eax
 00483765    mov         dword ptr [ebx+174],eax
 0048376B    xor         eax,eax
 0048376D    mov         dword ptr [ebx+16C],eax
 00483773    mov         byte ptr [ebx+170],1
 0048377A    mov         eax,ebx
 0048377C    mov         edx,dword ptr [eax]
 0048377E    call        dword ptr [edx+40]
 00483781    mov         eax,dword ptr [ebx+0AC]
 00483787    movzx       edx,byte ptr ds:[4837D0]
 0048378E    mov         byte ptr [eax+10],dl
 00483791    movzx       edx,byte ptr ds:[4837D0]
 00483798    mov         byte ptr [eax+11],dl
 0048379B    mov         byte ptr [eax+18],1
 0048379F    movzx       edx,word ptr ds:[4837D4]
 004837A6    mov         word ptr [eax+1E],dx
 004837AA    mov         eax,ebx
 004837AC    cmp         byte ptr [ebp-1],0
>004837B0    je          004837C1
 004837B2    call        @AfterConstruction
 004837B7    pop         dword ptr fs:[0]
 004837BE    add         esp,0C
 004837C1    mov         eax,ebx
 004837C3    pop         esi
 004837C4    pop         ebx
 004837C5    pop         ecx
 004837C6    pop         ebp
 004837C7    ret
*}
end;

//004837D8
destructor TControl.Destroy();
begin
{*
 004837D8    push        ebx
 004837D9    push        esi
 004837DA    push        edi
 004837DB    add         esp,0FFFFFFF0
 004837DE    call        @BeforeDestruction
 004837E3    mov         ebx,edx
 004837E5    mov         edi,eax
 004837E7    mov         eax,[0078D590];^Application:TApplication
 004837EC    mov         eax,dword ptr [eax]
 004837EE    mov         edx,edi
 004837F0    call        TApplication.ControlDestroyed
 004837F5    mov         eax,dword ptr [edi+90]
 004837FB    test        eax,eax
>004837FD    je          00483845
 004837FF    mov         edx,edi
 00483801    call        TComponent.RemoveFreeNotification
 00483806    push        edi
 00483807    mov         eax,dword ptr [edi+90]
 0048380D    xor         ecx,ecx
 0048380F    mov         edx,0B039
 00483814    call        TControl.Perform
 00483819    xor         edx,edx
 0048381B    mov         eax,edi
 0048381D    mov         ecx,dword ptr [eax]
 0048381F    call        dword ptr [ecx+78]
 00483822    mov         edx,esp
 00483824    mov         eax,edi
 00483826    call        TControl.GetBoundsRect
 0048382B    mov         ecx,esp
 0048382D    or          edx,0FFFFFFFF
 00483830    mov         eax,edi
 00483832    mov         si,0FFCC
 00483836    call        @CallDynaInst
 0048383B    xor         eax,eax
 0048383D    mov         dword ptr [edi+90],eax
>00483843    jmp         0048384E
 00483845    xor         edx,edx
 00483847    mov         eax,edi
 00483849    mov         ecx,dword ptr [eax]
 0048384B    call        dword ptr [ecx+78]
 0048384E    lea         eax,[edi+68]
 00483851    mov         edx,dword ptr [eax]
 00483853    xor         ecx,ecx
 00483855    mov         dword ptr [eax],ecx
 00483857    mov         eax,edx
 00483859    call        TObject.Free
 0048385E    lea         eax,[edi+70]
 00483861    mov         edx,dword ptr [eax]
 00483863    xor         ecx,ecx
 00483865    mov         dword ptr [eax],ecx
 00483867    mov         eax,edx
 00483869    call        TObject.Free
 0048386E    lea         eax,[edi+64]
 00483871    mov         edx,dword ptr [eax]
 00483873    xor         ecx,ecx
 00483875    mov         dword ptr [eax],ecx
 00483877    mov         eax,edx
 00483879    call        TObject.Free
 0048387E    mov         eax,dword ptr [edi+174]
 00483884    call        StrDispose
 00483889    lea         eax,[edi+74]
 0048388C    mov         edx,dword ptr [eax]
 0048388E    xor         ecx,ecx
 00483890    mov         dword ptr [eax],ecx
 00483892    mov         eax,edx
 00483894    call        TObject.Free
 00483899    xor         eax,eax
 0048389B    mov         dword ptr [edi+16C],eax
 004838A1    lea         eax,[edi+0AC]
 004838A7    mov         edx,dword ptr [eax]
 004838A9    xor         ecx,ecx
 004838AB    mov         dword ptr [eax],ecx
 004838AD    mov         eax,edx
 004838AF    call        TObject.Free
 004838B4    mov         edx,ebx
 004838B6    and         dl,0FC
 004838B9    mov         eax,edi
 004838BB    call        TComponent.Destroy
 004838C0    test        bl,bl
>004838C2    jle         004838CB
 004838C4    mov         eax,edi
 004838C6    call        @ClassDestroy
 004838CB    add         esp,10
 004838CE    pop         edi
 004838CF    pop         esi
 004838D0    pop         ebx
 004838D1    ret
*}
end;

//004838D4
{*function sub_004838D4:?;
begin
 004838D4    xor         eax,eax
 004838D6    ret
end;*}

//004838D8
function TGroupBox.GetEnabled:Boolean;
begin
{*
 004838D8    movzx       eax,byte ptr [eax+5A];TGroupBox.FEnabled:Boolean
 004838DC    ret
*}
end;

//004838E0
procedure TControl.sub_004838E0;
begin
{*
 004838E0    xor         eax,eax
 004838E2    ret
*}
end;

//004838E4
procedure TControl.HasParent;
begin
{*
 004838E4    cmp         dword ptr [eax+34],0
 004838E8    setne       al
 004838EB    ret
*}
end;

//004838EC
procedure TControl.GetParentComponent;
begin
{*
 004838EC    mov         eax,dword ptr [eax+34];TControl.FParent:TWinControl
 004838EF    ret
*}
end;

//004838F0
procedure TControl.SetParentComponent(Value:TComponent);
begin
{*
 004838F0    push        ebx
 004838F1    push        esi
 004838F2    mov         esi,edx
 004838F4    mov         ebx,eax
 004838F6    cmp         esi,dword ptr [ebx+34]
>004838F9    je          00483915
 004838FB    mov         eax,esi
 004838FD    mov         edx,dword ptr ds:[47C4E8];TWinControl
 00483903    call        @IsClass
 00483908    test        al,al
>0048390A    je          00483915
 0048390C    mov         edx,esi
 0048390E    mov         eax,ebx
 00483910    mov         ecx,dword ptr [eax]
 00483912    call        dword ptr [ecx+78]
 00483915    pop         esi
 00483916    pop         ebx
 00483917    ret
*}
end;

//00483918
procedure TControl.PaletteChanged(Foreground:Boolean);
begin
{*
 00483918    push        ebx
 00483919    push        esi
 0048391A    push        edi
 0048391B    push        ebp
 0048391C    add         esp,0FFFFFFF8
 0048391F    mov         byte ptr [esp],dl
 00483922    mov         ebp,eax
 00483924    xor         ebx,ebx
 00483926    cmp         byte ptr [ebp+59],0
>0048392A    je          00483988
 0048392C    mov         eax,ebp
 0048392E    mov         si,0FFD9
 00483932    call        @CallDynaInst
 00483937    mov         edi,eax
 00483939    test        edi,edi
>0048393B    je          00483988
 0048393D    lea         edx,[esp+4]
 00483941    mov         eax,ebp
 00483943    mov         ecx,dword ptr [eax]
 00483945    call        dword ptr [ecx+58]
 00483948    mov         esi,eax
 0048394A    movzx       eax,byte ptr [esp]
 0048394E    xor         al,1
 00483950    neg         al
 00483952    sbb         eax,eax
 00483954    push        eax
 00483955    push        edi
 00483956    push        esi
 00483957    call        gdi32.SelectPalette
 0048395C    mov         edi,eax
 0048395E    push        esi
 0048395F    call        gdi32.RealizePalette
 00483964    test        eax,eax
>00483966    je          00483972
 00483968    mov         eax,ebp
 0048396A    mov         edx,dword ptr [eax]
 0048396C    call        dword ptr [edx+90]
 00483972    push        0FF
 00483974    push        edi
 00483975    push        esi
 00483976    call        gdi32.SelectPalette
 0048397B    push        esi
 0048397C    mov         eax,dword ptr [esp+8]
 00483980    push        eax
 00483981    call        user32.ReleaseDC
 00483986    mov         bl,1
 00483988    mov         eax,ebx
 0048398A    pop         ecx
 0048398B    pop         edx
 0048398C    pop         ebp
 0048398D    pop         edi
 0048398E    pop         esi
 0048398F    pop         ebx
 00483990    ret
*}
end;

//00483994
function TControl.GetAction:TBasicAction;
begin
{*
 00483994    mov         edx,dword ptr [eax+68]
 00483997    test        edx,edx
>00483999    je          0048399F
 0048399B    mov         eax,dword ptr [edx+10]
 0048399E    ret
 0048399F    xor         eax,eax
 004839A1    ret
*}
end;

//004839A4
procedure TControl.SetAnchors(Value:TAnchors);
begin
{*
 004839A4    push        ebx
 004839A5    push        esi
 004839A6    push        ecx
 004839A7    mov         byte ptr [esp],dl
 004839AA    mov         esi,eax
 004839AC    movzx       eax,byte ptr [esp]
 004839B0    cmp         al,byte ptr [esi+63]
>004839B3    je          00483A3A
 004839B9    movzx       ebx,byte ptr [esi+63]
 004839BD    movzx       eax,byte ptr [esp]
 004839C1    mov         byte ptr [esi+63],al
 004839C4    test        byte ptr [esi+1C],1
>004839C8    jne         00483A3A
 004839CA    movzx       eax,byte ptr ds:[483A40]
 004839D1    cmp         al,bl
>004839D3    je          00483A33
 004839D5    movzx       eax,byte ptr ds:[483A40]
 004839DC    cmp         al,byte ptr [esi+63]
>004839DF    jne         00483A33
 004839E1    mov         eax,dword ptr [esi+194]
 004839E7    cmp         eax,dword ptr [esi+40]
>004839EA    jne         00483A0D
 004839EC    mov         eax,dword ptr [esi+198]
 004839F2    cmp         eax,dword ptr [esi+44]
>004839F5    jne         00483A0D
 004839F7    mov         eax,dword ptr [esi+19C]
 004839FD    cmp         eax,dword ptr [esi+48]
>00483A00    jne         00483A0D
 00483A02    mov         eax,dword ptr [esi+1A0]
 00483A08    cmp         eax,dword ptr [esi+4C]
>00483A0B    je          00483A33
 00483A0D    mov         eax,dword ptr [esi+19C]
 00483A13    push        eax
 00483A14    mov         eax,dword ptr [esi+1A0]
 00483A1A    push        eax
 00483A1B    mov         ecx,dword ptr [esi+198]
 00483A21    mov         edx,dword ptr [esi+194]
 00483A27    mov         eax,esi
 00483A29    mov         ebx,dword ptr [eax]
 00483A2B    call        dword ptr [ebx+98]
>00483A31    jmp         00483A3A
 00483A33    mov         eax,esi
 00483A35    call        TControl.UpdateAnchorRules
 00483A3A    pop         edx
 00483A3B    pop         esi
 00483A3C    pop         ebx
 00483A3D    ret
*}
end;

//00483A44
procedure TControl.SetAction(Value:TBasicAction);
begin
{*
 00483A44    push        ebx
 00483A45    push        esi
 00483A46    push        edi
 00483A47    mov         edi,edx
 00483A49    mov         ebx,eax
 00483A4B    test        edi,edi
>00483A4D    jne         00483A65
 00483A4F    mov         eax,dword ptr [ebx+68]
 00483A52    call        TObject.Free
 00483A57    xor         eax,eax
 00483A59    mov         dword ptr [ebx+68],eax
 00483A5C    and         dword ptr [ebx+50],0FFFF7FFF
>00483A63    jmp         00483ABB
 00483A65    or          dword ptr [ebx+50],8000
 00483A6C    cmp         dword ptr [ebx+68],0
>00483A70    jne         00483A87
 00483A72    mov         eax,ebx
 00483A74    mov         si,0FFDB
 00483A78    call        @CallDynaInst
 00483A7D    mov         ecx,ebx
 00483A7F    mov         dl,1
 00483A81    call        dword ptr [eax+14]
 00483A84    mov         dword ptr [ebx+68],eax
 00483A87    mov         edx,edi
 00483A89    mov         eax,dword ptr [ebx+68]
 00483A8C    mov         ecx,dword ptr [eax]
 00483A8E    call        dword ptr [ecx+0C]
 00483A91    mov         eax,dword ptr [ebx+68]
 00483A94    mov         dword ptr [eax+0C],ebx
 00483A97    mov         dword ptr [eax+8],4874F8;TControl.DoActionChange
 00483A9E    test        byte ptr [edi+1C],1
 00483AA2    setne       cl
 00483AA5    mov         edx,edi
 00483AA7    mov         eax,ebx
 00483AA9    mov         si,0FFF0
 00483AAD    call        @CallDynaInst
 00483AB2    mov         edx,ebx
 00483AB4    mov         eax,edi
 00483AB6    call        TComponent.FreeNotification
 00483ABB    pop         edi
 00483ABC    pop         esi
 00483ABD    pop         ebx
 00483ABE    ret
*}
end;

//00483AC0
function TControl.IsAnchorsStored(Value:TAnchors):Boolean;
begin
{*
 00483AC0    push        ebx
 00483AC1    mov         ebx,eax
 00483AC3    movzx       eax,byte ptr [ebx+5D]
 00483AC7    movzx       eax,byte ptr [eax+7859A4]
 00483ACE    cmp         al,byte ptr [ebx+63]
 00483AD1    setne       al
 00483AD4    pop         ebx
 00483AD5    ret
*}
end;

//00483AD8
procedure TControl.IsTouchPropertyStored(AProperty:TTouchProperty);
begin
{*
 00483AD8    push        ebx
 00483AD9    mov         ebx,eax
 00483ADB    mov         al,1
 00483ADD    sub         dl,1
>00483AE0    jb          00483AEE
>00483AE2    je          00483B03
 00483AE4    dec         dl
>00483AE6    je          00483B18
 00483AE8    dec         dl
>00483AEA    je          00483B26
>00483AEC    jmp         00483B32
 00483AEE    mov         eax,dword ptr [ebx+0AC]
 00483AF4    movzx       edx,byte ptr ds:[483B34]
 00483AFB    cmp         dl,byte ptr [eax+10]
 00483AFE    setne       al
 00483B01    pop         ebx
 00483B02    ret
 00483B03    mov         eax,dword ptr [ebx+0AC]
 00483B09    movzx       edx,byte ptr ds:[483B34]
 00483B10    cmp         dl,byte ptr [eax+11]
 00483B13    setne       al
 00483B16    pop         ebx
 00483B17    ret
 00483B18    mov         eax,dword ptr [ebx+0AC]
 00483B1E    movzx       eax,byte ptr [eax+18]
 00483B22    xor         al,1
 00483B24    pop         ebx
 00483B25    ret
 00483B26    mov         eax,dword ptr [ebx+0AC]
 00483B2C    movzx       eax,byte ptr [eax+18]
 00483B30    xor         al,1
 00483B32    pop         ebx
 00483B33    ret
*}
end;

//00483B38
procedure TControl.SetDesignVisible(Value:Boolean);
begin
{*
 00483B38    push        ebx
 00483B39    mov         ebx,eax
 00483B3B    test        byte ptr [ebx+1C],10
>00483B3F    je          00483B6D
 00483B41    test        byte ptr [ebx+55],8
 00483B45    setne       al
 00483B48    xor         al,1
 00483B4A    cmp         dl,al
>00483B4C    je          00483B6D
 00483B4E    test        dl,dl
>00483B50    jne         00483B5B
 00483B52    or          dword ptr [ebx+54],800
>00483B59    jmp         00483B62
 00483B5B    and         dword ptr [ebx+54],0FFFFF7FF
 00483B62    xor         ecx,ecx
 00483B64    mov         dl,1
 00483B66    mov         eax,ebx
 00483B68    call        TControl.InvalidateControl
 00483B6D    pop         ebx
 00483B6E    ret
*}
end;

//00483B70
procedure TGroupBox.SetDragMode(Value:TDragMode);
begin
{*
 00483B70    mov         byte ptr [eax+5F],dl;TGroupBox.FDragMode:TDragMode
 00483B73    ret
*}
end;

//00483B74
procedure TControl.RequestAlign;
begin
{*
 00483B74    mov         edx,dword ptr [eax+34]
 00483B77    test        edx,edx
>00483B79    je          00483B81
 00483B7B    xchg        eax,edx
 00483B7C    call        TWinControl.AlignControl
 00483B81    ret
*}
end;

//00483B84
function TControl.GetDragMode:TDragMode;
begin
{*
 00483B84    movzx       eax,byte ptr [eax+5F]
 00483B88    ret
*}
end;

//00483B8C
procedure TControl.Resize;
begin
{*
 00483B8C    push        ebx
 00483B8D    cmp         word ptr [eax+0EA],0
>00483B95    je          00483BA7
 00483B97    mov         ebx,eax
 00483B99    mov         edx,eax
 00483B9B    mov         eax,dword ptr [ebx+0EC]
 00483BA1    call        dword ptr [ebx+0E8]
 00483BA7    pop         ebx
 00483BA8    ret
*}
end;

//00483BAC
procedure TControl.ReadState(Reader:TReader);
begin
{*
 00483BAC    push        ebx
 00483BAD    push        esi
 00483BAE    push        edi
 00483BAF    mov         esi,edx
 00483BB1    mov         ebx,eax
 00483BB3    or          dword ptr [ebx+54],8
 00483BB7    mov         edi,dword ptr [esi+2C]
 00483BBA    mov         eax,edi
 00483BBC    mov         edx,dword ptr ds:[47C4E8];TWinControl
 00483BC2    call        @IsClass
 00483BC7    test        al,al
>00483BC9    je          00483BD4
 00483BCB    mov         edx,edi
 00483BCD    mov         eax,ebx
 00483BCF    mov         ecx,dword ptr [eax]
 00483BD1    call        dword ptr [ecx+78]
 00483BD4    mov         edx,esi
 00483BD6    mov         eax,ebx
 00483BD8    call        TComponent.ReadState
 00483BDD    and         dword ptr [ebx+54],0FFFFFFF7
 00483BE1    cmp         dword ptr [ebx+34],0
>00483BE5    je          00483C57
 00483BE7    push        0
 00483BE9    xor         ecx,ecx
 00483BEB    mov         edx,0B009
 00483BF0    mov         eax,ebx
 00483BF2    call        TControl.Perform
 00483BF7    push        0
 00483BF9    xor         ecx,ecx
 00483BFB    mov         edx,0B008
 00483C00    mov         eax,ebx
 00483C02    call        TControl.Perform
 00483C07    push        0
 00483C09    xor         ecx,ecx
 00483C0B    mov         edx,0B023
 00483C10    mov         eax,ebx
 00483C12    call        TControl.Perform
 00483C17    push        0
 00483C19    xor         ecx,ecx
 00483C1B    mov         edx,0B035
 00483C20    mov         eax,ebx
 00483C22    call        TControl.Perform
 00483C27    push        0
 00483C29    xor         ecx,ecx
 00483C2B    mov         edx,0B03D
 00483C30    mov         eax,ebx
 00483C32    call        TControl.Perform
 00483C37    push        0
 00483C39    xor         ecx,ecx
 00483C3B    mov         edx,0B050
 00483C40    mov         eax,ebx
 00483C42    call        TControl.Perform
 00483C47    push        0
 00483C49    xor         ecx,ecx
 00483C4B    mov         edx,0B058
 00483C50    mov         eax,ebx
 00483C52    call        TControl.Perform
 00483C57    pop         edi
 00483C58    pop         esi
 00483C59    pop         ebx
 00483C5A    ret
*}
end;

//00483C5C
procedure TControl.Notification(AComponent:TComponent; Operation:TOperation);
begin
{*
 00483C5C    push        ebx
 00483C5D    push        esi
 00483C5E    push        edi
 00483C5F    mov         ebx,ecx
 00483C61    mov         edi,edx
 00483C63    mov         esi,eax
 00483C65    mov         ecx,ebx
 00483C67    mov         edx,edi
 00483C69    mov         eax,esi
 00483C6B    call        TComponent.Notification
 00483C70    cmp         bl,1
>00483C73    jne         00483CD3
 00483C75    cmp         edi,dword ptr [esi+7C]
>00483C78    jne         00483C85
 00483C7A    xor         edx,edx
 00483C7C    mov         eax,esi
 00483C7E    call        TControl.SetPopupMenu
>00483C83    jmp         00483CD3
 00483C85    mov         eax,esi
 00483C87    mov         edx,dword ptr [eax]
 00483C89    call        dword ptr [edx+4C]
 00483C8C    cmp         edi,eax
>00483C8E    jne         00483C9B
 00483C90    xor         edx,edx
 00483C92    mov         eax,esi
 00483C94    call        TControl.SetAction
>00483C99    jmp         00483CD3
 00483C9B    cmp         edi,dword ptr [esi+90]
>00483CA1    jne         00483CAD
 00483CA3    xor         eax,eax
 00483CA5    mov         dword ptr [esi+90],eax
>00483CAB    jmp         00483CD3
 00483CAD    cmp         edi,dword ptr [esi+16C]
>00483CB3    jne         00483CBF
 00483CB5    xor         eax,eax
 00483CB7    mov         dword ptr [esi+16C],eax
>00483CBD    jmp         00483CD3
 00483CBF    mov         eax,dword ptr [esi+0AC]
 00483CC5    test        eax,eax
>00483CC7    je          00483CD3
 00483CC9    cmp         edi,dword ptr [eax+0C]
>00483CCC    jne         00483CD3
 00483CCE    xor         edx,edx
 00483CD0    mov         dword ptr [eax+0C],edx
 00483CD3    pop         edi
 00483CD4    pop         esi
 00483CD5    pop         ebx
 00483CD6    ret
*}
end;

//00483CD8
procedure TControl.SetAlign(Value:TAlign);
begin
{*
 00483CD8    push        ebx
 00483CD9    push        esi
 00483CDA    push        edi
 00483CDB    push        ecx
 00483CDC    mov         ebx,edx
 00483CDE    mov         edi,eax
 00483CE0    movzx       eax,byte ptr [edi+5D]
 00483CE4    cmp         bl,al
>00483CE6    je          00483DB4
 00483CEC    mov         byte ptr [esp],al
 00483CEF    mov         byte ptr [edi+5D],bl
 00483CF2    movzx       eax,bl
 00483CF5    movzx       edx,byte ptr [eax+7859A4]
 00483CFC    mov         eax,edi
 00483CFE    call        TControl.SetAnchors
 00483D03    test        byte ptr [edi+1C],1
>00483D07    jne         00483DB4
 00483D0D    test        byte ptr [edi+1C],10
>00483D11    je          00483D1D
 00483D13    cmp         dword ptr [edi+34],0
>00483D17    je          00483DB4
 00483D1D    cmp         bl,6
>00483D20    je          00483DB4
 00483D26    cmp         byte ptr [esp],6
>00483D2A    je          00483DB4
 00483D30    movzx       eax,byte ptr [esp]
 00483D34    dec         eax
 00483D35    sub         al,2
 00483D37    setb        al
 00483D3A    mov         edx,ebx
 00483D3C    add         dl,0FD
 00483D3F    sub         dl,2
 00483D42    setb        dl
 00483D45    cmp         al,dl
>00483D47    jne         00483D79
 00483D49    movzx       eax,byte ptr [esp]
 00483D4D    test        al,al
>00483D4F    je          00483D79
 00483D51    sub         al,5
>00483D53    je          00483D79
 00483D55    mov         eax,ebx
 00483D57    test        al,al
>00483D59    je          00483D79
 00483D5B    sub         al,5
>00483D5D    je          00483D79
 00483D5F    mov         eax,dword ptr [edi+4C]
 00483D62    push        eax
 00483D63    mov         eax,dword ptr [edi+48]
 00483D66    push        eax
 00483D67    mov         ecx,dword ptr [edi+44]
 00483D6A    mov         edx,dword ptr [edi+40]
 00483D6D    mov         eax,edi
 00483D6F    mov         ebx,dword ptr [eax]
 00483D71    call        dword ptr [ebx+98]
>00483D77    jmp         00483DB4
 00483D79    cmp         byte ptr [esp],0
>00483D7D    je          00483DA9
 00483D7F    test        bl,bl
>00483D81    jne         00483DA9
 00483D83    mov         eax,dword ptr [edi+19C]
 00483D89    push        eax
 00483D8A    mov         eax,dword ptr [edi+1A0]
 00483D90    push        eax
 00483D91    mov         ecx,dword ptr [edi+198]
 00483D97    mov         edx,dword ptr [edi+194]
 00483D9D    mov         eax,edi
 00483D9F    mov         ebx,dword ptr [eax]
 00483DA1    call        dword ptr [ebx+98]
>00483DA7    jmp         00483DB4
 00483DA9    mov         eax,edi
 00483DAB    mov         si,0FFEF
 00483DAF    call        @CallDynaInst
 00483DB4    mov         eax,edi
 00483DB6    mov         edx,dword ptr [eax]
 00483DB8    call        dword ptr [edx+68]
 00483DBB    pop         edx
 00483DBC    pop         edi
 00483DBD    pop         esi
 00483DBE    pop         ebx
 00483DBF    ret
*}
end;

//00483DC0
procedure TControl.SetBounds(ALeft:Integer; ATop:Integer; AHeight:Integer; AWidth:Integer);
begin
{*
 00483DC0    push        ebp
 00483DC1    mov         ebp,esp
 00483DC3    push        ebx
 00483DC4    push        esi
 00483DC5    push        edi
 00483DC6    mov         edi,ecx
 00483DC8    mov         ebx,edx
 00483DCA    mov         esi,eax
 00483DCC    lea         ecx,[ebp+8]
 00483DCF    lea         edx,[ebp+0C]
 00483DD2    mov         eax,esi
 00483DD4    call        TControl.CheckNewSize
 00483DD9    test        al,al
>00483DDB    je          00483E56
 00483DDD    cmp         ebx,dword ptr [esi+40]
>00483DE0    jne         00483DF7
 00483DE2    cmp         edi,dword ptr [esi+44]
>00483DE5    jne         00483DF7
 00483DE7    mov         eax,dword ptr [ebp+0C]
 00483DEA    cmp         eax,dword ptr [esi+48]
>00483DED    jne         00483DF7
 00483DEF    mov         eax,dword ptr [ebp+8]
 00483DF2    cmp         eax,dword ptr [esi+4C]
>00483DF5    je          00483E56
 00483DF7    xor         ecx,ecx
 00483DF9    movzx       edx,byte ptr [esi+59]
 00483DFD    mov         eax,esi
 00483DFF    call        TControl.InvalidateControl
 00483E04    mov         dword ptr [esi+40],ebx
 00483E07    mov         dword ptr [esi+44],edi
 00483E0A    mov         eax,dword ptr [ebp+0C]
 00483E0D    mov         dword ptr [esi+48],eax
 00483E10    mov         eax,dword ptr [ebp+8]
 00483E13    mov         dword ptr [esi+4C],eax
 00483E16    mov         eax,esi
 00483E18    call        TControl.UpdateAnchorRules
 00483E1D    mov         eax,esi
 00483E1F    call        TControl.UpdateExplicitBounds
 00483E24    mov         eax,esi
 00483E26    mov         edx,dword ptr [eax]
 00483E28    call        dword ptr [edx+90]
 00483E2E    push        0
 00483E30    xor         ecx,ecx
 00483E32    mov         edx,47
 00483E37    mov         eax,esi
 00483E39    call        TControl.Perform
 00483E3E    mov         eax,esi
 00483E40    mov         edx,dword ptr [eax]
 00483E42    call        dword ptr [edx+68]
 00483E45    test        byte ptr [esi+1C],1
>00483E49    jne         00483E56
 00483E4B    mov         eax,esi
 00483E4D    mov         si,0FFD0
 00483E51    call        @CallDynaInst
 00483E56    pop         edi
 00483E57    pop         esi
 00483E58    pop         ebx
 00483E59    pop         ebp
 00483E5A    ret         8
*}
end;

//00483E60
procedure TControl.SetTextBuf(Buffer:PWideChar);
begin
{*
 00483E60    push        ebx
 00483E61    mov         ebx,eax
 00483E63    push        edx
 00483E64    xor         ecx,ecx
 00483E66    mov         eax,ebx
 00483E68    mov         edx,0C
 00483E6D    call        TControl.Perform
 00483E72    push        0
 00483E74    xor         ecx,ecx
 00483E76    mov         edx,0B012
 00483E7B    mov         eax,ebx
 00483E7D    call        TControl.Perform
 00483E82    pop         ebx
 00483E83    ret
*}
end;

//00483E84
procedure TControl.UpdateAnchorRules;
begin
{*
 00483E84    push        ebx
 00483E85    push        esi
 00483E86    push        edi
 00483E87    push        ebp
 00483E88    add         esp,0FFFFFFF8
 00483E8B    mov         esi,eax
 00483E8D    cmp         byte ptr [esi+178],0
>00483E94    jne         00483FFC
 00483E9A    test        byte ptr [esi+1C],1
>00483E9E    jne         00483FFC
 00483EA4    movzx       ebx,byte ptr [esi+63]
 00483EA8    xor         edx,edx
 00483EAA    mov         eax,dword ptr [esi+74]
 00483EAD    mov         ecx,dword ptr [eax]
 00483EAF    call        dword ptr [ecx+10]
 00483EB2    mov         edi,eax
 00483EB4    mov         edx,2
 00483EB9    mov         eax,dword ptr [esi+74]
 00483EBC    mov         ecx,dword ptr [eax]
 00483EBE    call        dword ptr [ecx+10]
 00483EC1    sar         eax,1
>00483EC3    jns         00483EC8
 00483EC5    adc         eax,0
 00483EC8    add         edi,eax
 00483ECA    mov         edx,1
 00483ECF    mov         eax,dword ptr [esi+74]
 00483ED2    mov         ecx,dword ptr [eax]
 00483ED4    call        dword ptr [ecx+10]
 00483ED7    mov         ebp,eax
 00483ED9    mov         edx,3
 00483EDE    mov         eax,dword ptr [esi+74]
 00483EE1    mov         ecx,dword ptr [eax]
 00483EE3    call        dword ptr [ecx+10]
 00483EE6    sar         eax,1
>00483EE8    jns         00483EED
 00483EEA    adc         eax,0
 00483EED    add         ebp,eax
 00483EEF    mov         eax,ebp
 00483EF1    mov         dword ptr [esp],edi
 00483EF4    mov         dword ptr [esp+4],eax
 00483EF8    mov         eax,dword ptr [esp]
 00483EFB    mov         dword ptr [esi+184],eax
 00483F01    mov         eax,dword ptr [esp+4]
 00483F05    mov         dword ptr [esi+188],eax
 00483F0B    movzx       eax,byte ptr ds:[484004]
 00483F12    cmp         al,bl
>00483F14    jne         00483F2B
 00483F16    xor         eax,eax
 00483F18    mov         dword ptr [esi+18C],eax
 00483F1E    xor         eax,eax
 00483F20    mov         dword ptr [esi+190],eax
>00483F26    jmp         00483FFC
 00483F2B    test        bl,4
>00483F2E    je          00483F5C
 00483F30    test        bl,1
>00483F33    je          00483F4A
 00483F35    mov         edx,2
 00483F3A    mov         eax,dword ptr [esi+74]
 00483F3D    mov         ecx,dword ptr [eax]
 00483F3F    call        dword ptr [ecx+10]
 00483F42    mov         dword ptr [esi+17C],eax
>00483F48    jmp         00483F84
 00483F4A    xor         edx,edx
 00483F4C    mov         eax,dword ptr [esi+74]
 00483F4F    mov         ecx,dword ptr [eax]
 00483F51    call        dword ptr [ecx+10]
 00483F54    mov         dword ptr [esi+17C],eax
>00483F5A    jmp         00483F84
 00483F5C    xor         edx,edx
 00483F5E    mov         eax,dword ptr [esi+74]
 00483F61    mov         ecx,dword ptr [eax]
 00483F63    call        dword ptr [ecx+10]
 00483F66    mov         edi,eax
 00483F68    mov         edx,2
 00483F6D    mov         eax,dword ptr [esi+74]
 00483F70    mov         ecx,dword ptr [eax]
 00483F72    call        dword ptr [ecx+10]
 00483F75    sar         eax,1
>00483F77    jns         00483F7C
 00483F79    adc         eax,0
 00483F7C    add         edi,eax
 00483F7E    mov         dword ptr [esi+17C],edi
 00483F84    test        bl,8
>00483F87    je          00483FB8
 00483F89    test        bl,2
>00483F8C    je          00483FA3
 00483F8E    mov         edx,3
 00483F93    mov         eax,dword ptr [esi+74]
 00483F96    mov         ecx,dword ptr [eax]
 00483F98    call        dword ptr [ecx+10]
 00483F9B    mov         dword ptr [esi+180],eax
>00483FA1    jmp         00483FE3
 00483FA3    mov         edx,1
 00483FA8    mov         eax,dword ptr [esi+74]
 00483FAB    mov         ecx,dword ptr [eax]
 00483FAD    call        dword ptr [ecx+10]
 00483FB0    mov         dword ptr [esi+180],eax
>00483FB6    jmp         00483FE3
 00483FB8    mov         edx,1
 00483FBD    mov         eax,dword ptr [esi+74]
 00483FC0    mov         ecx,dword ptr [eax]
 00483FC2    call        dword ptr [ecx+10]
 00483FC5    mov         ebx,eax
 00483FC7    mov         edx,3
 00483FCC    mov         eax,dword ptr [esi+74]
 00483FCF    mov         ecx,dword ptr [eax]
 00483FD1    call        dword ptr [ecx+10]
 00483FD4    sar         eax,1
>00483FD6    jns         00483FDB
 00483FD8    adc         eax,0
 00483FDB    add         ebx,eax
 00483FDD    mov         dword ptr [esi+180],ebx
 00483FE3    mov         edi,dword ptr [esi+34]
 00483FE6    test        edi,edi
>00483FE8    je          00483FFC
 00483FEA    lea         ecx,[esi+18C]
 00483FF0    mov         edx,esi
 00483FF2    mov         eax,edi
 00483FF4    mov         ebx,dword ptr [eax]
 00483FF6    call        dword ptr [ebx+0E4]
 00483FFC    pop         ecx
 00483FFD    pop         edx
 00483FFE    pop         ebp
 00483FFF    pop         edi
 00484000    pop         esi
 00484001    pop         ebx
 00484002    ret
*}
end;

//00484008
procedure TControl.SetLeft(Value:Integer);
begin
{*
 00484008    push        ebx
 00484009    push        esi
 0048400A    mov         esi,eax
 0048400C    mov         eax,dword ptr [esi+48]
 0048400F    push        eax
 00484010    mov         eax,dword ptr [esi+4C]
 00484013    push        eax
 00484014    mov         ecx,dword ptr [esi+44]
 00484017    mov         eax,esi
 00484019    mov         ebx,dword ptr [eax]
 0048401B    call        dword ptr [ebx+98]
 00484021    or          byte ptr [esi+88],1
 00484028    test        byte ptr [esi+1C],2
>0048402C    je          00484037
 0048402E    mov         eax,dword ptr [esi+40]
 00484031    mov         dword ptr [esi+194],eax
 00484037    pop         esi
 00484038    pop         ebx
 00484039    ret
*}
end;

//0048403C
procedure TControl.SetTop(Value:Integer);
begin
{*
 0048403C    push        ebx
 0048403D    push        esi
 0048403E    mov         esi,eax
 00484040    mov         eax,dword ptr [esi+48]
 00484043    push        eax
 00484044    mov         eax,dword ptr [esi+4C]
 00484047    push        eax
 00484048    mov         ecx,edx
 0048404A    mov         eax,esi
 0048404C    mov         edx,dword ptr [esi+40]
 0048404F    mov         ebx,dword ptr [eax]
 00484051    call        dword ptr [ebx+98]
 00484057    or          byte ptr [esi+88],2
 0048405E    test        byte ptr [esi+1C],2
>00484062    je          0048406D
 00484064    mov         eax,dword ptr [esi+44]
 00484067    mov         dword ptr [esi+198],eax
 0048406D    pop         esi
 0048406E    pop         ebx
 0048406F    ret
*}
end;

//00484070
procedure TControl.SetWidth(Value:Integer);
begin
{*
 00484070    push        ebx
 00484071    push        esi
 00484072    mov         esi,eax
 00484074    push        edx
 00484075    mov         eax,dword ptr [esi+4C]
 00484078    push        eax
 00484079    mov         ecx,dword ptr [esi+44]
 0048407C    mov         eax,esi
 0048407E    mov         edx,dword ptr [esi+40]
 00484081    mov         ebx,dword ptr [eax]
 00484083    call        dword ptr [ebx+98]
 00484089    or          byte ptr [esi+88],4
 00484090    test        byte ptr [esi+1C],2
>00484094    je          0048409F
 00484096    mov         eax,dword ptr [esi+48]
 00484099    mov         dword ptr [esi+19C],eax
 0048409F    pop         esi
 004840A0    pop         ebx
 004840A1    ret
*}
end;

//004840A4
procedure TControl.SetHeight(Value:Integer);
begin
{*
 004840A4    push        ebx
 004840A5    push        esi
 004840A6    mov         esi,eax
 004840A8    mov         eax,dword ptr [esi+48]
 004840AB    push        eax
 004840AC    push        edx
 004840AD    mov         ecx,dword ptr [esi+44]
 004840B0    mov         eax,esi
 004840B2    mov         edx,dword ptr [esi+40]
 004840B5    mov         ebx,dword ptr [eax]
 004840B7    call        dword ptr [ebx+98]
 004840BD    or          byte ptr [esi+88],8
 004840C4    test        byte ptr [esi+1C],2
>004840C8    je          004840D3
 004840CA    mov         eax,dword ptr [esi+4C]
 004840CD    mov         dword ptr [esi+1A0],eax
 004840D3    pop         esi
 004840D4    pop         ebx
 004840D5    ret
*}
end;

//004840D8
procedure TControl.Dock(NewDockSite:TWinControl; ARect:TRect);
begin
{*
 004840D8    push        ebp
 004840D9    mov         ebp,esp
 004840DB    add         esp,0FFFFFFEC
 004840DE    push        ebx
 004840DF    push        esi
 004840E0    push        edi
 004840E1    mov         esi,ecx
 004840E3    lea         edi,[ebp-14]
 004840E6    movs        dword ptr [edi],dword ptr [esi]
 004840E7    movs        dword ptr [edi],dword ptr [esi]
 004840E8    movs        dword ptr [edi],dword ptr [esi]
 004840E9    movs        dword ptr [edi],dword ptr [esi]
 004840EA    mov         ebx,edx
 004840EC    mov         dword ptr [ebp-4],eax
 004840EF    mov         eax,dword ptr [ebp-4]
 004840F2    cmp         ebx,dword ptr [eax+90]
>004840F8    je          00484151
 004840FA    mov         eax,dword ptr [ebp-4]
 004840FD    mov         eax,dword ptr [eax+90]
 00484103    test        eax,eax
>00484105    je          00484131
 00484107    cmp         dword ptr [eax+1C4],0
>0048410E    je          00484131
 00484110    mov         edx,dword ptr [ebp-4]
 00484113    mov         eax,dword ptr [eax+1C4]
 00484119    xor         ecx,ecx
 0048411B    call        TList.RemoveItem
 00484120    mov         eax,dword ptr [ebp-4]
 00484123    mov         eax,dword ptr [eax+90]
 00484129    mov         edx,dword ptr [ebp-4]
 0048412C    call        TComponent.RemoveFreeNotification
 00484131    test        ebx,ebx
>00484133    je          00484151
 00484135    cmp         ebx,0FFFFFFFF
>00484138    je          00484151
 0048413A    cmp         dword ptr [ebx+1C4],0
>00484141    je          00484151
 00484143    mov         eax,dword ptr [ebx+1C4]
 00484149    mov         edx,dword ptr [ebp-4]
 0048414C    call        TList.Add
 00484151    mov         eax,dword ptr [ebp-4]
 00484154    or          dword ptr [eax+54],400
 0048415B    xor         edx,edx
 0048415D    push        ebp
 0048415E    push        4841F9
 00484163    push        dword ptr fs:[edx]
 00484166    mov         dword ptr fs:[edx],esp
 00484169    cmp         ebx,0FFFFFFFF
>0048416C    je          0048417F
 0048416E    lea         ecx,[ebp-14]
 00484171    mov         edx,ebx
 00484173    mov         eax,dword ptr [ebp-4]
 00484176    mov         si,0FFE6
 0048417A    call        @CallDynaInst
 0048417F    mov         eax,dword ptr [ebp-4]
 00484182    mov         eax,dword ptr [eax+90]
 00484188    cmp         ebx,eax
>0048418A    je          004841E1
 0048418C    mov         edi,eax
 0048418E    cmp         ebx,0FFFFFFFF
>00484191    je          004841C4
 00484193    mov         eax,dword ptr [ebp-4]
 00484196    mov         dword ptr [eax+90],ebx
 0048419C    test        ebx,ebx
>0048419E    je          004841CF
 004841A0    lea         ecx,[ebp-14]
 004841A3    mov         edx,dword ptr [ebp-4]
 004841A6    mov         eax,ebx
 004841A8    mov         si,0FFC4
 004841AC    call        @CallDynaInst
 004841B1    mov         eax,dword ptr [ebp-4]
 004841B4    mov         eax,dword ptr [eax+90]
 004841BA    mov         edx,dword ptr [ebp-4]
 004841BD    call        TComponent.FreeNotification
>004841C2    jmp         004841CF
 004841C4    mov         eax,dword ptr [ebp-4]
 004841C7    xor         edx,edx
 004841C9    mov         dword ptr [eax+90],edx
 004841CF    test        edi,edi
>004841D1    je          004841E1
 004841D3    mov         edx,dword ptr [ebp-4]
 004841D6    mov         eax,edi
 004841D8    mov         si,0FFBE
 004841DC    call        @CallDynaInst
 004841E1    xor         eax,eax
 004841E3    pop         edx
 004841E4    pop         ecx
 004841E5    pop         ecx
 004841E6    mov         dword ptr fs:[eax],edx
 004841E9    push        484200
 004841EE    mov         eax,dword ptr [ebp-4]
 004841F1    and         dword ptr [eax+54],0FFFFFBFF
 004841F8    ret
>004841F9    jmp         @HandleFinally
>004841FE    jmp         004841EE
 00484200    pop         edi
 00484201    pop         esi
 00484202    pop         ebx
 00484203    mov         esp,ebp
 00484205    pop         ebp
 00484206    ret
*}
end;

//00484208
procedure TControl.DoDock(NewDockSite:TWinControl; var ARect:TRect);
begin
{*
 00484208    push        ebx
 00484209    push        esi
 0048420A    push        edi
 0048420B    mov         edi,ecx
 0048420D    mov         esi,edx
 0048420F    mov         ebx,eax
 00484211    mov         eax,ebx
 00484213    mov         edx,dword ptr ds:[47C4E8];TWinControl
 00484219    call        @IsClass
 0048421E    test        al,al
>00484220    jne         0048422F
 00484222    xor         ecx,ecx
 00484224    movzx       edx,byte ptr [ebx+59]
 00484228    mov         eax,ebx
 0048422A    call        TControl.InvalidateControl
 0048422F    cmp         esi,dword ptr [ebx+34]
>00484232    je          0048423F
 00484234    mov         edx,edi
 00484236    mov         eax,ebx
 00484238    call        TControl.UpdateBoundsRect
>0048423D    jmp         00484248
 0048423F    mov         edx,edi
 00484241    mov         eax,ebx
 00484243    call        TControl.SetBoundsRect
 00484248    test        esi,esi
>0048424A    je          00484251
 0048424C    cmp         esi,0FFFFFFFF
>0048424F    jne         0048425A
 00484251    xor         edx,edx
 00484253    mov         eax,ebx
 00484255    mov         ecx,dword ptr [eax]
 00484257    call        dword ptr [ecx+78]
 0048425A    pop         edi
 0048425B    pop         esi
 0048425C    pop         ebx
 0048425D    ret
*}
end;

//00484260
procedure TControl.SetHelpKeyword(const Value:UnicodeString);
begin
{*
 00484260    test        byte ptr [eax+1C],1
>00484264    jne         0048426D
 00484266    mov         byte ptr [eax+160],1
 0048426D    mov         dword ptr [eax+168],edx
 00484273    ret
*}
end;

//00484274
procedure TControl.SetHelpContext(const Value:THelpContext);
begin
{*
 00484274    push        ebx
 00484275    push        esi
 00484276    mov         esi,edx
 00484278    mov         ebx,eax
 0048427A    test        byte ptr [ebx+1C],1
>0048427E    jne         00484287
 00484280    mov         byte ptr [ebx+160],0
 00484287    lea         eax,[ebx+164]
 0048428D    mov         edx,esi
 0048428F    call        @UStrAsg
 00484294    pop         esi
 00484295    pop         ebx
 00484296    ret
*}
end;

//00484298
procedure TControl.SetHostDockSite(Value:TWinControl);
begin
{*
 00484298    push        esi
 00484299    push        edi
 0048429A    add         esp,0FFFFFFF0
 0048429D    mov         edi,edx
 0048429F    mov         esi,eax
 004842A1    mov         edx,esp
 004842A3    mov         eax,esi
 004842A5    call        TControl.GetBoundsRect
 004842AA    mov         ecx,esp
 004842AC    mov         edx,edi
 004842AE    mov         eax,esi
 004842B0    mov         si,0FFCC
 004842B4    call        @CallDynaInst
 004842B9    add         esp,10
 004842BC    pop         edi
 004842BD    pop         esi
 004842BE    ret
*}
end;

//004842C0
function TControl.GetBoundsRect:TRect;
begin
{*
 004842C0    mov         ecx,dword ptr [eax+40]
 004842C3    mov         dword ptr [edx],ecx
 004842C5    mov         ecx,dword ptr [eax+44]
 004842C8    mov         dword ptr [edx+4],ecx
 004842CB    mov         ecx,dword ptr [eax+40]
 004842CE    add         ecx,dword ptr [eax+48]
 004842D1    mov         dword ptr [edx+8],ecx
 004842D4    mov         ecx,dword ptr [eax+44]
 004842D7    add         ecx,dword ptr [eax+4C]
 004842DA    mov         dword ptr [edx+0C],ecx
 004842DD    ret
*}
end;

//004842E0
procedure TControl.SetBoundsRect(const Rect:TRect);
begin
{*
 004842E0    push        ebx
 004842E1    push        esi
 004842E2    push        edi
 004842E3    mov         ecx,dword ptr [edx+8]
 004842E6    mov         esi,dword ptr [edx]
 004842E8    sub         ecx,esi
 004842EA    push        ecx
 004842EB    mov         ecx,dword ptr [edx+0C]
 004842EE    mov         edi,dword ptr [edx+4]
 004842F1    sub         ecx,edi
 004842F3    push        ecx
 004842F4    mov         ecx,edi
 004842F6    mov         edx,esi
 004842F8    mov         ebx,dword ptr [eax]
 004842FA    call        dword ptr [ebx+98]
 00484300    pop         edi
 00484301    pop         esi
 00484302    pop         ebx
 00484303    ret
*}
end;

//00484304
function TControl.GetClientRect:TRect;
begin
{*
 00484304    xor         ecx,ecx
 00484306    mov         dword ptr [edx],ecx
 00484308    xor         ecx,ecx
 0048430A    mov         dword ptr [edx+4],ecx
 0048430D    mov         ecx,dword ptr [eax+48]
 00484310    mov         dword ptr [edx+8],ecx
 00484313    mov         eax,dword ptr [eax+4C]
 00484316    mov         dword ptr [edx+0C],eax
 00484319    ret
*}
end;

//0048431C
function TControl.GetClientWidth:Integer;
begin
{*
 0048431C    push        ebx
 0048431D    add         esp,0FFFFFFF0
 00484320    mov         ebx,eax
 00484322    mov         edx,esp
 00484324    mov         eax,ebx
 00484326    mov         ecx,dword ptr [eax]
 00484328    call        dword ptr [ecx+54]
 0048432B    mov         eax,dword ptr [esp+8]
 0048432F    add         esp,10
 00484332    pop         ebx
 00484333    ret
*}
end;

//00484334
procedure TControl.SetClientWidth(Value:Integer);
begin
{*
 00484334    push        ebx
 00484335    push        esi
 00484336    add         esp,0FFFFFFF8
 00484339    mov         esi,edx
 0048433B    mov         ebx,eax
 0048433D    mov         eax,ebx
 0048433F    call        TControl.GetClientHeight
 00484344    mov         dword ptr [esp],esi
 00484347    mov         dword ptr [esp+4],eax
 0048434B    mov         edx,esp
 0048434D    mov         eax,ebx
 0048434F    call        TControl.SetClientSize
 00484354    pop         ecx
 00484355    pop         edx
 00484356    pop         esi
 00484357    pop         ebx
 00484358    ret
*}
end;

//0048435C
function TControl.GetClientHeight:Integer;
begin
{*
 0048435C    push        ebx
 0048435D    add         esp,0FFFFFFF0
 00484360    mov         ebx,eax
 00484362    mov         edx,esp
 00484364    mov         eax,ebx
 00484366    mov         ecx,dword ptr [eax]
 00484368    call        dword ptr [ecx+54]
 0048436B    mov         eax,dword ptr [esp+0C]
 0048436F    add         esp,10
 00484372    pop         ebx
 00484373    ret
*}
end;

//00484374
procedure TControl.SetClientHeight(Value:Integer);
begin
{*
 00484374    push        ebx
 00484375    push        esi
 00484376    add         esp,0FFFFFFF8
 00484379    mov         esi,edx
 0048437B    mov         ebx,eax
 0048437D    mov         eax,ebx
 0048437F    call        TControl.GetClientWidth
 00484384    mov         dword ptr [esp],eax
 00484387    mov         dword ptr [esp+4],esi
 0048438B    mov         edx,esp
 0048438D    mov         eax,ebx
 0048438F    call        TControl.SetClientSize
 00484394    pop         ecx
 00484395    pop         edx
 00484396    pop         esi
 00484397    pop         ebx
 00484398    ret
*}
end;

//0048439C
function TControl.GetClientOrigin:TPoint;
begin
{*
 0048439C    push        ebp
 0048439D    mov         ebp,esp
 0048439F    add         esp,0FFFFFFF4
 004843A2    push        ebx
 004843A3    push        esi
 004843A4    xor         ecx,ecx
 004843A6    mov         dword ptr [ebp-0C],ecx
 004843A9    mov         esi,edx
 004843AB    mov         ebx,eax
 004843AD    xor         eax,eax
 004843AF    push        ebp
 004843B0    push        48441D
 004843B5    push        dword ptr fs:[eax]
 004843B8    mov         dword ptr fs:[eax],esp
 004843BB    cmp         dword ptr [ebx+34],0
>004843BF    jne         004843F2
 004843C1    mov         eax,dword ptr [ebx+8]
 004843C4    mov         dword ptr [ebp-8],eax
 004843C7    mov         byte ptr [ebp-4],11
 004843CB    lea         eax,[ebp-8]
 004843CE    push        eax
 004843CF    push        0
 004843D1    lea         edx,[ebp-0C]
 004843D4    mov         eax,[0078D6BC];^SResString201:TResStringRec
 004843D9    call        LoadResString
 004843DE    mov         ecx,dword ptr [ebp-0C]
 004843E1    mov         dl,1
 004843E3    mov         eax,[00439268];EInvalidOperation
 004843E8    call        Exception.CreateFmt
 004843ED    call        @RaiseExcept
 004843F2    mov         edx,esi
 004843F4    mov         eax,dword ptr [ebx+34]
 004843F7    mov         ecx,dword ptr [eax]
 004843F9    call        dword ptr [ecx+50]
 004843FC    mov         eax,dword ptr [ebx+40]
 004843FF    add         dword ptr [esi],eax
 00484401    mov         eax,dword ptr [ebx+44]
 00484404    add         dword ptr [esi+4],eax
 00484407    xor         eax,eax
 00484409    pop         edx
 0048440A    pop         ecx
 0048440B    pop         ecx
 0048440C    mov         dword ptr fs:[eax],edx
 0048440F    push        484424
 00484414    lea         eax,[ebp-0C]
 00484417    call        @UStrClr
 0048441C    ret
>0048441D    jmp         @HandleFinally
>00484422    jmp         00484414
 00484424    pop         esi
 00484425    pop         ebx
 00484426    mov         esp,ebp
 00484428    pop         ebp
 00484429    ret
*}
end;

//0048442C
function TControl.ClientToScreen(Point:TPoint):TPoint;
begin
{*
 0048442C    push        ebx
 0048442D    push        esi
 0048442E    push        edi
 0048442F    add         esp,0FFFFFFF8
 00484432    mov         edi,ecx
 00484434    mov         esi,edx
 00484436    mov         ebx,eax
 00484438    mov         edx,esp
 0048443A    mov         eax,ebx
 0048443C    mov         ecx,dword ptr [eax]
 0048443E    call        dword ptr [ecx+50]
 00484441    mov         eax,dword ptr [esi]
 00484443    add         eax,dword ptr [esp]
 00484446    mov         dword ptr [edi],eax
 00484448    mov         eax,dword ptr [esi+4]
 0048444B    add         eax,dword ptr [esp+4]
 0048444F    mov         dword ptr [edi+4],eax
 00484452    pop         ecx
 00484453    pop         edx
 00484454    pop         edi
 00484455    pop         esi
 00484456    pop         ebx
 00484457    ret
*}
end;

//00484458
procedure TControl.ScaleConstraints(M:Integer; D:Integer);
begin
{*
 00484458    push        ebx
 00484459    push        esi
 0048445A    push        edi
 0048445B    push        ebp
 0048445C    mov         edi,ecx
 0048445E    mov         esi,edx
 00484460    mov         ebx,dword ptr [eax+70]
 00484463    mov         ebp,dword ptr [ebx+14]
 00484466    test        ebp,ebp
>00484468    jbe         00484480
 0048446A    push        edi
 0048446B    push        esi
 0048446C    push        ebp
 0048446D    call        kernel32.MulDiv
 00484472    mov         ecx,eax
 00484474    mov         edx,3
 00484479    mov         eax,ebx
 0048447B    call        TSizeConstraints.SetConstraints
 00484480    mov         ebp,dword ptr [ebx+0C]
 00484483    test        ebp,ebp
>00484485    jbe         0048449D
 00484487    push        edi
 00484488    push        esi
 00484489    push        ebp
 0048448A    call        kernel32.MulDiv
 0048448F    mov         ecx,eax
 00484491    mov         edx,1
 00484496    mov         eax,ebx
 00484498    call        TSizeConstraints.SetConstraints
 0048449D    mov         ebp,dword ptr [ebx+10]
 004844A0    test        ebp,ebp
>004844A2    jbe         004844BA
 004844A4    push        edi
 004844A5    push        esi
 004844A6    push        ebp
 004844A7    call        kernel32.MulDiv
 004844AC    mov         ecx,eax
 004844AE    mov         edx,2
 004844B3    mov         eax,ebx
 004844B5    call        TSizeConstraints.SetConstraints
 004844BA    mov         ebp,dword ptr [ebx+8]
 004844BD    test        ebp,ebp
>004844BF    jbe         004844D4
 004844C1    push        edi
 004844C2    push        esi
 004844C3    push        ebp
 004844C4    call        kernel32.MulDiv
 004844C9    mov         ecx,eax
 004844CB    xor         edx,edx
 004844CD    mov         eax,ebx
 004844CF    call        TSizeConstraints.SetConstraints
 004844D4    pop         ebp
 004844D5    pop         edi
 004844D6    pop         esi
 004844D7    pop         ebx
 004844D8    ret
*}
end;

//004844DC
procedure TControl.ScaleMargins(M:Integer; D:Integer);
begin
{*
 004844DC    push        ebx
 004844DD    push        esi
 004844DE    push        edi
 004844DF    push        ebp
 004844E0    mov         edi,ecx
 004844E2    mov         esi,edx
 004844E4    mov         ebx,dword ptr [eax+74]
 004844E7    mov         ebp,dword ptr [ebx+8]
 004844EA    test        ebp,ebp
>004844EC    jbe         00484501
 004844EE    push        edi
 004844EF    push        esi
 004844F0    push        ebp
 004844F1    call        kernel32.MulDiv
 004844F6    mov         ecx,eax
 004844F8    xor         edx,edx
 004844FA    mov         eax,ebx
 004844FC    call        TMargins.SetMargin
 00484501    mov         ebp,dword ptr [ebx+0C]
 00484504    test        ebp,ebp
>00484506    jbe         0048451E
 00484508    push        edi
 00484509    push        esi
 0048450A    push        ebp
 0048450B    call        kernel32.MulDiv
 00484510    mov         ecx,eax
 00484512    mov         edx,1
 00484517    mov         eax,ebx
 00484519    call        TMargins.SetMargin
 0048451E    mov         ebp,dword ptr [ebx+10]
 00484521    test        ebp,ebp
>00484523    jbe         0048453B
 00484525    push        edi
 00484526    push        esi
 00484527    push        ebp
 00484528    call        kernel32.MulDiv
 0048452D    mov         ecx,eax
 0048452F    mov         edx,2
 00484534    mov         eax,ebx
 00484536    call        TMargins.SetMargin
 0048453B    mov         ebp,dword ptr [ebx+14]
 0048453E    test        ebp,ebp
>00484540    jbe         00484558
 00484542    push        edi
 00484543    push        esi
 00484544    push        ebp
 00484545    call        kernel32.MulDiv
 0048454A    mov         ecx,eax
 0048454C    mov         edx,3
 00484551    mov         eax,ebx
 00484553    call        TMargins.SetMargin
 00484558    pop         ebp
 00484559    pop         edi
 0048455A    pop         esi
 0048455B    pop         ebx
 0048455C    ret
*}
end;

//00484560
function TControl.ScreenToClient(Point:TPoint):TPoint;
begin
{*
 00484560    push        ebx
 00484561    push        esi
 00484562    push        edi
 00484563    add         esp,0FFFFFFF8
 00484566    mov         edi,ecx
 00484568    mov         esi,edx
 0048456A    mov         ebx,eax
 0048456C    mov         edx,esp
 0048456E    mov         eax,ebx
 00484570    mov         ecx,dword ptr [eax]
 00484572    call        dword ptr [ecx+50]
 00484575    mov         eax,dword ptr [esi]
 00484577    sub         eax,dword ptr [esp]
 0048457A    mov         dword ptr [edi],eax
 0048457C    mov         eax,dword ptr [esi+4]
 0048457F    sub         eax,dword ptr [esp+4]
 00484583    mov         dword ptr [edi+4],eax
 00484586    pop         ecx
 00484587    pop         edx
 00484588    pop         edi
 00484589    pop         esi
 0048458A    pop         ebx
 0048458B    ret
*}
end;

//0048458C
procedure TControl.SendCancelMode(Sender:TControl);
begin
{*
 0048458C    push        ebx
 0048458D    push        esi
 0048458E    mov         esi,edx
 00484590    mov         ebx,eax
 00484592    test        ebx,ebx
>00484594    je          004845B7
 00484596    mov         eax,ebx
 00484598    mov         edx,dword ptr ds:[4DF7D4];TCustomForm
 0048459E    call        @IsClass
 004845A3    test        al,al
>004845A5    je          004845B0
 004845A7    mov         edx,esi
 004845A9    mov         eax,ebx
 004845AB    call        TCustomForm.SendCancelMode
 004845B0    mov         ebx,dword ptr [ebx+34]
 004845B3    test        ebx,ebx
>004845B5    jne         00484596
 004845B7    pop         esi
 004845B8    pop         ebx
 004845B9    ret
*}
end;

//004845BC
procedure TControl.SendDockNotification(Msg:Cardinal; WParam:THandle; LParam:THandle);
begin
{*
 004845BC    push        ebp
 004845BD    mov         ebp,esp
 004845BF    add         esp,0FFFFFFF0
 004845C2    push        ebx
 004845C3    push        esi
 004845C4    push        edi
 004845C5    mov         dword ptr [ebp-4],ecx
 004845C8    mov         edi,edx
 004845CA    mov         ebx,eax
 004845CC    mov         esi,dword ptr [ebx+90]
 004845D2    test        esi,esi
>004845D4    je          00484617
 004845D6    cmp         dword ptr ds:[7931B4],0
>004845DD    jne         00484617
 004845DF    movzx       eax,word ptr ds:[484620]
 004845E6    and         ax,word ptr [ebx+1C]
 004845EA    movzx       edx,word ptr ds:[484624]
 004845F1    cmp         dx,ax
>004845F4    jne         00484617
 004845F6    mov         dword ptr [ebp-10],edi
 004845F9    mov         eax,dword ptr [ebp-4]
 004845FC    mov         dword ptr [ebp-0C],eax
 004845FF    mov         eax,dword ptr [ebp+8]
 00484602    mov         dword ptr [ebp-8],eax
 00484605    lea         eax,[ebp-10]
 00484608    push        eax
 00484609    mov         ecx,ebx
 0048460B    mov         edx,0B042
 00484610    mov         eax,esi
 00484612    call        TControl.Perform
 00484617    pop         edi
 00484618    pop         esi
 00484619    pop         ebx
 0048461A    mov         esp,ebp
 0048461C    pop         ebp
 0048461D    ret         4
*}
end;

//00484628
procedure TControl.Changed;
begin
{*
 00484628    push        eax
 00484629    xor         ecx,ecx
 0048462B    mov         edx,0B037
 00484630    call        TControl.Perform
 00484635    ret
*}
end;

//00484638
procedure TControl.ChangeScale(M:Integer; D:Integer);
begin
{*
 00484638    push        ebx
 00484639    push        esi
 0048463A    push        edi
 0048463B    push        ebp
 0048463C    add         esp,0FFFFFFF0
 0048463F    mov         dword ptr [esp],ecx
 00484642    mov         edi,edx
 00484644    mov         esi,eax
 00484646    cmp         edi,dword ptr [esp]
>00484649    je          004847D8
 0048464F    test        byte ptr [esi+1C],1
>00484653    je          0048465E
 00484655    movzx       ebx,byte ptr [esi+88]
>0048465C    jmp         00484665
 0048465E    movzx       ebx,byte ptr ds:[4847F0]
 00484665    test        bl,1
>00484668    je          0048467C
 0048466A    mov         eax,dword ptr [esp]
 0048466D    push        eax
 0048466E    push        edi
 0048466F    mov         eax,dword ptr [esi+40]
 00484672    push        eax
 00484673    call        kernel32.MulDiv
 00484678    mov         ebp,eax
>0048467A    jmp         0048467F
 0048467C    mov         ebp,dword ptr [esi+40]
 0048467F    test        bl,2
>00484682    je          00484698
 00484684    mov         eax,dword ptr [esp]
 00484687    push        eax
 00484688    push        edi
 00484689    mov         eax,dword ptr [esi+44]
 0048468C    push        eax
 0048468D    call        kernel32.MulDiv
 00484692    mov         dword ptr [esp+4],eax
>00484696    jmp         0048469F
 00484698    mov         eax,dword ptr [esi+44]
 0048469B    mov         dword ptr [esp+4],eax
 0048469F    test        bl,4
>004846A2    je          004846DC
 004846A4    test        byte ptr [esi+51],1
>004846A8    jne         004846DC
 004846AA    test        bl,1
>004846AD    je          004846C8
 004846AF    mov         eax,dword ptr [esp]
 004846B2    push        eax
 004846B3    push        edi
 004846B4    mov         eax,dword ptr [esi+40]
 004846B7    add         eax,dword ptr [esi+48]
 004846BA    push        eax
 004846BB    call        kernel32.MulDiv
 004846C0    sub         eax,ebp
 004846C2    mov         dword ptr [esp+8],eax
>004846C6    jmp         004846E3
 004846C8    mov         eax,dword ptr [esp]
 004846CB    push        eax
 004846CC    push        edi
 004846CD    mov         eax,dword ptr [esi+48]
 004846D0    push        eax
 004846D1    call        kernel32.MulDiv
 004846D6    mov         dword ptr [esp+8],eax
>004846DA    jmp         004846E3
 004846DC    mov         eax,dword ptr [esi+48]
 004846DF    mov         dword ptr [esp+8],eax
 004846E3    test        bl,8
>004846E6    je          00484722
 004846E8    test        byte ptr [esi+51],2
>004846EC    jne         00484722
 004846EE    test        bl,2
>004846F1    je          0048470E
 004846F3    mov         eax,dword ptr [esp]
 004846F6    push        eax
 004846F7    push        edi
 004846F8    mov         eax,dword ptr [esi+44]
 004846FB    add         eax,dword ptr [esi+4C]
 004846FE    push        eax
 004846FF    call        kernel32.MulDiv
 00484704    sub         eax,dword ptr [esp+4]
 00484708    mov         dword ptr [esp+0C],eax
>0048470C    jmp         00484729
 0048470E    mov         eax,dword ptr [esp]
 00484711    push        eax
 00484712    push        edi
 00484713    mov         eax,dword ptr [esi+4C]
 00484716    push        eax
 00484717    call        kernel32.MulDiv
 0048471C    mov         dword ptr [esp+0C],eax
>00484720    jmp         00484729
 00484722    mov         eax,dword ptr [esi+4C]
 00484725    mov         dword ptr [esp+0C],eax
 00484729    mov         ecx,dword ptr [esp]
 0048472C    mov         edx,edi
 0048472E    mov         eax,esi
 00484730    call        TControl.ScaleConstraints
 00484735    mov         ecx,dword ptr [esp]
 00484738    mov         edx,edi
 0048473A    mov         eax,esi
 0048473C    call        TControl.ScaleMargins
 00484741    mov         eax,dword ptr [esp+8]
 00484745    push        eax
 00484746    mov         eax,dword ptr [esp+10]
 0048474A    push        eax
 0048474B    mov         ecx,dword ptr [esp+0C]
 0048474F    mov         edx,ebp
 00484751    mov         eax,esi
 00484753    mov         ebp,dword ptr [eax]
 00484755    call        dword ptr [ebp+98]
 0048475B    mov         eax,ebx
 0048475D    and         al,byte ptr ds:[4847F4]
 00484763    movzx       edx,byte ptr ds:[4847F8]
 0048476A    cmp         dl,al
>0048476C    je          00484785
 0048476E    mov         eax,dword ptr [esp]
 00484771    push        eax
 00484772    push        edi
 00484773    mov         eax,dword ptr [esi+18C]
 00484779    push        eax
 0048477A    call        kernel32.MulDiv
 0048477F    mov         dword ptr [esi+18C],eax
 00484785    mov         eax,ebx
 00484787    and         al,byte ptr ds:[4847FC]
 0048478D    movzx       edx,byte ptr ds:[4847F8]
 00484794    cmp         dl,al
>00484796    je          004847AF
 00484798    mov         eax,dword ptr [esp]
 0048479B    push        eax
 0048479C    push        edi
 0048479D    mov         eax,dword ptr [esi+190]
 004847A3    push        eax
 004847A4    call        kernel32.MulDiv
 004847A9    mov         dword ptr [esi+190],eax
 004847AF    cmp         byte ptr [esi+5B],0
>004847B3    jne         004847D8
 004847B5    test        bl,10
>004847B8    je          004847D8
 004847BA    mov         eax,dword ptr [esp]
 004847BD    push        eax
 004847BE    push        edi
 004847BF    mov         ebx,dword ptr [esi+64]
 004847C2    mov         eax,ebx
 004847C4    call        TFont.GetSize
 004847C9    push        eax
 004847CA    call        kernel32.MulDiv
 004847CF    mov         edx,eax
 004847D1    mov         eax,ebx
 004847D3    call        TFont.SetSize
 004847D8    movzx       eax,byte ptr ds:[4847F8]
 004847DF    mov         byte ptr [esi+88],al
 004847E5    add         esp,10
 004847E8    pop         ebp
 004847E9    pop         edi
 004847EA    pop         esi
 004847EB    pop         ebx
 004847EC    ret
*}
end;

//00484800
procedure TControl.SetAutoSize(Value:Boolean);
begin
{*
 00484800    push        esi
 00484801    cmp         dl,byte ptr [eax+5E]
>00484804    je          00484816
 00484806    mov         byte ptr [eax+5E],dl
 00484809    test        dl,dl
>0048480B    je          00484816
 0048480D    mov         si,0FFEF
 00484811    call        @CallDynaInst
 00484816    pop         esi
 00484817    ret
*}
end;

//00484818
procedure TControl.SetName(const Value:TComponentName);
begin
{*
 00484818    push        ebp
 00484819    mov         ebp,esp
 0048481B    add         esp,0FFFFFFF8
 0048481E    push        ebx
 0048481F    push        esi
 00484820    push        edi
 00484821    xor         ecx,ecx
 00484823    mov         dword ptr [ebp-8],ecx
 00484826    mov         dword ptr [ebp-4],edx
 00484829    mov         edi,eax
 0048482B    xor         eax,eax
 0048482D    push        ebp
 0048482E    push        4848AE
 00484833    push        dword ptr fs:[eax]
 00484836    mov         dword ptr fs:[eax],esp
 00484839    test        byte ptr [edi+50],20
>0048483D    je          0048487A
 0048483F    test        byte ptr [edi+1C],1
>00484843    jne         0048487A
 00484845    lea         edx,[ebp-8]
 00484848    mov         eax,edi
 0048484A    call        TControl.GetText
 0048484F    mov         edx,dword ptr [ebp-8]
 00484852    mov         eax,dword ptr [edi+8]
 00484855    call        @UStrEqual
>0048485A    jne         0048487A
 0048485C    mov         esi,dword ptr [edi+4]
 0048485F    test        esi,esi
>00484861    je          0048487E
 00484863    mov         eax,esi
 00484865    mov         edx,dword ptr ds:[47A16C];TControl
 0048486B    call        @IsClass
 00484870    test        al,al
>00484872    je          0048487E
 00484874    test        byte ptr [esi+1C],1
>00484878    je          0048487E
 0048487A    xor         ebx,ebx
>0048487C    jmp         00484880
 0048487E    mov         bl,1
 00484880    mov         edx,dword ptr [ebp-4]
 00484883    mov         eax,edi
 00484885    call        TComponent.SetName
 0048488A    test        bl,bl
>0048488C    je          00484898
 0048488E    mov         edx,dword ptr [ebp-4]
 00484891    mov         eax,edi
 00484893    call        TControl.SetText
 00484898    xor         eax,eax
 0048489A    pop         edx
 0048489B    pop         ecx
 0048489C    pop         ecx
 0048489D    mov         dword ptr fs:[eax],edx
 004848A0    push        4848B5
 004848A5    lea         eax,[ebp-8]
 004848A8    call        @UStrClr
 004848AD    ret
>004848AE    jmp         @HandleFinally
>004848B3    jmp         004848A5
 004848B5    pop         edi
 004848B6    pop         esi
 004848B7    pop         ebx
 004848B8    pop         ecx
 004848B9    pop         ecx
 004848BA    pop         ebp
 004848BB    ret
*}
end;

//004848BC
procedure TControl.SetClientSize(Value:TPoint);
begin
{*
 004848BC    push        ebx
 004848BD    push        esi
 004848BE    push        edi
 004848BF    add         esp,0FFFFFFE8
 004848C2    mov         esi,edx
 004848C4    lea         edi,[esp]
 004848C7    movs        dword ptr [edi],dword ptr [esi]
 004848C8    movs        dword ptr [edi],dword ptr [esi]
 004848C9    mov         ebx,eax
 004848CB    lea         edx,[esp+8]
 004848CF    mov         eax,ebx
 004848D1    mov         ecx,dword ptr [eax]
 004848D3    call        dword ptr [ecx+54]
 004848D6    mov         eax,dword ptr [ebx+48]
 004848D9    sub         eax,dword ptr [esp+10]
 004848DD    add         eax,dword ptr [esp]
 004848E0    push        eax
 004848E1    mov         eax,dword ptr [ebx+4C]
 004848E4    sub         eax,dword ptr [esp+18]
 004848E8    add         eax,dword ptr [esp+8]
 004848EC    push        eax
 004848ED    mov         ecx,dword ptr [ebx+44]
 004848F0    mov         edx,dword ptr [ebx+40]
 004848F3    mov         eax,ebx
 004848F5    mov         ebx,dword ptr [eax]
 004848F7    call        dword ptr [ebx+98]
 004848FD    add         esp,18
 00484900    pop         edi
 00484901    pop         esi
 00484902    pop         ebx
 00484903    ret
*}
end;

//00484904
procedure TControl.SetParent(AParent:TWinControl);
begin
{*
 00484904    push        ebx
 00484905    push        esi
 00484906    mov         esi,edx
 00484908    mov         ebx,eax
 0048490A    cmp         esi,dword ptr [ebx+34]
>0048490D    je          0048494C
 0048490F    cmp         ebx,esi
>00484911    jne         0048492A
 00484913    mov         ecx,dword ptr ds:[78D6C0];^SResString220:TResStringRec
 00484919    mov         dl,1
 0048491B    mov         eax,[00439268];EInvalidOperation
 00484920    call        Exception.CreateRes
 00484925    call        @RaiseExcept
 0048492A    mov         eax,dword ptr [ebx+34]
 0048492D    test        eax,eax
>0048492F    je          00484938
 00484931    mov         edx,ebx
 00484933    call        TWinControl.RemoveControl
 00484938    test        esi,esi
>0048493A    je          0048494C
 0048493C    mov         edx,ebx
 0048493E    mov         eax,esi
 00484940    call        TWinControl.InsertControl
 00484945    mov         eax,ebx
 00484947    call        TControl.UpdateAnchorRules
 0048494C    pop         esi
 0048494D    pop         ebx
 0048494E    ret
*}
end;

//00484950
procedure TControl.SetVisible(Value:Boolean);
begin
{*
 00484950    push        ebx
 00484951    push        esi
 00484952    push        edi
 00484953    mov         ebx,edx
 00484955    mov         edi,eax
 00484957    cmp         bl,byte ptr [edi+59]
>0048495A    je          00484982
 0048495C    mov         eax,edi
 0048495E    mov         si,0FFCE
 00484962    call        @CallDynaInst
 00484967    mov         byte ptr [edi+59],bl
 0048496A    push        0
 0048496C    movzx       ecx,bl
 0048496F    mov         edx,0B00B
 00484974    mov         eax,edi
 00484976    call        TControl.Perform
 0048497B    mov         eax,edi
 0048497D    mov         edx,dword ptr [eax]
 0048497F    call        dword ptr [edx+68]
 00484982    pop         edi
 00484983    pop         esi
 00484984    pop         ebx
 00484985    ret
*}
end;

//00484988
procedure TControl.SetEnabled(Value:Boolean);
begin
{*
 00484988    cmp         dl,byte ptr [eax+5A]
>0048498B    je          0048499E
 0048498D    mov         byte ptr [eax+5A],dl
 00484990    push        0
 00484992    xor         ecx,ecx
 00484994    mov         edx,0B00C
 00484999    call        TControl.Perform
 0048499E    ret
*}
end;

//004849A0
function TControl.GetTextLen:Integer;
begin
{*
 004849A0    push        0
 004849A2    xor         ecx,ecx
 004849A4    mov         edx,0E
 004849A9    call        TControl.Perform
 004849AE    ret
*}
end;

//004849B0
function TControl.GetTextBuf(Buffer:PWideChar; BufSize:Integer):Integer;
begin
{*
 004849B0    push        edx
 004849B1    mov         edx,0D
 004849B6    call        TControl.Perform
 004849BB    ret
*}
end;

//004849BC
function TControl.GetUndockHeight:Integer;
begin
{*
 004849BC    mov         edx,dword ptr [eax+9C]
 004849C2    test        edx,edx
>004849C4    jle         004849C9
 004849C6    mov         eax,edx
 004849C8    ret
 004849C9    mov         eax,dword ptr [eax+4C]
 004849CC    ret
*}
end;

//004849D0
function TControl.GetUndockWidth:Integer;
begin
{*
 004849D0    mov         edx,dword ptr [eax+98]
 004849D6    test        edx,edx
>004849D8    jle         004849DD
 004849DA    mov         eax,edx
 004849DC    ret
 004849DD    mov         eax,dword ptr [eax+48]
 004849E0    ret
*}
end;

//004849E4
function TControl.GetTBDockHeight:Integer;
begin
{*
 004849E4    mov         edx,dword ptr [eax+0A4]
 004849EA    test        edx,edx
>004849EC    jle         004849F1
 004849EE    mov         eax,edx
 004849F0    ret
 004849F1    call        TControl.GetUndockHeight
 004849F6    ret
*}
end;

//004849F8
function TControl.GetLRDockWidth:Integer;
begin
{*
 004849F8    mov         edx,dword ptr [eax+0A0]
 004849FE    test        edx,edx
>00484A00    jle         00484A05
 00484A02    mov         eax,edx
 00484A04    ret
 00484A05    call        TControl.GetUndockWidth
 00484A0A    ret
*}
end;

//00484A0C
procedure TControl.SetPopupMenu(Value:TPopupMenu);
begin
{*
 00484A0C    push        ebx
 00484A0D    push        esi
 00484A0E    mov         esi,edx
 00484A10    mov         ebx,eax
 00484A12    mov         dword ptr [ebx+7C],esi
 00484A15    test        esi,esi
>00484A17    je          00484A2B
 00484A19    mov         edx,ebx
 00484A1B    mov         eax,esi
 00484A1D    call        TMenu.ParentBiDiModeChanged
 00484A22    mov         edx,ebx
 00484A24    mov         eax,esi
 00484A26    call        TComponent.FreeNotification
 00484A2B    pop         esi
 00484A2C    pop         ebx
 00484A2D    ret
*}
end;

//00484A30
function TControl.GetText:TCaption;
begin
{*
 00484A30    push        ebx
 00484A31    push        esi
 00484A32    push        edi
 00484A33    mov         edi,edx
 00484A35    mov         esi,eax
 00484A37    mov         eax,esi
 00484A39    call        TControl.GetTextLen
 00484A3E    mov         ebx,eax
 00484A40    mov         eax,edi
 00484A42    mov         ecx,ebx
 00484A44    xor         edx,edx
 00484A46    call        @UStrFromPWCharLen
 00484A4B    test        ebx,ebx
>00484A4D    je          00484A62
 00484A4F    mov         eax,dword ptr [edi]
 00484A51    call        @UStrToPWChar
 00484A56    mov         edx,eax
 00484A58    lea         ecx,[ebx+1]
 00484A5B    mov         eax,esi
 00484A5D    call        TControl.GetTextBuf
 00484A62    pop         edi
 00484A63    pop         esi
 00484A64    pop         ebx
 00484A65    ret
*}
end;

//00484A68
procedure TControl.SetText(const Value:TCaption);
begin
{*
 00484A68    push        ebp
 00484A69    mov         ebp,esp
 00484A6B    push        0
 00484A6D    push        ebx
 00484A6E    push        esi
 00484A6F    mov         esi,edx
 00484A71    mov         ebx,eax
 00484A73    xor         eax,eax
 00484A75    push        ebp
 00484A76    push        484ABD
 00484A7B    push        dword ptr fs:[eax]
 00484A7E    mov         dword ptr fs:[eax],esp
 00484A81    lea         edx,[ebp-4]
 00484A84    mov         eax,ebx
 00484A86    call        TControl.GetText
 00484A8B    mov         eax,dword ptr [ebp-4]
 00484A8E    mov         edx,esi
 00484A90    call        @UStrEqual
>00484A95    je          00484AA7
 00484A97    mov         eax,esi
 00484A99    call        @UStrToPWChar
 00484A9E    mov         edx,eax
 00484AA0    mov         eax,ebx
 00484AA2    call        TControl.SetTextBuf
 00484AA7    xor         eax,eax
 00484AA9    pop         edx
 00484AAA    pop         ecx
 00484AAB    pop         ecx
 00484AAC    mov         dword ptr fs:[eax],edx
 00484AAF    push        484AC4
 00484AB4    lea         eax,[ebp-4]
 00484AB7    call        @UStrClr
 00484ABC    ret
>00484ABD    jmp         @HandleFinally
>00484AC2    jmp         00484AB4
 00484AC4    pop         esi
 00484AC5    pop         ebx
 00484AC6    pop         ecx
 00484AC7    pop         ebp
 00484AC8    ret
*}
end;

//00484ACC
procedure TControl.SetBiDiMode(Value:TBiDiMode);
begin
{*
 00484ACC    cmp         dl,byte ptr [eax+61]
>00484ACF    je          00484AE6
 00484AD1    mov         byte ptr [eax+61],dl
 00484AD4    mov         byte ptr [eax+62],0
 00484AD8    push        0
 00484ADA    xor         ecx,ecx
 00484ADC    mov         edx,0B03C
 00484AE1    call        TControl.Perform
 00484AE6    ret
*}
end;

//00484AE8
procedure TControl.FontChanged(Sender:TObject);
begin
{*
 00484AE8    push        ebx
 00484AE9    mov         ebx,eax
 00484AEB    mov         byte ptr [ebx+5B],0
 00484AEF    mov         byte ptr [ebx+58],0
 00484AF3    mov         eax,dword ptr [ebx+64]
 00484AF6    mov         eax,dword ptr [eax+10]
 00484AF9    mov         eax,dword ptr [eax+18]
 00484AFC    cmp         eax,dword ptr [ebx+84]
>00484B02    je          00484B1A
 00484B04    or          byte ptr [ebx+88],10
 00484B0B    mov         eax,dword ptr [ebx+64]
 00484B0E    mov         eax,dword ptr [eax+10]
 00484B11    mov         eax,dword ptr [eax+18]
 00484B14    mov         dword ptr [ebx+84],eax
 00484B1A    push        0
 00484B1C    xor         ecx,ecx
 00484B1E    mov         edx,0B00E
 00484B23    mov         eax,ebx
 00484B25    call        TControl.Perform
 00484B2A    pop         ebx
 00484B2B    ret
*}
end;

//00484B2C
procedure TControl.SetFont(Value:TFont);
begin
{*
 00484B2C    push        esi
 00484B2D    mov         esi,eax
 00484B2F    mov         eax,dword ptr [esi+64]
 00484B32    mov         ecx,dword ptr [eax]
 00484B34    call        dword ptr [ecx+8]
 00484B37    pop         esi
 00484B38    ret
*}
end;

//00484B3C
function TControl.IsFontStored(Value:TFont):Boolean;
begin
{*
 00484B3C    cmp         byte ptr [eax+5B],0
>00484B40    jne         00484B48
 00484B42    cmp         byte ptr [eax+58],0
>00484B46    je          00484B4B
 00484B48    xor         eax,eax
 00484B4A    ret
 00484B4B    mov         al,1
 00484B4D    ret
*}
end;

//00484B50
function TControl.IsShowHintStored(Value:Boolean):Boolean;
begin
{*
 00484B50    movzx       eax,byte ptr [eax+8A]
 00484B57    xor         al,1
 00484B59    ret
*}
end;

//00484B5C
procedure TGroupBox.IsStoredBiDiMode(Value:TBiDiMode);
begin
{*
 00484B5C    movzx       eax,byte ptr [eax+62];TGroupBox.FParentBiDiMode:Boolean
 00484B60    xor         al,1
 00484B62    ret
*}
end;

//00484B64
procedure TControl.SetParentFont(Value:Boolean);
begin
{*
 00484B64    cmp         dl,byte ptr [eax+5B]
>00484B67    je          00484B86
 00484B69    mov         byte ptr [eax+5B],dl
 00484B6C    cmp         dword ptr [eax+34],0
>00484B70    je          00484B86
 00484B72    test        byte ptr [eax+1C],2
>00484B76    jne         00484B86
 00484B78    push        0
 00484B7A    xor         ecx,ecx
 00484B7C    mov         edx,0B008
 00484B81    call        TControl.Perform
 00484B86    ret
*}
end;

//00484B88
procedure TControl.SetShowHint(Value:Boolean);
begin
{*
 00484B88    cmp         dl,byte ptr [eax+89]
>00484B8E    je          00484BAB
 00484B90    mov         byte ptr [eax+89],dl
 00484B96    mov         byte ptr [eax+8A],0
 00484B9D    push        0
 00484B9F    xor         ecx,ecx
 00484BA1    mov         edx,0B022
 00484BA6    call        TControl.Perform
 00484BAB    ret
*}
end;

//00484BAC
procedure TControl.SetParentShowHint(Value:Boolean);
begin
{*
 00484BAC    cmp         dl,byte ptr [eax+8A]
>00484BB2    je          00484BD4
 00484BB4    mov         byte ptr [eax+8A],dl
 00484BBA    cmp         dword ptr [eax+34],0
>00484BBE    je          00484BD4
 00484BC0    test        byte ptr [eax+1C],2
>00484BC4    jne         00484BD4
 00484BC6    push        0
 00484BC8    xor         ecx,ecx
 00484BCA    mov         edx,0B023
 00484BCF    call        TControl.Perform
 00484BD4    ret
*}
end;

//00484BD8
procedure TControl.SetParentCustomHint(Value:Boolean);
begin
{*
 00484BD8    cmp         dl,byte ptr [eax+170]
>00484BDE    je          00484BE6
 00484BE0    mov         byte ptr [eax+170],dl
 00484BE6    ret
*}
end;

//00484BE8
procedure TControl.SetColor(Value:TColor);
begin
{*
 00484BE8    push        ebx
 00484BE9    mov         ebx,eax
 00484BEB    cmp         edx,dword ptr [ebx+6C]
>00484BEE    je          00484C30
 00484BF0    mov         dword ptr [ebx+6C],edx
 00484BF3    mov         byte ptr [ebx+5C],0
 00484BF7    test        byte ptr [ebx+1C],10
>00484BFB    je          00484C20
 00484BFD    test        byte ptr [ebx+1C],2
>00484C01    jne         00484C20
 00484C03    mov         eax,ebx
 00484C05    mov         edx,dword ptr ds:[47C4E8];TWinControl
 00484C0B    call        @IsClass
 00484C10    test        al,al
>00484C12    je          00484C20
 00484C14    xor         edx,edx
 00484C16    mov         eax,ebx
 00484C18    mov         ecx,dword ptr [eax]
 00484C1A    call        dword ptr [ecx+0D8]
 00484C20    push        0
 00484C22    xor         ecx,ecx
 00484C24    mov         edx,0B00D
 00484C29    mov         eax,ebx
 00484C2B    call        TControl.Perform
 00484C30    pop         ebx
 00484C31    ret
*}
end;

//00484C34
procedure TGroupBox.IsStoredColor(Value:TColor);
begin
{*
 00484C34    movzx       eax,byte ptr [eax+5C];TGroupBox.FParentColor:Boolean
 00484C38    xor         al,1
 00484C3A    ret
*}
end;

//00484C3C
procedure TControl.SetParentColor(Value:Boolean);
begin
{*
 00484C3C    cmp         dl,byte ptr [eax+5C]
>00484C3F    je          00484C5E
 00484C41    mov         byte ptr [eax+5C],dl
 00484C44    cmp         dword ptr [eax+34],0
>00484C48    je          00484C5E
 00484C4A    test        byte ptr [eax+1C],2
>00484C4E    jne         00484C5E
 00484C50    push        0
 00484C52    xor         ecx,ecx
 00484C54    mov         edx,0B009
 00484C59    call        TControl.Perform
 00484C5E    ret
*}
end;

//00484C60
procedure TControl.SetParentBiDiMode(Value:Boolean);
begin
{*
 00484C60    cmp         dl,byte ptr [eax+62]
>00484C63    je          00484C82
 00484C65    mov         byte ptr [eax+62],dl
 00484C68    cmp         dword ptr [eax+34],0
>00484C6C    je          00484C82
 00484C6E    test        byte ptr [eax+1C],2
>00484C72    jne         00484C82
 00484C74    push        0
 00484C76    xor         ecx,ecx
 00484C78    mov         edx,0B03D
 00484C7D    call        TControl.Perform
 00484C82    ret
*}
end;

//00484C84
procedure TControl.SetCursor(Value:TCursor);
begin
{*
 00484C84    cmp         dx,word ptr [eax+78]
>00484C88    je          00484C9C
 00484C8A    mov         word ptr [eax+78],dx
 00484C8E    push        0
 00484C90    xor         ecx,ecx
 00484C92    mov         edx,0B00F
 00484C97    call        TControl.Perform
 00484C9C    ret
*}
end;

//00484CA0
function TControl.GetMouseCapture:Boolean;
begin
{*
 00484CA0    push        ebx
 00484CA1    mov         ebx,eax
 00484CA3    call        GetCaptureControl
 00484CA8    cmp         ebx,eax
 00484CAA    sete        al
 00484CAD    pop         ebx
 00484CAE    ret
*}
end;

//00484CB0
procedure TControl.SetMouseCapture(Value:Boolean);
begin
{*
 00484CB0    push        ebx
 00484CB1    push        esi
 00484CB2    mov         ebx,edx
 00484CB4    mov         esi,eax
 00484CB6    mov         eax,esi
 00484CB8    call        TControl.GetMouseCapture
 00484CBD    cmp         bl,al
>00484CBF    je          00484CD5
 00484CC1    test        bl,bl
>00484CC3    je          00484CCE
 00484CC5    mov         eax,esi
 00484CC7    call        SetCaptureControl
>00484CCC    jmp         00484CD5
 00484CCE    xor         eax,eax
 00484CD0    call        SetCaptureControl
 00484CD5    pop         esi
 00484CD6    pop         ebx
 00484CD7    ret
*}
end;

//00484CD8
procedure TControl.BringToFront;
begin
{*
 00484CD8    push        esi
 00484CD9    mov         dl,1
 00484CDB    mov         si,0FFCF
 00484CDF    call        @CallDynaInst
 00484CE4    pop         esi
 00484CE5    ret
*}
end;

//00484CE8
procedure TControl.SendToBack;
begin
{*
 00484CE8    push        esi
 00484CE9    xor         edx,edx
 00484CEB    mov         si,0FFCF
 00484CEF    call        @CallDynaInst
 00484CF4    pop         esi
 00484CF5    ret
*}
end;

//00484CF8
procedure TControl.SetZOrderPosition(Position:Integer);
begin
{*
 00484CF8    push        ebx
 00484CF9    push        esi
 00484CFA    push        edi
 00484CFB    mov         esi,edx
 00484CFD    mov         ebx,eax
 00484CFF    mov         eax,dword ptr [ebx+34]
 00484D02    test        eax,eax
>00484D04    je          00484D7F
 00484D06    mov         eax,dword ptr [eax+1DC]
 00484D0C    mov         edx,ebx
 00484D0E    call        TList.IndexOf
 00484D13    test        eax,eax
>00484D15    jl          00484D7F
 00484D17    mov         edx,dword ptr [ebx+34]
 00484D1A    mov         edi,dword ptr [edx+1DC]
 00484D20    mov         edx,dword ptr [edi+8]
 00484D23    test        esi,esi
>00484D25    jge         00484D29
 00484D27    xor         esi,esi
 00484D29    cmp         edx,esi
>00484D2B    jg          00484D30
 00484D2D    mov         esi,edx
 00484D2F    dec         esi
 00484D30    cmp         eax,esi
>00484D32    je          00484D7F
 00484D34    mov         edx,edi
 00484D36    xchg        eax,edx
 00484D37    call        TList.Delete
 00484D3C    mov         eax,dword ptr [ebx+34]
 00484D3F    mov         eax,dword ptr [eax+1DC]
 00484D45    mov         ecx,ebx
 00484D47    mov         edx,esi
 00484D49    call        TList.Insert
 00484D4E    mov         cl,1
 00484D50    movzx       edx,byte ptr [ebx+59]
 00484D54    mov         eax,ebx
 00484D56    call        TControl.InvalidateControl
 00484D5B    test        byte ptr [ebx+1C],1
>00484D5F    jne         00484D7F
 00484D61    mov         dl,1
 00484D63    mov         eax,ebx
 00484D65    call        ValidParentForm
 00484D6A    mov         esi,eax
 00484D6C    test        byte ptr [esi+54],4
>00484D70    je          00484D7F
 00484D72    mov         dl,1
 00484D74    mov         eax,esi
 00484D76    mov         si,0FFD1
 00484D7A    call        @CallDynaInst
 00484D7F    pop         edi
 00484D80    pop         esi
 00484D81    pop         ebx
 00484D82    ret
*}
end;

//00484D84
procedure TControl.SetZOrder(TopMost:Boolean);
begin
{*
 00484D84    mov         ecx,dword ptr [eax+34]
 00484D87    test        ecx,ecx
>00484D89    je          00484DA7
 00484D8B    test        dl,dl
>00484D8D    je          00484DA0
 00484D8F    mov         edx,dword ptr [ecx+1DC]
 00484D95    mov         edx,dword ptr [edx+8]
 00484D98    dec         edx
 00484D99    call        TControl.SetZOrderPosition
>00484D9E    jmp         00484DA7
 00484DA0    xor         edx,edx
 00484DA2    call        TControl.SetZOrderPosition
 00484DA7    ret
*}
end;

//00484DA8
procedure TControl.SetCustomHint(Value:TCustomHint);
begin
{*
 00484DA8    push        ebx
 00484DA9    mov         ebx,eax
 00484DAB    mov         dword ptr [ebx+16C],edx
 00484DB1    test        edx,edx
>00484DB3    je          00484DBE
 00484DB5    mov         eax,edx
 00484DB7    mov         edx,ebx
 00484DB9    call        TComponent.FreeNotification
 00484DBE    cmp         byte ptr [ebx+170],0
>00484DC5    je          00484DDD
 00484DC7    mov         eax,ebx
 00484DC9    call        TControl.GetCustomHint
 00484DCE    cmp         eax,dword ptr [ebx+16C]
>00484DD4    je          00484DDD
 00484DD6    mov         byte ptr [ebx+170],0
 00484DDD    pop         ebx
 00484DDE    ret
*}
end;

//00484DE0
function TControl.GetDeviceContext(var WindowHandle:HWND):HDC;
begin
{*
 00484DE0    push        ebp
 00484DE1    mov         ebp,esp
 00484DE3    add         esp,0FFFFFFF4
 00484DE6    push        ebx
 00484DE7    push        esi
 00484DE8    xor         ecx,ecx
 00484DEA    mov         dword ptr [ebp-0C],ecx
 00484DED    mov         esi,eax
 00484DEF    xor         eax,eax
 00484DF1    push        ebp
 00484DF2    push        484E76
 00484DF7    push        dword ptr fs:[eax]
 00484DFA    mov         dword ptr fs:[eax],esp
 00484DFD    cmp         dword ptr [esi+34],0
>00484E01    jne         00484E34
 00484E03    mov         eax,dword ptr [esi+8]
 00484E06    mov         dword ptr [ebp-8],eax
 00484E09    mov         byte ptr [ebp-4],11
 00484E0D    lea         eax,[ebp-8]
 00484E10    push        eax
 00484E11    push        0
 00484E13    lea         edx,[ebp-0C]
 00484E16    mov         eax,[0078D6BC];^SResString201:TResStringRec
 00484E1B    call        LoadResString
 00484E20    mov         ecx,dword ptr [ebp-0C]
 00484E23    mov         dl,1
 00484E25    mov         eax,[00439268];EInvalidOperation
 00484E2A    call        Exception.CreateFmt
 00484E2F    call        @RaiseExcept
 00484E34    mov         eax,dword ptr [esi+34]
 00484E37    mov         ecx,dword ptr [eax]
 00484E39    call        dword ptr [ecx+58]
 00484E3C    mov         ebx,eax
 00484E3E    push        0
 00484E40    mov         eax,dword ptr [esi+44]
 00484E43    push        eax
 00484E44    mov         eax,dword ptr [esi+40]
 00484E47    push        eax
 00484E48    push        ebx
 00484E49    call        gdi32.SetViewportOrgEx
 00484E4E    mov         eax,dword ptr [esi+4C]
 00484E51    push        eax
 00484E52    mov         eax,dword ptr [esi+48]
 00484E55    push        eax
 00484E56    push        0
 00484E58    push        0
 00484E5A    push        ebx
 00484E5B    call        gdi32.IntersectClipRect
 00484E60    xor         eax,eax
 00484E62    pop         edx
 00484E63    pop         ecx
 00484E64    pop         ecx
 00484E65    mov         dword ptr fs:[eax],edx
 00484E68    push        484E7D
 00484E6D    lea         eax,[ebp-0C]
 00484E70    call        @UStrClr
 00484E75    ret
>00484E76    jmp         @HandleFinally
>00484E7B    jmp         00484E6D
 00484E7D    mov         eax,ebx
 00484E7F    pop         esi
 00484E80    pop         ebx
 00484E81    mov         esp,ebp
 00484E83    pop         ebp
 00484E84    ret
*}
end;

//00484E88
function BackgroundClipped:Boolean;
begin
{*
 00484E88    push        ebp
 00484E89    mov         ebp,esp
 00484E8B    add         esp,0FFFFFFDC
 00484E8E    push        ebx
 00484E8F    push        esi
 00484E90    push        edi
 00484E91    mov         byte ptr [ebp-1],1
 00484E95    mov         eax,dword ptr [ebp+8]
 00484E98    mov         eax,dword ptr [eax-4]
 00484E9B    mov         eax,dword ptr [eax+34]
 00484E9E    mov         edi,dword ptr [eax+1DC]
 00484EA4    mov         eax,dword ptr [ebp+8]
 00484EA7    mov         edx,dword ptr [eax-4]
 00484EAA    mov         eax,edi
 00484EAC    call        TList.IndexOf
 00484EB1    mov         esi,eax
 00484EB3    test        esi,esi
>00484EB5    jle         00484F00
 00484EB7    dec         esi
 00484EB8    mov         edx,esi
 00484EBA    mov         eax,edi
 00484EBC    call        TList.Get
 00484EC1    mov         ebx,eax
 00484EC3    cmp         byte ptr [ebx+59],0
>00484EC7    je          00484EFC
 00484EC9    test        byte ptr [ebx+50],40
>00484ECD    je          00484EFC
 00484ECF    lea         edx,[ebp-24]
 00484ED2    mov         eax,ebx
 00484ED4    call        TControl.GetBoundsRect
 00484ED9    lea         ecx,[ebp-24]
 00484EDC    mov         eax,dword ptr [ebp+8]
 00484EDF    lea         edx,[eax-14]
 00484EE2    lea         eax,[ebp-14]
 00484EE5    call        IntersectRect
 00484EEA    mov         eax,dword ptr [ebp+8]
 00484EED    lea         edx,[eax-14]
 00484EF0    lea         eax,[ebp-14]
 00484EF3    call        EqualRect
 00484EF8    test        al,al
>00484EFA    jne         00484F04
 00484EFC    test        esi,esi
>00484EFE    jg          00484EB7
 00484F00    mov         byte ptr [ebp-1],0
 00484F04    movzx       eax,byte ptr [ebp-1]
 00484F08    pop         edi
 00484F09    pop         esi
 00484F0A    pop         ebx
 00484F0B    mov         esp,ebp
 00484F0D    pop         ebp
 00484F0E    ret
*}
end;

//00484F10
procedure TControl.InvalidateControl(IsVisible:Boolean; IsOpaque:Boolean);
begin
{*
 00484F10    push        ebp
 00484F11    mov         ebp,esp
 00484F13    add         esp,0FFFFFFE8
 00484F16    push        ebx
 00484F17    mov         byte ptr [ebp-15],cl
 00484F1A    mov         ebx,edx
 00484F1C    mov         dword ptr [ebp-4],eax
 00484F1F    test        bl,bl
>00484F21    jne         00484F3E
 00484F23    mov         eax,dword ptr [ebp-4]
 00484F26    test        byte ptr [eax+1C],10
>00484F2A    je          00484F9E
 00484F2C    mov         eax,dword ptr [ebp-4]
 00484F2F    test        byte ptr [eax+55],8
>00484F33    jne         00484F9E
 00484F35    mov         eax,dword ptr [ebp-4]
 00484F38    test        byte ptr [eax+51],4
>00484F3C    jne         00484F9E
 00484F3E    mov         eax,dword ptr [ebp-4]
 00484F41    cmp         dword ptr [eax+34],0
>00484F45    je          00484F9E
 00484F47    mov         eax,dword ptr [ebp-4]
 00484F4A    mov         eax,dword ptr [eax+34]
 00484F4D    call        TWinControl.HandleAllocated
 00484F52    test        al,al
>00484F54    je          00484F9E
 00484F56    lea         edx,[ebp-14]
 00484F59    mov         eax,dword ptr [ebp-4]
 00484F5C    call        TControl.GetBoundsRect
 00484F61    cmp         byte ptr [ebp-15],0
>00484F65    jne         00484F7E
 00484F67    mov         eax,dword ptr [ebp-4]
 00484F6A    mov         eax,dword ptr [eax+34]
 00484F6D    test        byte ptr [eax+50],40
>00484F71    jne         00484F7E
 00484F73    push        ebp
 00484F74    call        BackgroundClipped
 00484F79    pop         ecx
 00484F7A    test        al,al
>00484F7C    je          00484F82
 00484F7E    xor         eax,eax
>00484F80    jmp         00484F84
 00484F82    mov         al,1
 00484F84    neg         al
 00484F86    sbb         eax,eax
 00484F88    push        eax
 00484F89    lea         eax,[ebp-14]
 00484F8C    push        eax
 00484F8D    mov         eax,dword ptr [ebp-4]
 00484F90    mov         eax,dword ptr [eax+34]
 00484F93    call        TWinControl.GetHandle
 00484F98    push        eax
 00484F99    call        user32.InvalidateRect
 00484F9E    pop         ebx
 00484F9F    mov         esp,ebp
 00484FA1    pop         ebp
 00484FA2    ret
*}
end;

//00484FA4
procedure TControl.Invalidate;
begin
{*
 00484FA4    test        byte ptr [eax+50],40
 00484FA8    setne       cl
 00484FAB    movzx       edx,byte ptr [eax+59]
 00484FAF    call        TControl.InvalidateControl
 00484FB4    ret
*}
end;

//00484FB8
procedure TControl.MouseActivate(Button:TMouseButton; Shift:TShiftState; X:Integer; Y:Integer; HitTest:Integer);
begin
{*
 00484FB8    push        ebp
 00484FB9    mov         ebp,esp
 00484FBB    push        ecx
 00484FBC    push        ebx
 00484FBD    mov         word ptr [ebp-2],cx
 00484FC1    mov         byte ptr [ebp-3],0
 00484FC5    cmp         word ptr [eax+12A],0
>00484FCD    je          00484FF6
 00484FCF    movzx       ecx,word ptr [ebp-2]
 00484FD3    push        ecx
 00484FD4    mov         ecx,dword ptr [ebp+10]
 00484FD7    push        ecx
 00484FD8    mov         ecx,dword ptr [ebp+0C]
 00484FDB    push        ecx
 00484FDC    mov         ecx,dword ptr [ebp+8]
 00484FDF    push        ecx
 00484FE0    lea         ecx,[ebp-3]
 00484FE3    push        ecx
 00484FE4    mov         ebx,eax
 00484FE6    mov         ecx,edx
 00484FE8    mov         edx,eax
 00484FEA    mov         eax,dword ptr [ebx+12C]
 00484FF0    call        dword ptr [ebx+128]
 00484FF6    movzx       eax,byte ptr [ebp-3]
 00484FFA    pop         ebx
 00484FFB    pop         ecx
 00484FFC    pop         ebp
 00484FFD    ret         0C
*}
end;

//00485000
procedure TControl.MouseWheelHandler(var Message:TMessage);
begin
{*
 00485000    push        ebx
 00485001    push        esi
 00485002    push        edi
 00485003    mov         edi,edx
 00485005    mov         ebx,eax
 00485007    mov         dl,1
 00485009    mov         eax,ebx
 0048500B    call        GetParentForm
 00485010    mov         esi,eax
 00485012    call        GetCaptureControl
 00485017    test        eax,eax
>00485019    je          00485033
 0048501B    cmp         esi,eax
>0048501D    je          00485033
 0048501F    cmp         ebx,eax
>00485021    je          00485033
 00485023    cmp         dword ptr [eax+34],0
>00485027    jne         00485033
 00485029    mov         edx,edi
 0048502B    mov         ecx,dword ptr [eax]
 0048502D    call        dword ptr [ecx+84]
 00485033    cmp         dword ptr [edi+0C],0
>00485037    jne         00485066
 00485039    test        esi,esi
>0048503B    je          00485050
 0048503D    cmp         ebx,esi
>0048503F    je          00485050
 00485041    mov         edx,edi
 00485043    mov         eax,esi
 00485045    mov         si,0FFC9
 00485049    call        @CallDynaInst
>0048504E    jmp         00485066
 00485050    mov         eax,dword ptr [edi+8]
 00485053    push        eax
 00485054    mov         ecx,dword ptr [edi+4]
 00485057    mov         edx,0B043
 0048505C    mov         eax,ebx
 0048505E    call        TControl.Perform
 00485063    mov         dword ptr [edi+0C],eax
 00485066    pop         edi
 00485067    pop         esi
 00485068    pop         ebx
 00485069    ret
*}
end;

//0048506C
procedure TControl.Hide;
begin
{*
 0048506C    xor         edx,edx
 0048506E    call        TControl.SetVisible
 00485073    ret
*}
end;

//00485074
procedure TControl.Show;
begin
{*
 00485074    push        esi
 00485075    push        edi
 00485076    mov         esi,eax
 00485078    mov         edi,dword ptr [esi+34]
 0048507B    test        edi,edi
>0048507D    je          0048508B
 0048507F    mov         edx,esi
 00485081    mov         eax,edi
 00485083    mov         ecx,dword ptr [eax]
 00485085    call        dword ptr [ecx+0E0]
 0048508B    test        byte ptr [esi+1C],10
>0048508F    je          00485097
 00485091    test        byte ptr [esi+51],4
>00485095    je          004850A0
 00485097    mov         dl,1
 00485099    mov         eax,esi
 0048509B    call        TControl.SetVisible
 004850A0    pop         edi
 004850A1    pop         esi
 004850A2    ret
*}
end;

//004850A4
procedure TControl.Update;
begin
{*
 004850A4    mov         edx,dword ptr [eax+34]
 004850A7    test        edx,edx
>004850A9    je          004850B5
 004850AB    mov         eax,edx
 004850AD    mov         edx,dword ptr [eax]
 004850AF    call        dword ptr [edx+9C]
 004850B5    ret
*}
end;

//004850B8
procedure TControl.Refresh;
begin
{*
 004850B8    mov         edx,dword ptr [eax]
 004850BA    call        dword ptr [edx+94]
 004850C0    ret
*}
end;

//004850C4
procedure TControl.Repaint;
begin
{*
 004850C4    push        ebp
 004850C5    mov         ebp,esp
 004850C7    add         esp,0FFFFFFF8
 004850CA    push        ebx
 004850CB    mov         dword ptr [ebp-4],eax
 004850CE    mov         eax,dword ptr [ebp-4]
 004850D1    cmp         byte ptr [eax+59],0
>004850D5    jne         004850F1
 004850D7    mov         eax,dword ptr [ebp-4]
 004850DA    test        byte ptr [eax+1C],10
>004850DE    je          004851BA
 004850E4    mov         eax,dword ptr [ebp-4]
 004850E7    test        byte ptr [eax+51],4
>004850EB    jne         004851BA
 004850F1    mov         eax,dword ptr [ebp-4]
 004850F4    cmp         dword ptr [eax+34],0
>004850F8    je          004851BA
 004850FE    mov         eax,dword ptr [ebp-4]
 00485101    mov         eax,dword ptr [eax+34]
 00485104    call        TWinControl.HandleAllocated
 00485109    test        al,al
>0048510B    je          004851BA
 00485111    mov         eax,dword ptr [ebp-4]
 00485114    test        byte ptr [eax+50],40
>00485118    je          004851A4
 0048511E    mov         eax,dword ptr [ebp-4]
 00485121    mov         eax,dword ptr [eax+34]
 00485124    call        TWinControl.GetHandle
 00485129    push        eax
 0048512A    call        user32.GetDC
 0048512F    mov         dword ptr [ebp-8],eax
 00485132    xor         ecx,ecx
 00485134    push        ebp
 00485135    push        48519D
 0048513A    push        dword ptr fs:[ecx]
 0048513D    mov         dword ptr fs:[ecx],esp
 00485140    mov         edx,dword ptr [ebp-4]
 00485143    mov         edx,dword ptr [edx+44]
 00485146    mov         ecx,edx
 00485148    mov         ebx,dword ptr [ebp-4]
 0048514B    add         ecx,dword ptr [ebx+4C]
 0048514E    push        ecx
 0048514F    mov         eax,dword ptr [ebp-4]
 00485152    mov         eax,dword ptr [eax+40]
 00485155    mov         ecx,eax
 00485157    mov         ebx,dword ptr [ebp-4]
 0048515A    add         ecx,dword ptr [ebx+48]
 0048515D    push        ecx
 0048515E    push        edx
 0048515F    push        eax
 00485160    mov         eax,dword ptr [ebp-8]
 00485163    push        eax
 00485164    call        gdi32.IntersectClipRect
 00485169    mov         eax,dword ptr [ebp-4]
 0048516C    mov         eax,dword ptr [eax+34]
 0048516F    mov         ecx,dword ptr [ebp-4]
 00485172    mov         edx,dword ptr [ebp-8]
 00485175    call        TWinControl.PaintControls
 0048517A    xor         eax,eax
 0048517C    pop         edx
 0048517D    pop         ecx
 0048517E    pop         ecx
 0048517F    mov         dword ptr fs:[eax],edx
 00485182    push        4851BA
 00485187    mov         eax,dword ptr [ebp-8]
 0048518A    push        eax
 0048518B    mov         eax,dword ptr [ebp-4]
 0048518E    mov         eax,dword ptr [eax+34]
 00485191    call        TWinControl.GetHandle
 00485196    push        eax
 00485197    call        user32.ReleaseDC
 0048519C    ret
>0048519D    jmp         @HandleFinally
>004851A2    jmp         00485187
 004851A4    mov         eax,dword ptr [ebp-4]
 004851A7    mov         edx,dword ptr [eax]
 004851A9    call        dword ptr [edx+90]
 004851AF    mov         eax,dword ptr [ebp-4]
 004851B2    mov         edx,dword ptr [eax]
 004851B4    call        dword ptr [edx+9C]
 004851BA    pop         ebx
 004851BB    pop         ecx
 004851BC    pop         ecx
 004851BD    pop         ebp
 004851BE    ret
*}
end;

//004851C0
procedure TControl.GetControlsAlignment;
begin
{*
 004851C0    xor         eax,eax
 004851C2    ret
*}
end;

//004851C4
function TControl.IsRightToLeft:Boolean;
begin
{*
 004851C4    mov         edx,dword ptr ds:[78DB7C];SysLocale:TSysLocale
 004851CA    cmp         byte ptr [edx+0D],0
>004851CE    je          004851D6
 004851D0    cmp         byte ptr [eax+61],0
>004851D4    jne         004851D9
 004851D6    xor         eax,eax
 004851D8    ret
 004851D9    mov         al,1
 004851DB    ret
*}
end;

//004851DC
function TControl.UseRightToLeftReading:Boolean;
begin
{*
 004851DC    mov         edx,dword ptr ds:[78DB7C];SysLocale:TSysLocale
 004851E2    cmp         byte ptr [edx+0D],0
>004851E6    je          004851EE
 004851E8    cmp         byte ptr [eax+61],0
>004851EC    jne         004851F1
 004851EE    xor         eax,eax
 004851F0    ret
 004851F1    mov         al,1
 004851F3    ret
*}
end;

//004851F4
procedure TControl.UseRightToLeftAlignment;
begin
{*
 004851F4    mov         edx,dword ptr ds:[78DB7C];SysLocale:TSysLocale
 004851FA    cmp         byte ptr [edx+0D],0
>004851FE    je          00485206
 00485200    cmp         byte ptr [eax+61],1
>00485204    je          00485209
 00485206    xor         eax,eax
 00485208    ret
 00485209    mov         al,1
 0048520B    ret
*}
end;

//0048520C
function TControl.UseRightToLeftScrollBar:Boolean;
begin
{*
 0048520C    mov         edx,dword ptr ds:[78DB7C];SysLocale:TSysLocale
 00485212    cmp         byte ptr [edx+0D],0
>00485216    je          00485221
 00485218    movzx       eax,byte ptr [eax+61]
 0048521C    dec         eax
 0048521D    sub         al,2
>0048521F    jb          00485224
 00485221    xor         eax,eax
 00485223    ret
 00485224    mov         al,1
 00485226    ret
*}
end;

//00485228
procedure TControl.BeginAutoDrag;
begin
{*
 00485228    mov         edx,dword ptr ds:[79318C];Mouse:TMouse
 0048522E    mov         ecx,dword ptr [edx+8]
 00485231    mov         edx,dword ptr ds:[79318C];Mouse:TMouse
 00485237    movzx       edx,byte ptr [edx+4]
 0048523B    call        TControl.BeginDrag
 00485240    ret
*}
end;

//00485244
procedure TControl.BeginDrag(Immediate:Boolean; Threshold:Integer);
begin
{*
 00485244    push        ebx
 00485245    push        esi
 00485246    push        edi
 00485247    add         esp,0FFFFFFF0
 0048524A    mov         esi,ecx
 0048524C    mov         ebx,edx
 0048524E    mov         edi,eax
 00485250    mov         eax,[0079318C];Mouse:TMouse
 00485255    call        TMouse.GetIsPanning
 0048525A    test        al,al
>0048525C    je          0048526A
 0048525E    xor         edx,edx
 00485260    mov         eax,[0079318C];Mouse:TMouse
 00485265    call        TMouse.SetPanningWindow
 0048526A    mov         eax,edi
 0048526C    mov         edx,dword ptr ds:[4DF7D4];TCustomForm
 00485272    call        @IsClass
 00485277    test        al,al
>00485279    je          0048529B
 0048527B    cmp         byte ptr [edi+8B],1
>00485282    je          0048529B
 00485284    mov         ecx,dword ptr ds:[78D684];^SResString231:TResStringRec
 0048528A    mov         dl,1
 0048528C    mov         eax,[00439268];EInvalidOperation
 00485291    call        Exception.CreateRes
 00485296    call        @RaiseExcept
 0048529B    mov         eax,edi
 0048529D    call        TControl.CalcDockSizes
 004852A2    cmp         dword ptr ds:[7931B0],0
>004852A9    je          004852B8
 004852AB    mov         eax,[007931B0]
 004852B0    cmp         eax,dword ptr ds:[7931E8]
>004852B6    jne         0048531D
 004852B8    xor         eax,eax
 004852BA    mov         [007931B0],eax
 004852BF    test        byte ptr [edi+54],1
>004852C3    je          004852F9
 004852C5    push        esp
 004852C6    call        user32.GetCursorPos
 004852CB    lea         ecx,[esp+8]
 004852CF    mov         edx,esp
 004852D1    mov         eax,edi
 004852D3    call        TControl.ScreenToClient
 004852D8    mov         eax,dword ptr [esp+8]
 004852DC    and         eax,0FFFF
 004852E1    mov         edx,dword ptr [esp+0C]
 004852E5    shl         edx,10
 004852E8    or          eax,edx
 004852EA    push        eax
 004852EB    xor         ecx,ecx
 004852ED    mov         edx,202
 004852F2    mov         eax,edi
 004852F4    call        TControl.Perform
 004852F9    test        esi,esi
>004852FB    jge         00485305
 004852FD    mov         eax,[0079318C];Mouse:TMouse
 00485302    mov         esi,dword ptr [eax+8]
 00485305    mov         eax,[007931B0]
 0048530A    cmp         eax,dword ptr ds:[7931E8]
>00485310    je          0048531D
 00485312    mov         ecx,esi
 00485314    mov         edx,ebx
 00485316    mov         eax,edi
 00485318    call        DragInitControl
 0048531D    add         esp,10
 00485320    pop         edi
 00485321    pop         esi
 00485322    pop         ebx
 00485323    ret
*}
end;

//00485324
procedure TControl.EndDrag(Drop:Boolean);
begin
{*
 00485324    push        ebx
 00485325    push        esi
 00485326    mov         ebx,edx
 00485328    mov         esi,eax
 0048532A    mov         eax,esi
 0048532C    call        TControl.Dragging
 00485331    test        al,al
>00485333    je          0048533F
 00485335    mov         eax,ebx
 00485337    call        DragDone
 0048533C    pop         esi
 0048533D    pop         ebx
 0048533E    ret
 0048533F    cmp         dword ptr ds:[7931B0],0
>00485346    jne         00485352
 00485348    mov         eax,[007931E8]
 0048534D    mov         [007931B0],eax
 00485352    pop         esi
 00485353    pop         ebx
 00485354    ret
*}
end;

//00485358
procedure TControl.sub_00485358;
begin
{*
 00485358    ret
*}
end;

//0048535C
function TControl.Dragging:Boolean;
begin
{*
 0048535C    cmp         eax,dword ptr ds:[7931B0]
 00485362    sete        al
 00485365    ret
*}
end;

//00485368
procedure TControl.DragOver(Source:TObject; X:Integer; Y:Integer; State:TDragState; var Accept:Boolean);
begin
{*
 00485368    push        ebp
 00485369    mov         ebp,esp
 0048536B    push        ebx
 0048536C    push        esi
 0048536D    mov         esi,dword ptr [ebp+8]
 00485370    mov         byte ptr [esi],0
 00485373    cmp         word ptr [eax+0E2],0
>0048537B    je          0048539D
 0048537D    mov         byte ptr [esi],1
 00485380    push        ecx
 00485381    mov         ecx,dword ptr [ebp+10]
 00485384    push        ecx
 00485385    movzx       ecx,byte ptr [ebp+0C]
 00485389    push        ecx
 0048538A    push        esi
 0048538B    mov         ebx,eax
 0048538D    mov         ecx,edx
 0048538F    mov         edx,eax
 00485391    mov         eax,dword ptr [ebx+0E4]
 00485397    call        dword ptr [ebx+0E0]
 0048539D    pop         esi
 0048539E    pop         ebx
 0048539F    pop         ebp
 004853A0    ret         0C
*}
end;

//004853A4
procedure TControl.DragDrop(Source:TObject; X:Integer; Y:Integer);
begin
{*
 004853A4    push        ebp
 004853A5    mov         ebp,esp
 004853A7    push        ebx
 004853A8    cmp         word ptr [eax+0DA],0
>004853B0    je          004853C9
 004853B2    push        ecx
 004853B3    mov         ecx,dword ptr [ebp+8]
 004853B6    push        ecx
 004853B7    mov         ebx,eax
 004853B9    mov         ecx,edx
 004853BB    mov         edx,eax
 004853BD    mov         eax,dword ptr [ebx+0DC]
 004853C3    call        dword ptr [ebx+0D8]
 004853C9    pop         ebx
 004853CA    pop         ebp
 004853CB    ret         4
*}
end;

//004853D0
procedure TControl.DoStartDrag(var DragObject:TDragObject);
begin
{*
 004853D0    push        ebx
 004853D1    cmp         word ptr [eax+102],0
>004853D9    je          004853ED
 004853DB    mov         ecx,edx
 004853DD    mov         ebx,eax
 004853DF    mov         edx,eax
 004853E1    mov         eax,dword ptr [ebx+104]
 004853E7    call        dword ptr [ebx+100]
 004853ED    pop         ebx
 004853EE    ret
*}
end;

//004853F0
{*procedure sub_004853F0(?:?; ?:?);
begin
 004853F0    mov         byte ptr [ecx],0
 004853F3    ret
end;*}

//004853F4
procedure TControl.DoGetGestureOptions(var Gestures:TInteractiveGestures; var Options:TInteractiveGestureOptions);
begin
{*
 004853F4    push        ebx
 004853F5    push        esi
 004853F6    mov         esi,ecx
 004853F8    mov         ebx,dword ptr [eax+0AC]
 004853FE    movzx       ecx,byte ptr [ebx+10]
 00485402    mov         byte ptr [edx],cl
 00485404    movzx       eax,byte ptr [ebx+11]
 00485408    mov         byte ptr [esi],al
 0048540A    pop         esi
 0048540B    pop         ebx
 0048540C    ret
*}
end;

//00485410
procedure TControl.DoEndDrag(Target:TObject; X:Integer; Y:Integer);
begin
{*
 00485410    push        ebp
 00485411    mov         ebp,esp
 00485413    push        ebx
 00485414    cmp         word ptr [eax+10A],0
>0048541C    je          00485435
 0048541E    push        ecx
 0048541F    mov         ecx,dword ptr [ebp+8]
 00485422    push        ecx
 00485423    mov         ebx,eax
 00485425    mov         ecx,edx
 00485427    mov         edx,eax
 00485429    mov         eax,dword ptr [ebx+10C]
 0048542F    call        dword ptr [ebx+108]
 00485435    pop         ebx
 00485436    pop         ebp
 00485437    ret         4
*}
end;

//0048543C
procedure TControl.PositionDockRect(DragDockObject:TDragDockObject);
begin
{*
 0048543C    push        ebx
 0048543D    push        esi
 0048543E    push        edi
 0048543F    push        ebp
 00485440    add         esp,0FFFFFFEC
 00485443    mov         ebx,edx
 00485445    cmp         dword ptr [ebx+14],0
>00485449    je          00485457
 0048544B    mov         eax,dword ptr [ebx+14]
 0048544E    cmp         byte ptr [eax+1EB],0
>00485455    jne         004854C4
 00485457    mov         eax,dword ptr [ebx+40]
 0048545A    call        TControl.GetUndockWidth
 0048545F    mov         edi,eax
 00485461    mov         eax,dword ptr [ebx+40]
 00485464    call        TControl.GetUndockHeight
 00485469    mov         ebp,eax
 0048546B    mov         dword ptr [esp+10],edi
 0048546F    fild        dword ptr [esp+10]
 00485473    fmul        qword ptr [ebx+28]
 00485476    fild        dword ptr [ebx+0C]
 00485479    fsubrp      st(1),st
 0048547B    fstp        qword ptr [esp]
 0048547E    wait
 0048547F    mov         dword ptr [esp+10],ebp
 00485483    fild        dword ptr [esp+10]
 00485487    fmul        qword ptr [ebx+30]
 0048548A    fild        dword ptr [ebx+10]
 0048548D    fsubrp      st(1),st
 0048548F    fstp        qword ptr [esp+8]
 00485493    wait
 00485494    lea         esi,[ebx+4C]
 00485497    fld         qword ptr [esp]
 0048549A    call        @ROUND
 0048549F    mov         dword ptr [esi],eax
 004854A1    fld         qword ptr [esp+8]
 004854A5    call        @ROUND
 004854AA    mov         dword ptr [esi+4],eax
 004854AD    add         edi,dword ptr [esi]
 004854AF    mov         dword ptr [esi+8],edi
 004854B2    add         ebp,dword ptr [esi+4]
 004854B5    mov         dword ptr [esi+0C],ebp
 004854B8    lea         edx,[ebx+4C]
 004854BB    mov         eax,ebx
 004854BD    mov         ecx,dword ptr [eax]
 004854BF    call        dword ptr [ecx+2C]
>004854C2    jmp         00485505
 004854C4    lea         eax,[ebx+4C]
 004854C7    push        eax
 004854C8    mov         eax,dword ptr [ebx+14]
 004854CB    call        TWinControl.GetHandle
 004854D0    push        eax
 004854D1    call        user32.GetWindowRect
 004854D6    mov         eax,dword ptr [ebx+14]
 004854D9    cmp         byte ptr [eax+1EB],0
>004854E0    je          00485505
 004854E2    cmp         dword ptr [eax+1C8],0
>004854E9    je          00485505
 004854EB    movzx       edx,byte ptr [ebx+5C]
 004854EF    push        edx
 004854F0    lea         edx,[ebx+4C]
 004854F3    push        edx
 004854F4    mov         eax,dword ptr [eax+1C8]
 004854FA    mov         ecx,dword ptr [ebx+60]
 004854FD    mov         edx,dword ptr [ebx+40]
 00485500    mov         ebx,dword ptr [eax]
 00485502    call        dword ptr [ebx+24]
 00485505    add         esp,14
 00485508    pop         ebp
 00485509    pop         edi
 0048550A    pop         esi
 0048550B    pop         ebx
 0048550C    ret
*}
end;

//00485510
procedure TControl.DockTrackNoTarget(Source:TDragDockObject; X:Integer; Y:Integer);
begin
{*
 00485510    push        ebp
 00485511    mov         ebp,esp
 00485513    push        esi
 00485514    mov         esi,edx
 00485516    mov         edx,esi
 00485518    mov         si,0FFD2
 0048551C    call        @CallDynaInst
 00485521    pop         esi
 00485522    pop         ebp
 00485523    ret         4
*}
end;

//00485528
procedure TControl.DoEndDock(Target:TObject; X:Integer; Y:Integer);
begin
{*
 00485528    push        ebp
 00485529    mov         ebp,esp
 0048552B    push        ebx
 0048552C    cmp         word ptr [eax+0FA],0
>00485534    je          0048554D
 00485536    push        ecx
 00485537    mov         ecx,dword ptr [ebp+8]
 0048553A    push        ecx
 0048553B    mov         ebx,eax
 0048553D    mov         ecx,edx
 0048553F    mov         edx,eax
 00485541    mov         eax,dword ptr [ebx+0FC]
 00485547    call        dword ptr [ebx+0F8]
 0048554D    pop         ebx
 0048554E    pop         ebp
 0048554F    ret         4
*}
end;

//00485554
procedure TControl.DoStartDock(var DragObject:TDragObject);
begin
{*
 00485554    push        ebx
 00485555    push        esi
 00485556    push        ecx
 00485557    mov         ebx,edx
 00485559    cmp         word ptr [eax+0F2],0
>00485561    je          0048557F
 00485563    mov         edx,dword ptr [ebx]
 00485565    mov         dword ptr [esp],edx
 00485568    mov         ecx,esp
 0048556A    mov         esi,eax
 0048556C    mov         edx,eax
 0048556E    mov         eax,dword ptr [esi+0F4]
 00485574    call        dword ptr [esi+0F0]
 0048557A    mov         eax,dword ptr [esp]
 0048557D    mov         dword ptr [ebx],eax
 0048557F    pop         edx
 00485580    pop         esi
 00485581    pop         ebx
 00485582    ret
*}
end;

//00485584
procedure TControl.DoMouseActivate(var Message:TCMMouseActivate);
begin
{*
 00485584    push        ebx
 00485585    push        esi
 00485586    push        edi
 00485587    push        ebp
 00485588    mov         ebx,edx
 0048558A    mov         ebp,eax
 0048558C    mov         edi,dword ptr [ebx+8]
 0048558F    mov         eax,dword ptr [edi]
 00485591    push        eax
 00485592    mov         eax,dword ptr [edi+4]
 00485595    push        eax
 00485596    mov         eax,dword ptr [edi+8]
 00485599    push        eax
 0048559A    movzx       ecx,word ptr [edi+0D]
 0048559E    movzx       edx,byte ptr [edi+0C]
 004855A2    mov         eax,ebp
 004855A4    mov         si,0FFD6
 004855A8    call        @CallDynaInst
 004855AD    and         eax,7F
 004855B0    mov         dword ptr [ebx+0C],eax
 004855B3    pop         ebp
 004855B4    pop         edi
 004855B5    pop         esi
 004855B6    pop         ebx
 004855B7    ret
*}
end;

//004855B8
procedure TControl.DoMouseWheel(Shift:TShiftState; WheelDelta:Integer; MousePos:TPoint);
begin
{*
 004855B8    push        ebp
 004855B9    mov         ebp,esp
 004855BB    add         esp,0FFFFFFF0
 004855BE    push        ebx
 004855BF    push        esi
 004855C0    push        edi
 004855C1    mov         esi,dword ptr [ebp+8]
 004855C4    lea         edi,[ebp-0C]
 004855C7    movs        dword ptr [edi],dword ptr [esi]
 004855C8    movs        dword ptr [edi],dword ptr [esi]
 004855C9    mov         ebx,ecx
 004855CB    mov         word ptr [ebp-2],dx
 004855CF    mov         edi,eax
 004855D1    mov         byte ptr [ebp-0D],0
 004855D5    cmp         word ptr [edi+142],0
>004855DD    je          004855FA
 004855DF    push        ebx
 004855E0    lea         eax,[ebp-0C]
 004855E3    push        eax
 004855E4    lea         eax,[ebp-0D]
 004855E7    push        eax
 004855E8    movzx       ecx,word ptr [ebp-2]
 004855EC    mov         edx,edi
 004855EE    mov         eax,dword ptr [edi+144]
 004855F4    call        dword ptr [edi+140]
 004855FA    cmp         byte ptr [ebp-0D],0
>004855FE    jne         0048567D
 00485600    add         dword ptr [edi+94],ebx
>00485606    jmp         0048566D
 00485608    cmp         dword ptr [edi+94],0
 0048560F    setl        bl
 00485612    mov         eax,dword ptr [edi+94]
 00485618    cdq
 00485619    xor         eax,edx
 0048561B    sub         eax,edx
 0048561D    sub         eax,78
 00485620    mov         dword ptr [edi+94],eax
 00485626    test        bl,bl
>00485628    je          00485658
 0048562A    cmp         dword ptr [edi+94],0
>00485631    je          00485641
 00485633    mov         eax,dword ptr [edi+94]
 00485639    neg         eax
 0048563B    mov         dword ptr [edi+94],eax
 00485641    lea         ecx,[ebp-0C]
 00485644    movzx       edx,word ptr [ebp-2]
 00485648    mov         eax,edi
 0048564A    mov         si,0FFE3
 0048564E    call        @CallDynaInst
 00485653    mov         byte ptr [ebp-0D],al
>00485656    jmp         0048566D
 00485658    lea         ecx,[ebp-0C]
 0048565B    movzx       edx,word ptr [ebp-2]
 0048565F    mov         eax,edi
 00485661    mov         si,0FFE2
 00485665    call        @CallDynaInst
 0048566A    mov         byte ptr [ebp-0D],al
 0048566D    mov         eax,dword ptr [edi+94]
 00485673    cdq
 00485674    xor         eax,edx
 00485676    sub         eax,edx
 00485678    cmp         eax,78
>0048567B    jge         00485608
 0048567D    movzx       eax,byte ptr [ebp-0D]
 00485681    pop         edi
 00485682    pop         esi
 00485683    pop         ebx
 00485684    mov         esp,ebp
 00485686    pop         ebp
 00485687    ret         4
*}
end;

//0048568C
procedure TControl.DoMouseWheelDown(Shift:TShiftState; MousePos:TPoint);
begin
{*
 0048568C    push        ebx
 0048568D    push        esi
 0048568E    push        edi
 0048568F    add         esp,0FFFFFFF0
 00485692    mov         esi,ecx
 00485694    lea         edi,[esp+4]
 00485698    movs        dword ptr [edi],dword ptr [esi]
 00485699    movs        dword ptr [edi],dword ptr [esi]
 0048569A    mov         word ptr [esp],dx
 0048569E    mov         byte ptr [esp+0C],0
 004856A3    cmp         word ptr [eax+14A],0
>004856AB    je          004856CC
 004856AD    lea         edx,[esp+4]
 004856B1    push        edx
 004856B2    lea         edx,[esp+10]
 004856B6    push        edx
 004856B7    mov         ebx,eax
 004856B9    movzx       ecx,word ptr [esp+8]
 004856BE    mov         edx,eax
 004856C0    mov         eax,dword ptr [ebx+14C]
 004856C6    call        dword ptr [ebx+148]
 004856CC    movzx       eax,byte ptr [esp+0C]
 004856D1    add         esp,10
 004856D4    pop         edi
 004856D5    pop         esi
 004856D6    pop         ebx
 004856D7    ret
*}
end;

//004856D8
procedure TControl.DoMouseWheelUp(Shift:TShiftState; MousePos:TPoint);
begin
{*
 004856D8    push        ebx
 004856D9    push        esi
 004856DA    push        edi
 004856DB    add         esp,0FFFFFFF0
 004856DE    mov         esi,ecx
 004856E0    lea         edi,[esp+4]
 004856E4    movs        dword ptr [edi],dword ptr [esi]
 004856E5    movs        dword ptr [edi],dword ptr [esi]
 004856E6    mov         word ptr [esp],dx
 004856EA    mov         byte ptr [esp+0C],0
 004856EF    cmp         word ptr [eax+152],0
>004856F7    je          00485718
 004856F9    lea         edx,[esp+4]
 004856FD    push        edx
 004856FE    lea         edx,[esp+10]
 00485702    push        edx
 00485703    mov         ebx,eax
 00485705    movzx       ecx,word ptr [esp+8]
 0048570A    mov         edx,eax
 0048570C    mov         eax,dword ptr [ebx+154]
 00485712    call        dword ptr [ebx+150]
 00485718    movzx       eax,byte ptr [esp+0C]
 0048571D    add         esp,10
 00485720    pop         edi
 00485721    pop         esi
 00485722    pop         ebx
 00485723    ret
*}
end;

//00485724
procedure TControl.DefaultDockImage(DragDockObject:TDragDockObject; Erase:Boolean);
begin
{*
 00485724    push        ebp
 00485725    mov         ebp,esp
 00485727    add         esp,0FFFFFFE0
 0048572A    push        ebx
 0048572B    push        esi
 0048572C    push        edi
 0048572D    mov         byte ptr [ebp-1],cl
 00485730    mov         esi,edx
 00485732    mov         eax,esi
 00485734    mov         edx,dword ptr [eax]
 00485736    call        dword ptr [edx+38]
 00485739    mov         ebx,eax
 0048573B    cmp         byte ptr [ebp-1],0
>0048573F    je          0048574F
 00485741    push        esi
 00485742    add         esi,64
 00485745    lea         edi,[ebp-20]
 00485748    movs        dword ptr [edi],dword ptr [esi]
 00485749    movs        dword ptr [edi],dword ptr [esi]
 0048574A    movs        dword ptr [edi],dword ptr [esi]
 0048574B    movs        dword ptr [edi],dword ptr [esi]
 0048574C    pop         esi
>0048574D    jmp         0048575B
 0048574F    push        esi
 00485750    add         esi,4C
 00485753    lea         edi,[ebp-20]
 00485756    movs        dword ptr [edi],dword ptr [esi]
 00485757    movs        dword ptr [edi],dword ptr [esi]
 00485758    movs        dword ptr [edi],dword ptr [esi]
 00485759    movs        dword ptr [edi],dword ptr [esi]
 0048575A    pop         esi
 0048575B    call        user32.GetDesktopWindow
 00485760    mov         dword ptr [ebp-8],eax
 00485763    push        402
 00485768    push        0
 0048576A    mov         eax,dword ptr [ebp-8]
 0048576D    push        eax
 0048576E    call        user32.GetDCEx
 00485773    mov         dword ptr [ebp-0C],eax
 00485776    xor         eax,eax
 00485778    push        ebp
 00485779    push        48583F
 0048577E    push        dword ptr fs:[eax]
 00485781    mov         dword ptr fs:[eax],esp
 00485784    mov         eax,dword ptr [esi+48]
 00485787    call        TBrush.GetHandle
 0048578C    push        eax
 0048578D    mov         eax,dword ptr [ebp-0C]
 00485790    push        eax
 00485791    call        gdi32.SelectObject
 00485796    mov         dword ptr [ebp-10],eax
 00485799    push        5A0049
 0048579E    push        ebx
 0048579F    mov         eax,dword ptr [ebp-18]
 004857A2    mov         esi,dword ptr [ebp-20]
 004857A5    sub         eax,esi
 004857A7    sub         eax,ebx
 004857A9    push        eax
 004857AA    mov         edi,dword ptr [ebp-1C]
 004857AD    push        edi
 004857AE    mov         eax,esi
 004857B0    add         eax,ebx
 004857B2    push        eax
 004857B3    mov         eax,dword ptr [ebp-0C]
 004857B6    push        eax
 004857B7    call        gdi32.PatBlt
 004857BC    push        5A0049
 004857C1    mov         eax,dword ptr [ebp-14]
 004857C4    sub         eax,edi
 004857C6    sub         eax,ebx
 004857C8    push        eax
 004857C9    push        ebx
 004857CA    mov         eax,edi
 004857CC    add         eax,ebx
 004857CE    push        eax
 004857CF    mov         eax,dword ptr [ebp-18]
 004857D2    sub         eax,ebx
 004857D4    push        eax
 004857D5    mov         eax,dword ptr [ebp-0C]
 004857D8    push        eax
 004857D9    call        gdi32.PatBlt
 004857DE    push        5A0049
 004857E3    push        ebx
 004857E4    mov         eax,dword ptr [ebp-18]
 004857E7    sub         eax,dword ptr [ebp-20]
 004857EA    sub         eax,ebx
 004857EC    push        eax
 004857ED    mov         eax,dword ptr [ebp-14]
 004857F0    sub         eax,ebx
 004857F2    push        eax
 004857F3    push        esi
 004857F4    mov         eax,dword ptr [ebp-0C]
 004857F7    push        eax
 004857F8    call        gdi32.PatBlt
 004857FD    push        5A0049
 00485802    mov         eax,dword ptr [ebp-14]
 00485805    sub         eax,dword ptr [ebp-1C]
 00485808    sub         eax,ebx
 0048580A    push        eax
 0048580B    push        ebx
 0048580C    push        edi
 0048580D    push        esi
 0048580E    mov         eax,dword ptr [ebp-0C]
 00485811    push        eax
 00485812    call        gdi32.PatBlt
 00485817    mov         eax,dword ptr [ebp-10]
 0048581A    push        eax
 0048581B    mov         eax,dword ptr [ebp-0C]
 0048581E    push        eax
 0048581F    call        gdi32.SelectObject
 00485824    xor         eax,eax
 00485826    pop         edx
 00485827    pop         ecx
 00485828    pop         ecx
 00485829    mov         dword ptr fs:[eax],edx
 0048582C    push        485846
 00485831    mov         eax,dword ptr [ebp-0C]
 00485834    push        eax
 00485835    mov         eax,dword ptr [ebp-8]
 00485838    push        eax
 00485839    call        user32.ReleaseDC
 0048583E    ret
>0048583F    jmp         @HandleFinally
>00485844    jmp         00485831
 00485846    pop         edi
 00485847    pop         esi
 00485848    pop         ebx
 00485849    mov         esp,ebp
 0048584B    pop         ebp
 0048584C    ret
*}
end;

//00485850
procedure TControl.DrawDragDockImage(DragDockObject:TDragDockObject);
begin
{*
 00485850    push        esi
 00485851    xor         ecx,ecx
 00485853    mov         si,0FFEA
 00485857    call        @CallDynaInst
 0048585C    pop         esi
 0048585D    ret
*}
end;

//00485860
procedure TControl.EraseDragDockImage(DragDockObject:TDragDockObject);
begin
{*
 00485860    push        esi
 00485861    mov         cl,1
 00485863    mov         si,0FFEA
 00485867    call        @CallDynaInst
 0048586C    pop         esi
 0048586D    ret
*}
end;

//00485870
procedure TControl.DoDragMsg(var DragMsg:TCMDrag);
begin
{*
 00485870    push        ebx
 00485871    push        esi
 00485872    push        edi
 00485873    push        ebp
 00485874    add         esp,0FFFFFFF0
 00485877    mov         edi,edx
 00485879    mov         dword ptr [esp],eax
 0048587C    mov         ebp,dword ptr [edi+8]
 0048587F    mov         esi,dword ptr [ebp+8]
 00485882    mov         eax,esi
 00485884    mov         edx,dword ptr ds:[4768A4];TDragDockObject
 0048588A    call        @IsClass
 0048588F    mov         ebx,eax
 00485891    cmp         byte ptr ds:[7931B8],0
>00485898    je          004858AE
 0048589A    test        bl,bl
>0048589C    jne         004858AE
 0048589E    mov         eax,esi
 004858A0    mov         edx,dword ptr ds:[47665C];TDragControlObject
 004858A6    call        @AsClass
 004858AB    mov         esi,dword ptr [eax+40]
 004858AE    lea         ecx,[esp+8]
 004858B2    mov         edx,ebp
 004858B4    mov         eax,dword ptr [esp]
 004858B7    call        TControl.ScreenToClient
 004858BC    movzx       eax,byte ptr [edi+4]
 004858C0    sub         al,3
>004858C2    jb          004858CB
>004858C4    je          00485923
>004858C6    jmp         00485958
 004858CB    mov         byte ptr [esp+4],1
 004858D0    test        bl,bl
>004858D2    je          004858F7
 004858D4    mov         eax,dword ptr [esp+0C]
 004858D8    push        eax
 004858D9    movzx       eax,byte ptr [edi+4]
 004858DD    push        eax
 004858DE    lea         eax,[esp+0C]
 004858E2    push        eax
 004858E3    mov         ecx,dword ptr [esp+14]
 004858E7    mov         edx,esi
 004858E9    mov         eax,dword ptr [ebp+0C]
 004858EC    mov         si,0FFC3
 004858F0    call        @CallDynaInst
>004858F5    jmp         00485919
 004858F7    mov         eax,dword ptr [esp+0C]
 004858FB    push        eax
 004858FC    movzx       eax,byte ptr [edi+4]
 00485900    push        eax
 00485901    lea         eax,[esp+0C]
 00485905    push        eax
 00485906    mov         ecx,dword ptr [esp+14]
 0048590A    mov         edx,esi
 0048590C    mov         eax,dword ptr [esp+0C]
 00485910    mov         si,0FFE0
 00485914    call        @CallDynaInst
 00485919    movzx       eax,byte ptr [esp+4]
 0048591E    mov         dword ptr [edi+0C],eax
>00485921    jmp         00485958
 00485923    test        bl,bl
>00485925    je          00485940
 00485927    mov         eax,dword ptr [esp+0C]
 0048592B    push        eax
 0048592C    mov         ecx,dword ptr [esp+0C]
 00485930    mov         edx,esi
 00485932    mov         eax,dword ptr [ebp+0C]
 00485935    mov         si,0FFB5
 00485939    call        @CallDynaInst
>0048593E    jmp         00485958
 00485940    mov         eax,dword ptr [esp+0C]
 00485944    push        eax
 00485945    mov         ecx,dword ptr [esp+0C]
 00485949    mov         edx,esi
 0048594B    mov         eax,dword ptr [esp+4]
 0048594F    mov         si,0FFCB
 00485953    call        @CallDynaInst
 00485958    add         esp,10
 0048595B    pop         ebp
 0048595C    pop         edi
 0048595D    pop         esi
 0048595E    pop         ebx
 0048595F    ret
*}
end;

//00485960
function TControl.ManualDock(NewDockSite:TWinControl; DropControl:TControl; ControlSide:TAlign):Boolean;
begin
{*
 00485960    push        ebp
 00485961    mov         ebp,esp
 00485963    add         esp,0FFFFFFC4
 00485966    push        ebx
 00485967    push        esi
 00485968    push        edi
 00485969    mov         dword ptr [ebp-4],ecx
 0048596C    mov         edi,edx
 0048596E    mov         ebx,eax
 00485970    test        edi,edi
>00485972    je          0048597D
 00485974    cmp         edi,0FFFFFFFF
>00485977    jne         00485A2C
 0048597D    mov         eax,dword ptr [ebx+90]
 00485983    test        eax,eax
>00485985    je          004859C4
 00485987    cmp         byte ptr [eax+1EB],0
>0048598E    je          004859C4
 00485990    cmp         dword ptr [eax+1C8],0
>00485997    je          004859C4
 00485999    lea         ecx,[ebp-24]
 0048599C    mov         eax,dword ptr [eax+1C8]
 004859A2    mov         edx,ebx
 004859A4    mov         esi,dword ptr [eax]
 004859A6    call        dword ptr [esi+14]
 004859A9    push        2
 004859AB    lea         eax,[ebp-24]
 004859AE    push        eax
 004859AF    push        0
 004859B1    mov         eax,dword ptr [ebx+90]
 004859B7    call        TWinControl.GetHandle
 004859BC    push        eax
 004859BD    call        user32.MapWindowPoints
>004859C2    jmp         004859F0
 004859C4    mov         eax,dword ptr [ebx+40]
 004859C7    mov         dword ptr [ebp-24],eax
 004859CA    mov         eax,dword ptr [ebx+44]
 004859CD    mov         dword ptr [ebp-20],eax
 004859D0    mov         esi,dword ptr [ebx+34]
 004859D3    test        esi,esi
>004859D5    je          004859F0
 004859D7    lea         ecx,[ebp-2C]
 004859DA    lea         edx,[ebp-24]
 004859DD    mov         eax,esi
 004859DF    call        TControl.ClientToScreen
 004859E4    mov         eax,dword ptr [ebp-2C]
 004859E7    mov         dword ptr [ebp-24],eax
 004859EA    mov         eax,dword ptr [ebp-28]
 004859ED    mov         dword ptr [ebp-20],eax
 004859F0    mov         eax,ebx
 004859F2    call        TControl.GetUndockHeight
 004859F7    push        eax
 004859F8    lea         eax,[ebp-3C]
 004859FB    push        eax
 004859FC    mov         eax,ebx
 004859FE    call        TControl.GetUndockWidth
 00485A03    mov         ecx,eax
 00485A05    mov         edx,dword ptr [ebp-20]
 00485A08    mov         eax,dword ptr [ebp-24]
 00485A0B    call        Bounds
 00485A10    lea         esi,[ebp-3C]
 00485A13    lea         edi,[ebp-24]
 00485A16    movs        dword ptr [edi],dword ptr [esi]
 00485A17    movs        dword ptr [edi],dword ptr [esi]
 00485A18    movs        dword ptr [edi],dword ptr [esi]
 00485A19    movs        dword ptr [edi],dword ptr [esi]
 00485A1A    lea         edx,[ebp-24]
 00485A1D    mov         eax,ebx
 00485A1F    call        TControl.ManualFloat
 00485A24    mov         byte ptr [ebp-5],al
>00485A27    jmp         00485B65
 00485A2C    mov         eax,ebx
 00485A2E    call        TControl.CalcDockSizes
 00485A33    cmp         dword ptr [ebx+90],0
>00485A3A    je          00485A57
 00485A3C    mov         eax,dword ptr [ebx+90]
 00485A42    mov         ecx,ebx
 00485A44    mov         edx,edi
 00485A46    mov         si,0FFBD
 00485A4A    call        @CallDynaInst
 00485A4F    test        al,al
>00485A51    jne         00485A57
 00485A53    xor         eax,eax
>00485A55    jmp         00485A59
 00485A57    mov         al,1
 00485A59    mov         byte ptr [ebp-5],al
 00485A5C    cmp         byte ptr [ebp-5],0
>00485A60    je          00485B65
 00485A66    mov         ecx,ebx
 00485A68    mov         dl,1
 00485A6A    mov         eax,[004768A4];TDragDockObject
 00485A6F    call        TDragDockObject.Create
 00485A74    mov         dword ptr [ebp-0C],eax
 00485A77    xor         edx,edx
 00485A79    push        ebp
 00485A7A    push        485B5E
 00485A7F    push        dword ptr fs:[edx]
 00485A82    mov         dword ptr fs:[edx],esp
 00485A85    mov         eax,dword ptr [ebx+90]
 00485A8B    test        eax,eax
>00485A8D    je          00485A98
 00485A8F    call        TWinControl.GetHandle
 00485A94    mov         esi,eax
>00485A96    jmp         00485A9A
 00485A98    xor         esi,esi
 00485A9A    lea         edx,[ebp-24]
 00485A9D    mov         eax,ebx
 00485A9F    call        TControl.GetBoundsRect
 00485AA4    test        esi,esi
>00485AA6    je          00485AB6
 00485AA8    push        2
 00485AAA    lea         eax,[ebp-24]
 00485AAD    push        eax
 00485AAE    push        0
 00485AB0    push        esi
 00485AB1    call        user32.MapWindowPoints
 00485AB6    mov         eax,dword ptr [ebp-0C]
 00485AB9    mov         dword ptr [eax+14],edi
 00485ABC    mov         eax,dword ptr [ebp-0C]
 00485ABF    movzx       edx,byte ptr [ebp+8]
 00485AC3    mov         byte ptr [eax+5C],dl
 00485AC6    mov         eax,dword ptr [ebp-0C]
 00485AC9    mov         edx,dword ptr [ebp-4]
 00485ACC    mov         dword ptr [eax+60],edx
 00485ACF    mov         eax,dword ptr [ebp-0C]
 00485AD2    push        edi
 00485AD3    lea         edi,[eax+4C]
 00485AD6    lea         esi,[ebp-24]
 00485AD9    movs        dword ptr [edi],dword ptr [esi]
 00485ADA    movs        dword ptr [edi],dword ptr [esi]
 00485ADB    movs        dword ptr [edi],dword ptr [esi]
 00485ADC    movs        dword ptr [edi],dword ptr [esi]
 00485ADD    pop         edi
 00485ADE    mov         eax,dword ptr [ebp-24]
 00485AE1    mov         dword ptr [ebp-14],eax
 00485AE4    mov         eax,dword ptr [ebp-20]
 00485AE7    mov         dword ptr [ebp-10],eax
 00485AEA    push        1
 00485AEC    lea         eax,[ebp-14]
 00485AEF    push        eax
 00485AF0    mov         eax,edi
 00485AF2    call        TWinControl.GetHandle
 00485AF7    push        eax
 00485AF8    push        0
 00485AFA    call        user32.MapWindowPoints
 00485AFF    mov         eax,dword ptr [ebp-14]
 00485B02    cmp         eax,7FFF
>00485B07    jg          00485B10
 00485B09    cmp         eax,0FFFF8000
>00485B0E    jge         00485B19
 00485B10    shr         eax,10
 00485B13    movsx       eax,ax
 00485B16    mov         dword ptr [ebp-14],eax
 00485B19    mov         eax,dword ptr [ebp-10]
 00485B1C    cmp         eax,7FFF
>00485B21    jg          00485B2A
 00485B23    cmp         eax,0FFFF8000
>00485B28    jge         00485B33
 00485B2A    shr         eax,10
 00485B2D    movsx       eax,ax
 00485B30    mov         dword ptr [ebp-10],eax
 00485B33    mov         eax,dword ptr [ebp-10]
 00485B36    push        eax
 00485B37    mov         ecx,dword ptr [ebp-14]
 00485B3A    mov         edx,dword ptr [ebp-0C]
 00485B3D    mov         eax,edi
 00485B3F    mov         si,0FFB5
 00485B43    call        @CallDynaInst
 00485B48    xor         eax,eax
 00485B4A    pop         edx
 00485B4B    pop         ecx
 00485B4C    pop         ecx
 00485B4D    mov         dword ptr fs:[eax],edx
 00485B50    push        485B65
 00485B55    mov         eax,dword ptr [ebp-0C]
 00485B58    call        TObject.Free
 00485B5D    ret
>00485B5E    jmp         @HandleFinally
>00485B63    jmp         00485B55
 00485B65    movzx       eax,byte ptr [ebp-5]
 00485B69    pop         edi
 00485B6A    pop         esi
 00485B6B    pop         ebx
 00485B6C    mov         esp,ebp
 00485B6E    pop         ebp
 00485B6F    ret         4
*}
end;

//00485B74
function TControl.ManualFloat(ScreenPos:TRect):Boolean;
begin
{*
 00485B74    push        ebx
 00485B75    push        esi
 00485B76    push        edi
 00485B77    add         esp,0FFFFFFDC
 00485B7A    mov         esi,edx
 00485B7C    lea         edi,[esp+4]
 00485B80    movs        dword ptr [edi],dword ptr [esi]
 00485B81    movs        dword ptr [edi],dword ptr [esi]
 00485B82    movs        dword ptr [edi],dword ptr [esi]
 00485B83    movs        dword ptr [edi],dword ptr [esi]
 00485B84    mov         edi,eax
 00485B86    mov         ebx,dword ptr [edi+90]
 00485B8C    test        ebx,ebx
>00485B8E    je          00485BA7
 00485B90    mov         ecx,edi
 00485B92    xor         edx,edx
 00485B94    mov         eax,ebx
 00485B96    mov         si,0FFBD
 00485B9A    call        @CallDynaInst
 00485B9F    test        al,al
>00485BA1    jne         00485BA7
 00485BA3    xor         eax,eax
>00485BA5    jmp         00485BA9
 00485BA7    mov         al,1
 00485BA9    mov         byte ptr [esp],al
 00485BAC    cmp         byte ptr [esp],0
>00485BB0    je          00485C06
 00485BB2    lea         edx,[esp+4]
 00485BB6    mov         eax,edi
 00485BB8    call        TControl.CreateFloatingDockSite
 00485BBD    mov         esi,eax
 00485BBF    test        esi,esi
>00485BC1    je          00485BF5
 00485BC3    mov         eax,esi
 00485BC5    call        TControl.GetClientHeight
 00485BCA    push        eax
 00485BCB    lea         eax,[esp+18]
 00485BCF    push        eax
 00485BD0    mov         eax,esi
 00485BD2    call        TControl.GetClientWidth
 00485BD7    mov         ecx,eax
 00485BD9    xor         edx,edx
 00485BDB    xor         eax,eax
 00485BDD    call        Rect
 00485BE2    lea         ecx,[esp+14]
 00485BE6    mov         edx,esi
 00485BE8    mov         eax,edi
 00485BEA    mov         si,0FFCC
 00485BEE    call        @CallDynaInst
>00485BF3    jmp         00485C06
 00485BF5    lea         ecx,[esp+4]
 00485BF9    mov         edx,esi
 00485BFB    mov         eax,edi
 00485BFD    mov         si,0FFCC
 00485C01    call        @CallDynaInst
 00485C06    movzx       eax,byte ptr [esp]
 00485C0A    add         esp,24
 00485C0D    pop         edi
 00485C0E    pop         esi
 00485C0F    pop         ebx
 00485C10    ret
*}
end;

//00485C14
function TControl.ReplaceDockedControl(Control:TControl; NewDockSite:TWinControl; ControlSide:TAlign; DropControl:TControl):Boolean;
begin
{*
 00485C14    push        ebp
 00485C15    mov         ebp,esp
 00485C17    add         esp,0FFFFFFF4
 00485C1A    push        ebx
 00485C1B    mov         dword ptr [ebp-8],ecx
 00485C1E    mov         dword ptr [ebp-4],edx
 00485C21    mov         ebx,eax
 00485C23    xor         edx,edx
 00485C25    mov         ecx,dword ptr [ebp-4]
 00485C28    cmp         dword ptr [ecx+90],0
>00485C2F    je          00485C54
 00485C31    mov         eax,dword ptr [ebp-4]
 00485C34    mov         eax,dword ptr [eax+90]
 00485C3A    cmp         byte ptr [eax+1EB],0
>00485C41    je          00485CD5
 00485C47    cmp         dword ptr [eax+1C8],0
>00485C4E    je          00485CD5
 00485C54    mov         eax,dword ptr [ebp-4]
 00485C57    mov         eax,dword ptr [eax+90]
 00485C5D    mov         dword ptr [ebp-0C],eax
 00485C60    cmp         dword ptr [ebp-0C],0
>00485C64    je          00485C77
 00485C66    mov         eax,dword ptr [ebp-0C]
 00485C69    mov         eax,dword ptr [eax+1C8]
 00485C6F    mov         edx,dword ptr [ebp-4]
 00485C72    mov         ecx,dword ptr [eax]
 00485C74    call        dword ptr [ecx+34]
 00485C77    xor         eax,eax
 00485C79    push        ebp
 00485C7A    push        485CB7
 00485C7F    push        dword ptr fs:[eax]
 00485C82    mov         dword ptr fs:[eax],esp
 00485C85    push        1
 00485C87    xor         ecx,ecx
 00485C89    mov         edx,dword ptr [ebp-0C]
 00485C8C    mov         eax,ebx
 00485C8E    call        TControl.ManualDock
 00485C93    xor         eax,eax
 00485C95    pop         edx
 00485C96    pop         ecx
 00485C97    pop         ecx
 00485C98    mov         dword ptr fs:[eax],edx
 00485C9B    push        485CBE
 00485CA0    cmp         dword ptr [ebp-0C],0
>00485CA4    je          00485CB6
 00485CA6    mov         eax,dword ptr [ebp-0C]
 00485CA9    mov         eax,dword ptr [eax+1C8]
 00485CAF    xor         edx,edx
 00485CB1    mov         ecx,dword ptr [eax]
 00485CB3    call        dword ptr [ecx+34]
 00485CB6    ret
>00485CB7    jmp         @HandleFinally
>00485CBC    jmp         00485CA0
 00485CBE    movzx       eax,byte ptr [ebp+8]
 00485CC2    push        eax
 00485CC3    mov         ecx,dword ptr [ebp+0C]
 00485CC6    mov         edx,dword ptr [ebp-8]
 00485CC9    mov         eax,dword ptr [ebp-4]
 00485CCC    call        TControl.ManualDock
 00485CD1    mov         edx,eax
>00485CD3    jmp         00485CFC
 00485CD5    mov         eax,dword ptr [ebp-4]
 00485CD8    mov         eax,dword ptr [eax+90]
 00485CDE    test        eax,eax
>00485CE0    je          00485CFC
 00485CE2    mov         edx,dword ptr [ebp+0C]
 00485CE5    push        edx
 00485CE6    movzx       edx,byte ptr [ebp+8]
 00485CEA    push        edx
 00485CEB    push        ebx
 00485CEC    mov         ecx,dword ptr [ebp-8]
 00485CEF    mov         edx,dword ptr [ebp-4]
 00485CF2    mov         ebx,dword ptr [eax]
 00485CF4    call        dword ptr [ebx+0CC]
 00485CFA    mov         edx,eax
 00485CFC    mov         eax,edx
 00485CFE    pop         ebx
 00485CFF    mov         esp,ebp
 00485D01    pop         ebp
 00485D02    ret         8
*}
end;

//00485D08
procedure TControl.DoConstraintsChange(Sender:TObject);
begin
{*
 00485D08    push        esi
 00485D09    mov         si,0FFEF
 00485D0D    call        @CallDynaInst
 00485D12    pop         esi
 00485D13    ret
*}
end;

//00485D14
{*function sub_00485D14:?;
begin
 00485D14    mov         al,1
 00485D16    ret
end;*}

//00485D18
function TControl.CanResize(var NewWidth:Integer; var NewHeight:Integer):Boolean;
begin
{*
 00485D18    push        ebx
 00485D19    push        ecx
 00485D1A    mov         byte ptr [esp],1
 00485D1E    cmp         word ptr [eax+0B2],0
>00485D26    je          00485D40
 00485D28    push        ecx
 00485D29    lea         ecx,[esp+4]
 00485D2D    push        ecx
 00485D2E    mov         ecx,edx
 00485D30    mov         ebx,eax
 00485D32    mov         edx,eax
 00485D34    mov         eax,dword ptr [ebx+0B4]
 00485D3A    call        dword ptr [ebx+0B0]
 00485D40    movzx       eax,byte ptr [esp]
 00485D44    pop         edx
 00485D45    pop         ebx
 00485D46    ret
*}
end;

//00485D48
function TControl.DoCanAutoSize(var NewWidth:Integer; var NewHeight:Integer):Boolean;
begin
{*
 00485D48    push        ebx
 00485D49    push        esi
 00485D4A    add         esp,0FFFFFFF0
 00485D4D    mov         dword ptr [esp+4],ecx
 00485D51    mov         dword ptr [esp],edx
 00485D54    mov         esi,eax
 00485D56    cmp         byte ptr [esi+5D],5
>00485D5A    je          00485DAA
 00485D5C    mov         eax,dword ptr [esp]
 00485D5F    mov         eax,dword ptr [eax]
 00485D61    mov         dword ptr [esp+8],eax
 00485D65    mov         eax,dword ptr [esp+4]
 00485D69    mov         eax,dword ptr [eax]
 00485D6B    mov         dword ptr [esp+0C],eax
 00485D6F    lea         ecx,[esp+0C]
 00485D73    lea         edx,[esp+8]
 00485D77    mov         eax,esi
 00485D79    mov         ebx,dword ptr [eax]
 00485D7B    call        dword ptr [ebx+38]
 00485D7E    movzx       edx,byte ptr [esi+5D]
 00485D82    mov         ecx,edx
 00485D84    test        cl,cl
>00485D86    je          00485D90
 00485D88    add         cl,0FD
 00485D8B    sub         cl,2
>00485D8E    jae         00485D99
 00485D90    mov         ecx,dword ptr [esp]
 00485D93    mov         ebx,dword ptr [esp+8]
 00485D97    mov         dword ptr [ecx],ebx
 00485D99    sub         dl,3
>00485D9C    jae         00485DAC
 00485D9E    mov         edx,dword ptr [esp+4]
 00485DA2    mov         ecx,dword ptr [esp+0C]
 00485DA6    mov         dword ptr [edx],ecx
>00485DA8    jmp         00485DAC
 00485DAA    mov         al,1
 00485DAC    add         esp,10
 00485DAF    pop         esi
 00485DB0    pop         ebx
 00485DB1    ret
*}
end;

//00485DB4
function TControl.DoCanResize(var NewWidth:Integer; var NewHeight:Integer):Boolean;
begin
{*
 00485DB4    push        ebx
 00485DB5    push        esi
 00485DB6    push        edi
 00485DB7    push        ecx
 00485DB8    mov         dword ptr [esp],ecx
 00485DBB    mov         edi,edx
 00485DBD    mov         esi,eax
 00485DBF    mov         ecx,dword ptr [esp]
 00485DC2    mov         edx,edi
 00485DC4    mov         eax,esi
 00485DC6    mov         ebx,dword ptr [eax]
 00485DC8    call        dword ptr [ebx+34]
 00485DCB    mov         ebx,eax
 00485DCD    test        bl,bl
>00485DCF    je          00485DDD
 00485DD1    mov         ecx,dword ptr [esp]
 00485DD4    mov         edx,edi
 00485DD6    mov         eax,esi
 00485DD8    call        TControl.DoConstrainedResize
 00485DDD    mov         eax,ebx
 00485DDF    pop         edx
 00485DE0    pop         edi
 00485DE1    pop         esi
 00485DE2    pop         ebx
 00485DE3    ret
*}
end;

//00485DE4
procedure TControl.ConstrainedResize(var MinWidth:Integer; var MinHeight:Integer; var MaxWidth:Integer; var MaxHeight:Integer);
begin
{*
 00485DE4    push        ebp
 00485DE5    mov         ebp,esp
 00485DE7    push        ebx
 00485DE8    cmp         word ptr [eax+0BA],0
>00485DF0    je          00485E0D
 00485DF2    push        ecx
 00485DF3    mov         ecx,dword ptr [ebp+0C]
 00485DF6    push        ecx
 00485DF7    mov         ecx,dword ptr [ebp+8]
 00485DFA    push        ecx
 00485DFB    mov         ecx,edx
 00485DFD    mov         ebx,eax
 00485DFF    mov         edx,eax
 00485E01    mov         eax,dword ptr [ebx+0BC]
 00485E07    call        dword ptr [ebx+0B8]
 00485E0D    pop         ebx
 00485E0E    pop         ebp
 00485E0F    ret         8
*}
end;

//00485E14
function TControl.CalcCursorPos:TPoint;
begin
{*
 00485E14    push        ebx
 00485E15    push        esi
 00485E16    add         esp,0FFFFFFF8
 00485E19    mov         ebx,edx
 00485E1B    mov         esi,eax
 00485E1D    push        ebx
 00485E1E    call        user32.GetCursorPos
 00485E23    mov         ecx,esp
 00485E25    mov         edx,ebx
 00485E27    mov         eax,esi
 00485E29    call        TControl.ScreenToClient
 00485E2E    mov         eax,dword ptr [esp]
 00485E31    mov         dword ptr [ebx],eax
 00485E33    mov         eax,dword ptr [esp+4]
 00485E37    mov         dword ptr [ebx+4],eax
 00485E3A    pop         ecx
 00485E3B    pop         edx
 00485E3C    pop         esi
 00485E3D    pop         ebx
 00485E3E    ret
*}
end;

//00485E40
procedure TControl.DesignWndProc(var Message:TMessage);
begin
{*
 00485E40    push        esi
 00485E41    test        byte ptr [eax+50],4
>00485E45    je          00485E69
 00485E47    mov         esi,dword ptr [edx]
 00485E49    cmp         esi,204
>00485E4F    je          00485E6D
 00485E51    cmp         esi,205
>00485E57    je          00485E6D
 00485E59    cmp         esi,200
>00485E5F    je          00485E6D
 00485E61    cmp         esi,206
>00485E67    je          00485E6D
 00485E69    xor         eax,eax
 00485E6B    pop         esi
 00485E6C    ret
 00485E6D    mov         al,1
 00485E6F    pop         esi
 00485E70    ret
*}
end;

//00485E74
procedure TControl.DoConstrainedResize(var NewWidth:Integer; var NewHeight:Integer);
begin
{*
 00485E74    push        ebx
 00485E75    push        esi
 00485E76    push        edi
 00485E77    add         esp,0FFFFFFF0
 00485E7A    mov         esi,ecx
 00485E7C    mov         ebx,edx
 00485E7E    mov         edx,dword ptr [eax+70]
 00485E81    mov         edx,dword ptr [edx+14]
 00485E84    test        edx,edx
>00485E86    jbe         00485E8D
 00485E88    mov         dword ptr [esp],edx
>00485E8B    jmp         00485E92
 00485E8D    xor         edx,edx
 00485E8F    mov         dword ptr [esp],edx
 00485E92    mov         edx,dword ptr [eax+70]
 00485E95    mov         edx,dword ptr [edx+10]
 00485E98    test        edx,edx
>00485E9A    jbe         00485EA2
 00485E9C    mov         dword ptr [esp+4],edx
>00485EA0    jmp         00485EA8
 00485EA2    xor         edx,edx
 00485EA4    mov         dword ptr [esp+4],edx
 00485EA8    mov         edx,dword ptr [eax+70]
 00485EAB    mov         edx,dword ptr [edx+0C]
 00485EAE    test        edx,edx
>00485EB0    jbe         00485EB8
 00485EB2    mov         dword ptr [esp+8],edx
>00485EB6    jmp         00485EBE
 00485EB8    xor         edx,edx
 00485EBA    mov         dword ptr [esp+8],edx
 00485EBE    mov         edx,dword ptr [eax+70]
 00485EC1    mov         edx,dword ptr [edx+8]
 00485EC4    test        edx,edx
>00485EC6    jbe         00485ECE
 00485EC8    mov         dword ptr [esp+0C],edx
>00485ECC    jmp         00485ED4
 00485ECE    xor         edx,edx
 00485ED0    mov         dword ptr [esp+0C],edx
 00485ED4    lea         edx,[esp+8]
 00485ED8    push        edx
 00485ED9    lea         edx,[esp+10]
 00485EDD    push        edx
 00485EDE    lea         ecx,[esp+0C]
 00485EE2    lea         edx,[esp+8]
 00485EE6    mov         edi,dword ptr [eax]
 00485EE8    call        dword ptr [edi+3C]
 00485EEB    cmp         dword ptr [esp+8],0
>00485EF0    jle         00485F02
 00485EF2    mov         eax,dword ptr [ebx]
 00485EF4    cmp         eax,dword ptr [esp+8]
>00485EF8    jle         00485F02
 00485EFA    mov         eax,dword ptr [esp+8]
 00485EFE    mov         dword ptr [ebx],eax
>00485F00    jmp         00485F14
 00485F02    cmp         dword ptr [esp],0
>00485F06    jle         00485F14
 00485F08    mov         eax,dword ptr [ebx]
 00485F0A    cmp         eax,dword ptr [esp]
>00485F0D    jge         00485F14
 00485F0F    mov         eax,dword ptr [esp]
 00485F12    mov         dword ptr [ebx],eax
 00485F14    cmp         dword ptr [esp+0C],0
>00485F19    jle         00485F2B
 00485F1B    mov         eax,dword ptr [esi]
 00485F1D    cmp         eax,dword ptr [esp+0C]
>00485F21    jle         00485F2B
 00485F23    mov         eax,dword ptr [esp+0C]
 00485F27    mov         dword ptr [esi],eax
>00485F29    jmp         00485F40
 00485F2B    cmp         dword ptr [esp+4],0
>00485F30    jle         00485F40
 00485F32    mov         eax,dword ptr [esi]
 00485F34    cmp         eax,dword ptr [esp+4]
>00485F38    jge         00485F40
 00485F3A    mov         eax,dword ptr [esp+4]
 00485F3E    mov         dword ptr [esi],eax
 00485F40    add         esp,10
 00485F43    pop         edi
 00485F44    pop         esi
 00485F45    pop         ebx
 00485F46    ret
*}
end;

//00485F48
function TControl.Perform(Msg:Cardinal; WParam:Integer; LParam:Integer):Integer;
begin
{*
 00485F48    push        ebp
 00485F49    mov         ebp,esp
 00485F4B    add         esp,0FFFFFFF0
 00485F4E    push        ebx
 00485F4F    mov         dword ptr [ebp-10],edx
 00485F52    mov         dword ptr [ebp-0C],ecx
 00485F55    mov         edx,dword ptr [ebp+8]
 00485F58    mov         dword ptr [ebp-8],edx
 00485F5B    xor         edx,edx
 00485F5D    mov         dword ptr [ebp-4],edx
 00485F60    test        eax,eax
>00485F62    je          00485F6F
 00485F64    lea         edx,[ebp-10]
 00485F67    mov         ebx,eax
 00485F69    mov         eax,dword ptr [ebx+3C]
 00485F6C    call        dword ptr [ebx+38]
 00485F6F    mov         eax,dword ptr [ebp-4]
 00485F72    pop         ebx
 00485F73    mov         esp,ebp
 00485F75    pop         ebp
 00485F76    ret         4
*}
end;

//00485F7C
function TControl.Perform(Msg:Cardinal; WParam:Integer; LParam:PWideChar):Integer;
begin
{*
 00485F7C    push        ebp
 00485F7D    mov         ebp,esp
 00485F7F    push        ebx
 00485F80    mov         ebx,dword ptr [ebp+8]
 00485F83    push        ebx
 00485F84    call        TControl.Perform
 00485F89    pop         ebx
 00485F8A    pop         ebp
 00485F8B    ret         4
*}
end;

//00485F90
function TControl.Perform(Msg:Cardinal; WParam:Integer; var LParam:TRect):Integer;
begin
{*
 00485F90    push        ebp
 00485F91    mov         ebp,esp
 00485F93    push        ebx
 00485F94    mov         ebx,dword ptr [ebp+8]
 00485F97    push        ebx
 00485F98    call        TControl.Perform
 00485F9D    pop         ebx
 00485F9E    pop         ebp
 00485F9F    ret         4
*}
end;

//00485FA4
function TControl.GetCustomHint:TCustomHint;
begin
{*
 00485FA4    mov         edx,dword ptr [eax+16C]
 00485FAA    cmp         byte ptr [eax+170],0
>00485FB1    je          00485FC7
 00485FB3    test        edx,edx
>00485FB5    jne         00485FC7
 00485FB7    mov         ecx,dword ptr [eax+34]
 00485FBA    test        ecx,ecx
>00485FBC    je          00485FC7
 00485FBE    mov         eax,ecx
 00485FC0    call        TControl.GetCustomHint
 00485FC5    mov         edx,eax
 00485FC7    mov         eax,edx
 00485FC9    ret
*}
end;

//00485FCC
procedure TControl.CalcDockSizes;
begin
{*
 00485FCC    push        ebx
 00485FCD    mov         ebx,eax
 00485FCF    mov         eax,ebx
 00485FD1    mov         edx,dword ptr [eax]
 00485FD3    call        dword ptr [edx+60]
 00485FD6    test        al,al
>00485FD8    je          00485FEE
 00485FDA    mov         eax,dword ptr [ebx+4C]
 00485FDD    mov         dword ptr [ebx+9C],eax
 00485FE3    mov         eax,dword ptr [ebx+48]
 00485FE6    mov         dword ptr [ebx+98],eax
 00485FEC    pop         ebx
 00485FED    ret
 00485FEE    cmp         dword ptr [ebx+90],0
>00485FF5    je          0048603C
 00485FF7    cmp         byte ptr [ebx+8C],2
>00485FFE    je          0048600F
 00486000    mov         eax,dword ptr [ebx+90]
 00486006    movzx       eax,byte ptr [eax+5D]
 0048600A    dec         eax
 0048600B    sub         al,2
>0048600D    jae         0048601A
 0048600F    mov         eax,dword ptr [ebx+4C]
 00486012    mov         dword ptr [ebx+0A4],eax
>00486018    jmp         0048603C
 0048601A    cmp         byte ptr [ebx+8C],1
>00486021    je          00486033
 00486023    mov         eax,dword ptr [ebx+90]
 00486029    movzx       eax,byte ptr [eax+5D]
 0048602D    add         al,0FD
 0048602F    sub         al,2
>00486031    jae         0048603C
 00486033    mov         eax,dword ptr [ebx+48]
 00486036    mov         dword ptr [ebx+0A0],eax
 0048603C    pop         ebx
 0048603D    ret
*}
end;

//00486040
procedure TControl.UpdateBoundsRect(const R:TRect);
begin
{*
 00486040    push        ebx
 00486041    mov         ebx,eax
 00486043    mov         eax,dword ptr [edx]
 00486045    mov         dword ptr [ebx+40],eax
 00486048    mov         eax,dword ptr [edx+4]
 0048604B    mov         dword ptr [ebx+44],eax
 0048604E    mov         eax,dword ptr [edx+8]
 00486051    sub         eax,dword ptr [edx]
 00486053    mov         dword ptr [ebx+48],eax
 00486056    mov         eax,dword ptr [edx+0C]
 00486059    sub         eax,dword ptr [edx+4]
 0048605C    mov         dword ptr [ebx+4C],eax
 0048605F    mov         eax,ebx
 00486061    call        TControl.UpdateAnchorRules
 00486066    mov         eax,ebx
 00486068    call        TControl.UpdateExplicitBounds
 0048606D    pop         ebx
 0048606E    ret
*}
end;

//00486070
procedure TControl.sub_00486070;
begin
{*
 00486070    ret
*}
end;

//00486074
procedure TControl.WndProc(var Message:TMessage);
begin
{*
 00486074    push        ebp
 00486075    mov         ebp,esp
 00486077    add         esp,0FFFFFEE4
 0048607D    push        ebx
 0048607E    push        esi
 0048607F    push        edi
 00486080    mov         ebx,edx
 00486082    mov         esi,eax
 00486084    test        byte ptr [esi+1C],10
>00486088    je          004860C2
 0048608A    xor         edx,edx
 0048608C    mov         eax,esi
 0048608E    call        GetParentForm
 00486093    mov         dword ptr [ebp-14],eax
 00486096    cmp         dword ptr [ebp-14],0
>0048609A    je          004860C2
 0048609C    mov         eax,dword ptr [ebp-14]
 0048609F    cmp         dword ptr [eax+2BC],0
>004860A6    je          004860C2
 004860A8    mov         ecx,ebx
 004860AA    mov         eax,dword ptr [ebp-14]
 004860AD    mov         eax,dword ptr [eax+2BC]
 004860B3    mov         edx,esi
 004860B5    mov         edi,dword ptr [eax]
 004860B7    call        dword ptr [edi+24]
 004860BA    test        al,al
>004860BC    jne         0048634B
 004860C2    mov         eax,dword ptr [ebx]
 004860C4    cmp         eax,100
>004860C9    jb          00486104
 004860CB    cmp         eax,109
>004860D0    ja          00486104
 004860D2    mov         dl,1
 004860D4    mov         eax,esi
 004860D6    call        GetParentForm
 004860DB    mov         dword ptr [ebp-14],eax
 004860DE    cmp         dword ptr [ebp-14],0
>004860E2    je          00486342
 004860E8    mov         ecx,ebx
 004860EA    mov         edx,esi
 004860EC    mov         eax,dword ptr [ebp-14]
 004860EF    mov         edi,dword ptr [eax]
 004860F1    call        dword ptr [edi+118]
 004860F7    test        al,al
>004860F9    jne         0048634B
>004860FF    jmp         00486342
 00486104    mov         eax,dword ptr [ebx]
 00486106    cmp         eax,200
>0048610B    jb          0048632B
 00486111    cmp         eax,20E
>00486116    ja          0048632B
 0048611C    test        byte ptr [esi+50],80
>00486120    jne         00486136
 00486122    sub         eax,203
>00486127    je          00486133
 00486129    sub         eax,3
>0048612C    je          00486133
 0048612E    sub         eax,3
>00486131    jne         00486136
 00486133    sub         dword ptr [ebx],2
 00486136    mov         eax,dword ptr [ebx]
 00486138    add         eax,0FFFFFE00
 0048613D    cmp         eax,7
>00486140    ja          004862B1
 00486146    jmp         dword ptr [eax*4+48614D]
 00486146    dd          0048616D
 00486146    dd          00486289
 00486146    dd          004862A8
 00486146    dd          00486289
 00486146    dd          004862B1
 00486146    dd          004862B1
 00486146    dd          004862B1
 00486146    dd          00486182
 0048616D    mov         ecx,ebx
 0048616F    mov         eax,[0078D590];^Application:TApplication
 00486174    mov         eax,dword ptr [eax]
 00486176    mov         edx,esi
 00486178    call        TApplication.HintMouseMessage
>0048617D    jmp         00486342
 00486182    test        byte ptr [esi+52],8
>00486186    je          00486342
 0048618C    mov         eax,[00486354]
 00486191    and         eax,dword ptr [esi+54]
 00486194    mov         edx,dword ptr ds:[486358]
 0048619A    cmp         edx,eax
>0048619C    jne         00486342
 004861A2    mov         eax,[0079318C];Mouse:TMouse
 004861A7    call        TMouse.GetIsDragging
 004861AC    test        al,al
>004861AE    jne         00486342
 004861B4    mov         eax,[0079318C];Mouse:TMouse
 004861B9    call        TMouse.CreatePanningWindow
 004861BE    mov         byte ptr [ebp-15],0
 004861C2    mov         eax,[0079318C];Mouse:TMouse
 004861C7    mov         edi,dword ptr [eax+28]
 004861CA    test        edi,edi
>004861CC    je          0048624B
 004861CE    mov         eax,esi
 004861D0    mov         edx,dword ptr ds:[47C4E8];TWinControl
 004861D6    call        @IsClass
 004861DB    test        al,al
>004861DD    je          004861F9
 004861DF    mov         eax,esi
 004861E1    call        TWinControl.GetHandle
 004861E6    mov         edx,eax
 004861E8    mov         eax,edi
 004861EA    mov         ecx,esi
 004861EC    mov         edi,dword ptr [eax]
 004861EE    call        dword ptr [edi+0F4]
 004861F4    mov         byte ptr [ebp-15],al
>004861F7    jmp         0048624B
 004861F9    cmp         dword ptr [esi+34],0
>004861FD    je          0048621A
 004861FF    mov         eax,dword ptr [esi+34]
 00486202    call        TWinControl.GetHandle
 00486207    mov         edx,eax
 00486209    mov         eax,edi
 0048620B    mov         ecx,esi
 0048620D    mov         edi,dword ptr [eax]
 0048620F    call        dword ptr [edi+0F4]
 00486215    mov         byte ptr [ebp-15],al
>00486218    jmp         0048624B
 0048621A    xor         edx,edx
 0048621C    mov         eax,esi
 0048621E    call        GetParentForm
 00486223    mov         dword ptr [ebp-14],eax
 00486226    cmp         dword ptr [ebp-14],0
>0048622A    je          0048624B
 0048622C    mov         eax,dword ptr [ebp-14]
 0048622F    call        TWinControl.GetHandle
 00486234    mov         edx,eax
 00486236    mov         eax,[0079318C];Mouse:TMouse
 0048623B    mov         eax,dword ptr [eax+28]
 0048623E    mov         ecx,esi
 00486240    mov         edi,dword ptr [eax]
 00486242    call        dword ptr [edi+0F4]
 00486248    mov         byte ptr [ebp-15],al
 0048624B    cmp         byte ptr [ebp-15],0
>0048624F    je          00486269
 00486251    mov         dword ptr [ebx+0C],1
 00486258    mov         eax,[0078D590];^Application:TApplication
 0048625D    mov         eax,dword ptr [eax]
 0048625F    call        TApplication.HideHint
>00486264    jmp         00486342
 00486269    mov         eax,[0079318C];Mouse:TMouse
 0048626E    cmp         dword ptr [eax+28],0
>00486272    je          00486342
 00486278    xor         edx,edx
 0048627A    mov         eax,[0079318C];Mouse:TMouse
 0048627F    call        TMouse.SetPanningWindow
>00486284    jmp         00486342
 00486289    cmp         byte ptr [esi+5F],1
>0048628D    jne         0048629F
 0048628F    mov         eax,esi
 00486291    mov         si,0FFEE
 00486295    call        @CallDynaInst
>0048629A    jmp         0048634B
 0048629F    or          dword ptr [esi+54],1
>004862A3    jmp         00486342
 004862A8    and         dword ptr [esi+54],0FFFFFFFE
>004862AC    jmp         00486342
 004862B1    mov         eax,[0079318C];Mouse:TMouse
 004862B6    cmp         byte ptr [eax+20],0
>004862BA    je          00486342
 004862C0    mov         eax,[0079318C];Mouse:TMouse
 004862C5    cmp         dword ptr [eax+1C],0
>004862C9    je          00486342
 004862CB    mov         eax,dword ptr [ebx]
 004862CD    mov         edx,dword ptr ds:[79318C];Mouse:TMouse
 004862D3    cmp         eax,dword ptr [edx+1C]
>004862D6    jne         00486342
 004862D8    lea         eax,[ebp-11A]
 004862DE    push        eax
 004862DF    call        user32.GetKeyboardState
 004862E4    mov         eax,dword ptr [ebx]
 004862E6    mov         dword ptr [ebp-10],eax
 004862E9    lea         eax,[ebp-11A]
 004862EF    call        KeyboardStateToShiftState
 004862F4    mov         word ptr [ebp-0C],ax
 004862F8    movzx       eax,word ptr [ebx+4]
 004862FC    mov         word ptr [ebp-0A],ax
 00486300    mov         edx,dword ptr [ebx+8]
 00486303    mov         eax,edx
 00486305    and         eax,0FFFF
 0048630A    shr         edx,10
 0048630D    mov         word ptr [ebp-1A],ax
 00486311    mov         word ptr [ebp-18],dx
 00486315    mov         eax,dword ptr [ebp-1A]
 00486318    mov         dword ptr [ebp-8],eax
 0048631B    lea         edx,[ebp-10]
 0048631E    mov         eax,esi
 00486320    mov         si,0FFC9
 00486324    call        @CallDynaInst
>00486329    jmp         0048634B
 0048632B    cmp         eax,0B00B
>00486330    jne         00486342
 00486332    mov         edx,dword ptr [ebx+8]
 00486335    push        edx
 00486336    mov         ecx,dword ptr [ebx+4]
 00486339    mov         edx,eax
 0048633B    mov         eax,esi
 0048633D    call        TControl.SendDockNotification
 00486342    mov         edx,ebx
 00486344    mov         eax,esi
 00486346    mov         ecx,dword ptr [eax]
 00486348    call        dword ptr [ecx-14]
 0048634B    pop         edi
 0048634C    pop         esi
 0048634D    pop         ebx
 0048634E    mov         esp,ebp
 00486350    pop         ebp
 00486351    ret
*}
end;

//0048635C
{*procedure TControl.DefaultHandler(var Message:?);
begin
 0048635C    push        ebx
 0048635D    push        esi
 0048635E    push        edi
 0048635F    mov         ebx,edx
 00486361    mov         esi,eax
 00486363    mov         eax,dword ptr [ebx]
 00486365    sub         eax,0C
>00486368    je          004863BA
 0048636A    dec         eax
>0048636B    je          00486372
 0048636D    dec         eax
>0048636E    je          0048639D
>00486370    jmp         004863E5
 00486372    mov         eax,dword ptr [esi+174]
 00486378    test        eax,eax
>0048637A    je          00486380
 0048637C    mov         edi,eax
>0048637E    jmp         00486385
 00486380    mov         edi,4863EC
 00486385    mov         ecx,dword ptr [ebx+4]
 00486388    dec         ecx
 00486389    mov         eax,dword ptr [ebx+8]
 0048638C    mov         edx,edi
 0048638E    call        StrLCopy
 00486393    call        StrLen
 00486398    mov         dword ptr [ebx+0C],eax
>0048639B    jmp         004863E5
 0048639D    mov         edi,dword ptr [esi+174]
 004863A3    test        edi,edi
>004863A5    jne         004863AE
 004863A7    xor         eax,eax
 004863A9    mov         dword ptr [ebx+0C],eax
>004863AC    jmp         004863E5
 004863AE    mov         eax,edi
 004863B0    call        StrLen
 004863B5    mov         dword ptr [ebx+0C],eax
>004863B8    jmp         004863E5
 004863BA    mov         eax,dword ptr [ebx+8]
 004863BD    call        StrNew
 004863C2    mov         edi,eax
 004863C4    mov         eax,dword ptr [esi+174]
 004863CA    call        StrDispose
 004863CF    mov         dword ptr [esi+174],edi
 004863D5    mov         eax,dword ptr [ebx+8]
 004863D8    push        eax
 004863D9    mov         ecx,dword ptr [ebx+4]
 004863DC    mov         edx,dword ptr [ebx]
 004863DE    mov         eax,esi
 004863E0    call        TControl.SendDockNotification
 004863E5    pop         edi
 004863E6    pop         esi
 004863E7    pop         ebx
 004863E8    ret
end;*}

//004863F0
procedure TControl.ReadIsControl(Reader:TReader);
begin
{*
 004863F0    push        ebx
 004863F1    push        esi
 004863F2    mov         esi,edx
 004863F4    mov         ebx,eax
 004863F6    mov         eax,esi
 004863F8    call        TReader.ReadBoolean
 004863FD    mov         byte ptr [ebx+60],al
 00486400    pop         esi
 00486401    pop         ebx
 00486402    ret
*}
end;

//00486404
procedure TControl.WriteIsControl(Writer:TWriter);
begin
{*
 00486404    movzx       eax,byte ptr [eax+60]
 00486408    xchg        eax,edx
 00486409    call        TWriter.WriteBoolean
 0048640E    ret
*}
end;

//00486410
function DoWriteIsControl:Boolean;
begin
{*
 00486410    push        ebp
 00486411    mov         ebp,esp
 00486413    mov         eax,dword ptr [ebp+8]
 00486416    mov         eax,dword ptr [eax-4]
 00486419    mov         eax,dword ptr [eax+20]
 0048641C    test        eax,eax
>0048641E    je          00486435
 00486420    mov         edx,dword ptr [ebp+8]
 00486423    movzx       eax,byte ptr [eax+60]
 00486427    mov         edx,dword ptr [ebp+8]
 0048642A    mov         edx,dword ptr [edx-8]
 0048642D    cmp         al,byte ptr [edx+60]
 00486430    setne       al
 00486433    pop         ebp
 00486434    ret
 00486435    mov         eax,dword ptr [ebp+8]
 00486438    mov         eax,dword ptr [eax-8]
 0048643B    movzx       eax,byte ptr [eax+60]
 0048643F    pop         ebp
 00486440    ret
*}
end;

//00486444
function DoWriteExplicit(Dim:TExplicitDimension):Boolean;
begin
{*
 00486444    push        ebp
 00486445    mov         ebp,esp
 00486447    push        ebx
 00486448    sub         al,1
>0048644A    jb          00486467
>0048644C    je          004864E1
 00486452    dec         al
>00486454    je          0048655B
 0048645A    dec         al
>0048645C    je          004865D2
>00486462    jmp         00486649
 00486467    mov         eax,dword ptr [ebp+8]
 0048646A    mov         eax,dword ptr [eax-4]
 0048646D    mov         ebx,dword ptr [eax+20]
 00486470    test        ebx,ebx
>00486472    je          0048648B
 00486474    mov         eax,dword ptr [ebp+8]
 00486477    mov         eax,dword ptr [ebx+194]
 0048647D    mov         edx,dword ptr [ebp+8]
 00486480    mov         edx,dword ptr [edx-8]
 00486483    cmp         eax,dword ptr [edx+194]
>00486489    jne         004864DC
 0048648B    mov         eax,dword ptr [ebp+8]
 0048648E    mov         eax,dword ptr [eax-4]
 00486491    cmp         dword ptr [eax+20],0
>00486495    jne         004864D5
 00486497    mov         eax,dword ptr [ebp+8]
 0048649A    mov         eax,dword ptr [eax-8]
 0048649D    cmp         byte ptr [eax+5D],0
>004864A1    jne         004864BE
 004864A3    mov         eax,dword ptr [ebp+8]
 004864A6    mov         eax,dword ptr [eax-8]
 004864A9    movzx       eax,byte ptr [eax+63]
 004864AD    and         al,byte ptr ds:[486650]
 004864B3    movzx       edx,byte ptr ds:[486654]
 004864BA    cmp         dl,al
>004864BC    jne         004864D5
 004864BE    mov         eax,dword ptr [ebp+8]
 004864C1    mov         eax,dword ptr [eax-8]
 004864C4    mov         eax,dword ptr [eax+194]
 004864CA    mov         edx,dword ptr [ebp+8]
 004864CD    mov         edx,dword ptr [edx-8]
 004864D0    cmp         eax,dword ptr [edx+40]
>004864D3    jne         004864DC
 004864D5    xor         eax,eax
>004864D7    jmp         0048664B
 004864DC    mov         al,1
 004864DE    pop         ebx
 004864DF    pop         ebp
 004864E0    ret
 004864E1    mov         eax,dword ptr [ebp+8]
 004864E4    mov         eax,dword ptr [eax-4]
 004864E7    mov         ebx,dword ptr [eax+20]
 004864EA    test        ebx,ebx
>004864EC    je          00486505
 004864EE    mov         eax,dword ptr [ebp+8]
 004864F1    mov         eax,dword ptr [ebx+198]
 004864F7    mov         edx,dword ptr [ebp+8]
 004864FA    mov         edx,dword ptr [edx-8]
 004864FD    cmp         eax,dword ptr [edx+198]
>00486503    jne         00486556
 00486505    mov         eax,dword ptr [ebp+8]
 00486508    mov         eax,dword ptr [eax-4]
 0048650B    cmp         dword ptr [eax+20],0
>0048650F    jne         0048654F
 00486511    mov         eax,dword ptr [ebp+8]
 00486514    mov         eax,dword ptr [eax-8]
 00486517    cmp         byte ptr [eax+5D],0
>0048651B    jne         00486538
 0048651D    mov         eax,dword ptr [ebp+8]
 00486520    mov         eax,dword ptr [eax-8]
 00486523    movzx       eax,byte ptr [eax+63]
 00486527    and         al,byte ptr ds:[486658]
 0048652D    movzx       edx,byte ptr ds:[486654]
 00486534    cmp         dl,al
>00486536    jne         0048654F
 00486538    mov         eax,dword ptr [ebp+8]
 0048653B    mov         eax,dword ptr [eax-8]
 0048653E    mov         eax,dword ptr [eax+198]
 00486544    mov         edx,dword ptr [ebp+8]
 00486547    mov         edx,dword ptr [edx-8]
 0048654A    cmp         eax,dword ptr [edx+44]
>0048654D    jne         00486556
 0048654F    xor         eax,eax
>00486551    jmp         0048664B
 00486556    mov         al,1
 00486558    pop         ebx
 00486559    pop         ebp
 0048655A    ret
 0048655B    mov         eax,dword ptr [ebp+8]
 0048655E    mov         eax,dword ptr [eax-4]
 00486561    mov         ebx,dword ptr [eax+20]
 00486564    test        ebx,ebx
>00486566    je          0048657F
 00486568    mov         eax,dword ptr [ebp+8]
 0048656B    mov         eax,dword ptr [ebx+19C]
 00486571    mov         edx,dword ptr [ebp+8]
 00486574    mov         edx,dword ptr [edx-8]
 00486577    cmp         eax,dword ptr [edx+19C]
>0048657D    jne         004865CD
 0048657F    mov         eax,dword ptr [ebp+8]
 00486582    mov         eax,dword ptr [eax-4]
 00486585    cmp         dword ptr [eax+20],0
>00486589    jne         004865C9
 0048658B    mov         eax,dword ptr [ebp+8]
 0048658E    mov         eax,dword ptr [eax-8]
 00486591    cmp         byte ptr [eax+5D],0
>00486595    jne         004865B2
 00486597    mov         eax,dword ptr [ebp+8]
 0048659A    mov         eax,dword ptr [eax-8]
 0048659D    movzx       eax,byte ptr [eax+63]
 004865A1    and         al,byte ptr ds:[48665C]
 004865A7    movzx       edx,byte ptr ds:[48665C]
 004865AE    cmp         dl,al
>004865B0    jne         004865C9
 004865B2    mov         eax,dword ptr [ebp+8]
 004865B5    mov         eax,dword ptr [eax-8]
 004865B8    mov         eax,dword ptr [eax+19C]
 004865BE    mov         edx,dword ptr [ebp+8]
 004865C1    mov         edx,dword ptr [edx-8]
 004865C4    cmp         eax,dword ptr [edx+48]
>004865C7    jne         004865CD
 004865C9    xor         eax,eax
>004865CB    jmp         0048664B
 004865CD    mov         al,1
 004865CF    pop         ebx
 004865D0    pop         ebp
 004865D1    ret
 004865D2    mov         eax,dword ptr [ebp+8]
 004865D5    mov         eax,dword ptr [eax-4]
 004865D8    mov         ebx,dword ptr [eax+20]
 004865DB    test        ebx,ebx
>004865DD    je          004865F6
 004865DF    mov         eax,dword ptr [ebp+8]
 004865E2    mov         eax,dword ptr [ebx+1A0]
 004865E8    mov         edx,dword ptr [ebp+8]
 004865EB    mov         edx,dword ptr [edx-8]
 004865EE    cmp         eax,dword ptr [edx+1A0]
>004865F4    jne         00486644
 004865F6    mov         eax,dword ptr [ebp+8]
 004865F9    mov         eax,dword ptr [eax-4]
 004865FC    cmp         dword ptr [eax+20],0
>00486600    jne         00486640
 00486602    mov         eax,dword ptr [ebp+8]
 00486605    mov         eax,dword ptr [eax-8]
 00486608    cmp         byte ptr [eax+5D],0
>0048660C    jne         00486629
 0048660E    mov         eax,dword ptr [ebp+8]
 00486611    mov         eax,dword ptr [eax-8]
 00486614    movzx       eax,byte ptr [eax+63]
 00486618    and         al,byte ptr ds:[486660]
 0048661E    movzx       edx,byte ptr ds:[486660]
 00486625    cmp         dl,al
>00486627    jne         00486640
 00486629    mov         eax,dword ptr [ebp+8]
 0048662C    mov         eax,dword ptr [eax-8]
 0048662F    mov         eax,dword ptr [eax+1A0]
 00486635    mov         edx,dword ptr [ebp+8]
 00486638    mov         edx,dword ptr [edx-8]
 0048663B    cmp         eax,dword ptr [edx+4C]
>0048663E    jne         00486644
 00486640    xor         eax,eax
>00486642    jmp         0048664B
 00486644    mov         al,1
 00486646    pop         ebx
 00486647    pop         ebp
 00486648    ret
 00486649    xor         eax,eax
 0048664B    pop         ebx
 0048664C    pop         ebp
 0048664D    ret
*}
end;

//00486664
procedure TControl.DefineProperties(Filer:TFiler);
begin
{*
 00486664    push        ebp
 00486665    mov         ebp,esp
 00486667    add         esp,0FFFFFFF8
 0048666A    push        ebx
 0048666B    push        esi
 0048666C    mov         dword ptr [ebp-4],edx
 0048666F    mov         dword ptr [ebp-8],eax
 00486672    lea         ebx,[ebp-8]
 00486675    mov         eax,dword ptr [ebx]
 00486677    push        eax
 00486678    push        4863F0;TControl.ReadIsControl
 0048667D    mov         eax,dword ptr [ebx]
 0048667F    push        eax
 00486680    push        486404;TControl.WriteIsControl
 00486685    push        ebp
 00486686    call        DoWriteIsControl
 0048668B    pop         ecx
 0048668C    mov         ecx,eax
 0048668E    mov         edx,486790;'IsControl'
 00486693    mov         eax,dword ptr [ebp-4]
 00486696    mov         esi,dword ptr [eax]
 00486698    call        dword ptr [esi+4]
 0048669B    mov         eax,dword ptr [ebx]
 0048669D    push        eax
 0048669E    push        487D7C;TControl.ReadExplicitLeft
 004866A3    mov         eax,dword ptr [ebx]
 004866A5    push        eax
 004866A6    push        487D14;TControl.WriteExplicitLeft
 004866AB    mov         eax,dword ptr [ebx]
 004866AD    test        byte ptr [eax+1C],2
>004866B1    jne         004866C0
 004866B3    push        ebp
 004866B4    xor         eax,eax
 004866B6    call        DoWriteExplicit
 004866BB    pop         ecx
 004866BC    test        al,al
>004866BE    jne         004866C4
 004866C0    xor         ecx,ecx
>004866C2    jmp         004866C6
 004866C4    mov         cl,1
 004866C6    mov         edx,4867B0;'ExplicitLeft'
 004866CB    mov         eax,dword ptr [ebp-4]
 004866CE    mov         esi,dword ptr [eax]
 004866D0    call        dword ptr [esi+4]
 004866D3    mov         eax,dword ptr [ebx]
 004866D5    push        eax
 004866D6    push        487D4C;TControl.ReadExplicitTop
 004866DB    mov         eax,dword ptr [ebx]
 004866DD    push        eax
 004866DE    push        487CF4;TControl.WriteExplicitTop
 004866E3    mov         eax,dword ptr [ebx]
 004866E5    test        byte ptr [eax+1C],2
>004866E9    jne         004866F8
 004866EB    push        ebp
 004866EC    mov         al,1
 004866EE    call        DoWriteExplicit
 004866F3    pop         ecx
 004866F4    test        al,al
>004866F6    jne         004866FC
 004866F8    xor         ecx,ecx
>004866FA    jmp         004866FE
 004866FC    mov         cl,1
 004866FE    mov         edx,4867D8;'ExplicitTop'
 00486703    mov         eax,dword ptr [ebp-4]
 00486706    mov         esi,dword ptr [eax]
 00486708    call        dword ptr [esi+4]
 0048670B    mov         eax,dword ptr [ebx]
 0048670D    push        eax
 0048670E    push        487D24;TControl.ReadExplicitWidth
 00486713    mov         eax,dword ptr [ebx]
 00486715    push        eax
 00486716    push        487D3C;TControl.WriteExplicitWidth
 0048671B    mov         eax,dword ptr [ebx]
 0048671D    test        byte ptr [eax+1C],2
>00486721    jne         00486730
 00486723    push        ebp
 00486724    mov         al,2
 00486726    call        DoWriteExplicit
 0048672B    pop         ecx
 0048672C    test        al,al
>0048672E    jne         00486734
 00486730    xor         ecx,ecx
>00486732    jmp         00486736
 00486734    mov         cl,1
 00486736    mov         edx,4867FC;'ExplicitWidth'
 0048673B    mov         eax,dword ptr [ebp-4]
 0048673E    mov         esi,dword ptr [eax]
 00486740    call        dword ptr [esi+4]
 00486743    mov         eax,dword ptr [ebx]
 00486745    push        eax
 00486746    push        487D64;TControl.ReadExplicitHeight
 0048674B    mov         eax,dword ptr [ebx]
 0048674D    push        eax
 0048674E    push        487D04;TControl.WriteExplicitHeight
 00486753    mov         eax,dword ptr [ebx]
 00486755    test        byte ptr [eax+1C],2
>00486759    jne         00486768
 0048675B    push        ebp
 0048675C    mov         al,3
 0048675E    call        DoWriteExplicit
 00486763    pop         ecx
 00486764    test        al,al
>00486766    jne         0048676C
 00486768    xor         ecx,ecx
>0048676A    jmp         0048676E
 0048676C    mov         cl,1
 0048676E    mov         edx,486824;'ExplicitHeight'
 00486773    mov         eax,dword ptr [ebp-4]
 00486776    mov         ebx,dword ptr [eax]
 00486778    call        dword ptr [ebx+4]
 0048677B    pop         esi
 0048677C    pop         ebx
 0048677D    pop         ecx
 0048677E    pop         ecx
 0048677F    pop         ebp
 00486780    ret
*}
end;

//00486844
procedure TControl.Click;
begin
{*
 00486844    push        ebx
 00486845    mov         ebx,eax
 00486847    cmp         word ptr [ebx+112],0
>0048684F    je          00486873
 00486851    mov         eax,ebx
 00486853    mov         edx,dword ptr [eax]
 00486855    call        dword ptr [edx+4C]
 00486858    test        eax,eax
>0048685A    je          00486873
 0048685C    mov         eax,ebx
 0048685E    mov         edx,dword ptr [eax]
 00486860    call        dword ptr [edx+4C]
 00486863    mov         eax,dword ptr [eax+40]
 00486866    cmp         eax,dword ptr [ebx+110]
 0048686C    sete        al
 0048686F    xor         al,1
>00486871    jmp         00486875
 00486873    xor         eax,eax
 00486875    test        al,al
>00486877    je          00486889
 00486879    mov         edx,ebx
 0048687B    mov         eax,dword ptr [ebx+114]
 00486881    call        dword ptr [ebx+110]
 00486887    pop         ebx
 00486888    ret
 00486889    test        byte ptr [ebx+1C],10
>0048688D    jne         004868A1
 0048688F    cmp         dword ptr [ebx+68],0
>00486893    je          004868A1
 00486895    mov         edx,ebx
 00486897    mov         eax,dword ptr [ebx+68]
 0048689A    mov         ecx,dword ptr [eax]
 0048689C    call        dword ptr [ecx+18]
>0048689F    jmp         004868B9
 004868A1    cmp         word ptr [ebx+112],0
>004868A9    je          004868B9
 004868AB    mov         edx,ebx
 004868AD    mov         eax,dword ptr [ebx+114]
 004868B3    call        dword ptr [ebx+110]
 004868B9    pop         ebx
 004868BA    ret
*}
end;

//004868BC
procedure TControl.DblClick;
begin
{*
 004868BC    push        ebx
 004868BD    cmp         word ptr [eax+11A],0
>004868C5    je          004868D7
 004868C7    mov         ebx,eax
 004868C9    mov         edx,eax
 004868CB    mov         eax,dword ptr [ebx+11C]
 004868D1    call        dword ptr [ebx+118]
 004868D7    pop         ebx
 004868D8    ret
*}
end;

//004868DC
procedure TControl.MouseDown(Button:TMouseButton; Shift:TShiftState; X:Integer; Y:Integer);
begin
{*
 004868DC    push        ebp
 004868DD    mov         ebp,esp
 004868DF    push        ecx
 004868E0    push        ebx
 004868E1    mov         word ptr [ebp-2],cx
 004868E5    cmp         word ptr [eax+0C2],0
>004868ED    je          0048690E
 004868EF    movzx       ecx,word ptr [ebp-2]
 004868F3    push        ecx
 004868F4    mov         ecx,dword ptr [ebp+0C]
 004868F7    push        ecx
 004868F8    mov         ecx,dword ptr [ebp+8]
 004868FB    push        ecx
 004868FC    mov         ebx,eax
 004868FE    mov         ecx,edx
 00486900    mov         edx,eax
 00486902    mov         eax,dword ptr [ebx+0C4]
 00486908    call        dword ptr [ebx+0C0]
 0048690E    pop         ebx
 0048690F    pop         ecx
 00486910    pop         ebp
 00486911    ret         8
*}
end;

//00486914
procedure TControl.DoMouseDown(var Message:TWMMouse; Button:TMouseButton; Shift:TShiftState);
begin
{*
 00486914    push        ebp
 00486915    mov         ebp,esp
 00486917    add         esp,0FFFFFFF4
 0048691A    push        esi
 0048691B    push        edi
 0048691C    mov         byte ptr [ebp-1],cl
 0048691F    mov         edi,edx
 00486921    mov         esi,eax
 00486923    test        byte ptr [esi+51],10
>00486927    jne         004869A5
 00486929    cmp         dword ptr [esi+48],8000
>00486930    jg          0048693B
 00486932    cmp         dword ptr [esi+4C],8000
>00486939    jle         00486975
 0048693B    lea         edx,[ebp-0C]
 0048693E    mov         eax,esi
 00486940    call        TControl.CalcCursorPos
 00486945    mov         eax,dword ptr [ebp-0C]
 00486948    push        eax
 00486949    mov         eax,dword ptr [ebp-8]
 0048694C    push        eax
 0048694D    movzx       eax,word ptr [edi+4]
 00486951    call        KeysToShiftState
 00486956    or          ax,word ptr [ebp+8]
 0048695A    push        eax
 0048695B    call        MouseOriginToShiftState
 00486960    pop         ecx
 00486961    or          cx,ax
 00486964    movzx       edx,byte ptr [ebp-1]
 00486968    mov         eax,esi
 0048696A    mov         si,0FFD5
 0048696E    call        @CallDynaInst
>00486973    jmp         004869A5
 00486975    movsx       eax,word ptr [edi+8]
 00486979    push        eax
 0048697A    movsx       eax,word ptr [edi+0A]
 0048697E    push        eax
 0048697F    movzx       eax,word ptr [edi+4]
 00486983    call        KeysToShiftState
 00486988    or          ax,word ptr [ebp+8]
 0048698C    push        eax
 0048698D    call        MouseOriginToShiftState
 00486992    pop         ecx
 00486993    or          cx,ax
 00486996    movzx       edx,byte ptr [ebp-1]
 0048699A    mov         eax,esi
 0048699C    mov         si,0FFD5
 004869A0    call        @CallDynaInst
 004869A5    pop         edi
 004869A6    pop         esi
 004869A7    mov         esp,ebp
 004869A9    pop         ebp
 004869AA    ret         4
*}
end;

//004869B0
procedure TControl.WMLButtonDown(var Message:TWMLButtonDown);
begin
{*
 004869B0    push        ebx
 004869B1    push        esi
 004869B2    mov         esi,edx
 004869B4    mov         ebx,eax
 004869B6    mov         edx,ebx
 004869B8    mov         eax,ebx
 004869BA    call        TControl.SendCancelMode
 004869BF    mov         edx,esi
 004869C1    mov         eax,ebx
 004869C3    mov         ecx,dword ptr [eax]
 004869C5    call        dword ptr [ecx-10]
 004869C8    test        byte ptr [ebx+50],2
>004869CC    je          004869D7
 004869CE    mov         dl,1
 004869D0    mov         eax,ebx
 004869D2    call        TControl.SetMouseCapture
 004869D7    test        byte ptr [ebx+50],8
>004869DB    je          004869E1
 004869DD    or          dword ptr [ebx+54],2
 004869E1    movzx       eax,word ptr ds:[4869F8]
 004869E8    push        eax
 004869E9    mov         edx,esi
 004869EB    xor         ecx,ecx
 004869ED    mov         eax,ebx
 004869EF    call        TControl.DoMouseDown
 004869F4    pop         esi
 004869F5    pop         ebx
 004869F6    ret
*}
end;

//004869FC
procedure TControl.WMNCLButtonDown(var Message:TWMNCLButtonDown);
begin
{*
 004869FC    push        ebx
 004869FD    push        esi
 004869FE    mov         esi,edx
 00486A00    mov         ebx,eax
 00486A02    mov         edx,ebx
 00486A04    mov         eax,ebx
 00486A06    call        TControl.SendCancelMode
 00486A0B    mov         edx,esi
 00486A0D    mov         eax,ebx
 00486A0F    mov         ecx,dword ptr [eax]
 00486A11    call        dword ptr [ecx-10]
 00486A14    pop         esi
 00486A15    pop         ebx
 00486A16    ret
*}
end;

//00486A18
procedure TControl.WMLButtonDblClk(var Message:TWMLButtonDblClk);
begin
{*
 00486A18    push        ebx
 00486A19    push        esi
 00486A1A    push        edi
 00486A1B    mov         edi,edx
 00486A1D    mov         ebx,eax
 00486A1F    mov         edx,ebx
 00486A21    mov         eax,ebx
 00486A23    call        TControl.SendCancelMode
 00486A28    mov         edx,edi
 00486A2A    mov         eax,ebx
 00486A2C    mov         ecx,dword ptr [eax]
 00486A2E    call        dword ptr [ecx-10]
 00486A31    test        byte ptr [ebx+50],2
>00486A35    je          00486A40
 00486A37    mov         dl,1
 00486A39    mov         eax,ebx
 00486A3B    call        TControl.SetMouseCapture
 00486A40    test        byte ptr [ebx+50],8
>00486A44    je          00486A51
 00486A46    mov         eax,ebx
 00486A48    mov         si,0FFEB
 00486A4C    call        @CallDynaInst
 00486A51    movzx       eax,word ptr ds:[486A68]
 00486A58    push        eax
 00486A59    mov         edx,edi
 00486A5B    xor         ecx,ecx
 00486A5D    mov         eax,ebx
 00486A5F    call        TControl.DoMouseDown
 00486A64    pop         edi
 00486A65    pop         esi
 00486A66    pop         ebx
 00486A67    ret
*}
end;

//00486A6C
procedure TControl.sub_00486A6C;
begin
{*
 00486A6C    mov         eax,dword ptr [eax+7C];TControl.FPopupMenu:TPopupMenu
 00486A6F    ret
*}
end;

//00486A70
function TControl.CheckNewSize(var NewWidth:Integer; var NewHeight:Integer):Boolean;
begin
{*
 00486A70    push        ebx
 00486A71    push        esi
 00486A72    push        edi
 00486A73    push        ebp
 00486A74    add         esp,0FFFFFFF0
 00486A77    mov         ebp,ecx
 00486A79    mov         edi,edx
 00486A7B    mov         esi,eax
 00486A7D    xor         ebx,ebx
 00486A7F    mov         eax,dword ptr [edi]
 00486A81    mov         dword ptr [esp],eax
 00486A84    mov         eax,dword ptr [ebp]
 00486A87    mov         dword ptr [esp+4],eax
 00486A8B    lea         ecx,[esp+4]
 00486A8F    mov         edx,esp
 00486A91    mov         eax,esi
 00486A93    call        TControl.DoCanResize
 00486A98    test        al,al
>00486A9A    je          00486B01
 00486A9C    mov         eax,dword ptr [esp]
 00486A9F    mov         dword ptr [esp+8],eax
 00486AA3    mov         eax,dword ptr [esp+4]
 00486AA7    mov         dword ptr [esp+0C],eax
 00486AAB    cmp         byte ptr [esi+5E],0
>00486AAF    je          00486AEE
 00486AB1    lea         ecx,[esp+0C]
 00486AB5    lea         edx,[esp+8]
 00486AB9    mov         eax,esi
 00486ABB    call        TControl.DoCanAutoSize
 00486AC0    test        al,al
>00486AC2    je          00486AD7
 00486AC4    mov         eax,dword ptr [esp+8]
 00486AC8    cmp         eax,dword ptr [esp]
>00486ACB    jne         00486AD7
 00486ACD    mov         eax,dword ptr [esp+0C]
 00486AD1    cmp         eax,dword ptr [esp+4]
>00486AD5    je          00486AEE
 00486AD7    lea         ecx,[esp+0C]
 00486ADB    lea         edx,[esp+8]
 00486ADF    mov         eax,esi
 00486AE1    call        TControl.DoCanResize
 00486AE6    test        al,al
>00486AE8    jne         00486AEE
 00486AEA    xor         ebx,ebx
>00486AEC    jmp         00486AF0
 00486AEE    mov         bl,1
 00486AF0    test        bl,bl
>00486AF2    je          00486B01
 00486AF4    mov         eax,dword ptr [esp+8]
 00486AF8    mov         dword ptr [edi],eax
 00486AFA    mov         eax,dword ptr [esp+0C]
 00486AFE    mov         dword ptr [ebp],eax
 00486B01    mov         eax,ebx
 00486B03    add         esp,10
 00486B06    pop         ebp
 00486B07    pop         edi
 00486B08    pop         esi
 00486B09    pop         ebx
 00486B0A    ret
*}
end;

//00486B0C
procedure TControl.WMRButtonDown(var Message:TWMRButtonDown);
begin
{*
 00486B0C    push        ebx
 00486B0D    push        esi
 00486B0E    mov         esi,edx
 00486B10    mov         ebx,eax
 00486B12    mov         edx,esi
 00486B14    mov         eax,ebx
 00486B16    mov         ecx,dword ptr [eax]
 00486B18    call        dword ptr [ecx-10]
 00486B1B    movzx       eax,word ptr ds:[486B34]
 00486B22    push        eax
 00486B23    mov         edx,esi
 00486B25    mov         cl,1
 00486B27    mov         eax,ebx
 00486B29    call        TControl.DoMouseDown
 00486B2E    pop         esi
 00486B2F    pop         ebx
 00486B30    ret
*}
end;

//00486B38
procedure TControl.WMRButtonDblClk(var Message:TWMRButtonDblClk);
begin
{*
 00486B38    push        ebx
 00486B39    push        esi
 00486B3A    mov         esi,edx
 00486B3C    mov         ebx,eax
 00486B3E    mov         edx,esi
 00486B40    mov         eax,ebx
 00486B42    mov         ecx,dword ptr [eax]
 00486B44    call        dword ptr [ecx-10]
 00486B47    movzx       eax,word ptr ds:[486B60]
 00486B4E    push        eax
 00486B4F    mov         edx,esi
 00486B51    mov         cl,1
 00486B53    mov         eax,ebx
 00486B55    call        TControl.DoMouseDown
 00486B5A    pop         esi
 00486B5B    pop         ebx
 00486B5C    ret
*}
end;

//00486B64
procedure TControl.WMMButtonDown(var Message:TWMMButtonDown);
begin
{*
 00486B64    push        ebx
 00486B65    push        esi
 00486B66    mov         esi,edx
 00486B68    mov         ebx,eax
 00486B6A    mov         edx,esi
 00486B6C    mov         eax,ebx
 00486B6E    mov         ecx,dword ptr [eax]
 00486B70    call        dword ptr [ecx-10]
 00486B73    movzx       eax,word ptr ds:[486B8C]
 00486B7A    push        eax
 00486B7B    mov         edx,esi
 00486B7D    mov         cl,2
 00486B7F    mov         eax,ebx
 00486B81    call        TControl.DoMouseDown
 00486B86    pop         esi
 00486B87    pop         ebx
 00486B88    ret
*}
end;

//00486B90
procedure TControl.WMMButtonDblClk(var Message:TWMMButtonDblClk);
begin
{*
 00486B90    push        ebx
 00486B91    push        esi
 00486B92    mov         esi,edx
 00486B94    mov         ebx,eax
 00486B96    mov         edx,esi
 00486B98    mov         eax,ebx
 00486B9A    mov         ecx,dword ptr [eax]
 00486B9C    call        dword ptr [ecx-10]
 00486B9F    movzx       eax,word ptr ds:[486BB8]
 00486BA6    push        eax
 00486BA7    mov         edx,esi
 00486BA9    mov         cl,2
 00486BAB    mov         eax,ebx
 00486BAD    call        TControl.DoMouseDown
 00486BB2    pop         esi
 00486BB3    pop         ebx
 00486BB4    ret
*}
end;

//00486BBC
procedure TControl.MouseMove(Shift:TShiftState; X:Integer; Y:Integer);
begin
{*
 00486BBC    push        ebp
 00486BBD    mov         ebp,esp
 00486BBF    push        ecx
 00486BC0    push        ebx
 00486BC1    mov         word ptr [ebp-2],dx
 00486BC5    cmp         word ptr [eax+0CA],0
>00486BCD    je          00486BE8
 00486BCF    push        ecx
 00486BD0    mov         edx,dword ptr [ebp+8]
 00486BD3    push        edx
 00486BD4    mov         ebx,eax
 00486BD6    mov         edx,eax
 00486BD8    movzx       ecx,word ptr [ebp-2]
 00486BDC    mov         eax,dword ptr [ebx+0CC]
 00486BE2    call        dword ptr [ebx+0C8]
 00486BE8    pop         ebx
 00486BE9    pop         ecx
 00486BEA    pop         ebp
 00486BEB    ret         4
*}
end;

//00486BF0
procedure TControl.WMMouseMove(var Message:TWMMouseMove);
begin
{*
 00486BF0    push        esi
 00486BF1    push        edi
 00486BF2    add         esp,0FFFFFFF8
 00486BF5    mov         edi,edx
 00486BF7    mov         esi,eax
 00486BF9    mov         edx,edi
 00486BFB    mov         eax,esi
 00486BFD    mov         ecx,dword ptr [eax]
 00486BFF    call        dword ptr [ecx-10]
 00486C02    test        byte ptr [esi+51],10
>00486C06    jne         00486C73
 00486C08    cmp         dword ptr [esi+48],8000
>00486C0F    jg          00486C1A
 00486C11    cmp         dword ptr [esi+4C],8000
>00486C18    jle         00486C4C
 00486C1A    mov         edx,esp
 00486C1C    mov         eax,esi
 00486C1E    call        TControl.CalcCursorPos
 00486C23    mov         eax,dword ptr [esp+4]
 00486C27    push        eax
 00486C28    movzx       eax,word ptr [edi+4]
 00486C2C    call        KeysToShiftState
 00486C31    push        eax
 00486C32    call        MouseOriginToShiftState
 00486C37    pop         edx
 00486C38    or          dx,ax
 00486C3B    mov         ecx,dword ptr [esp+4]
 00486C3F    mov         eax,esi
 00486C41    mov         si,0FFD4
 00486C45    call        @CallDynaInst
>00486C4A    jmp         00486C73
 00486C4C    movsx       eax,word ptr [edi+0A]
 00486C50    push        eax
 00486C51    movzx       eax,word ptr [edi+4]
 00486C55    call        KeysToShiftState
 00486C5A    push        eax
 00486C5B    call        MouseOriginToShiftState
 00486C60    pop         edx
 00486C61    or          dx,ax
 00486C64    movsx       ecx,word ptr [edi+8]
 00486C68    mov         eax,esi
 00486C6A    mov         si,0FFD4
 00486C6E    call        @CallDynaInst
 00486C73    pop         ecx
 00486C74    pop         edx
 00486C75    pop         edi
 00486C76    pop         esi
 00486C77    ret
*}
end;

//00486C78
procedure TControl.MouseUp(Button:TMouseButton; Shift:TShiftState; X:Integer; Y:Integer);
begin
{*
 00486C78    push        ebp
 00486C79    mov         ebp,esp
 00486C7B    push        ecx
 00486C7C    push        ebx
 00486C7D    mov         word ptr [ebp-2],cx
 00486C81    cmp         word ptr [eax+0D2],0
>00486C89    je          00486CAA
 00486C8B    movzx       ecx,word ptr [ebp-2]
 00486C8F    push        ecx
 00486C90    mov         ecx,dword ptr [ebp+0C]
 00486C93    push        ecx
 00486C94    mov         ecx,dword ptr [ebp+8]
 00486C97    push        ecx
 00486C98    mov         ebx,eax
 00486C9A    mov         ecx,edx
 00486C9C    mov         edx,eax
 00486C9E    mov         eax,dword ptr [ebx+0D4]
 00486CA4    call        dword ptr [ebx+0D0]
 00486CAA    pop         ebx
 00486CAB    pop         ecx
 00486CAC    pop         ebp
 00486CAD    ret         8
*}
end;

//00486CB0
procedure TControl.DoMouseUp(var Message:TWMMouse; Button:TMouseButton);
begin
{*
 00486CB0    push        esi
 00486CB1    push        edi
 00486CB2    push        ecx
 00486CB3    mov         byte ptr [esp],cl
 00486CB6    mov         edi,edx
 00486CB8    mov         esi,eax
 00486CBA    test        byte ptr [esi+51],10
>00486CBE    jne         00486CED
 00486CC0    movsx       eax,word ptr [edi+8]
 00486CC4    push        eax
 00486CC5    movsx       eax,word ptr [edi+0A]
 00486CC9    push        eax
 00486CCA    movzx       eax,word ptr [edi+4]
 00486CCE    call        KeysToShiftState
 00486CD3    push        eax
 00486CD4    call        MouseOriginToShiftState
 00486CD9    pop         ecx
 00486CDA    or          cx,ax
 00486CDD    movzx       edx,byte ptr [esp+8]
 00486CE2    mov         eax,esi
 00486CE4    mov         si,0FFD3
 00486CE8    call        @CallDynaInst
 00486CED    pop         edx
 00486CEE    pop         edi
 00486CEF    pop         esi
 00486CF0    ret
*}
end;

//00486CF4
procedure TControl.WMLButtonUp(var Message:TWMLButtonUp);
begin
{*
 00486CF4    push        ebx
 00486CF5    push        esi
 00486CF6    push        edi
 00486CF7    add         esp,0FFFFFFE4
 00486CFA    mov         edi,edx
 00486CFC    mov         ebx,eax
 00486CFE    mov         edx,edi
 00486D00    mov         eax,ebx
 00486D02    mov         ecx,dword ptr [eax]
 00486D04    call        dword ptr [ecx-10]
 00486D07    test        byte ptr [ebx+50],2
>00486D0B    je          00486D16
 00486D0D    xor         edx,edx
 00486D0F    mov         eax,ebx
 00486D11    call        TControl.SetMouseCapture
 00486D16    test        byte ptr [ebx+54],2
>00486D1A    je          00486D5E
 00486D1C    and         dword ptr [ebx+54],0FFFFFFFD
 00486D20    mov         eax,dword ptr [edi+8]
 00486D23    mov         dword ptr [esp],eax
 00486D26    movsx       eax,word ptr [esp]
 00486D2A    mov         dword ptr [esp+4],eax
 00486D2E    movsx       eax,word ptr [esp+2]
 00486D33    mov         dword ptr [esp+8],eax
 00486D37    lea         edx,[esp+0C]
 00486D3B    mov         eax,ebx
 00486D3D    mov         ecx,dword ptr [eax]
 00486D3F    call        dword ptr [ecx+54]
 00486D42    lea         eax,[esp+0C]
 00486D46    lea         edx,[esp+4]
 00486D4A    call        PtInRect
 00486D4F    test        al,al
>00486D51    je          00486D5E
 00486D53    mov         eax,ebx
 00486D55    mov         si,0FFEC
 00486D59    call        @CallDynaInst
 00486D5E    mov         edx,edi
 00486D60    xor         ecx,ecx
 00486D62    mov         eax,ebx
 00486D64    call        TControl.DoMouseUp
 00486D69    add         esp,1C
 00486D6C    pop         edi
 00486D6D    pop         esi
 00486D6E    pop         ebx
 00486D6F    ret
*}
end;

//00486D70
procedure TControl.WMRButtonUp(var Message:TWMRButtonUp);
begin
{*
 00486D70    push        ebx
 00486D71    push        esi
 00486D72    mov         esi,edx
 00486D74    mov         ebx,eax
 00486D76    mov         edx,esi
 00486D78    mov         eax,ebx
 00486D7A    mov         ecx,dword ptr [eax]
 00486D7C    call        dword ptr [ecx-10]
 00486D7F    mov         edx,esi
 00486D81    mov         cl,1
 00486D83    mov         eax,ebx
 00486D85    call        TControl.DoMouseUp
 00486D8A    pop         esi
 00486D8B    pop         ebx
 00486D8C    ret
*}
end;

//00486D90
procedure TControl.WMMButtonUp(var Message:TWMMButtonUp);
begin
{*
 00486D90    push        ebx
 00486D91    push        esi
 00486D92    mov         esi,edx
 00486D94    mov         ebx,eax
 00486D96    mov         edx,esi
 00486D98    mov         eax,ebx
 00486D9A    mov         ecx,dword ptr [eax]
 00486D9C    call        dword ptr [ecx-10]
 00486D9F    mov         edx,esi
 00486DA1    mov         cl,2
 00486DA3    mov         eax,ebx
 00486DA5    call        TControl.DoMouseUp
 00486DAA    pop         esi
 00486DAB    pop         ebx
 00486DAC    ret
*}
end;

//00486DB0
procedure TControl.WMMouseWheel(var Message:TWMMouseWheel);
begin
{*
 00486DB0    push        ebx
 00486DB1    push        esi
 00486DB2    push        edi
 00486DB3    mov         ebx,edx
 00486DB5    mov         edi,eax
 00486DB7    mov         eax,[0079318C];Mouse:TMouse
 00486DBC    cmp         byte ptr [eax+20],0
>00486DC0    jne         00486DDA
 00486DC2    mov         eax,[0079318C];Mouse:TMouse
 00486DC7    mov         byte ptr [eax+20],1
 00486DCB    mov         edx,68
 00486DD0    mov         eax,[0079318C];Mouse:TMouse
 00486DD5    call        TMouse.SettingChanged
 00486DDA    movzx       eax,word ptr [ebx+4]
 00486DDE    call        KeysToShiftState
 00486DE3    mov         word ptr [ebx+4],ax
 00486DE7    mov         edx,ebx
 00486DE9    mov         eax,edi
 00486DEB    mov         si,0FFC9
 00486DEF    call        @CallDynaInst
 00486DF4    cmp         dword ptr [ebx+0C],0
>00486DF8    jne         00486E03
 00486DFA    mov         edx,ebx
 00486DFC    mov         eax,edi
 00486DFE    mov         ecx,dword ptr [eax]
 00486E00    call        dword ptr [ecx-10]
 00486E03    pop         edi
 00486E04    pop         esi
 00486E05    pop         ebx
 00486E06    ret
*}
end;

//00486E08
procedure TControl.WMCancelMode(var Message:TWMCancelMode);
begin
{*
 00486E08    push        esi
 00486E09    mov         esi,eax
 00486E0B    mov         eax,esi
 00486E0D    mov         ecx,dword ptr [eax]
 00486E0F    call        dword ptr [ecx-10]
 00486E12    mov         eax,esi
 00486E14    call        TControl.GetMouseCapture
 00486E19    test        al,al
>00486E1B    je          00486E3E
 00486E1D    xor         edx,edx
 00486E1F    mov         eax,esi
 00486E21    call        TControl.SetMouseCapture
 00486E26    test        byte ptr [esi+54],1
>00486E2A    je          00486E42
 00486E2C    push        0FF
 00486E2E    xor         ecx,ecx
 00486E30    mov         edx,202
 00486E35    mov         eax,esi
 00486E37    call        TControl.Perform
 00486E3C    pop         esi
 00486E3D    ret
 00486E3E    and         dword ptr [esi+54],0FFFFFFFE
 00486E42    pop         esi
 00486E43    ret
*}
end;

//00486E44
procedure TControl.WMWindowPosChanged(var Message:TWMWindowPosChanged);
begin
{*
 00486E44    push        ebx
 00486E45    push        esi
 00486E46    mov         esi,edx
 00486E48    mov         ebx,eax
 00486E4A    mov         edx,esi
 00486E4C    mov         eax,ebx
 00486E4E    mov         ecx,dword ptr [eax]
 00486E50    call        dword ptr [ecx-10]
 00486E53    movzx       eax,word ptr ds:[486EEC]
 00486E5A    and         ax,word ptr [ebx+1C]
 00486E5E    movzx       edx,word ptr ds:[486EF0]
 00486E65    cmp         dx,ax
>00486E68    jne         00486EE8
 00486E6A    mov         eax,dword ptr [ebx+70]
 00486E6D    mov         edx,dword ptr [eax+0C]
 00486E70    test        edx,edx
>00486E72    jbe         00486E81
 00486E74    cmp         edx,dword ptr [ebx+48]
>00486E77    jge         00486E81
 00486E79    mov         edx,dword ptr [ebx+48]
 00486E7C    mov         dword ptr [eax+0C],edx
>00486E7F    jmp         00486E93
 00486E81    mov         edx,dword ptr [eax+14]
 00486E84    test        edx,edx
>00486E86    jbe         00486E93
 00486E88    cmp         edx,dword ptr [ebx+48]
>00486E8B    jle         00486E93
 00486E8D    mov         edx,dword ptr [ebx+48]
 00486E90    mov         dword ptr [eax+14],edx
 00486E93    mov         edx,dword ptr [eax+8]
 00486E96    test        edx,edx
>00486E98    jbe         00486EA7
 00486E9A    cmp         edx,dword ptr [ebx+4C]
>00486E9D    jge         00486EA7
 00486E9F    mov         edx,dword ptr [ebx+4C]
 00486EA2    mov         dword ptr [eax+8],edx
>00486EA5    jmp         00486EB9
 00486EA7    mov         edx,dword ptr [eax+10]
 00486EAA    test        edx,edx
>00486EAC    jbe         00486EB9
 00486EAE    cmp         edx,dword ptr [ebx+4C]
>00486EB1    jle         00486EB9
 00486EB3    mov         edx,dword ptr [ebx+4C]
 00486EB6    mov         dword ptr [eax+10],edx
 00486EB9    mov         eax,dword ptr [esi+8]
 00486EBC    test        eax,eax
>00486EBE    je          00486EE8
 00486EC0    cmp         dword ptr [ebx+90],0
>00486EC7    je          00486EE8
 00486EC9    test        byte ptr [ebx+55],4
>00486ECD    jne         00486EE8
 00486ECF    test        byte ptr [eax+18],1
>00486ED3    jne         00486EE8
 00486ED5    cmp         dword ptr [eax+10],0
>00486ED9    je          00486EE8
 00486EDB    cmp         dword ptr [eax+14],0
>00486EDF    je          00486EE8
 00486EE1    mov         eax,ebx
 00486EE3    call        TControl.CalcDockSizes
 00486EE8    pop         esi
 00486EE9    pop         ebx
 00486EEA    ret
*}
end;

//00486EF4
procedure TControl.CMVisibleChanged(var Message:TMessage);
begin
{*
 00486EF4    test        byte ptr [eax+1C],10
>00486EF8    je          00486F00
 00486EFA    test        byte ptr [eax+51],4
>00486EFE    je          00486F19
 00486F00    cmp         byte ptr [eax+59],0
>00486F04    je          00486F0C
 00486F06    test        byte ptr [eax+50],40
>00486F0A    jne         00486F10
 00486F0C    xor         ecx,ecx
>00486F0E    jmp         00486F12
 00486F10    mov         cl,1
 00486F12    mov         dl,1
 00486F14    call        TControl.InvalidateControl
 00486F19    ret
*}
end;

//00486F1C
procedure TControl.CMColorChanged(var Message:TMessage);
begin
{*
 00486F1C    mov         edx,dword ptr [eax]
 00486F1E    call        dword ptr [edx+90]
 00486F24    ret
*}
end;

//00486F28
procedure TControl.CMEnabledChanged(var Message:TMessage);
begin
{*
 00486F28    mov         edx,dword ptr [eax]
 00486F2A    call        dword ptr [edx+90]
 00486F30    ret
*}
end;

//00486F34
procedure TControl.CMFontChanged(var Message:TMessage);
begin
{*
 00486F34    mov         edx,dword ptr [eax]
 00486F36    call        dword ptr [edx+90]
 00486F3C    ret
*}
end;

//00486F40
procedure SetParentColor(Value:TColor);
begin
{*
 00486F40    push        ebp
 00486F41    mov         ebp,esp
 00486F43    mov         edx,dword ptr [ebp+8]
 00486F46    mov         edx,dword ptr [edx-4]
 00486F49    cmp         eax,dword ptr [edx+6C]
>00486F4C    je          00486F75
 00486F4E    mov         edx,dword ptr [ebp+8]
 00486F51    mov         edx,dword ptr [edx-4]
 00486F54    mov         dword ptr [edx+6C],eax
 00486F57    mov         eax,dword ptr [ebp+8]
 00486F5A    mov         eax,dword ptr [eax-4]
 00486F5D    mov         byte ptr [eax+5C],0
 00486F61    push        0
 00486F63    mov         eax,dword ptr [ebp+8]
 00486F66    mov         eax,dword ptr [eax-4]
 00486F69    xor         ecx,ecx
 00486F6B    mov         edx,0B00D
 00486F70    call        TControl.Perform
 00486F75    pop         ebp
 00486F76    ret
*}
end;

//00486F78
procedure TControl.CMParentColorChanged(var Message:TMessage);
begin
{*
 00486F78    push        ebp
 00486F79    mov         ebp,esp
 00486F7B    push        ecx
 00486F7C    mov         dword ptr [ebp-4],eax
 00486F7F    mov         eax,dword ptr [ebp-4]
 00486F82    cmp         byte ptr [eax+5C],0
>00486F86    je          00486FB1
 00486F88    cmp         dword ptr [edx+4],0
>00486F8C    je          00486F9A
 00486F8E    push        ebp
 00486F8F    mov         eax,dword ptr [edx+8]
 00486F92    call        SetParentColor
 00486F97    pop         ecx
>00486F98    jmp         00486FAA
 00486F9A    push        ebp
 00486F9B    mov         eax,dword ptr [ebp-4]
 00486F9E    mov         eax,dword ptr [eax+34]
 00486FA1    mov         eax,dword ptr [eax+6C]
 00486FA4    call        SetParentColor
 00486FA9    pop         ecx
 00486FAA    mov         eax,dword ptr [ebp-4]
 00486FAD    mov         byte ptr [eax+5C],1
 00486FB1    pop         ecx
 00486FB2    pop         ebp
 00486FB3    ret
*}
end;

//00486FB4
procedure TControl.CMParentBiDiModeChanged(var Message:TMessage);
begin
{*
 00486FB4    push        ebx
 00486FB5    mov         ebx,eax
 00486FB7    cmp         byte ptr [ebx+62],0
>00486FBB    je          00486FD6
 00486FBD    mov         eax,dword ptr [ebx+34]
 00486FC0    test        eax,eax
>00486FC2    je          00486FD2
 00486FC4    movzx       edx,byte ptr [eax+61]
 00486FC8    mov         eax,ebx
 00486FCA    mov         ecx,dword ptr [eax]
 00486FCC    call        dword ptr [ecx+80]
 00486FD2    mov         byte ptr [ebx+62],1
 00486FD6    pop         ebx
 00486FD7    ret
*}
end;

//00486FD8
procedure TControl.CMMouseWheel(var Message:TCMMouseWheel);
begin
{*
 00486FD8    push        ebx
 00486FD9    push        esi
 00486FDA    push        edi
 00486FDB    add         esp,0FFFFFFF4
 00486FDE    mov         ebx,edx
 00486FE0    mov         edi,eax
 00486FE2    xor         eax,eax
 00486FE4    mov         dword ptr [ebx+0C],eax
 00486FE7    mov         eax,dword ptr [ebx+8]
 00486FEA    mov         dword ptr [esp],eax
 00486FED    movsx       eax,word ptr [esp]
 00486FF1    mov         dword ptr [esp+4],eax
 00486FF5    movsx       eax,word ptr [esp+2]
 00486FFA    mov         dword ptr [esp+8],eax
 00486FFE    lea         eax,[esp+4]
 00487002    push        eax
 00487003    movsx       ecx,word ptr [ebx+6]
 00487007    movzx       edx,word ptr [ebx+4]
 0048700B    mov         eax,edi
 0048700D    mov         si,0FFE4
 00487011    call        @CallDynaInst
 00487016    test        al,al
>00487018    je          00487023
 0048701A    mov         dword ptr [ebx+0C],1
>00487021    jmp         00487040
 00487023    mov         esi,dword ptr [edi+34]
 00487026    test        esi,esi
>00487028    je          00487040
 0048702A    mov         eax,dword ptr [ebx+8]
 0048702D    push        eax
 0048702E    mov         ecx,dword ptr [ebx+4]
 00487031    mov         edx,0B043
 00487036    mov         eax,esi
 00487038    call        TControl.Perform
 0048703D    mov         dword ptr [ebx+0C],eax
 00487040    add         esp,0C
 00487043    pop         edi
 00487044    pop         esi
 00487045    pop         ebx
 00487046    ret
*}
end;

//00487048
procedure TControl.CMGesture(var Message:TCMGesture);
begin
{*
 00487048    push        ebx
 00487049    push        esi
 0048704A    push        edi
 0048704B    push        ecx
 0048704C    mov         esi,edx
 0048704E    mov         ebx,eax
 00487050    mov         byte ptr [esp],0
 00487054    cmp         word ptr [ebx+15A],0
>0048705C    je          00487072
 0048705E    push        esp
 0048705F    mov         eax,dword ptr [esi+8]
 00487062    mov         ecx,eax
 00487064    mov         edx,ebx
 00487066    mov         eax,dword ptr [ebx+15C]
 0048706C    call        dword ptr [ebx+158]
 00487072    cmp         byte ptr [esp],0
>00487076    jne         00487086
 00487078    mov         ecx,esp
 0048707A    mov         eax,dword ptr [esi+8]
 0048707D    mov         edx,eax
 0048707F    mov         eax,ebx
 00487081    mov         edi,dword ptr [eax]
 00487083    call        dword ptr [edi+44]
 00487086    cmp         byte ptr [esp],0
>0048708A    je          00487095
 0048708C    mov         dword ptr [esi+0C],1
>00487093    jmp         004870B7
 00487095    mov         eax,dword ptr [esi+8]
 00487098    cmp         word ptr [eax],0
>0048709C    jne         004870B7
 0048709E    cmp         dword ptr [ebx+34],0
>004870A2    je          004870B7
 004870A4    mov         eax,dword ptr [esi+8]
 004870A7    push        eax
 004870A8    xor         ecx,ecx
 004870AA    mov         edx,0B052
 004870AF    mov         eax,dword ptr [ebx+34]
 004870B2    call        TControl.Perform
 004870B7    pop         edx
 004870B8    pop         edi
 004870B9    pop         esi
 004870BA    pop         ebx
 004870BB    ret
*}
end;

//004870BC
procedure TControl.CMBiDiModeChanged(var Message:TMessage);
begin
{*
 004870BC    mov         ecx,dword ptr ds:[78DB7C];SysLocale:TSysLocale
 004870C2    cmp         byte ptr [ecx+0D],0
>004870C6    je          004870D6
 004870C8    cmp         dword ptr [edx+4],0
>004870CC    jne         004870D6
 004870CE    mov         edx,dword ptr [eax]
 004870D0    call        dword ptr [edx+90]
 004870D6    ret
*}
end;

//004870D8
procedure TControl.CMParentShowHintChanged(var Message:TMessage);
begin
{*
 004870D8    push        ebx
 004870D9    mov         ebx,eax
 004870DB    cmp         byte ptr [ebx+8A],0
>004870E2    je          00487111
 004870E4    test        byte ptr [ebx+1C],10
 004870E8    setne       al
 004870EB    mov         edx,dword ptr [ebx+34]
 004870EE    test        byte ptr [edx+1C],10
 004870F2    setne       dl
 004870F5    cmp         al,dl
>004870F7    jne         00487111
 004870F9    mov         eax,dword ptr [ebx+34]
 004870FC    movzx       edx,byte ptr [eax+89]
 00487103    mov         eax,ebx
 00487105    call        TControl.SetShowHint
 0048710A    mov         byte ptr [ebx+8A],1
 00487111    pop         ebx
 00487112    ret
*}
end;

//00487114
procedure TControl.CMParentFontChanged(var Message:TCMParentFontChanged);
begin
{*
 00487114    push        ebx
 00487115    mov         ebx,eax
 00487117    cmp         byte ptr [ebx+5B],0
>0048711B    je          00487140
 0048711D    cmp         dword ptr [edx+4],0
>00487121    je          0048712F
 00487123    mov         edx,dword ptr [edx+8]
 00487126    mov         eax,ebx
 00487128    call        TControl.SetFont
>0048712D    jmp         0048713C
 0048712F    mov         eax,dword ptr [ebx+34]
 00487132    mov         edx,dword ptr [eax+64]
 00487135    mov         eax,ebx
 00487137    call        TControl.SetFont
 0048713C    mov         byte ptr [ebx+5B],1
 00487140    pop         ebx
 00487141    ret
*}
end;

//00487144
procedure TControl.CMSysFontChanged(var Message:TMessage);
begin
{*
 00487144    push        ebx
 00487145    mov         ebx,eax
 00487147    cmp         byte ptr [ebx+58],0
>0048714B    je          00487165
 0048714D    mov         eax,[0078DB00];^Screen:TScreen
 00487152    mov         eax,dword ptr [eax]
 00487154    mov         edx,dword ptr [eax+80]
 0048715A    mov         eax,ebx
 0048715C    call        TControl.SetFont
 00487161    mov         byte ptr [ebx+58],1
 00487165    pop         ebx
 00487166    ret
*}
end;

//00487168
procedure TControl.CMHitTest(var Message:TWMNCHitTest);
begin
{*
 00487168    mov         dword ptr [edx+0C],1
 0048716F    ret
*}
end;

//00487170
procedure TControl.CMMouseEnter(var Message:TMessage);
begin
{*
 00487170    push        ebx
 00487171    push        esi
 00487172    mov         esi,edx
 00487174    mov         ebx,eax
 00487176    mov         eax,dword ptr [ebx+34]
 00487179    test        eax,eax
>0048717B    je          0048718A
 0048717D    push        ebx
 0048717E    xor         ecx,ecx
 00487180    mov         edx,0B013
 00487185    call        TControl.Perform
 0048718A    cmp         dword ptr [esi+8],0
>0048718E    jne         004871D0
 00487190    cmp         word ptr [ebx+13A],0
>00487198    je          004871A8
 0048719A    mov         edx,ebx
 0048719C    mov         eax,dword ptr [ebx+13C]
 004871A2    call        dword ptr [ebx+138]
 004871A8    cmp         byte ptr [ebx+89],0
>004871AF    je          004871D0
 004871B1    test        byte ptr [ebx+1C],10
>004871B5    jne         004871D0
 004871B7    mov         eax,ebx
 004871B9    call        TControl.GetCustomHint
 004871BE    test        eax,eax
>004871C0    je          004871D0
 004871C2    mov         eax,ebx
 004871C4    call        TControl.GetCustomHint
 004871C9    mov         edx,ebx
 004871CB    call        TCustomHint.ShowHint
 004871D0    pop         esi
 004871D1    pop         ebx
 004871D2    ret
*}
end;

//004871D4
procedure TControl.CMMouseLeave(var Message:TMessage);
begin
{*
 004871D4    push        ebx
 004871D5    push        esi
 004871D6    mov         esi,edx
 004871D8    mov         ebx,eax
 004871DA    mov         eax,dword ptr [ebx+34]
 004871DD    test        eax,eax
>004871DF    je          004871EE
 004871E1    push        ebx
 004871E2    xor         ecx,ecx
 004871E4    mov         edx,0B014
 004871E9    call        TControl.Perform
 004871EE    cmp         dword ptr [esi+8],0
>004871F2    jne         00487234
 004871F4    cmp         word ptr [ebx+132],0
>004871FC    je          0048720C
 004871FE    mov         edx,ebx
 00487200    mov         eax,dword ptr [ebx+134]
 00487206    call        dword ptr [ebx+130]
 0048720C    cmp         byte ptr [ebx+89],0
>00487213    je          00487234
 00487215    test        byte ptr [ebx+1C],10
>00487219    jne         00487234
 0048721B    mov         eax,ebx
 0048721D    call        TControl.GetCustomHint
 00487222    test        eax,eax
>00487224    je          00487234
 00487226    mov         eax,ebx
 00487228    call        TControl.GetCustomHint
 0048722D    mov         edx,ebx
 0048722F    call        TCustomHint.HideHint
 00487234    pop         esi
 00487235    pop         ebx
 00487236    ret
*}
end;

//00487238
procedure TControl.CMDesignHitTest(var Message:TWMMouse);
begin
{*
 00487238    xor         eax,eax
 0048723A    mov         dword ptr [edx+0C],eax
 0048723D    ret
*}
end;

//00487240
procedure TControl.CMParentTabletOptionsChanged(var Message:TMessage);
begin
{*
 00487240    push        ebx
 00487241    mov         ebx,eax
 00487243    mov         eax,dword ptr [ebx+0AC]
 00487249    cmp         byte ptr [eax+18],0
>0048724D    je          0048726F
 0048724F    mov         edx,dword ptr [ebx+34]
 00487252    test        edx,edx
>00487254    je          00487265
 00487256    mov         edx,dword ptr [edx+0AC]
 0048725C    movzx       edx,word ptr [edx+1E]
 00487260    call        TCustomTouchManager.SetTabletOptions
 00487265    mov         eax,dword ptr [ebx+0AC]
 0048726B    mov         byte ptr [eax+18],1
 0048726F    pop         ebx
 00487270    ret
*}
end;

//00487274
function TControl.CreateFloatingDockSite(Bounds:TRect):TWinControl;
begin
{*
 00487274    push        ebx
 00487275    push        esi
 00487276    push        edi
 00487277    add         esp,0FFFFFFF0
 0048727A    mov         esi,edx
 0048727C    lea         edi,[esp]
 0048727F    movs        dword ptr [edi],dword ptr [esi]
 00487280    movs        dword ptr [edi],dword ptr [esi]
 00487281    movs        dword ptr [edi],dword ptr [esi]
 00487282    movs        dword ptr [edi],dword ptr [esi]
 00487283    mov         esi,eax
 00487285    xor         ebx,ebx
 00487287    mov         eax,esi
 00487289    mov         edx,dword ptr [eax]
 0048728B    call        dword ptr [edx+64]
 0048728E    test        eax,eax
>00487290    je          004872E9
 00487292    mov         eax,esi
 00487294    mov         edx,dword ptr [eax]
 00487296    call        dword ptr [edx+64]
 00487299    mov         ecx,dword ptr [esi]
 0048729B    mov         edx,ecx
 0048729D    cmp         eax,edx
>0048729F    je          004872E9
 004872A1    mov         eax,esi
 004872A3    mov         edx,dword ptr [eax]
 004872A5    call        dword ptr [edx+64]
 004872A8    mov         ecx,dword ptr ds:[78D590];^Application:TApplication
 004872AE    mov         ecx,dword ptr [ecx]
 004872B0    mov         dl,1
 004872B2    call        dword ptr [eax+2C]
 004872B5    mov         ebx,eax
 004872B7    mov         edx,dword ptr [esp+4]
 004872BB    mov         eax,ebx
 004872BD    call        TControl.SetTop
 004872C2    mov         edx,dword ptr [esp]
 004872C5    mov         eax,ebx
 004872C7    call        TControl.SetLeft
 004872CC    mov         edx,dword ptr [esp+8]
 004872D0    sub         edx,dword ptr [esp]
 004872D3    mov         eax,ebx
 004872D5    call        TControl.SetClientWidth
 004872DA    mov         edx,dword ptr [esp+0C]
 004872DE    sub         edx,dword ptr [esp+4]
 004872E2    mov         eax,ebx
 004872E4    call        TControl.SetClientHeight
 004872E9    mov         eax,ebx
 004872EB    add         esp,10
 004872EE    pop         edi
 004872EF    pop         esi
 004872F0    pop         ebx
 004872F1    ret
*}
end;

//004872F4
procedure TControl.CreateTouchManager;
begin
{*
 004872F4    push        ebx
 004872F5    mov         ebx,eax
 004872F7    mov         ecx,ebx
 004872F9    mov         dl,1
 004872FB    mov         eax,[00479214];TTouchManager
 00487300    call        TCustomTouchManager.Create
 00487305    mov         dword ptr [ebx+0AC],eax
 0048730B    pop         ebx
 0048730C    ret
*}
end;

//00487310
procedure UpdateFloatingDockSitePos;
begin
{*
 00487310    push        ebp
 00487311    mov         ebp,esp
 00487313    add         esp,0FFFFFFE0
 00487316    push        ebx
 00487317    push        esi
 00487318    push        edi
 00487319    mov         edi,dword ptr [ebp+8]
 0048731C    add         edi,0FFFFFFFC
 0048731F    mov         eax,dword ptr [edi]
 00487321    mov         eax,dword ptr [eax+40]
 00487324    mov         edx,dword ptr [edi]
 00487326    mov         edx,dword ptr [edx+44]
 00487329    mov         dword ptr [ebp-10],eax
 0048732C    mov         dword ptr [ebp-0C],edx
 0048732F    lea         ecx,[ebp-8]
 00487332    lea         edx,[ebp-10]
 00487335    mov         eax,dword ptr [edi]
 00487337    mov         eax,dword ptr [eax+34]
 0048733A    call        TControl.ClientToScreen
 0048733F    mov         eax,dword ptr [ebp+8]
 00487342    mov         eax,dword ptr [eax-8]
 00487345    mov         eax,dword ptr [eax+8]
 00487348    lea         ebx,[eax+4C]
 0048734B    mov         eax,dword ptr [ebx+0C]
 0048734E    sub         eax,dword ptr [ebx+4]
 00487351    mov         edx,dword ptr [edi]
 00487353    mov         esi,dword ptr [edx+34]
 00487356    add         eax,dword ptr [esi+4C]
 00487359    mov         edx,dword ptr [edi]
 0048735B    sub         eax,dword ptr [edx+4C]
 0048735E    push        eax
 0048735F    lea         eax,[ebp-20]
 00487362    push        eax
 00487363    mov         ecx,dword ptr [ebx+8]
 00487366    sub         ecx,dword ptr [ebx]
 00487368    add         ecx,dword ptr [esi+48]
 0048736B    mov         eax,dword ptr [edi]
 0048736D    sub         ecx,dword ptr [eax+48]
 00487370    mov         edx,dword ptr [esi+44]
 00487373    add         edx,dword ptr [ebx+4]
 00487376    sub         edx,dword ptr [ebp-4]
 00487379    mov         eax,dword ptr [esi+40]
 0048737C    add         eax,dword ptr [ebx]
 0048737E    sub         eax,dword ptr [ebp-8]
 00487381    call        Bounds
 00487386    lea         edx,[ebp-20]
 00487389    mov         eax,esi
 0048738B    call        TControl.SetBoundsRect
 00487390    pop         edi
 00487391    pop         esi
 00487392    pop         ebx
 00487393    mov         esp,ebp
 00487395    pop         ebp
 00487396    ret
*}
end;

//00487398
procedure TControl.CMFloat(var Message:TCMFloat);
begin
{*
 00487398    push        ebp
 00487399    mov         ebp,esp
 0048739B    add         esp,0FFFFFFF8
 0048739E    push        ebx
 0048739F    mov         dword ptr [ebp-8],edx
 004873A2    mov         dword ptr [ebp-4],eax
 004873A5    mov         eax,dword ptr [ebp-4]
 004873A8    mov         edx,dword ptr [eax]
 004873AA    call        dword ptr [edx+60]
 004873AD    test        al,al
>004873AF    je          004873C3
 004873B1    mov         eax,dword ptr [ebp-4]
 004873B4    cmp         dword ptr [eax+34],0
>004873B8    je          004873C3
 004873BA    push        ebp
 004873BB    call        UpdateFloatingDockSitePos
 004873C0    pop         ecx
>004873C1    jmp         004873F3
 004873C3    mov         eax,dword ptr [ebp-8]
 004873C6    mov         eax,dword ptr [eax+8]
 004873C9    lea         edx,[eax+4C]
 004873CC    mov         eax,dword ptr [ebp-4]
 004873CF    call        TControl.CreateFloatingDockSite
 004873D4    mov         ebx,eax
 004873D6    test        ebx,ebx
>004873D8    je          004873F3
 004873DA    mov         eax,dword ptr [ebp-8]
 004873DD    mov         eax,dword ptr [eax+8]
 004873E0    mov         dword ptr [eax+14],ebx
 004873E3    mov         eax,ebx
 004873E5    call        TWinControl.GetHandle
 004873EA    mov         edx,dword ptr [ebp-8]
 004873ED    mov         edx,dword ptr [edx+8]
 004873F0    mov         dword ptr [edx+8],eax
 004873F3    pop         ebx
 004873F4    pop         ecx
 004873F5    pop         ecx
 004873F6    pop         ebp
 004873F7    ret
*}
end;

//004873F8
procedure TControl.ActionChange(Sender:TObject; CheckDefaults:Boolean);
begin
{*
 004873F8    push        ebp
 004873F9    mov         ebp,esp
 004873FB    push        0
 004873FD    push        0
 004873FF    push        ebx
 00487400    push        esi
 00487401    push        edi
 00487402    mov         ebx,ecx
 00487404    mov         edi,edx
 00487406    mov         esi,eax
 00487408    xor         eax,eax
 0048740A    push        ebp
 0048740B    push        4874E8
 00487410    push        dword ptr fs:[eax]
 00487413    mov         dword ptr fs:[eax],esp
 00487416    mov         eax,edi
 00487418    mov         edx,dword ptr ds:[4743FC];TCustomAction
 0048741E    call        @IsClass
 00487423    test        al,al
>00487425    je          004874CD
 0048742B    test        bl,bl
>0048742D    je          00487456
 0048742F    lea         edx,[ebp-4]
 00487432    mov         eax,esi
 00487434    call        TControl.GetText
 00487439    cmp         dword ptr [ebp-4],0
>0048743D    je          00487456
 0048743F    lea         edx,[ebp-8]
 00487442    mov         eax,esi
 00487444    call        TControl.GetText
 00487449    mov         eax,dword ptr [ebp-8]
 0048744C    mov         edx,dword ptr [esi+8]
 0048744F    call        @UStrEqual
>00487454    jne         00487460
 00487456    mov         edx,dword ptr [edi+64]
 00487459    mov         eax,esi
 0048745B    call        TControl.SetText
 00487460    test        bl,bl
>00487462    je          0048746F
 00487464    mov         eax,esi
 00487466    mov         edx,dword ptr [eax]
 00487468    call        dword ptr [edx+5C]
 0048746B    cmp         al,1
>0048746D    jne         0048747A
 0048746F    movzx       edx,byte ptr [edi+6A]
 00487473    mov         eax,esi
 00487475    mov         ecx,dword ptr [eax]
 00487477    call        dword ptr [ecx+74]
 0048747A    test        bl,bl
>0048747C    je          00487487
 0048747E    cmp         dword ptr [esi+80],0
>00487485    jne         00487495
 00487487    lea         eax,[esi+80]
 0048748D    mov         edx,dword ptr [edi+7C]
 00487490    call        @UStrAsg
 00487495    test        bl,bl
>00487497    je          0048749F
 00487499    cmp         byte ptr [esi+59],1
>0048749D    jne         004874AD
 0048749F    movzx       edx,byte ptr [edi+86]
 004874A6    mov         eax,esi
 004874A8    call        TControl.SetVisible
 004874AD    test        bl,bl
>004874AF    je          004874BB
 004874B1    cmp         word ptr [esi+112],0
>004874B9    jne         004874CD
 004874BB    mov         eax,dword ptr [edi+40]
 004874BE    mov         dword ptr [esi+110],eax
 004874C4    mov         eax,dword ptr [edi+44]
 004874C7    mov         dword ptr [esi+114],eax
 004874CD    xor         eax,eax
 004874CF    pop         edx
 004874D0    pop         ecx
 004874D1    pop         ecx
 004874D2    mov         dword ptr fs:[eax],edx
 004874D5    push        4874EF
 004874DA    lea         eax,[ebp-8]
 004874DD    mov         edx,2
 004874E2    call        @UStrArrayClr
 004874E7    ret
>004874E8    jmp         @HandleFinally
>004874ED    jmp         004874DA
 004874EF    pop         edi
 004874F0    pop         esi
 004874F1    pop         ebx
 004874F2    pop         ecx
 004874F3    pop         ecx
 004874F4    pop         ebp
 004874F5    ret
*}
end;

//004874F8
procedure TControl.DoActionChange(Sender:TObject);
begin
{*
 004874F8    push        ebx
 004874F9    push        esi
 004874FA    mov         esi,edx
 004874FC    mov         ebx,eax
 004874FE    mov         eax,ebx
 00487500    mov         edx,dword ptr [eax]
 00487502    call        dword ptr [edx+4C]
 00487505    cmp         esi,eax
>00487507    jne         00487518
 00487509    xor         ecx,ecx
 0048750B    mov         edx,esi
 0048750D    mov         eax,ebx
 0048750F    mov         si,0FFF0
 00487513    call        @CallDynaInst
 00487518    pop         esi
 00487519    pop         ebx
 0048751A    ret
*}
end;

//0048751C
procedure TControl.sub_0048751C;
begin
{*
 0048751C    mov         eax,[00476F80];TControlActionLink
 00487521    ret
*}
end;

//00487524
function TControl.IsCaptionStored(Value:TCaption):Boolean;
begin
{*
 00487524    push        ebx
 00487525    push        esi
 00487526    mov         ebx,eax
 00487528    mov         esi,dword ptr [ebx+68]
 0048752B    test        esi,esi
>0048752D    je          0048753F
 0048752F    mov         eax,esi
 00487531    mov         edx,dword ptr [eax]
 00487533    call        dword ptr [edx+20]
 00487536    test        al,al
>00487538    je          0048753F
 0048753A    xor         eax,eax
 0048753C    pop         esi
 0048753D    pop         ebx
 0048753E    ret
 0048753F    mov         al,1
 00487541    pop         esi
 00487542    pop         ebx
 00487543    ret
*}
end;

//00487544
function TControl.IsEnabledStored(Value:Boolean):Boolean;
begin
{*
 00487544    push        ebx
 00487545    push        esi
 00487546    mov         ebx,eax
 00487548    mov         esi,dword ptr [ebx+68]
 0048754B    test        esi,esi
>0048754D    je          0048755F
 0048754F    mov         eax,esi
 00487551    mov         edx,dword ptr [eax]
 00487553    call        dword ptr [edx+28]
 00487556    test        al,al
>00487558    je          0048755F
 0048755A    xor         eax,eax
 0048755C    pop         esi
 0048755D    pop         ebx
 0048755E    ret
 0048755F    mov         al,1
 00487561    pop         esi
 00487562    pop         ebx
 00487563    ret
*}
end;

//00487564
function TControl.IsHintStored(Value:string):Boolean;
begin
{*
 00487564    push        ebx
 00487565    push        esi
 00487566    mov         ebx,eax
 00487568    mov         esi,dword ptr [ebx+68]
 0048756B    test        esi,esi
>0048756D    je          0048757F
 0048756F    mov         eax,esi
 00487571    mov         edx,dword ptr [eax]
 00487573    call        dword ptr [edx+38]
 00487576    test        al,al
>00487578    je          0048757F
 0048757A    xor         eax,eax
 0048757C    pop         esi
 0048757D    pop         ebx
 0048757E    ret
 0048757F    mov         al,1
 00487581    pop         esi
 00487582    pop         ebx
 00487583    ret
*}
end;

//00487584
function TControl.IsHelpContextStored(Value:string):Boolean;
begin
{*
 00487584    push        ebx
 00487585    push        esi
 00487586    mov         ebx,eax
 00487588    mov         esi,dword ptr [ebx+68]
 0048758B    test        esi,esi
>0048758D    je          0048759F
 0048758F    mov         eax,esi
 00487591    mov         edx,dword ptr [eax]
 00487593    call        dword ptr [edx+30]
 00487596    test        al,al
>00487598    je          0048759F
 0048759A    xor         eax,eax
 0048759C    pop         esi
 0048759D    pop         ebx
 0048759E    ret
 0048759F    mov         al,1
 004875A1    pop         esi
 004875A2    pop         ebx
 004875A3    ret
*}
end;

//004875A4
function TControl.IsVisibleStored(Value:Boolean):Boolean;
begin
{*
 004875A4    push        ebx
 004875A5    push        esi
 004875A6    mov         ebx,eax
 004875A8    mov         esi,dword ptr [ebx+68]
 004875AB    test        esi,esi
>004875AD    je          004875BF
 004875AF    mov         eax,esi
 004875B1    mov         edx,dword ptr [eax]
 004875B3    call        dword ptr [edx+44]
 004875B6    test        al,al
>004875B8    je          004875BF
 004875BA    xor         eax,eax
 004875BC    pop         esi
 004875BD    pop         ebx
 004875BE    ret
 004875BF    mov         al,1
 004875C1    pop         esi
 004875C2    pop         ebx
 004875C3    ret
*}
end;

//004875C4
function TControl.IsOnClickStored(Value:TNotifyEvent):Boolean;
begin
{*
 004875C4    push        ebx
 004875C5    push        esi
 004875C6    mov         ebx,eax
 004875C8    mov         esi,dword ptr [ebx+68]
 004875CB    test        esi,esi
>004875CD    je          004875DF
 004875CF    mov         eax,esi
 004875D1    mov         edx,dword ptr [eax]
 004875D3    call        dword ptr [edx+8]
 004875D6    test        al,al
>004875D8    je          004875DF
 004875DA    xor         eax,eax
 004875DC    pop         esi
 004875DD    pop         ebx
 004875DE    ret
 004875DF    mov         al,1
 004875E1    pop         esi
 004875E2    pop         ebx
 004875E3    ret
*}
end;

//004875E4
procedure TControl.Loaded;
begin
{*
 004875E4    push        ebx
 004875E5    push        esi
 004875E6    mov         ebx,eax
 004875E8    mov         eax,ebx
 004875EA    call        TComponent.Loaded
 004875EF    mov         eax,ebx
 004875F1    mov         edx,dword ptr [eax]
 004875F3    call        dword ptr [edx+4C]
 004875F6    test        eax,eax
>004875F8    je          00487610
 004875FA    mov         eax,ebx
 004875FC    mov         edx,dword ptr [eax]
 004875FE    call        dword ptr [edx+4C]
 00487601    mov         edx,eax
 00487603    mov         cl,1
 00487605    mov         eax,ebx
 00487607    mov         si,0FFF0
 0048760B    call        @CallDynaInst
 00487610    mov         eax,ebx
 00487612    call        TControl.UpdateAnchorRules
 00487617    pop         esi
 00487618    pop         ebx
 00487619    ret
*}
end;

//0048761C
procedure TControl.AssignTo(Dest:TPersistent);
begin
{*
 0048761C    push        ebp
 0048761D    mov         ebp,esp
 0048761F    push        0
 00487621    push        ebx
 00487622    push        esi
 00487623    push        edi
 00487624    mov         esi,edx
 00487626    mov         ebx,eax
 00487628    xor         eax,eax
 0048762A    push        ebp
 0048762B    push        4876B9
 00487630    push        dword ptr fs:[eax]
 00487633    mov         dword ptr fs:[eax],esp
 00487636    mov         eax,esi
 00487638    mov         edx,dword ptr ds:[4743FC];TCustomAction
 0048763E    call        @IsClass
 00487643    test        al,al
>00487645    je          0048769A
 00487647    mov         eax,ebx
 00487649    mov         edx,dword ptr [eax]
 0048764B    call        dword ptr [edx+5C]
 0048764E    mov         edx,eax
 00487650    mov         edi,esi
 00487652    mov         eax,edi
 00487654    call        TCustomAction.SetEnabled
 00487659    mov         edx,dword ptr [ebx+80]
 0048765F    mov         eax,edi
 00487661    call        TCustomAction.SetHint
 00487666    lea         edx,[ebp-4]
 00487669    mov         eax,ebx
 0048766B    call        TControl.GetText
 00487670    mov         edx,dword ptr [ebp-4]
 00487673    mov         eax,edi
 00487675    call        TCustomAction.SetCaption
 0048767A    movzx       edx,byte ptr [ebx+59]
 0048767E    mov         eax,edi
 00487680    call        TCustomAction.SetVisible
 00487685    push        dword ptr [ebx+114]
 0048768B    push        dword ptr [ebx+110]
 00487691    mov         eax,edi
 00487693    mov         edx,dword ptr [eax]
 00487695    call        dword ptr [edx+38]
>00487698    jmp         004876A3
 0048769A    mov         edx,esi
 0048769C    mov         eax,ebx
 0048769E    call        TPersistent.AssignTo
 004876A3    xor         eax,eax
 004876A5    pop         edx
 004876A6    pop         ecx
 004876A7    pop         ecx
 004876A8    mov         dword ptr fs:[eax],edx
 004876AB    push        4876C0
 004876B0    lea         eax,[ebp-4]
 004876B3    call        @UStrClr
 004876B8    ret
>004876B9    jmp         @HandleFinally
>004876BE    jmp         004876B0
 004876C0    pop         edi
 004876C1    pop         esi
 004876C2    pop         ebx
 004876C3    pop         ecx
 004876C4    pop         ebp
 004876C5    ret
*}
end;

//004876C8
function MinVar(const Data:array[$0..-$1] of System.Double; const _Dv_:$0..-$1):Integer;
begin
{*
 004876C8    push        ebp
 004876C9    mov         ebp,esp
 004876CB    push        ecx
 004876CC    push        ebx
 004876CD    push        esi
 004876CE    mov         dword ptr [ebp-4],eax
 004876D1    xor         ebx,ebx
 004876D3    mov         ecx,edx
 004876D5    test        ecx,ecx
>004876D7    jle         004876FB
 004876D9    mov         esi,1
 004876DE    mov         edx,dword ptr [ebp-4]
 004876E1    add         edx,8
 004876E4    fld         qword ptr [edx]
 004876E6    mov         eax,dword ptr [ebp-4]
 004876E9    fcomp       qword ptr [eax+ebx*8]
 004876EC    wait
 004876ED    fnstsw      al
 004876EF    sahf
>004876F0    jae         004876F4
 004876F2    mov         ebx,esi
 004876F4    inc         esi
 004876F5    add         edx,8
 004876F8    dec         ecx
>004876F9    jne         004876E4
 004876FB    mov         eax,ebx
 004876FD    pop         esi
 004876FE    pop         ebx
 004876FF    pop         ecx
 00487700    pop         ebp
 00487701    ret
*}
end;

//00487704
procedure TControl.GetDockEdge(MousePos:TPoint);
begin
{*
 00487704    push        ebx
 00487705    push        esi
 00487706    push        edi
 00487707    push        ebp
 00487708    add         esp,0FFFFFFC8
 0048770B    mov         esi,edx
 0048770D    lea         edi,[esp]
 00487710    movs        dword ptr [edi],dword ptr [esi]
 00487711    movs        dword ptr [edi],dword ptr [esi]
 00487712    xor         ebx,ebx
 00487714    mov         esi,dword ptr [eax+48]
 00487717    mov         edi,dword ptr [eax+4C]
 0048771A    mov         eax,dword ptr [esp]
 0048771D    test        eax,eax
>0048771F    jg          00487728
 00487721    mov         bl,3
>00487723    jmp         004877A9
 00487728    cmp         esi,eax
>0048772A    jg          00487730
 0048772C    mov         bl,4
>0048772E    jmp         004877A9
 00487730    mov         edx,dword ptr [esp+4]
 00487734    test        edx,edx
>00487736    jg          0048773C
 00487738    mov         bl,1
>0048773A    jmp         004877A9
 0048773C    cmp         edi,edx
>0048773E    jg          00487744
 00487740    mov         bl,2
>00487742    jmp         004877A9
 00487744    mov         ebp,edx
 00487746    sub         edi,edx
 00487748    mov         dword ptr [esp+8],eax
 0048774C    sub         esi,eax
 0048774E    fild        dword ptr [esp+8]
 00487752    fstp        qword ptr [esp+0C]
 00487756    wait
 00487757    mov         dword ptr [esp+2C],esi
 0048775B    fild        dword ptr [esp+2C]
 0048775F    fstp        qword ptr [esp+14]
 00487763    wait
 00487764    mov         dword ptr [esp+30],ebp
 00487768    fild        dword ptr [esp+30]
 0048776C    fstp        qword ptr [esp+1C]
 00487770    wait
 00487771    mov         dword ptr [esp+34],edi
 00487775    fild        dword ptr [esp+34]
 00487779    fstp        qword ptr [esp+24]
 0048777D    wait
 0048777E    lea         eax,[esp+0C]
 00487782    mov         edx,3
 00487787    call        MinVar
 0048778C    sub         eax,1
>0048778F    jb          0048779B
>00487791    je          0048779F
 00487793    dec         eax
>00487794    je          004877A3
 00487796    dec         eax
>00487797    je          004877A7
>00487799    jmp         004877A9
 0048779B    mov         bl,3
>0048779D    jmp         004877A9
 0048779F    mov         bl,4
>004877A1    jmp         004877A9
 004877A3    mov         bl,1
>004877A5    jmp         004877A9
 004877A7    mov         bl,2
 004877A9    mov         eax,ebx
 004877AB    add         esp,38
 004877AE    pop         ebp
 004877AF    pop         edi
 004877B0    pop         esi
 004877B1    pop         ebx
 004877B2    ret
*}
end;

//004877B4
function TControl.GetFloating:Boolean;
begin
{*
 004877B4    push        ebx
 004877B5    mov         ebx,eax
 004877B7    cmp         dword ptr [ebx+90],0
>004877BE    je          004877D8
 004877C0    mov         eax,ebx
 004877C2    mov         edx,dword ptr [eax]
 004877C4    call        dword ptr [edx+64]
 004877C7    mov         edx,eax
 004877C9    mov         eax,dword ptr [ebx+90]
 004877CF    call        @IsClass
 004877D4    test        al,al
>004877D6    jne         004877DC
 004877D8    xor         eax,eax
 004877DA    pop         ebx
 004877DB    ret
 004877DC    mov         al,1
 004877DE    pop         ebx
 004877DF    ret
*}
end;

//004877E0
{*function sub_004877E0:?;
begin
 004877E0    mov         eax,dword ptr [eax+0A8];TControl.FFloatingDockSiteClass:TWinControlClass
 004877E6    ret
end;*}

//004877E8
procedure TControl.AdjustSize;
begin
{*
 004877E8    push        ebx
 004877E9    test        byte ptr [eax+1C],1
>004877ED    jne         00487805
 004877EF    mov         edx,dword ptr [eax+48]
 004877F2    push        edx
 004877F3    mov         edx,dword ptr [eax+4C]
 004877F6    push        edx
 004877F7    mov         ecx,dword ptr [eax+44]
 004877FA    mov         edx,dword ptr [eax+40]
 004877FD    mov         ebx,dword ptr [eax]
 004877FF    call        dword ptr [ebx+98]
 00487805    pop         ebx
 00487806    ret
*}
end;

//00487808
function TControl.DrawTextBiDiModeFlags(Flags:Integer):Integer;
begin
{*
 00487808    push        ebx
 00487809    push        esi
 0048780A    push        edi
 0048780B    mov         edi,eax
 0048780D    mov         ebx,edx
 0048780F    mov         eax,edi
 00487811    mov         si,0FFC7
 00487815    call        @CallDynaInst
 0048781A    test        al,al
>0048781C    je          00487838
 0048781E    mov         eax,ebx
 00487820    and         eax,2
 00487823    cmp         eax,2
>00487826    jne         0048782D
 00487828    and         ebx,0FFFFFFFD
>0048782B    jmp         00487838
 0048782D    mov         eax,ebx
 0048782F    and         eax,1
 00487832    dec         eax
>00487833    je          00487838
 00487835    or          ebx,2
 00487838    mov         eax,edi
 0048783A    call        TControl.DrawTextBiDiModeFlagsReadingOnly
 0048783F    or          ebx,eax
 00487841    mov         eax,ebx
 00487843    pop         edi
 00487844    pop         esi
 00487845    pop         ebx
 00487846    ret
*}
end;

//00487848
function TControl.DrawTextBiDiModeFlagsReadingOnly:Integer;
begin
{*
 00487848    push        ebx
 00487849    mov         ebx,eax
 0048784B    mov         eax,ebx
 0048784D    call        TControl.UseRightToLeftReading
 00487852    test        al,al
>00487854    je          0048785D
 00487856    mov         eax,20000
 0048785B    pop         ebx
 0048785C    ret
 0048785D    xor         eax,eax
 0048785F    pop         ebx
 00487860    ret
*}
end;

//00487864
procedure TControl.InitiateAction;
begin
{*
 00487864    mov         edx,dword ptr [eax+68]
 00487867    test        edx,edx
>00487869    je          00487872
 0048786B    mov         eax,edx
 0048786D    mov         edx,dword ptr [eax]
 0048786F    call        dword ptr [edx+1C]
 00487872    ret
*}
end;

//00487874
procedure TControl.CMHintShow(var Message:TCMHintShow);
begin
{*
 00487874    push        ebx
 00487875    push        esi
 00487876    push        edi
 00487877    push        ebp
 00487878    mov         ebp,edx
 0048787A    mov         ebx,eax
 0048787C    mov         edi,dword ptr [ebx+68]
 0048787F    test        edi,edi
>00487881    je          0048789E
 00487883    mov         esi,dword ptr [ebp+8]
 00487886    lea         edx,[esi+38]
 00487889    mov         eax,edi
 0048788B    mov         ecx,dword ptr [eax]
 0048788D    call        dword ptr [ecx+84]
 00487893    test        al,al
>00487895    jne         0048789E
 00487897    mov         dword ptr [ebp+0C],1
 0048789E    pop         ebp
 0048789F    pop         edi
 004878A0    pop         esi
 004878A1    pop         ebx
 004878A2    ret
*}
end;

//004878A4
procedure TControl.WMContextMenu(var Message:TWMContextMenu);
begin
{*
 004878A4    push        ebx
 004878A5    push        esi
 004878A6    push        edi
 004878A7    push        ebp
 004878A8    add         esp,0FFFFFFC8
 004878AB    mov         ebp,edx
 004878AD    mov         edi,eax
 004878AF    cmp         dword ptr [ebp+0C],0
>004878B3    jne         004879DA
 004878B9    test        byte ptr [edi+1C],10
>004878BD    je          004878CD
 004878BF    mov         edx,ebp
 004878C1    mov         eax,edi
 004878C3    mov         ecx,dword ptr [eax]
 004878C5    call        dword ptr [ecx-10]
>004878C8    jmp         004879DA
 004878CD    mov         eax,dword ptr [ebp+8]
 004878D0    mov         dword ptr [esp+12],eax
 004878D4    movsx       eax,word ptr [esp+12]
 004878D9    mov         dword ptr [esp+18],eax
 004878DD    movsx       eax,word ptr [esp+14]
 004878E2    mov         dword ptr [esp+1C],eax
 004878E6    mov         eax,dword ptr [esp+18]
 004878EA    mov         dword ptr [esp],eax
 004878ED    mov         eax,dword ptr [esp+1C]
 004878F1    mov         dword ptr [esp+4],eax
 004878F5    mov         eax,esp
 004878F7    call        InvalidPoint
 004878FC    test        al,al
>004878FE    je          00487911
 00487900    mov         eax,dword ptr [esp]
 00487903    mov         dword ptr [esp+8],eax
 00487907    mov         eax,dword ptr [esp+4]
 0048790B    mov         dword ptr [esp+0C],eax
>0048790F    jmp         00487948
 00487911    lea         ecx,[esp+8]
 00487915    mov         edx,esp
 00487917    mov         eax,edi
 00487919    call        TControl.ScreenToClient
 0048791E    lea         edx,[esp+28]
 00487922    mov         eax,edi
 00487924    mov         ecx,dword ptr [eax]
 00487926    call        dword ptr [ecx+54]
 00487929    lea         eax,[esp+28]
 0048792D    lea         edx,[esp+8]
 00487931    call        PtInRect
 00487936    test        al,al
>00487938    jne         00487948
 0048793A    mov         edx,ebp
 0048793C    mov         eax,edi
 0048793E    mov         ecx,dword ptr [eax]
 00487940    call        dword ptr [ecx-10]
>00487943    jmp         004879DA
 00487948    mov         byte ptr [esp+10],0
 0048794D    lea         ecx,[esp+10]
 00487951    lea         edx,[esp+8]
 00487955    mov         eax,edi
 00487957    mov         si,0FFE8
 0048795B    call        @CallDynaInst
 00487960    movzx       eax,byte ptr [esp+10]
 00487965    mov         dword ptr [ebp+0C],eax
 00487968    cmp         byte ptr [esp+10],0
>0048796D    jne         004879DA
 0048796F    mov         eax,edi
 00487971    mov         si,0FFD8
 00487975    call        @CallDynaInst
 0048797A    mov         ebx,eax
 0048797C    test        ebx,ebx
>0048797E    je          004879CB
 00487980    cmp         byte ptr [ebx+69],0
>00487984    je          004879CB
 00487986    mov         edx,edi
 00487988    mov         eax,edi
 0048798A    call        TControl.SendCancelMode
 0048798F    mov         dword ptr [ebx+6C],edi
 00487992    mov         eax,esp
 00487994    call        InvalidPoint
 00487999    test        al,al
>0048799B    je          004879B6
 0048799D    xor         eax,eax
 0048799F    mov         dword ptr [esp+20],eax
 004879A3    xor         eax,eax
 004879A5    mov         dword ptr [esp+24],eax
 004879A9    mov         ecx,esp
 004879AB    lea         edx,[esp+20]
 004879AF    mov         eax,edi
 004879B1    call        TControl.ClientToScreen
 004879B6    mov         ecx,dword ptr [esp+4]
 004879BA    mov         edx,dword ptr [esp]
 004879BD    mov         eax,ebx
 004879BF    mov         ebx,dword ptr [eax]
 004879C1    call        dword ptr [ebx+44]
 004879C4    mov         dword ptr [ebp+0C],1
 004879CB    cmp         dword ptr [ebp+0C],0
>004879CF    jne         004879DA
 004879D1    mov         edx,ebp
 004879D3    mov         eax,edi
 004879D5    mov         ecx,dword ptr [eax]
 004879D7    call        dword ptr [ecx-10]
 004879DA    add         esp,38
 004879DD    pop         ebp
 004879DE    pop         edi
 004879DF    pop         esi
 004879E0    pop         ebx
 004879E1    ret
*}
end;

//004879E4
procedure TControl.DoContextPopup(MousePos:TPoint; var Handled:Boolean);
begin
{*
 004879E4    push        ebx
 004879E5    push        esi
 004879E6    push        edi
 004879E7    add         esp,0FFFFFFF8
 004879EA    mov         esi,edx
 004879EC    lea         edi,[esp]
 004879EF    movs        dword ptr [edi],dword ptr [esi]
 004879F0    movs        dword ptr [edi],dword ptr [esi]
 004879F1    cmp         word ptr [eax+122],0
>004879F9    je          00487A10
 004879FB    push        ecx
 004879FC    mov         ebx,eax
 004879FE    mov         edx,eax
 00487A00    lea         ecx,[esp+4]
 00487A04    mov         eax,dword ptr [ebx+124]
 00487A0A    call        dword ptr [ebx+120]
 00487A10    pop         ecx
 00487A11    pop         edx
 00487A12    pop         edi
 00487A13    pop         esi
 00487A14    pop         ebx
 00487A15    ret
*}
end;

//00487A18
procedure TControl.SetConstraints(const Value:TSizeConstraints);
begin
{*
 00487A18    mov         eax,dword ptr [eax+70]
 00487A1B    mov         ecx,dword ptr [eax]
 00487A1D    call        dword ptr [ecx+8]
 00487A20    ret
*}
end;

//00487A24
function TControl.ClientToParent(Point:TPoint; AParent:TWinControl):TPoint;
begin
{*
 00487A24    push        ebp
 00487A25    mov         ebp,esp
 00487A27    add         esp,0FFFFFFE8
 00487A2A    push        ebx
 00487A2B    push        esi
 00487A2C    xor         ebx,ebx
 00487A2E    mov         dword ptr [ebp-18],ebx
 00487A31    mov         dword ptr [ebp-14],ebx
 00487A34    mov         esi,ecx
 00487A36    mov         dword ptr [ebp-8],edx
 00487A39    mov         dword ptr [ebp-4],eax
 00487A3C    mov         ebx,dword ptr [ebp+8]
 00487A3F    xor         eax,eax
 00487A41    push        ebp
 00487A42    push        487B24
 00487A47    push        dword ptr fs:[eax]
 00487A4A    mov         dword ptr fs:[eax],esp
 00487A4D    test        esi,esi
>00487A4F    jne         00487A57
 00487A51    mov         eax,dword ptr [ebp-4]
 00487A54    mov         esi,dword ptr [eax+34]
 00487A57    test        esi,esi
>00487A59    jne         00487A8F
 00487A5B    mov         eax,dword ptr [ebp-4]
 00487A5E    mov         eax,dword ptr [eax+8]
 00487A61    mov         dword ptr [ebp-10],eax
 00487A64    mov         byte ptr [ebp-0C],11
 00487A68    lea         eax,[ebp-10]
 00487A6B    push        eax
 00487A6C    push        0
 00487A6E    lea         edx,[ebp-14]
 00487A71    mov         eax,[0078D6BC];^SResString201:TResStringRec
 00487A76    call        LoadResString
 00487A7B    mov         ecx,dword ptr [ebp-14]
 00487A7E    mov         dl,1
 00487A80    mov         eax,[00439268];EInvalidOperation
 00487A85    call        Exception.CreateFmt
 00487A8A    call        @RaiseExcept
 00487A8F    mov         eax,dword ptr [ebp-8]
 00487A92    mov         edx,dword ptr [eax]
 00487A94    mov         dword ptr [ebx],edx
 00487A96    mov         edx,dword ptr [eax+4]
 00487A99    mov         dword ptr [ebx+4],edx
 00487A9C    mov         eax,dword ptr [ebp-4]
 00487A9F    mov         eax,dword ptr [eax+40]
 00487AA2    add         dword ptr [ebx],eax
 00487AA4    mov         eax,dword ptr [ebp-4]
 00487AA7    mov         eax,dword ptr [eax+44]
 00487AAA    add         dword ptr [ebx+4],eax
 00487AAD    mov         eax,dword ptr [ebp-4]
 00487AB0    mov         eax,dword ptr [eax+34]
>00487AB3    jmp         00487AC9
 00487AB5    cmp         dword ptr [eax+34],0
>00487AB9    je          00487AC6
 00487ABB    mov         edx,dword ptr [eax+40]
 00487ABE    add         dword ptr [ebx],edx
 00487AC0    mov         edx,dword ptr [eax+44]
 00487AC3    add         dword ptr [ebx+4],edx
 00487AC6    mov         eax,dword ptr [eax+34]
 00487AC9    test        eax,eax
>00487ACB    je          00487AD1
 00487ACD    cmp         esi,eax
>00487ACF    jne         00487AB5
 00487AD1    test        eax,eax
>00487AD3    jne         00487B09
 00487AD5    mov         eax,dword ptr [ebp-4]
 00487AD8    mov         eax,dword ptr [eax+8]
 00487ADB    mov         dword ptr [ebp-10],eax
 00487ADE    mov         byte ptr [ebp-0C],11
 00487AE2    lea         eax,[ebp-10]
 00487AE5    push        eax
 00487AE6    push        0
 00487AE8    lea         edx,[ebp-18]
 00487AEB    mov         eax,[0078D1BC];^SResString202:TResStringRec
 00487AF0    call        LoadResString
 00487AF5    mov         ecx,dword ptr [ebp-18]
 00487AF8    mov         dl,1
 00487AFA    mov         eax,[00439268];EInvalidOperation
 00487AFF    call        Exception.CreateFmt
 00487B04    call        @RaiseExcept
 00487B09    xor         eax,eax
 00487B0B    pop         edx
 00487B0C    pop         ecx
 00487B0D    pop         ecx
 00487B0E    mov         dword ptr fs:[eax],edx
 00487B11    push        487B2B
 00487B16    lea         eax,[ebp-18]
 00487B19    mov         edx,2
 00487B1E    call        @UStrArrayClr
 00487B23    ret
>00487B24    jmp         @HandleFinally
>00487B29    jmp         00487B16
 00487B2B    pop         esi
 00487B2C    pop         ebx
 00487B2D    mov         esp,ebp
 00487B2F    pop         ebp
 00487B30    ret         4
*}
end;

//00487B34
function TControl.ParentToClient(Point:TPoint; AParent:TWinControl):TPoint;
begin
{*
 00487B34    push        ebp
 00487B35    mov         ebp,esp
 00487B37    add         esp,0FFFFFFE8
 00487B3A    push        ebx
 00487B3B    push        esi
 00487B3C    xor         ebx,ebx
 00487B3E    mov         dword ptr [ebp-18],ebx
 00487B41    mov         dword ptr [ebp-14],ebx
 00487B44    mov         esi,ecx
 00487B46    mov         dword ptr [ebp-8],edx
 00487B49    mov         dword ptr [ebp-4],eax
 00487B4C    mov         ebx,dword ptr [ebp+8]
 00487B4F    xor         eax,eax
 00487B51    push        ebp
 00487B52    push        487C34
 00487B57    push        dword ptr fs:[eax]
 00487B5A    mov         dword ptr fs:[eax],esp
 00487B5D    test        esi,esi
>00487B5F    jne         00487B67
 00487B61    mov         eax,dword ptr [ebp-4]
 00487B64    mov         esi,dword ptr [eax+34]
 00487B67    test        esi,esi
>00487B69    jne         00487B9F
 00487B6B    mov         eax,dword ptr [ebp-4]
 00487B6E    mov         eax,dword ptr [eax+8]
 00487B71    mov         dword ptr [ebp-10],eax
 00487B74    mov         byte ptr [ebp-0C],11
 00487B78    lea         eax,[ebp-10]
 00487B7B    push        eax
 00487B7C    push        0
 00487B7E    lea         edx,[ebp-14]
 00487B81    mov         eax,[0078D6BC];^SResString201:TResStringRec
 00487B86    call        LoadResString
 00487B8B    mov         ecx,dword ptr [ebp-14]
 00487B8E    mov         dl,1
 00487B90    mov         eax,[00439268];EInvalidOperation
 00487B95    call        Exception.CreateFmt
 00487B9A    call        @RaiseExcept
 00487B9F    mov         eax,dword ptr [ebp-8]
 00487BA2    mov         edx,dword ptr [eax]
 00487BA4    mov         dword ptr [ebx],edx
 00487BA6    mov         edx,dword ptr [eax+4]
 00487BA9    mov         dword ptr [ebx+4],edx
 00487BAC    mov         eax,dword ptr [ebp-4]
 00487BAF    mov         eax,dword ptr [eax+40]
 00487BB2    sub         dword ptr [ebx],eax
 00487BB4    mov         eax,dword ptr [ebp-4]
 00487BB7    mov         eax,dword ptr [eax+44]
 00487BBA    sub         dword ptr [ebx+4],eax
 00487BBD    mov         eax,dword ptr [ebp-4]
 00487BC0    mov         eax,dword ptr [eax+34]
>00487BC3    jmp         00487BD9
 00487BC5    cmp         dword ptr [eax+34],0
>00487BC9    je          00487BD6
 00487BCB    mov         edx,dword ptr [eax+40]
 00487BCE    sub         dword ptr [ebx],edx
 00487BD0    mov         edx,dword ptr [eax+44]
 00487BD3    sub         dword ptr [ebx+4],edx
 00487BD6    mov         eax,dword ptr [eax+34]
 00487BD9    test        eax,eax
>00487BDB    je          00487BE1
 00487BDD    cmp         esi,eax
>00487BDF    jne         00487BC5
 00487BE1    test        eax,eax
>00487BE3    jne         00487C19
 00487BE5    mov         eax,dword ptr [ebp-4]
 00487BE8    mov         eax,dword ptr [eax+8]
 00487BEB    mov         dword ptr [ebp-10],eax
 00487BEE    mov         byte ptr [ebp-0C],11
 00487BF2    lea         eax,[ebp-10]
 00487BF5    push        eax
 00487BF6    push        0
 00487BF8    lea         edx,[ebp-18]
 00487BFB    mov         eax,[0078D1BC];^SResString202:TResStringRec
 00487C00    call        LoadResString
 00487C05    mov         ecx,dword ptr [ebp-18]
 00487C08    mov         dl,1
 00487C0A    mov         eax,[00439268];EInvalidOperation
 00487C0F    call        Exception.CreateFmt
 00487C14    call        @RaiseExcept
 00487C19    xor         eax,eax
 00487C1B    pop         edx
 00487C1C    pop         ecx
 00487C1D    pop         ecx
 00487C1E    mov         dword ptr fs:[eax],edx
 00487C21    push        487C3B
 00487C26    lea         eax,[ebp-18]
 00487C29    mov         edx,2
 00487C2E    call        @UStrArrayClr
 00487C33    ret
>00487C34    jmp         @HandleFinally
>00487C39    jmp         00487C26
 00487C3B    pop         esi
 00487C3C    pop         ebx
 00487C3D    mov         esp,ebp
 00487C3F    pop         ebp
 00487C40    ret         4
*}
end;

//00487C44
procedure TControl.CMMouseActivate(var Message:TCMMouseActivate);
begin
{*
 00487C44    push        ebx
 00487C45    push        esi
 00487C46    mov         esi,edx
 00487C48    mov         ebx,eax
 00487C4A    mov         edx,esi
 00487C4C    mov         eax,ebx
 00487C4E    call        TControl.DoMouseActivate
 00487C53    cmp         dword ptr [esi+0C],0
>00487C57    jne         00487C62
 00487C59    mov         edx,esi
 00487C5B    mov         eax,ebx
 00487C5D    mov         ecx,dword ptr [eax]
 00487C5F    call        dword ptr [ecx-10]
 00487C62    pop         esi
 00487C63    pop         ebx
 00487C64    ret
*}
end;

//00487C68
procedure TControl.DoMarginChange(Sender:TObject);
begin
{*
 00487C68    push        esi
 00487C69    mov         esi,eax
 00487C6B    mov         eax,esi
 00487C6D    mov         edx,dword ptr [eax]
 00487C6F    call        dword ptr [edx+68]
 00487C72    pop         esi
 00487C73    ret
*}
end;

//00487C74
procedure TControl.SetMargins(const Value:TMargins);
begin
{*
 00487C74    mov         eax,dword ptr [eax+74]
 00487C77    mov         ecx,dword ptr [eax]
 00487C79    call        dword ptr [ecx+8]
 00487C7C    ret
*}
end;

//00487C80
procedure TControl.SetTouchManager(const Value:TTouchManager);
begin
{*
 00487C80    mov         eax,dword ptr [eax+0AC]
 00487C86    mov         ecx,dword ptr [eax]
 00487C88    call        dword ptr [ecx+8]
 00487C8B    ret
*}
end;

//00487C8C
function TControl.GetAlignWithMargins:Boolean;
begin
{*
 00487C8C    test        byte ptr [eax+52],10
 00487C90    setne       al
 00487C93    ret
*}
end;

//00487C94
procedure TControl.SetAlignWithMargins(Value:Boolean);
begin
{*
 00487C94    push        esi
 00487C95    mov         esi,eax
 00487C97    test        byte ptr [esi+52],10
 00487C9B    setne       al
 00487C9E    cmp         dl,al
>00487CA0    je          00487CBD
 00487CA2    test        dl,dl
>00487CA4    je          00487CAF
 00487CA6    or          dword ptr [esi+50],100000
>00487CAD    jmp         00487CB6
 00487CAF    and         dword ptr [esi+50],0FFEFFFFF
 00487CB6    mov         eax,esi
 00487CB8    mov         edx,dword ptr [eax]
 00487CBA    call        dword ptr [edx+68]
 00487CBD    pop         esi
 00487CBE    ret
*}
end;

//00487CC0
procedure TControl.UpdateExplicitBounds;
begin
{*
 00487CC0    test        byte ptr [eax+55],40
>00487CC4    jne         00487CF0
 00487CC6    test        byte ptr [eax+1C],2
>00487CCA    jne         00487CF0
 00487CCC    mov         edx,dword ptr [eax+40]
 00487CCF    mov         dword ptr [eax+194],edx
 00487CD5    mov         edx,dword ptr [eax+44]
 00487CD8    mov         dword ptr [eax+198],edx
 00487CDE    mov         edx,dword ptr [eax+48]
 00487CE1    mov         dword ptr [eax+19C],edx
 00487CE7    mov         edx,dword ptr [eax+4C]
 00487CEA    mov         dword ptr [eax+1A0],edx
 00487CF0    ret
*}
end;

//00487CF4
procedure TControl.WriteExplicitTop(Writer:TWriter);
begin
{*
 00487CF4    mov         eax,dword ptr [eax+198]
 00487CFA    xchg        eax,edx
 00487CFB    call        TWriter.WriteInteger
 00487D00    ret
*}
end;

//00487D04
procedure TControl.WriteExplicitHeight(Writer:TWriter);
begin
{*
 00487D04    mov         eax,dword ptr [eax+1A0]
 00487D0A    xchg        eax,edx
 00487D0B    call        TWriter.WriteInteger
 00487D10    ret
*}
end;

//00487D14
procedure TControl.WriteExplicitLeft(Writer:TWriter);
begin
{*
 00487D14    mov         eax,dword ptr [eax+194]
 00487D1A    xchg        eax,edx
 00487D1B    call        TWriter.WriteInteger
 00487D20    ret
*}
end;

//00487D24
procedure TControl.ReadExplicitWidth(Reader:TReader);
begin
{*
 00487D24    push        ebx
 00487D25    push        esi
 00487D26    mov         esi,edx
 00487D28    mov         ebx,eax
 00487D2A    mov         eax,esi
 00487D2C    call        TReader.ReadInteger
 00487D31    mov         dword ptr [ebx+19C],eax
 00487D37    pop         esi
 00487D38    pop         ebx
 00487D39    ret
*}
end;

//00487D3C
procedure TControl.WriteExplicitWidth(Writer:TWriter);
begin
{*
 00487D3C    mov         eax,dword ptr [eax+19C]
 00487D42    xchg        eax,edx
 00487D43    call        TWriter.WriteInteger
 00487D48    ret
*}
end;

//00487D4C
procedure TControl.ReadExplicitTop(Reader:TReader);
begin
{*
 00487D4C    push        ebx
 00487D4D    push        esi
 00487D4E    mov         esi,edx
 00487D50    mov         ebx,eax
 00487D52    mov         eax,esi
 00487D54    call        TReader.ReadInteger
 00487D59    mov         dword ptr [ebx+198],eax
 00487D5F    pop         esi
 00487D60    pop         ebx
 00487D61    ret
*}
end;

//00487D64
procedure TControl.ReadExplicitHeight(Reader:TReader);
begin
{*
 00487D64    push        ebx
 00487D65    push        esi
 00487D66    mov         esi,edx
 00487D68    mov         ebx,eax
 00487D6A    mov         eax,esi
 00487D6C    call        TReader.ReadInteger
 00487D71    mov         dword ptr [ebx+1A0],eax
 00487D77    pop         esi
 00487D78    pop         ebx
 00487D79    ret
*}
end;

//00487D7C
procedure TControl.ReadExplicitLeft(Reader:TReader);
begin
{*
 00487D7C    push        ebx
 00487D7D    push        esi
 00487D7E    mov         esi,edx
 00487D80    mov         ebx,eax
 00487D82    mov         eax,esi
 00487D84    call        TReader.ReadInteger
 00487D89    mov         dword ptr [ebx+194],eax
 00487D8F    pop         esi
 00487D90    pop         ebx
 00487D91    ret
*}
end;

//00487D94
procedure TWinControlActionLink.AssignClient(AClient:TObject);
begin
{*
 00487D94    push        ebx
 00487D95    push        esi
 00487D96    mov         esi,edx
 00487D98    mov         ebx,eax
 00487D9A    mov         edx,esi
 00487D9C    mov         eax,ebx
 00487D9E    call        TControlActionLink.AssignClient
 00487DA3    mov         eax,esi
 00487DA5    mov         edx,dword ptr ds:[47C4E8];TWinControl
 00487DAB    call        @AsClass
 00487DB0    mov         dword ptr [ebx+20],eax
 00487DB3    pop         esi
 00487DB4    pop         ebx
 00487DB5    ret
*}
end;

//00487DB8
procedure TWinControlActionLink.IsHelpContextLinked;
begin
{*
 00487DB8    mov         edx,dword ptr [eax]
 00487DBA    call        dword ptr [edx+34];TControlActionLink.IsHelpLinked
 00487DBD    ret
*}
end;

//00487DC0
procedure TWinControlActionLink.SetHelpKeyword(const Value:UnicodeString);
begin
{*
 00487DC0    call        TControlActionLink.SetHelpKeyword
 00487DC5    ret
*}
end;

//00487DC8
constructor TWinControl.Create;
begin
{*
 00487DC8    push        ebp
 00487DC9    mov         ebp,esp
 00487DCB    add         esp,0FFFFFFF8
 00487DCE    push        ebx
 00487DCF    push        esi
 00487DD0    xor         ebx,ebx
 00487DD2    mov         dword ptr [ebp-8],ebx
 00487DD5    test        dl,dl
>00487DD7    je          00487DE1
 00487DD9    add         esp,0FFFFFFF0
 00487DDC    call        @ClassCreate
 00487DE1    mov         byte ptr [ebp-1],dl
 00487DE4    mov         ebx,eax
 00487DE6    xor         eax,eax
 00487DE8    push        ebp
 00487DE9    push        487EF7
 00487DEE    push        dword ptr fs:[eax]
 00487DF1    mov         dword ptr fs:[eax],esp
 00487DF4    xor         edx,edx
 00487DF6    mov         eax,ebx
 00487DF8    call        TControl.Create
 00487DFD    push        ebx
 00487DFE    push        48A280;TWinControl.MainWndProc
 00487E03    call        MakeObjectInstance
 00487E08    mov         dword ptr [ebx+25C],eax
 00487E0E    mov         dl,1
 00487E10    mov         eax,[00460070];TBrush
 00487E15    call        TBrush.Create
 00487E1A    mov         esi,eax
 00487E1C    mov         dword ptr [ebx+1C0],esi
 00487E22    mov         edx,dword ptr [ebx+6C]
 00487E25    mov         eax,esi
 00487E27    call        TBrush.SetColor
 00487E2C    mov         byte ptr [ebx+260],0
 00487E33    mov         byte ptr [ebx+1EE],1
 00487E3A    mov         byte ptr [ebx+1ED],1
 00487E41    mov         dword ptr [ebx+1E4],0FFFFFFFF
 00487E4B    mov         byte ptr [ebx+1CC],3
 00487E52    mov         eax,[0078DB7C];SysLocale:TSysLocale
 00487E57    cmp         dword ptr [eax+4],11
>00487E5B    jne         00487E6A
 00487E5D    lea         eax,[ebx+1D0]
 00487E63    call        @UStrClr
>00487E68    jmp         00487E87
 00487E6A    lea         edx,[ebp-8]
 00487E6D    mov         eax,[0078DB00];^Screen:TScreen
 00487E72    mov         eax,dword ptr [eax]
 00487E74    call        TScreen.GetDefaultIME
 00487E79    mov         edx,dword ptr [ebp-8]
 00487E7C    lea         eax,[ebx+1D0]
 00487E82    call        @UStrAsg
 00487E87    mov         byte ptr [ebx+1EB],0
 00487E8E    movzx       eax,byte ptr ds:[487F20]
 00487E95    mov         byte ptr [ebx+1AE],al
 00487E9B    mov         byte ptr [ebx+1AF],2
 00487EA2    mov         byte ptr [ebx+1B0],1
 00487EA9    mov         dword ptr [ebx+1B4],1
 00487EB3    mov         byte ptr [ebx+160],1
 00487EBA    mov         ecx,ebx
 00487EBC    mov         dl,1
 00487EBE    mov         eax,[00477D68];TPadding
 00487EC3    call        TMargins.Create
 00487EC8    mov         esi,eax
 00487ECA    mov         dword ptr [ebx+1BC],esi
 00487ED0    mov         dword ptr [esi+1C],ebx
 00487ED3    mov         dword ptr [esi+18],48F9C4;TWinControl.DoPaddingChange
 00487EDA    mov         byte ptr [ebx+1EF],0
 00487EE1    xor         eax,eax
 00487EE3    pop         edx
 00487EE4    pop         ecx
 00487EE5    pop         ecx
 00487EE6    mov         dword ptr fs:[eax],edx
 00487EE9    push        487EFE
 00487EEE    lea         eax,[ebp-8]
 00487EF1    call        @UStrClr
 00487EF6    ret
>00487EF7    jmp         @HandleFinally
>00487EFC    jmp         00487EEE
 00487EFE    mov         eax,ebx
 00487F00    cmp         byte ptr [ebp-1],0
>00487F04    je          00487F15
 00487F06    call        @AfterConstruction
 00487F0B    pop         dword ptr fs:[0]
 00487F12    add         esp,0C
 00487F15    mov         eax,ebx
 00487F17    pop         esi
 00487F18    pop         ebx
 00487F19    pop         ecx
 00487F1A    pop         ecx
 00487F1B    pop         ebp
 00487F1C    ret
*}
end;

//00487F24
function TWinControl.GetAlignDisabled:Boolean;
begin
{*
 00487F24    cmp         word ptr [eax+1AC],0
 00487F2C    seta        al
 00487F2F    ret
*}
end;

//00487F30
constructor TWinControl.CreateParented;
begin
{*
 00487F30    push        ebp
 00487F31    mov         ebp,esp
 00487F33    push        ecx
 00487F34    push        ebx
 00487F35    push        esi
 00487F36    test        dl,dl
>00487F38    je          00487F42
 00487F3A    add         esp,0FFFFFFF0
 00487F3D    call        @ClassCreate
 00487F42    mov         byte ptr [ebp-1],dl
 00487F45    mov         ebx,eax
 00487F47    mov         dword ptr [ebx+1D4],ecx
 00487F4D    xor         ecx,ecx
 00487F4F    xor         edx,edx
 00487F51    mov         eax,ebx
 00487F53    mov         esi,dword ptr [eax]
 00487F55    call        dword ptr [esi+2C]
 00487F58    mov         eax,ebx
 00487F5A    cmp         byte ptr [ebp-1],0
>00487F5E    je          00487F6F
 00487F60    call        @AfterConstruction
 00487F65    pop         dword ptr fs:[0]
 00487F6C    add         esp,0C
 00487F6F    mov         eax,ebx
 00487F71    pop         esi
 00487F72    pop         ebx
 00487F73    pop         ecx
 00487F74    pop         ebp
 00487F75    ret
*}
end;

//00487F78
function TWinControl.CreateParentedControl(ParentWindow:HWND):TWinControl;
begin
{*
 00487F78    push        ebx
 00487F79    push        esi
 00487F7A    mov         esi,edx
 00487F7C    mov         ebx,eax
 00487F7E    mov         eax,ebx
 00487F80    call        dword ptr [eax-0C]
 00487F83    mov         ebx,eax
 00487F85    mov         dword ptr [ebx+1D4],esi
 00487F8B    xor         ecx,ecx
 00487F8D    or          edx,0FFFFFFFF
 00487F90    mov         eax,ebx
 00487F92    mov         esi,dword ptr [eax]
 00487F94    call        dword ptr [esi+2C]
 00487F97    mov         eax,ebx
 00487F99    pop         esi
 00487F9A    pop         ebx
 00487F9B    ret
*}
end;

//00487F9C
destructor TWinControl.Destroy();
begin
{*
 00487F9C    push        ebx
 00487F9D    push        esi
 00487F9E    push        edi
 00487F9F    push        ecx
 00487FA0    call        @BeforeDestruction
 00487FA5    mov         byte ptr [esp],dl
 00487FA8    mov         esi,eax
 00487FAA    mov         eax,esi
 00487FAC    call        TComponent.Destroying
 00487FB1    cmp         byte ptr [esi+1EC],0
>00487FB8    je          00487FCA
 00487FBA    mov         byte ptr [esi+1EC],0
 00487FC1    xor         edx,edx
 00487FC3    mov         eax,esi
 00487FC5    call        RegisterDockSite
 00487FCA    lea         eax,[esi+1C8]
 00487FD0    call        @IntfClear
 00487FD5    lea         eax,[esi+1C4]
 00487FDB    mov         edx,dword ptr [eax]
 00487FDD    xor         ecx,ecx
 00487FDF    mov         dword ptr [eax],ecx
 00487FE1    mov         eax,edx
 00487FE3    call        TObject.Free
 00487FE8    mov         eax,dword ptr [esi+0AC]
 00487FEE    test        eax,eax
>00487FF0    je          00488000
 00487FF2    cmp         dword ptr [eax+8],0
>00487FF6    je          00488000
 00487FF8    mov         eax,dword ptr [eax+8]
 00487FFB    call        TObject.Free
 00488000    cmp         dword ptr [esi+34],0
>00488004    je          0048800F
 00488006    mov         dl,1
 00488008    mov         eax,esi
 0048800A    call        TWinControl.RemoveFocus
 0048800F    cmp         dword ptr [esi+258],0
>00488016    je          00488022
 00488018    mov         eax,esi
 0048801A    mov         edx,dword ptr [eax]
 0048801C    call        dword ptr [edx+0C4]
 00488022    mov         eax,esi
 00488024    call        TWinControl.GetControlCount
 00488029    mov         ebx,eax
 0048802B    test        ebx,ebx
>0048802D    je          0048805A
 0048802F    mov         edx,ebx
 00488031    dec         edx
 00488032    mov         eax,esi
 00488034    call        TWinControl.GetControl
 00488039    mov         edi,eax
 0048803B    mov         edx,edi
 0048803D    mov         eax,esi
 0048803F    call        TWinControl.Remove
 00488044    mov         dl,1
 00488046    mov         eax,edi
 00488048    mov         ecx,dword ptr [eax]
 0048804A    call        dword ptr [ecx-4]
 0048804D    mov         eax,esi
 0048804F    call        TWinControl.GetControlCount
 00488054    mov         ebx,eax
 00488056    test        ebx,ebx
>00488058    jne         0048802F
 0048805A    lea         eax,[esi+1C0]
 00488060    mov         edx,dword ptr [eax]
 00488062    xor         ecx,ecx
 00488064    mov         dword ptr [eax],ecx
 00488066    mov         eax,edx
 00488068    call        TObject.Free
 0048806D    mov         eax,dword ptr [esi+25C]
 00488073    test        eax,eax
>00488075    je          0048807C
 00488077    call        FreeObjectInstance
 0048807C    lea         eax,[esi+1BC]
 00488082    mov         edx,dword ptr [eax]
 00488084    xor         ecx,ecx
 00488086    mov         dword ptr [eax],ecx
 00488088    mov         eax,edx
 0048808A    call        TObject.Free
 0048808F    movzx       edx,byte ptr [esp]
 00488093    and         dl,0FC
 00488096    mov         eax,esi
 00488098    call        TControl.Destroy
 0048809D    cmp         byte ptr [esp],0
>004880A1    jle         004880AA
 004880A3    mov         eax,esi
 004880A5    call        @ClassDestroy
 004880AA    pop         edx
 004880AB    pop         edi
 004880AC    pop         esi
 004880AD    pop         ebx
 004880AE    ret
*}
end;

//004880B0
procedure TWinControl.FixupTabList;
begin
{*
 004880B0    push        ebp
 004880B1    mov         ebp,esp
 004880B3    add         esp,0FFFFFFF4
 004880B6    push        ebx
 004880B7    push        esi
 004880B8    mov         dword ptr [ebp-4],eax
 004880BB    mov         eax,dword ptr [ebp-4]
 004880BE    cmp         dword ptr [eax+1E0],0
>004880C5    je          0048817B
 004880CB    mov         dl,1
 004880CD    mov         eax,[00439644];TList
 004880D2    call        TObject.Create
 004880D7    mov         dword ptr [ebp-0C],eax
 004880DA    xor         ecx,ecx
 004880DC    push        ebp
 004880DD    push        488174
 004880E2    push        dword ptr fs:[ecx]
 004880E5    mov         dword ptr fs:[ecx],esp
 004880E8    mov         eax,dword ptr [ebp-4]
 004880EB    mov         eax,dword ptr [eax+1E0]
 004880F1    mov         eax,dword ptr [eax+8]
 004880F4    mov         dword ptr [ebp-8],eax
 004880F7    mov         edx,dword ptr [ebp-8]
 004880FA    mov         eax,dword ptr [ebp-0C]
 004880FD    call        TList.SetCount
 00488102    mov         ebx,dword ptr [ebp-8]
 00488105    dec         ebx
 00488106    test        ebx,ebx
>00488108    jl          0048813A
 0048810A    inc         ebx
 0048810B    xor         esi,esi
 0048810D    mov         eax,dword ptr [ebp-4]
 00488110    mov         eax,dword ptr [eax+1E0]
 00488116    mov         edx,esi
 00488118    call        TList.Get
 0048811D    mov         edx,dword ptr [eax+1E4]
 00488123    test        edx,edx
>00488125    jl          00488136
 00488127    cmp         edx,dword ptr [ebp-8]
>0048812A    jge         00488136
 0048812C    mov         ecx,eax
 0048812E    mov         eax,dword ptr [ebp-0C]
 00488131    call        TList.Put
 00488136    inc         esi
 00488137    dec         ebx
>00488138    jne         0048810D
 0048813A    mov         ebx,dword ptr [ebp-8]
 0048813D    dec         ebx
 0048813E    test        ebx,ebx
>00488140    jl          0048815E
 00488142    inc         ebx
 00488143    xor         esi,esi
 00488145    mov         edx,esi
 00488147    mov         eax,dword ptr [ebp-0C]
 0048814A    call        TList.Get
 0048814F    test        eax,eax
>00488151    je          0048815A
 00488153    mov         edx,esi
 00488155    call        TWinControl.UpdateTabOrder
 0048815A    inc         esi
 0048815B    dec         ebx
>0048815C    jne         00488145
 0048815E    xor         eax,eax
 00488160    pop         edx
 00488161    pop         ecx
 00488162    pop         ecx
 00488163    mov         dword ptr fs:[eax],edx
 00488166    push        48817B
 0048816B    mov         eax,dword ptr [ebp-0C]
 0048816E    call        TObject.Free
 00488173    ret
>00488174    jmp         @HandleFinally
>00488179    jmp         0048816B
 0048817B    pop         esi
 0048817C    pop         ebx
 0048817D    mov         esp,ebp
 0048817F    pop         ebp
 00488180    ret
*}
end;

//00488184
procedure TWinControl.ReadState(Reader:TReader);
begin
{*
 00488184    push        ebp
 00488185    mov         ebp,esp
 00488187    push        ecx
 00488188    push        ebx
 00488189    mov         ebx,edx
 0048818B    mov         dword ptr [ebp-4],eax
 0048818E    mov         eax,dword ptr [ebp-4]
 00488191    call        TWinControl.DisableAlign
 00488196    xor         eax,eax
 00488198    push        ebp
 00488199    push        4881C4
 0048819E    push        dword ptr fs:[eax]
 004881A1    mov         dword ptr fs:[eax],esp
 004881A4    mov         edx,ebx
 004881A6    mov         eax,dword ptr [ebp-4]
 004881A9    call        TControl.ReadState
 004881AE    xor         eax,eax
 004881B0    pop         edx
 004881B1    pop         ecx
 004881B2    pop         ecx
 004881B3    mov         dword ptr fs:[eax],edx
 004881B6    push        4881CB
 004881BB    mov         eax,dword ptr [ebp-4]
 004881BE    call        TWinControl.EnableAlign
 004881C3    ret
>004881C4    jmp         @HandleFinally
>004881C9    jmp         004881BB
 004881CB    mov         eax,dword ptr [ebp-4]
 004881CE    call        TWinControl.FixupTabList
 004881D3    mov         eax,dword ptr [ebp-4]
 004881D6    cmp         dword ptr [eax+34],0
>004881DA    je          004881ED
 004881DC    push        0
 004881DE    xor         ecx,ecx
 004881E0    mov         edx,0B011
 004881E5    mov         eax,dword ptr [ebp-4]
 004881E8    call        TControl.Perform
 004881ED    mov         eax,dword ptr [ebp-4]
 004881F0    call        TWinControl.UpdateControlState
 004881F5    pop         ebx
 004881F6    pop         ecx
 004881F7    pop         ebp
 004881F8    ret
*}
end;

//004881FC
procedure TWinControl.AdjustClientRect(var Rect:TRect);
begin
{*
 004881FC    mov         ecx,dword ptr [eax+1BC]
 00488202    mov         ecx,dword ptr [ecx+8]
 00488205    add         dword ptr [edx],ecx
 00488207    mov         ecx,dword ptr [eax+1BC]
 0048820D    mov         ecx,dword ptr [ecx+0C]
 00488210    add         dword ptr [edx+4],ecx
 00488213    mov         ecx,dword ptr [eax+1BC]
 00488219    mov         ecx,dword ptr [ecx+10]
 0048821C    sub         dword ptr [edx+8],ecx
 0048821F    mov         eax,dword ptr [eax+1BC]
 00488225    mov         eax,dword ptr [eax+14]
 00488228    sub         dword ptr [edx+0C],eax
 0048822B    ret
*}
end;

//0048822C
procedure TWinControl.ArrangeControl(AControl:TControl; const ParentSize:TPoint; AAlign:TAlign; AAlignInfo:TAlignInfo; var Rect:TRect; UpdateAnchorOrigin:Boolean);
begin
{*
 0048822C    push        ebp
 0048822D    mov         ebp,esp
 0048822F    add         esp,0FFFFFFDC
 00488232    push        ebx
 00488233    push        esi
 00488234    push        edi
 00488235    mov         esi,dword ptr [ebp+10]
 00488238    lea         edi,[ebp-24]
 0048823B    movs        dword ptr [edi],dword ptr [esi]
 0048823C    movs        dword ptr [edi],dword ptr [esi]
 0048823D    movs        dword ptr [edi],dword ptr [esi]
 0048823E    movs        dword ptr [edi],dword ptr [esi]
 0048823F    mov         dword ptr [ebp-4],ecx
 00488242    mov         ebx,edx
 00488244    mov         edi,eax
 00488246    mov         esi,dword ptr [ebp+0C]
 00488249    cmp         byte ptr [ebp+14],0
>0048824D    je          00488263
 0048824F    movzx       eax,byte ptr [ebp+14]
 00488253    movzx       eax,byte ptr [eax+7859A4]
 0048825A    cmp         al,byte ptr [ebx+63]
>0048825D    je          00488434
 00488263    cmp         dword ptr [ebx+18C],0
>0048826A    je          0048842A
 00488270    cmp         dword ptr [ebx+190],0
>00488277    je          0048842A
 0048827D    xor         edx,edx
 0048827F    mov         eax,dword ptr [ebx+74]
 00488282    mov         ecx,dword ptr [eax]
 00488284    call        dword ptr [ecx+10]
 00488287    mov         dword ptr [ebp-8],eax
 0048828A    mov         edx,1
 0048828F    mov         eax,dword ptr [ebx+74]
 00488292    mov         ecx,dword ptr [eax]
 00488294    call        dword ptr [ecx+10]
 00488297    mov         dword ptr [ebp-0C],eax
 0048829A    mov         edx,2
 0048829F    mov         eax,dword ptr [ebx+74]
 004882A2    mov         ecx,dword ptr [eax]
 004882A4    call        dword ptr [ecx+10]
 004882A7    mov         dword ptr [ebp-10],eax
 004882AA    mov         edx,3
 004882AF    mov         eax,dword ptr [ebx+74]
 004882B2    mov         ecx,dword ptr [eax]
 004882B4    call        dword ptr [ecx+10]
 004882B7    mov         dword ptr [ebp-14],eax
 004882BA    test        byte ptr [ebx+63],4
>004882BE    je          004882F6
 004882C0    test        byte ptr [ebx+63],1
>004882C4    je          004882DE
 004882C6    mov         eax,dword ptr [ebp-4]
 004882C9    mov         eax,dword ptr [eax]
 004882CB    mov         edx,dword ptr [ebx+18C]
 004882D1    sub         edx,dword ptr [ebx+17C]
 004882D7    sub         eax,edx
 004882D9    mov         dword ptr [ebp-10],eax
>004882DC    jmp         00488324
 004882DE    mov         eax,dword ptr [ebp-4]
 004882E1    mov         eax,dword ptr [eax]
 004882E3    mov         edx,dword ptr [ebx+18C]
 004882E9    sub         edx,dword ptr [ebx+17C]
 004882EF    sub         eax,edx
 004882F1    mov         dword ptr [ebp-8],eax
>004882F4    jmp         00488324
 004882F6    test        byte ptr [ebx+63],1
>004882FA    jne         00488324
 004882FC    mov         eax,dword ptr [ebx+18C]
 00488302    push        eax
 00488303    mov         eax,dword ptr [ebp-4]
 00488306    mov         eax,dword ptr [eax]
 00488308    push        eax
 00488309    mov         eax,dword ptr [ebx+17C]
 0048830F    push        eax
 00488310    call        kernel32.MulDiv
 00488315    mov         edx,dword ptr [ebp-10]
 00488318    sar         edx,1
>0048831A    jns         0048831F
 0048831C    adc         edx,0
 0048831F    sub         eax,edx
 00488321    mov         dword ptr [ebp-8],eax
 00488324    test        byte ptr [ebx+63],8
>00488328    je          00488362
 0048832A    test        byte ptr [ebx+63],2
>0048832E    je          00488349
 00488330    mov         eax,dword ptr [ebp-4]
 00488333    mov         eax,dword ptr [eax+4]
 00488336    mov         edx,dword ptr [ebx+190]
 0048833C    sub         edx,dword ptr [ebx+180]
 00488342    sub         eax,edx
 00488344    mov         dword ptr [ebp-14],eax
>00488347    jmp         00488391
 00488349    mov         eax,dword ptr [ebp-4]
 0048834C    mov         eax,dword ptr [eax+4]
 0048834F    mov         edx,dword ptr [ebx+190]
 00488355    sub         edx,dword ptr [ebx+180]
 0048835B    sub         eax,edx
 0048835D    mov         dword ptr [ebp-0C],eax
>00488360    jmp         00488391
 00488362    test        byte ptr [ebx+63],2
>00488366    jne         00488391
 00488368    mov         eax,dword ptr [ebx+190]
 0048836E    push        eax
 0048836F    mov         eax,dword ptr [ebp-4]
 00488372    mov         eax,dword ptr [eax+4]
 00488375    push        eax
 00488376    mov         eax,dword ptr [ebx+180]
 0048837C    push        eax
 0048837D    call        kernel32.MulDiv
 00488382    mov         edx,dword ptr [ebp-14]
 00488385    sar         edx,1
>00488387    jns         0048838C
 00488389    adc         edx,0
 0048838C    sub         eax,edx
 0048838E    mov         dword ptr [ebp-0C],eax
 00488391    cmp         byte ptr [ebp+8],0
>00488395    je          00488412
 00488397    movzx       eax,byte ptr ds:[488614]
 0048839E    and         al,byte ptr [ebx+63]
 004883A1    movzx       edx,byte ptr ds:[488618]
 004883A8    cmp         dl,al
>004883AA    je          004883D4
 004883AC    mov         eax,dword ptr [ebx+18C]
 004883B2    push        eax
 004883B3    mov         eax,dword ptr [ebp-4]
 004883B6    mov         eax,dword ptr [eax]
 004883B8    push        eax
 004883B9    mov         eax,dword ptr [ebx+184]
 004883BF    push        eax
 004883C0    call        kernel32.MulDiv
 004883C5    mov         edx,dword ptr [ebp-10]
 004883C8    sar         edx,1
>004883CA    jns         004883CF
 004883CC    adc         edx,0
 004883CF    sub         eax,edx
 004883D1    mov         dword ptr [ebp-8],eax
 004883D4    movzx       eax,byte ptr ds:[48861C]
 004883DB    and         al,byte ptr [ebx+63]
 004883DE    movzx       edx,byte ptr ds:[488618]
 004883E5    cmp         dl,al
>004883E7    je          00488412
 004883E9    mov         eax,dword ptr [ebx+190]
 004883EF    push        eax
 004883F0    mov         eax,dword ptr [ebp-4]
 004883F3    mov         eax,dword ptr [eax+4]
 004883F6    push        eax
 004883F7    mov         eax,dword ptr [ebx+188]
 004883FD    push        eax
 004883FE    call        kernel32.MulDiv
 00488403    mov         edx,dword ptr [ebp-14]
 00488406    sar         edx,1
>00488408    jns         0048840D
 0048840A    adc         edx,0
 0048840D    sub         eax,edx
 0048840F    mov         dword ptr [ebp-0C],eax
 00488412    mov         eax,dword ptr [ebp-10]
 00488415    push        eax
 00488416    mov         eax,dword ptr [ebp-14]
 00488419    push        eax
 0048841A    push        1
 0048841C    mov         ecx,dword ptr [ebp-0C]
 0048841F    mov         edx,dword ptr [ebp-8]
 00488422    mov         eax,dword ptr [ebx+74]
 00488425    call        TMargins.SetControlBounds
 0048842A    cmp         byte ptr [ebp+14],0
>0048842E    je          0048860B
 00488434    mov         eax,dword ptr [esi+8]
 00488437    sub         eax,dword ptr [esi]
 00488439    mov         dword ptr [ebp-10],eax
 0048843C    cmp         dword ptr [ebp-10],0
>00488440    jl          00488450
 00488442    movzx       eax,byte ptr [ebp+14]
 00488446    add         al,0FD
 00488448    sub         al,2
>0048844A    jb          00488450
 0048844C    sub         al,1
>0048844E    jne         00488460
 00488450    mov         edx,2
 00488455    mov         eax,dword ptr [ebx+74]
 00488458    mov         ecx,dword ptr [eax]
 0048845A    call        dword ptr [ecx+10]
 0048845D    mov         dword ptr [ebp-10],eax
 00488460    mov         eax,dword ptr [esi+0C]
 00488463    sub         eax,dword ptr [esi+4]
 00488466    mov         dword ptr [ebp-14],eax
 00488469    cmp         dword ptr [ebp-14],0
>0048846D    jl          0048847C
 0048846F    movzx       eax,byte ptr [ebp+14]
 00488473    dec         eax
 00488474    sub         al,2
>00488476    jb          0048847C
 00488478    sub         al,3
>0048847A    jne         0048848C
 0048847C    mov         edx,3
 00488481    mov         eax,dword ptr [ebx+74]
 00488484    mov         ecx,dword ptr [eax]
 00488486    call        dword ptr [ecx+10]
 00488489    mov         dword ptr [ebp-14],eax
 0048848C    mov         eax,dword ptr [esi]
 0048848E    mov         dword ptr [ebp-8],eax
 00488491    mov         eax,dword ptr [esi+4]
 00488494    mov         dword ptr [ebp-0C],eax
 00488497    movzx       eax,byte ptr [ebp+14]
 0048849B    cmp         eax,6
>0048849E    ja          0048851A
 004884A0    jmp         dword ptr [eax*4+4884A7]
 004884A0    dd          0048851A
 004884A0    dd          004884C3
 004884A0    dd          004884CB
 004884A0    dd          004884D9
 004884A0    dd          004884E0
 004884A0    dd          0048851A
 004884A0    dd          004884EE
 004884C3    mov         eax,dword ptr [ebp-14]
 004884C6    add         dword ptr [esi+4],eax
>004884C9    jmp         0048851A
 004884CB    mov         eax,dword ptr [ebp-14]
 004884CE    sub         dword ptr [esi+0C],eax
 004884D1    mov         eax,dword ptr [esi+0C]
 004884D4    mov         dword ptr [ebp-0C],eax
>004884D7    jmp         0048851A
 004884D9    mov         eax,dword ptr [ebp-10]
 004884DC    add         dword ptr [esi],eax
>004884DE    jmp         0048851A
 004884E0    mov         eax,dword ptr [ebp-10]
 004884E3    sub         dword ptr [esi+8],eax
 004884E6    mov         eax,dword ptr [esi+8]
 004884E9    mov         dword ptr [ebp-8],eax
>004884EC    jmp         0048851A
 004884EE    mov         eax,dword ptr [ebx+40]
 004884F1    mov         dword ptr [ebp-8],eax
 004884F4    mov         eax,dword ptr [ebx+44]
 004884F7    mov         dword ptr [ebp-0C],eax
 004884FA    lea         eax,[ebp-0C]
 004884FD    push        eax
 004884FE    lea         eax,[ebp-10]
 00488501    push        eax
 00488502    lea         eax,[ebp-14]
 00488505    push        eax
 00488506    push        esi
 00488507    lea         eax,[ebp-24]
 0048850A    push        eax
 0048850B    lea         ecx,[ebp-8]
 0048850E    mov         edx,ebx
 00488510    mov         eax,edi
 00488512    mov         edi,dword ptr [eax]
 00488514    call        dword ptr [edi+0BC]
 0048851A    mov         eax,dword ptr [ebp-10]
 0048851D    push        eax
 0048851E    mov         eax,dword ptr [ebp-14]
 00488521    push        eax
 00488522    push        1
 00488524    mov         ecx,dword ptr [ebp-0C]
 00488527    mov         edx,dword ptr [ebp-8]
 0048852A    mov         eax,dword ptr [ebx+74]
 0048852D    call        TMargins.SetControlBounds
 00488532    mov         edx,2
 00488537    mov         eax,dword ptr [ebx+74]
 0048853A    mov         ecx,dword ptr [eax]
 0048853C    call        dword ptr [ecx+10]
 0048853F    cmp         eax,dword ptr [ebp-10]
>00488542    jne         0048855A
 00488544    mov         edx,3
 00488549    mov         eax,dword ptr [ebx+74]
 0048854C    mov         ecx,dword ptr [eax]
 0048854E    call        dword ptr [ecx+10]
 00488551    cmp         eax,dword ptr [ebp-14]
>00488554    je          0048860B
 0048855A    movzx       eax,byte ptr [ebp+14]
 0048855E    cmp         eax,5
>00488561    ja          0048860B
 00488567    jmp         dword ptr [eax*4+48856E]
 00488567    dd          0048860B
 00488567    dd          00488586
 00488567    dd          0048859D
 00488567    dd          004885B4
 00488567    dd          004885CA
 00488567    dd          004885E1
 00488586    mov         edx,3
 0048858B    mov         eax,dword ptr [ebx+74]
 0048858E    mov         ecx,dword ptr [eax]
 00488590    call        dword ptr [ecx+10]
 00488593    mov         edx,dword ptr [ebp-14]
 00488596    sub         edx,eax
 00488598    sub         dword ptr [esi+4],edx
>0048859B    jmp         0048860B
 0048859D    mov         edx,3
 004885A2    mov         eax,dword ptr [ebx+74]
 004885A5    mov         ecx,dword ptr [eax]
 004885A7    call        dword ptr [ecx+10]
 004885AA    mov         edx,dword ptr [ebp-14]
 004885AD    sub         edx,eax
 004885AF    add         dword ptr [esi+0C],edx
>004885B2    jmp         0048860B
 004885B4    mov         edx,2
 004885B9    mov         eax,dword ptr [ebx+74]
 004885BC    mov         ecx,dword ptr [eax]
 004885BE    call        dword ptr [ecx+10]
 004885C1    mov         edx,dword ptr [ebp-10]
 004885C4    sub         edx,eax
 004885C6    sub         dword ptr [esi],edx
>004885C8    jmp         0048860B
 004885CA    mov         edx,2
 004885CF    mov         eax,dword ptr [ebx+74]
 004885D2    mov         ecx,dword ptr [eax]
 004885D4    call        dword ptr [ecx+10]
 004885D7    mov         edx,dword ptr [ebp-10]
 004885DA    sub         edx,eax
 004885DC    add         dword ptr [esi+8],edx
>004885DF    jmp         0048860B
 004885E1    mov         edx,2
 004885E6    mov         eax,dword ptr [ebx+74]
 004885E9    mov         ecx,dword ptr [eax]
 004885EB    call        dword ptr [ecx+10]
 004885EE    mov         edx,dword ptr [ebp-10]
 004885F1    sub         edx,eax
 004885F3    add         dword ptr [esi+8],edx
 004885F6    mov         edx,3
 004885FB    mov         eax,dword ptr [ebx+74]
 004885FE    mov         ecx,dword ptr [eax]
 00488600    call        dword ptr [ecx+10]
 00488603    mov         edx,dword ptr [ebp-14]
 00488606    sub         edx,eax
 00488608    add         dword ptr [esi+0C],edx
 0048860B    pop         edi
 0048860C    pop         esi
 0048860D    pop         ebx
 0048860E    mov         esp,ebp
 00488610    pop         ebp
 00488611    ret         10
*}
end;

//00488654
function GetClientSize(Control:TWinControl):TPoint;
begin
{*
 00488654    push        ebp
 00488655    mov         ebp,esp
 00488657    add         esp,0FFFFFFE8
 0048865A    push        ebx
 0048865B    push        esi
 0048865C    mov         esi,edx
 0048865E    mov         ebx,eax
 00488660    mov         eax,ebx
 00488662    call        TWinControl.HandleAllocated
 00488667    test        al,al
>00488669    je          00488682
 0048866B    lea         edx,[ebp-18]
 0048866E    mov         eax,ebx
 00488670    mov         ecx,dword ptr [eax]
 00488672    call        dword ptr [ecx+54]
 00488675    mov         eax,dword ptr [ebp-10]
 00488678    mov         dword ptr [esi],eax
 0048867A    mov         eax,dword ptr [ebp-0C]
 0048867D    mov         dword ptr [esi+4],eax
>00488680    jmp         00488699
 00488682    mov         eax,dword ptr [ebx+48]
 00488685    mov         dword ptr [ebp-8],eax
 00488688    mov         eax,dword ptr [ebx+4C]
 0048868B    mov         dword ptr [ebp-4],eax
 0048868E    mov         eax,dword ptr [ebp-8]
 00488691    mov         dword ptr [esi],eax
 00488693    mov         eax,dword ptr [ebp-4]
 00488696    mov         dword ptr [esi+4],eax
 00488699    mov         eax,dword ptr [ebx+1BC]
 0048869F    mov         edx,dword ptr [eax+8]
 004886A2    add         edx,dword ptr [eax+10]
 004886A5    sub         dword ptr [esi],edx
 004886A7    mov         eax,dword ptr [ebx+1BC]
 004886AD    mov         edx,dword ptr [eax+0C]
 004886B0    add         edx,dword ptr [eax+14]
 004886B3    sub         dword ptr [esi+4],edx
 004886B6    pop         esi
 004886B7    pop         ebx
 004886B8    mov         esp,ebp
 004886BA    pop         ebp
 004886BB    ret
*}
end;

//004886BC
function InsertBefore(C1:TControl; C2:TControl; AAlign:TAlign):Boolean;
begin
{*
 004886BC    push        ebp
 004886BD    mov         ebp,esp
 004886BF    add         esp,0FFFFFFF8
 004886C2    push        ebx
 004886C3    push        esi
 004886C4    mov         byte ptr [ebp-5],cl
 004886C7    mov         dword ptr [ebp-4],edx
 004886CA    mov         ebx,eax
 004886CC    xor         eax,eax
 004886CE    movzx       edx,byte ptr [ebp-5]
 004886D2    cmp         edx,6
>004886D5    ja          004887E6
 004886DB    jmp         dword ptr [edx*4+4886E2]
 004886DB    dd          004887E6
 004886DB    dd          004886FE
 004886DB    dd          00488727
 004886DB    dd          00488770
 004886DB    dd          00488790
 004886DB    dd          004887E6
 004886DB    dd          004887D3
 004886FE    mov         edx,1
 00488703    mov         eax,dword ptr [ebx+74]
 00488706    mov         ecx,dword ptr [eax]
 00488708    call        dword ptr [ecx+10]
 0048870B    mov         ebx,eax
 0048870D    mov         eax,dword ptr [ebp-4]
 00488710    mov         eax,dword ptr [eax+74]
 00488713    mov         edx,1
 00488718    mov         ecx,dword ptr [eax]
 0048871A    call        dword ptr [ecx+10]
 0048871D    cmp         ebx,eax
 0048871F    setl        al
>00488722    jmp         004887E6
 00488727    mov         edx,1
 0048872C    mov         eax,dword ptr [ebx+74]
 0048872F    mov         ecx,dword ptr [eax]
 00488731    call        dword ptr [ecx+10]
 00488734    mov         esi,eax
 00488736    mov         edx,3
 0048873B    mov         eax,dword ptr [ebx+74]
 0048873E    mov         ecx,dword ptr [eax]
 00488740    call        dword ptr [ecx+10]
 00488743    add         esi,eax
 00488745    mov         eax,dword ptr [ebp-4]
 00488748    mov         eax,dword ptr [eax+74]
 0048874B    mov         edx,1
 00488750    mov         ecx,dword ptr [eax]
 00488752    call        dword ptr [ecx+10]
 00488755    mov         ebx,eax
 00488757    mov         eax,dword ptr [ebp-4]
 0048875A    mov         eax,dword ptr [eax+74]
 0048875D    mov         edx,3
 00488762    mov         ecx,dword ptr [eax]
 00488764    call        dword ptr [ecx+10]
 00488767    add         ebx,eax
 00488769    cmp         esi,ebx
 0048876B    setge       al
>0048876E    jmp         004887E6
 00488770    xor         edx,edx
 00488772    mov         eax,dword ptr [ebx+74]
 00488775    mov         ecx,dword ptr [eax]
 00488777    call        dword ptr [ecx+10]
 0048877A    mov         ebx,eax
 0048877C    mov         eax,dword ptr [ebp-4]
 0048877F    mov         eax,dword ptr [eax+74]
 00488782    xor         edx,edx
 00488784    mov         ecx,dword ptr [eax]
 00488786    call        dword ptr [ecx+10]
 00488789    cmp         ebx,eax
 0048878B    setl        al
>0048878E    jmp         004887E6
 00488790    xor         edx,edx
 00488792    mov         eax,dword ptr [ebx+74]
 00488795    mov         ecx,dword ptr [eax]
 00488797    call        dword ptr [ecx+10]
 0048879A    mov         esi,eax
 0048879C    mov         edx,2
 004887A1    mov         eax,dword ptr [ebx+74]
 004887A4    mov         ecx,dword ptr [eax]
 004887A6    call        dword ptr [ecx+10]
 004887A9    add         esi,eax
 004887AB    mov         eax,dword ptr [ebp-4]
 004887AE    mov         eax,dword ptr [eax+74]
 004887B1    xor         edx,edx
 004887B3    mov         ecx,dword ptr [eax]
 004887B5    call        dword ptr [ecx+10]
 004887B8    mov         ebx,eax
 004887BA    mov         eax,dword ptr [ebp-4]
 004887BD    mov         eax,dword ptr [eax+74]
 004887C0    mov         edx,2
 004887C5    mov         ecx,dword ptr [eax]
 004887C7    call        dword ptr [ecx+10]
 004887CA    add         ebx,eax
 004887CC    cmp         esi,ebx
 004887CE    setge       al
>004887D1    jmp         004887E6
 004887D3    mov         eax,dword ptr [ebp+8]
 004887D6    mov         eax,dword ptr [eax-4]
 004887D9    mov         ecx,dword ptr [ebp-4]
 004887DC    mov         edx,ebx
 004887DE    mov         ebx,dword ptr [eax]
 004887E0    call        dword ptr [ebx+0B8]
 004887E6    pop         esi
 004887E7    pop         ebx
 004887E8    pop         ecx
 004887E9    pop         ecx
 004887EA    pop         ebp
 004887EB    ret
*}
end;

//004887EC
procedure DoPosition(Control:TControl; AAlign:TAlign; AlignInfo:TAlignInfo);
begin
{*
 004887EC    push        ebp
 004887ED    mov         ebp,esp
 004887EF    add         esp,0FFFFFFE8
 004887F2    push        ebx
 004887F3    push        esi
 004887F4    push        edi
 004887F5    mov         esi,ecx
 004887F7    lea         edi,[ebp-10]
 004887FA    movs        dword ptr [edi],dword ptr [esi]
 004887FB    movs        dword ptr [edi],dword ptr [esi]
 004887FC    movs        dword ptr [edi],dword ptr [esi]
 004887FD    movs        dword ptr [edi],dword ptr [esi]
 004887FE    mov         ebx,edx
 00488800    mov         esi,eax
 00488802    push        ebx
 00488803    lea         eax,[ebp-10]
 00488806    push        eax
 00488807    mov         eax,dword ptr [ebp+8]
 0048880A    mov         eax,dword ptr [eax-8]
 0048880D    push        eax
 0048880E    push        0
 00488810    lea         edx,[ebp-18]
 00488813    mov         eax,dword ptr [esi+34]
 00488816    call        GetClientSize
 0048881B    lea         ecx,[ebp-18]
 0048881E    mov         eax,dword ptr [ebp+8]
 00488821    mov         eax,dword ptr [eax-4]
 00488824    mov         edx,esi
 00488826    call        TWinControl.ArrangeControl
 0048882B    pop         edi
 0048882C    pop         esi
 0048882D    pop         ebx
 0048882E    mov         esp,ebp
 00488830    pop         ebp
 00488831    ret
*}
end;

//00488834
procedure DoAlign(AAlign:TAlign);
begin
{*
 00488834    push        ebp
 00488835    mov         ebp,esp
 00488837    add         esp,0FFFFFFE8
 0048883A    push        ebx
 0048883B    push        esi
 0048883C    push        edi
 0048883D    mov         ebx,eax
 0048883F    mov         eax,dword ptr [ebp+8]
 00488842    mov         eax,dword ptr [eax-0C]
 00488845    mov         edx,dword ptr [eax]
 00488847    call        dword ptr [edx+8]
 0048884A    mov         eax,dword ptr [ebp+8]
 0048884D    cmp         dword ptr [eax-10],0
>00488851    je          00488897
 00488853    test        bl,bl
>00488855    je          0048887B
 00488857    mov         eax,dword ptr [ebp+8]
 0048885A    mov         eax,dword ptr [eax-10]
 0048885D    cmp         byte ptr [eax+59],0
>00488861    jne         0048887B
 00488863    mov         eax,dword ptr [ebp+8]
 00488866    mov         eax,dword ptr [eax-10]
 00488869    test        byte ptr [eax+1C],10
>0048886D    je          00488897
 0048886F    mov         eax,dword ptr [ebp+8]
 00488872    mov         eax,dword ptr [eax-10]
 00488875    test        byte ptr [eax+51],4
>00488879    jne         00488897
 0048887B    mov         eax,dword ptr [ebp+8]
 0048887E    mov         eax,dword ptr [eax-10]
 00488881    cmp         bl,byte ptr [eax+5D]
>00488884    jne         00488897
 00488886    mov         eax,dword ptr [ebp+8]
 00488889    mov         edx,dword ptr [eax-10]
 0048888C    mov         eax,dword ptr [ebp+8]
 0048888F    mov         eax,dword ptr [eax-0C]
 00488892    call        TList.Add
 00488897    mov         eax,dword ptr [ebp+8]
 0048889A    mov         eax,dword ptr [eax-4]
 0048889D    call        TWinControl.GetControlCount
 004888A2    dec         eax
 004888A3    test        eax,eax
>004888A5    jl          00488962
 004888AB    inc         eax
 004888AC    mov         dword ptr [ebp-8],eax
 004888AF    mov         dword ptr [ebp-4],0
 004888B6    mov         eax,dword ptr [ebp+8]
 004888B9    mov         eax,dword ptr [eax-4]
 004888BC    mov         edx,dword ptr [ebp-4]
 004888BF    call        TWinControl.GetControl
 004888C4    mov         edi,eax
 004888C6    cmp         bl,byte ptr [edi+5D]
>004888C9    jne         00488956
 004888CF    test        bl,bl
>004888D1    je          004888F7
 004888D3    cmp         byte ptr [edi+59],0
>004888D7    jne         004888F7
 004888D9    mov         eax,[004889BC]
 004888DE    and         eax,dword ptr [edi+50]
 004888E1    mov         edx,dword ptr ds:[4889BC]
 004888E7    cmp         edx,eax
>004888E9    je          004888F7
 004888EB    test        byte ptr [edi+1C],10
>004888EF    je          00488956
 004888F1    test        byte ptr [edi+51],4
>004888F5    jne         00488956
 004888F7    mov         eax,edi
 004888F9    mov         edx,dword ptr ds:[4DF7D4];TCustomForm
 004888FF    call        @IsClass
 00488904    test        al,al
>00488906    je          0048890E
 00488908    test        byte ptr [edi+1C],10
>0048890C    jne         00488956
 0048890E    mov         eax,dword ptr [ebp+8]
 00488911    cmp         edi,dword ptr [eax-10]
>00488914    je          00488956
 00488916    xor         esi,esi
>00488918    jmp         0048891B
 0048891A    inc         esi
 0048891B    mov         eax,dword ptr [ebp+8]
 0048891E    mov         eax,dword ptr [eax-0C]
 00488921    cmp         esi,dword ptr [eax+8]
>00488924    jge         00488947
 00488926    mov         eax,dword ptr [ebp+8]
 00488929    push        eax
 0048892A    mov         eax,dword ptr [ebp+8]
 0048892D    mov         eax,dword ptr [eax-0C]
 00488930    mov         edx,esi
 00488932    call        TList.Get
 00488937    mov         edx,eax
 00488939    mov         ecx,ebx
 0048893B    mov         eax,edi
 0048893D    call        InsertBefore
 00488942    pop         ecx
 00488943    test        al,al
>00488945    je          0048891A
 00488947    mov         eax,dword ptr [ebp+8]
 0048894A    mov         eax,dword ptr [eax-0C]
 0048894D    mov         ecx,edi
 0048894F    mov         edx,esi
 00488951    call        TList.Insert
 00488956    inc         dword ptr [ebp-4]
 00488959    dec         dword ptr [ebp-8]
>0048895C    jne         004888B6
 00488962    mov         eax,dword ptr [ebp+8]
 00488965    mov         eax,dword ptr [eax-0C]
 00488968    mov         eax,dword ptr [eax+8]
 0048896B    dec         eax
 0048896C    test        eax,eax
>0048896E    jl          004889B2
 00488970    inc         eax
 00488971    mov         dword ptr [ebp-8],eax
 00488974    mov         dword ptr [ebp-4],0
 0048897B    mov         eax,dword ptr [ebp+8]
 0048897E    mov         eax,dword ptr [eax-0C]
 00488981    mov         dword ptr [ebp-18],eax
 00488984    mov         eax,dword ptr [ebp-4]
 00488987    mov         dword ptr [ebp-14],eax
 0048898A    mov         byte ptr [ebp-10],bl
 0048898D    mov         eax,dword ptr [ebp+8]
 00488990    push        eax
 00488991    mov         eax,dword ptr [ebp+8]
 00488994    mov         eax,dword ptr [eax-0C]
 00488997    mov         edx,dword ptr [ebp-4]
 0048899A    call        TList.Get
 0048899F    lea         ecx,[ebp-18]
 004889A2    mov         edx,ebx
 004889A4    call        DoPosition
 004889A9    pop         ecx
 004889AA    inc         dword ptr [ebp-4]
 004889AD    dec         dword ptr [ebp-8]
>004889B0    jne         0048897B
 004889B2    pop         edi
 004889B3    pop         esi
 004889B4    pop         ebx
 004889B5    mov         esp,ebp
 004889B7    pop         ebp
 004889B8    ret
*}
end;

//004889C0
function AlignWork:Boolean;
begin
{*
 004889C0    push        ebp
 004889C1    mov         ebp,esp
 004889C3    push        ebx
 004889C4    push        esi
 004889C5    push        edi
 004889C6    mov         edi,dword ptr [ebp+8]
 004889C9    add         edi,0FFFFFFFC
 004889CC    mov         bl,1
 004889CE    mov         eax,dword ptr [edi]
 004889D0    call        TWinControl.GetControlCount
 004889D5    mov         esi,eax
 004889D7    dec         esi
 004889D8    cmp         esi,0
>004889DB    jl          00488A07
 004889DD    mov         eax,dword ptr [edi]
 004889DF    mov         edx,esi
 004889E1    call        TWinControl.GetControl
 004889E6    cmp         byte ptr [eax+5D],0
>004889EA    jne         00488A09
 004889EC    mov         eax,dword ptr [edi]
 004889EE    mov         edx,esi
 004889F0    call        TWinControl.GetControl
 004889F5    movzx       edx,byte ptr ds:[488A10]
 004889FC    cmp         dl,byte ptr [eax+63]
>004889FF    jne         00488A09
 00488A01    dec         esi
 00488A02    cmp         esi,0FFFFFFFF
>00488A05    jne         004889DD
 00488A07    xor         ebx,ebx
 00488A09    mov         eax,ebx
 00488A0B    pop         edi
 00488A0C    pop         esi
 00488A0D    pop         ebx
 00488A0E    pop         ebp
 00488A0F    ret
*}
end;

//00488A14
procedure AlignNestedControls;
begin
{*
 00488A14    push        ebp
 00488A15    mov         ebp,esp
 00488A17    add         esp,0FFFFFFEC
 00488A1A    push        ebx
 00488A1B    push        esi
 00488A1C    xor         eax,eax
 00488A1E    mov         dword ptr [ebp-4],eax
 00488A21    xor         eax,eax
 00488A23    push        ebp
 00488A24    push        488C7E
 00488A29    push        dword ptr fs:[eax]
 00488A2C    mov         dword ptr fs:[eax],esp
 00488A2F    mov         dl,1
 00488A31    mov         eax,[00439644];TList
 00488A36    call        TObject.Create
 00488A3B    mov         dword ptr [ebp-8],eax
 00488A3E    push        0
 00488A40    lea         eax,[ebp-4]
 00488A43    mov         ecx,1
 00488A48    mov         edx,dword ptr ds:[488620];:TWinControl.:1
 00488A4E    call        @DynArraySetLength
 00488A53    add         esp,4
 00488A56    xor         ecx,ecx
 00488A58    push        ebp
 00488A59    push        488C5B
 00488A5E    push        dword ptr fs:[ecx]
 00488A61    mov         dword ptr fs:[ecx],esp
 00488A64    mov         dl,1
 00488A66    mov         eax,[00439644];TList
 00488A6B    call        TObject.Create
 00488A70    mov         edx,dword ptr [ebp+8]
 00488A73    mov         edx,dword ptr [edx-4]
 00488A76    mov         dword ptr [edx+1A8],eax
 00488A7C    xor         ecx,ecx
 00488A7E    push        ebp
 00488A7F    push        488C03
 00488A84    push        dword ptr fs:[ecx]
 00488A87    mov         dword ptr fs:[ecx],esp
 00488A8A    xor         edx,edx
 00488A8C    push        ebp
 00488A8D    push        488BC6
 00488A92    push        dword ptr fs:[edx]
 00488A95    mov         dword ptr fs:[edx],esp
 00488A98    mov         eax,dword ptr [ebp+8]
 00488A9B    mov         eax,dword ptr [eax-14]
 00488A9E    mov         eax,dword ptr [eax+8]
 00488AA1    dec         eax
 00488AA2    cmp         eax,0
>00488AA5    jl          00488B89
 00488AAB    mov         dword ptr [ebp-10],eax
 00488AAE    mov         eax,dword ptr [ebp+8]
 00488AB1    mov         eax,dword ptr [eax-14]
 00488AB4    mov         edx,dword ptr [ebp-10]
 00488AB7    call        TList.Get
 00488ABC    mov         dword ptr [ebp-0C],eax
 00488ABF    mov         edx,dword ptr [ebp-0C]
 00488AC2    mov         eax,dword ptr [ebp-8]
 00488AC5    call        TList.IndexOf
 00488ACA    mov         dword ptr [ebp-14],eax
 00488ACD    cmp         dword ptr [ebp-14],0FFFFFFFF
>00488AD1    je          00488AE3
 00488AD3    mov         eax,dword ptr [ebp-4]
 00488AD6    mov         edx,dword ptr [ebp-14]
 00488AD9    cmp         dword ptr [eax+edx*4],0A
>00488ADD    jge         00488B7C
 00488AE3    mov         eax,dword ptr [ebp+8]
 00488AE6    mov         eax,dword ptr [eax-4]
 00488AE9    mov         eax,dword ptr [eax+1A8]
 00488AEF    mov         edx,dword ptr [ebp-0C]
 00488AF2    mov         dword ptr [edx+1A8],eax
 00488AF8    xor         eax,eax
 00488AFA    push        ebp
 00488AFB    push        488B32
 00488B00    push        dword ptr fs:[eax]
 00488B03    mov         dword ptr fs:[eax],esp
 00488B06    mov         eax,dword ptr [ebp-0C]
 00488B09    call        TWinControl.Realign
 00488B0E    xor         eax,eax
 00488B10    pop         edx
 00488B11    pop         ecx
 00488B12    pop         ecx
 00488B13    mov         dword ptr fs:[eax],edx
 00488B16    push        488B39
 00488B1B    mov         eax,dword ptr [ebp+8]
 00488B1E    mov         eax,dword ptr [eax-4]
 00488B21    cmp         eax,dword ptr [ebp-0C]
>00488B24    je          00488B31
 00488B26    mov         eax,dword ptr [ebp-0C]
 00488B29    xor         edx,edx
 00488B2B    mov         dword ptr [eax+1A8],edx
 00488B31    ret
>00488B32    jmp         @HandleFinally
>00488B37    jmp         00488B1B
 00488B39    cmp         dword ptr [ebp-14],0FFFFFFFF
>00488B3D    je          00488B48
 00488B3F    mov         eax,dword ptr [ebp-4]
 00488B42    mov         edx,dword ptr [ebp-14]
 00488B45    inc         dword ptr [eax+edx*4]
 00488B48    mov         edx,dword ptr [ebp-0C]
 00488B4B    mov         eax,dword ptr [ebp-8]
 00488B4E    call        TList.Add
 00488B53    mov         eax,dword ptr [ebp-4]
 00488B56    call        @DynArrayLength
 00488B5B    mov         edx,dword ptr [ebp-8]
 00488B5E    mov         ebx,dword ptr [edx+0C]
 00488B61    cmp         eax,ebx
>00488B63    je          00488B7C
 00488B65    push        ebx
 00488B66    lea         eax,[ebp-4]
 00488B69    mov         ecx,1
 00488B6E    mov         edx,dword ptr ds:[488620];:TWinControl.:1
 00488B74    call        @DynArraySetLength
 00488B79    add         esp,4
 00488B7C    dec         dword ptr [ebp-10]
 00488B7F    cmp         dword ptr [ebp-10],0FFFFFFFF
>00488B83    jne         00488AAE
 00488B89    xor         eax,eax
 00488B8B    pop         edx
 00488B8C    pop         ecx
 00488B8D    pop         ecx
 00488B8E    mov         dword ptr fs:[eax],edx
 00488B91    push        488BCD
 00488B96    mov         eax,dword ptr [ebp+8]
 00488B99    mov         eax,dword ptr [eax-14]
 00488B9C    mov         edx,dword ptr [eax]
 00488B9E    call        dword ptr [edx+8]
 00488BA1    mov         eax,dword ptr [ebp+8]
 00488BA4    mov         eax,dword ptr [eax-4]
 00488BA7    mov         eax,dword ptr [eax+1A8]
 00488BAD    mov         edx,dword ptr [ebp+8]
 00488BB0    mov         edx,dword ptr [edx-14]
 00488BB3    mov         ecx,dword ptr [ebp+8]
 00488BB6    mov         ecx,dword ptr [ecx-4]
 00488BB9    mov         dword ptr [ecx+1A8],edx
 00488BBF    mov         edx,dword ptr [ebp+8]
 00488BC2    mov         dword ptr [edx-14],eax
 00488BC5    ret
>00488BC6    jmp         @HandleFinally
>00488BCB    jmp         00488B96
 00488BCD    mov         eax,dword ptr [ebp+8]
 00488BD0    mov         eax,dword ptr [eax-14]
 00488BD3    cmp         dword ptr [eax+8],0
>00488BD7    jne         00488A8A
 00488BDD    xor         eax,eax
 00488BDF    pop         edx
 00488BE0    pop         ecx
 00488BE1    pop         ecx
 00488BE2    mov         dword ptr fs:[eax],edx
 00488BE5    push        488C0A
 00488BEA    mov         eax,dword ptr [ebp+8]
 00488BED    mov         eax,dword ptr [eax-4]
 00488BF0    add         eax,1A8
 00488BF5    mov         edx,dword ptr [eax]
 00488BF7    xor         ecx,ecx
 00488BF9    mov         dword ptr [eax],ecx
 00488BFB    mov         eax,edx
 00488BFD    call        TObject.Free
 00488C02    ret
>00488C03    jmp         @HandleFinally
>00488C08    jmp         00488BEA
 00488C0A    mov         eax,dword ptr [ebp-8]
 00488C0D    mov         eax,dword ptr [eax+8]
 00488C10    dec         eax
 00488C11    cmp         eax,0
>00488C14    jl          00488C45
 00488C16    mov         dword ptr [ebp-10],eax
 00488C19    mov         edx,dword ptr [ebp-10]
 00488C1C    mov         eax,dword ptr [ebp-8]
 00488C1F    call        TList.Get
 00488C24    mov         dword ptr [ebp-0C],eax
 00488C27    mov         eax,dword ptr [ebp-0C]
 00488C2A    test        byte ptr [eax+1C],1
>00488C2E    jne         00488C3C
 00488C30    mov         eax,dword ptr [ebp-0C]
 00488C33    mov         si,0FFD0
 00488C37    call        @CallDynaInst
 00488C3C    dec         dword ptr [ebp-10]
 00488C3F    cmp         dword ptr [ebp-10],0FFFFFFFF
>00488C43    jne         00488C19
 00488C45    xor         eax,eax
 00488C47    pop         edx
 00488C48    pop         ecx
 00488C49    pop         ecx
 00488C4A    mov         dword ptr fs:[eax],edx
 00488C4D    push        488C62
 00488C52    mov         eax,dword ptr [ebp-8]
 00488C55    call        TObject.Free
 00488C5A    ret
>00488C5B    jmp         @HandleFinally
>00488C60    jmp         00488C52
 00488C62    xor         eax,eax
 00488C64    pop         edx
 00488C65    pop         ecx
 00488C66    pop         ecx
 00488C67    mov         dword ptr fs:[eax],edx
 00488C6A    push        488C85
 00488C6F    lea         eax,[ebp-4]
 00488C72    mov         edx,dword ptr ds:[488620];:TWinControl.:1
 00488C78    call        @DynArrayClear
 00488C7D    ret
>00488C7E    jmp         @HandleFinally
>00488C83    jmp         00488C6F
 00488C85    pop         esi
 00488C86    pop         ebx
 00488C87    mov         esp,ebp
 00488C89    pop         ebp
 00488C8A    ret
*}
end;

//00488C8C
procedure DoAdjustSize;
begin
{*
 00488C8C    push        ebp
 00488C8D    mov         ebp,esp
 00488C8F    add         esp,0FFFFFFE8
 00488C92    push        esi
 00488C93    mov         esi,dword ptr [ebp+8]
 00488C96    add         esi,0FFFFFFFC
 00488C99    mov         eax,dword ptr [esi]
 00488C9B    call        TWinControl.GetHandle
 00488CA0    push        eax
 00488CA1    call        user32.IsZoomed
 00488CA6    test        eax,eax
>00488CA8    je          00488D48
 00488CAE    mov         eax,dword ptr [esi]
 00488CB0    call        TWinControl.GetHandle
 00488CB5    push        eax
 00488CB6    call        user32.GetParent
 00488CBB    test        eax,eax
>00488CBD    jne         00488D48
 00488CC3    lea         eax,[ebp-18]
 00488CC6    push        eax
 00488CC7    mov         eax,dword ptr [esi]
 00488CC9    call        TWinControl.GetHandle
 00488CCE    push        eax
 00488CCF    call        user32.GetWindowRect
 00488CD4    mov         eax,dword ptr [esi]
 00488CD6    mov         eax,dword ptr [eax+48]
 00488CD9    mov         dword ptr [ebp-4],eax
 00488CDC    mov         eax,dword ptr [esi]
 00488CDE    mov         eax,dword ptr [eax+4C]
 00488CE1    mov         dword ptr [ebp-8],eax
 00488CE4    lea         ecx,[ebp-8]
 00488CE7    lea         edx,[ebp-4]
 00488CEA    mov         eax,dword ptr [esi]
 00488CEC    call        TControl.CheckNewSize
 00488CF1    mov         eax,dword ptr [esi]
 00488CF3    mov         eax,dword ptr [eax+48]
 00488CF6    mov         edx,dword ptr [ebp-10]
 00488CF9    sub         edx,dword ptr [ebp-18]
 00488CFC    cmp         eax,edx
>00488CFE    jne         00488D1E
 00488D00    mov         edx,dword ptr [esi]
 00488D02    mov         edx,dword ptr [edx+4C]
 00488D05    mov         ecx,dword ptr [ebp-0C]
 00488D08    sub         ecx,dword ptr [ebp-14]
 00488D0B    cmp         edx,ecx
>00488D0D    jne         00488D1E
 00488D0F    cmp         eax,dword ptr [ebp-4]
>00488D12    jne         00488D1E
 00488D14    mov         eax,dword ptr [esi]
 00488D16    mov         eax,dword ptr [eax+4C]
 00488D19    cmp         eax,dword ptr [ebp-8]
>00488D1C    je          00488D3F
 00488D1E    push        16
 00488D20    mov         eax,dword ptr [esi]
 00488D22    mov         eax,dword ptr [eax+4C]
 00488D25    push        eax
 00488D26    mov         eax,dword ptr [esi]
 00488D28    mov         eax,dword ptr [eax+48]
 00488D2B    push        eax
 00488D2C    push        0
 00488D2E    push        0
 00488D30    push        0
 00488D32    mov         eax,dword ptr [esi]
 00488D34    call        TWinControl.GetHandle
 00488D39    push        eax
 00488D3A    call        user32.SetWindowPos
 00488D3F    mov         eax,dword ptr [esi]
 00488D41    mov         edx,dword ptr [eax]
 00488D43    call        dword ptr [edx+68]
>00488D46    jmp         00488D53
 00488D48    mov         eax,dword ptr [esi]
 00488D4A    mov         si,0FFEF
 00488D4E    call        @CallDynaInst
 00488D53    pop         esi
 00488D54    mov         esp,ebp
 00488D56    pop         ebp
 00488D57    ret
*}
end;

//00488D58
procedure TWinControl.AlignControls(AControl:TControl; var Rect:TRect);
begin
{*
 00488D58    push        ebp
 00488D59    mov         ebp,esp
 00488D5B    add         esp,0FFFFFFE8
 00488D5E    push        esi
 00488D5F    mov         dword ptr [ebp-8],ecx
 00488D62    mov         dword ptr [ebp-10],edx
 00488D65    mov         dword ptr [ebp-4],eax
 00488D68    mov         eax,dword ptr [ebp-4]
 00488D6B    cmp         byte ptr [eax+1EC],0
>00488D72    je          00488D9C
 00488D74    mov         eax,dword ptr [ebp-4]
 00488D77    cmp         byte ptr [eax+1EB],0
>00488D7E    je          00488D9C
 00488D80    mov         eax,dword ptr [ebp-4]
 00488D83    cmp         dword ptr [eax+1C8],0
>00488D8A    je          00488D9C
 00488D8C    mov         eax,dword ptr [ebp-4]
 00488D8F    mov         eax,dword ptr [eax+1C8]
 00488D95    xor         edx,edx
 00488D97    mov         ecx,dword ptr [eax]
 00488D99    call        dword ptr [ecx+2C]
 00488D9C    push        ebp
 00488D9D    call        AlignWork
 00488DA2    pop         ecx
 00488DA3    test        al,al
>00488DA5    je          00488F13
 00488DAB    mov         byte ptr [ebp-15],0
 00488DAF    xor         eax,eax
 00488DB1    mov         dword ptr [ebp-14],eax
 00488DB4    xor         edx,edx
 00488DB6    push        ebp
 00488DB7    push        488F0C
 00488DBC    push        dword ptr fs:[edx]
 00488DBF    mov         dword ptr fs:[edx],esp
 00488DC2    mov         eax,dword ptr [ebp-4]
 00488DC5    cmp         dword ptr [eax+1A8],0
>00488DCC    jne         00488E11
 00488DCE    mov         eax,dword ptr [ebp-4]
 00488DD1    mov         eax,dword ptr [eax+34]
 00488DD4    test        eax,eax
>00488DD6    je          00488DF6
 00488DD8    cmp         dword ptr [eax+1A8],0
>00488DDF    je          00488DF6
 00488DE1    mov         byte ptr [ebp-15],1
 00488DE5    mov         eax,dword ptr [eax+1A8]
 00488DEB    mov         edx,dword ptr [ebp-4]
 00488DEE    mov         dword ptr [edx+1A8],eax
>00488DF4    jmp         00488E11
 00488DF6    mov         dl,1
 00488DF8    mov         eax,[00439644];TList
 00488DFD    call        TObject.Create
 00488E02    mov         dword ptr [ebp-14],eax
 00488E05    mov         eax,dword ptr [ebp-4]
 00488E08    mov         edx,dword ptr [ebp-14]
 00488E0B    mov         dword ptr [eax+1A8],edx
 00488E11    mov         edx,dword ptr [ebp-8]
 00488E14    mov         eax,dword ptr [ebp-4]
 00488E17    mov         ecx,dword ptr [eax]
 00488E19    call        dword ptr [ecx+0A0]
 00488E1F    mov         dl,1
 00488E21    mov         eax,[00439644];TList
 00488E26    call        TObject.Create
 00488E2B    mov         dword ptr [ebp-0C],eax
 00488E2E    xor         eax,eax
 00488E30    push        ebp
 00488E31    push        488E9D
 00488E36    push        dword ptr fs:[eax]
 00488E39    mov         dword ptr fs:[eax],esp
 00488E3C    push        ebp
 00488E3D    mov         al,1
 00488E3F    call        DoAlign
 00488E44    pop         ecx
 00488E45    push        ebp
 00488E46    mov         al,2
 00488E48    call        DoAlign
 00488E4D    pop         ecx
 00488E4E    push        ebp
 00488E4F    mov         al,3
 00488E51    call        DoAlign
 00488E56    pop         ecx
 00488E57    push        ebp
 00488E58    mov         al,4
 00488E5A    call        DoAlign
 00488E5F    pop         ecx
 00488E60    push        ebp
 00488E61    mov         al,5
 00488E63    call        DoAlign
 00488E68    pop         ecx
 00488E69    push        ebp
 00488E6A    mov         al,6
 00488E6C    call        DoAlign
 00488E71    pop         ecx
 00488E72    push        ebp
 00488E73    xor         eax,eax
 00488E75    call        DoAlign
 00488E7A    pop         ecx
 00488E7B    mov         eax,dword ptr [ebp-4]
 00488E7E    mov         si,0FFC6
 00488E82    call        @CallDynaInst
 00488E87    xor         eax,eax
 00488E89    pop         edx
 00488E8A    pop         ecx
 00488E8B    pop         ecx
 00488E8C    mov         dword ptr fs:[eax],edx
 00488E8F    push        488EA4
 00488E94    mov         eax,dword ptr [ebp-0C]
 00488E97    call        TObject.Free
 00488E9C    ret
>00488E9D    jmp         @HandleFinally
>00488EA2    jmp         00488E94
 00488EA4    mov         eax,dword ptr [ebp-4]
 00488EA7    cmp         byte ptr [eax+1EA],0
>00488EAE    je          00488EB7
 00488EB0    push        ebp
 00488EB1    call        DoAdjustSize
 00488EB6    pop         ecx
 00488EB7    cmp         dword ptr [ebp-14],0
>00488EBB    je          00488ECD
 00488EBD    mov         eax,dword ptr [ebp-14]
 00488EC0    cmp         dword ptr [eax+8],0
>00488EC4    jle         00488ECD
 00488EC6    push        ebp
 00488EC7    call        AlignNestedControls
 00488ECC    pop         ecx
 00488ECD    xor         eax,eax
 00488ECF    pop         edx
 00488ED0    pop         ecx
 00488ED1    pop         ecx
 00488ED2    mov         dword ptr fs:[eax],edx
 00488ED5    push        488F2F
 00488EDA    cmp         dword ptr [ebp-14],0
>00488EDE    je          00488EFA
 00488EE0    mov         eax,dword ptr [ebp-4]
 00488EE3    xor         edx,edx
 00488EE5    mov         dword ptr [eax+1A8],edx
 00488EEB    mov         eax,dword ptr [ebp-14]
 00488EEE    xor         edx,edx
 00488EF0    mov         dword ptr [ebp-14],edx
 00488EF3    call        TObject.Free
>00488EF8    jmp         00488F0B
 00488EFA    cmp         byte ptr [ebp-15],0
>00488EFE    je          00488F0B
 00488F00    mov         eax,dword ptr [ebp-4]
 00488F03    xor         edx,edx
 00488F05    mov         dword ptr [eax+1A8],edx
 00488F0B    ret
>00488F0C    jmp         @HandleFinally
>00488F11    jmp         00488EDA
 00488F13    mov         eax,dword ptr [ebp-4]
 00488F16    cmp         byte ptr [eax+5E],0
>00488F1A    je          00488F2F
 00488F1C    mov         eax,dword ptr [ebp-4]
 00488F1F    cmp         byte ptr [eax+1EA],0
>00488F26    je          00488F2F
 00488F28    push        ebp
 00488F29    call        DoAdjustSize
 00488F2E    pop         ecx
 00488F2F    pop         esi
 00488F30    mov         esp,ebp
 00488F32    pop         ebp
 00488F33    ret
*}
end;

//00488F34
procedure TWinControl.AlignControl(AControl:TControl);
begin
{*
 00488F34    push        ebp
 00488F35    mov         ebp,esp
 00488F37    add         esp,0FFFFFFEC
 00488F3A    push        ebx
 00488F3B    push        esi
 00488F3C    mov         esi,edx
 00488F3E    mov         dword ptr [ebp-4],eax
 00488F41    mov         eax,dword ptr [ebp-4]
 00488F44    call        TWinControl.HandleAllocated
 00488F49    test        al,al
>00488F4B    je          00488FC1
 00488F4D    mov         eax,dword ptr [ebp-4]
 00488F50    test        byte ptr [eax+1C],8
>00488F54    jne         00488FC1
 00488F56    mov         eax,dword ptr [ebp-4]
 00488F59    cmp         word ptr [eax+1AC],0
>00488F61    je          00488F6C
 00488F63    mov         eax,dword ptr [ebp-4]
 00488F66    or          dword ptr [eax+54],10
>00488F6A    jmp         00488FC1
 00488F6C    mov         eax,dword ptr [ebp-4]
 00488F6F    call        TWinControl.DisableAlign
 00488F74    xor         eax,eax
 00488F76    push        ebp
 00488F77    push        488FBA
 00488F7C    push        dword ptr fs:[eax]
 00488F7F    mov         dword ptr fs:[eax],esp
 00488F82    lea         edx,[ebp-14]
 00488F85    mov         eax,dword ptr [ebp-4]
 00488F88    mov         ecx,dword ptr [eax]
 00488F8A    call        dword ptr [ecx+54]
 00488F8D    lea         ecx,[ebp-14]
 00488F90    mov         edx,esi
 00488F92    mov         eax,dword ptr [ebp-4]
 00488F95    mov         ebx,dword ptr [eax]
 00488F97    call        dword ptr [ebx+0A4]
 00488F9D    xor         eax,eax
 00488F9F    pop         edx
 00488FA0    pop         ecx
 00488FA1    pop         ecx
 00488FA2    mov         dword ptr fs:[eax],edx
 00488FA5    push        488FC1
 00488FAA    mov         eax,dword ptr [ebp-4]
 00488FAD    and         dword ptr [eax+54],0FFFFFFEF
 00488FB1    mov         eax,dword ptr [ebp-4]
 00488FB4    call        TWinControl.EnableAlign
 00488FB9    ret
>00488FBA    jmp         @HandleFinally
>00488FBF    jmp         00488FAA
 00488FC1    pop         esi
 00488FC2    pop         ebx
 00488FC3    mov         esp,ebp
 00488FC5    pop         ebp
 00488FC6    ret
*}
end;

//00488FC8
procedure TWinControl.DisableAlign;
begin
{*
 00488FC8    inc         word ptr [eax+1AC]
 00488FCF    ret
*}
end;

//00488FD0
procedure TWinControl.EnableAlign;
begin
{*
 00488FD0    dec         word ptr [eax+1AC]
 00488FD7    cmp         word ptr [eax+1AC],0
>00488FDF    jne         00488FEC
 00488FE1    test        byte ptr [eax+54],10
>00488FE5    je          00488FEC
 00488FE7    call        TWinControl.Realign
 00488FEC    ret
*}
end;

//00488FF0
procedure TWinControl.Realign;
begin
{*
 00488FF0    xor         edx,edx
 00488FF2    call        TWinControl.AlignControl
 00488FF7    ret
*}
end;

//00488FF8
procedure TWinControl.DoFlipChildren;
begin
{*
 00488FF8    push        ebp
 00488FF9    mov         ebp,esp
 00488FFB    add         esp,0FFFFFFF4
 00488FFE    push        ebx
 00488FFF    push        esi
 00489000    push        edi
 00489001    mov         dword ptr [ebp-4],eax
 00489004    mov         dl,1
 00489006    mov         eax,[00439644];TList
 0048900B    call        TObject.Create
 00489010    mov         dword ptr [ebp-0C],eax
 00489013    xor         eax,eax
 00489015    push        ebp
 00489016    push        4890BD
 0048901B    push        dword ptr fs:[eax]
 0048901E    mov         dword ptr fs:[eax],esp
 00489021    mov         eax,dword ptr [ebp-4]
 00489024    call        TControl.GetClientWidth
 00489029    mov         dword ptr [ebp-8],eax
 0048902C    mov         eax,dword ptr [ebp-4]
 0048902F    call        TWinControl.GetControlCount
 00489034    mov         ebx,eax
 00489036    dec         ebx
 00489037    test        ebx,ebx
>00489039    jl          0048907D
 0048903B    inc         ebx
 0048903C    xor         esi,esi
 0048903E    mov         edx,esi
 00489040    mov         eax,dword ptr [ebp-4]
 00489043    call        TWinControl.GetControl
 00489048    mov         edi,eax
 0048904A    mov         eax,dword ptr [edi+4]
 0048904D    mov         edx,dword ptr [ebp-4]
 00489050    cmp         eax,dword ptr [edx+4]
>00489053    jne         00489079
 00489055    mov         edx,esi
 00489057    mov         eax,dword ptr [ebp-4]
 0048905A    call        TWinControl.GetControl
 0048905F    mov         edx,eax
 00489061    mov         eax,dword ptr [ebp-0C]
 00489064    call        TList.Add
 00489069    mov         edx,dword ptr [ebp-8]
 0048906C    sub         edx,dword ptr [edi+48]
 0048906F    sub         edx,dword ptr [edi+40]
 00489072    mov         eax,edi
 00489074    call        TControl.SetLeft
 00489079    inc         esi
 0048907A    dec         ebx
>0048907B    jne         0048903E
 0048907D    mov         eax,dword ptr [ebp-0C]
 00489080    mov         ebx,dword ptr [eax+8]
 00489083    dec         ebx
 00489084    test        ebx,ebx
>00489086    jl          004890A7
 00489088    inc         ebx
 00489089    xor         esi,esi
 0048908B    push        0
 0048908D    mov         edx,esi
 0048908F    mov         eax,dword ptr [ebp-0C]
 00489092    call        TList.Get
 00489097    xor         ecx,ecx
 00489099    mov         edx,0B03E
 0048909E    call        TControl.Perform
 004890A3    inc         esi
 004890A4    dec         ebx
>004890A5    jne         0048908B
 004890A7    xor         eax,eax
 004890A9    pop         edx
 004890AA    pop         ecx
 004890AB    pop         ecx
 004890AC    mov         dword ptr fs:[eax],edx
 004890AF    push        4890C4
 004890B4    mov         eax,dword ptr [ebp-0C]
 004890B7    call        TObject.Free
 004890BC    ret
>004890BD    jmp         @HandleFinally
>004890C2    jmp         004890B4
 004890C4    pop         edi
 004890C5    pop         esi
 004890C6    pop         ebx
 004890C7    mov         esp,ebp
 004890C9    pop         ebp
 004890CA    ret
*}
end;

//004890CC
procedure TWinControl.FlipChildren(AllLevels:Boolean);
begin
{*
 004890CC    push        ebp
 004890CD    mov         ebp,esp
 004890CF    add         esp,0FFFFFFF4
 004890D2    push        ebx
 004890D3    push        esi
 004890D4    push        edi
 004890D5    mov         byte ptr [ebp-5],dl
 004890D8    mov         dword ptr [ebp-4],eax
 004890DB    mov         eax,dword ptr [ebp-4]
 004890DE    call        TWinControl.GetControlCount
 004890E3    test        eax,eax
>004890E5    je          0048920D
 004890EB    mov         dl,1
 004890ED    mov         eax,[00439644];TList
 004890F2    call        TObject.Create
 004890F7    mov         dword ptr [ebp-0C],eax
 004890FA    mov         eax,dword ptr [ebp-4]
 004890FD    inc         word ptr [eax+1AC]
 00489104    xor         edx,edx
 00489106    push        ebp
 00489107    push        4891BC
 0048910C    push        dword ptr fs:[edx]
 0048910F    mov         dword ptr fs:[edx],esp
 00489112    mov         eax,dword ptr [ebp-4]
 00489115    call        TWinControl.GetControlCount
 0048911A    mov         edi,eax
 0048911C    dec         edi
 0048911D    test        edi,edi
>0048911F    jl          00489150
 00489121    inc         edi
 00489122    xor         ebx,ebx
 00489124    mov         edx,ebx
 00489126    mov         eax,dword ptr [ebp-4]
 00489129    call        TWinControl.GetControl
 0048912E    movzx       eax,byte ptr [eax+5D]
 00489132    add         al,0FD
 00489134    sub         al,2
>00489136    jae         0048914C
 00489138    mov         edx,ebx
 0048913A    mov         eax,dword ptr [ebp-4]
 0048913D    call        TWinControl.GetControl
 00489142    mov         edx,eax
 00489144    mov         eax,dword ptr [ebp-0C]
 00489147    call        TList.Add
 0048914C    inc         ebx
 0048914D    dec         edi
>0048914E    jne         00489124
 00489150    mov         eax,dword ptr [ebp-4]
 00489153    mov         si,0FFBF
 00489157    call        @CallDynaInst
 0048915C    xor         eax,eax
 0048915E    pop         edx
 0048915F    pop         ecx
 00489160    pop         ecx
 00489161    mov         dword ptr fs:[eax],edx
 00489164    push        4891C3
>00489169    jmp         004891A1
 0048916B    mov         edx,esi
 0048916D    dec         edx
 0048916E    mov         eax,dword ptr [ebp-0C]
 00489171    call        TList.Get
 00489176    mov         ebx,eax
 00489178    cmp         byte ptr [ebx+5D],3
>0048917C    jne         00489189
 0048917E    mov         dl,4
 00489180    mov         eax,ebx
 00489182    call        TControl.SetAlign
>00489187    jmp         00489192
 00489189    mov         dl,3
 0048918B    mov         eax,ebx
 0048918D    call        TControl.SetAlign
 00489192    mov         eax,dword ptr [ebp-0C]
 00489195    mov         edx,dword ptr [eax+8]
 00489198    dec         edx
 00489199    mov         eax,dword ptr [ebp-0C]
 0048919C    call        TList.Delete
 004891A1    mov         eax,dword ptr [ebp-0C]
 004891A4    mov         esi,dword ptr [eax+8]
 004891A7    test        esi,esi
>004891A9    jg          0048916B
 004891AB    mov         eax,dword ptr [ebp-0C]
 004891AE    call        TObject.Free
 004891B3    mov         eax,dword ptr [ebp-4]
 004891B6    call        TWinControl.EnableAlign
 004891BB    ret
>004891BC    jmp         @HandleFinally
>004891C1    jmp         004891A1
 004891C3    cmp         byte ptr [ebp-5],0
>004891C7    je          0048920D
 004891C9    mov         eax,dword ptr [ebp-4]
 004891CC    call        TWinControl.GetControlCount
 004891D1    mov         edi,eax
 004891D3    dec         edi
 004891D4    test        edi,edi
>004891D6    jl          0048920D
 004891D8    inc         edi
 004891D9    xor         ebx,ebx
 004891DB    mov         edx,ebx
 004891DD    mov         eax,dword ptr [ebp-4]
 004891E0    call        TWinControl.GetControl
 004891E5    mov         edx,dword ptr ds:[47C4E8];TWinControl
 004891EB    call        @IsClass
 004891F0    test        al,al
>004891F2    je          00489209
 004891F4    mov         edx,ebx
 004891F6    mov         eax,dword ptr [ebp-4]
 004891F9    call        TWinControl.GetControl
 004891FE    mov         dl,1
 00489200    mov         si,0FFB4
 00489204    call        @CallDynaInst
 00489209    inc         ebx
 0048920A    dec         edi
>0048920B    jne         004891DB
 0048920D    pop         edi
 0048920E    pop         esi
 0048920F    pop         ebx
 00489210    mov         esp,ebp
 00489212    pop         ebp
 00489213    ret
*}
end;

//00489214
function TWinControl.ContainsControl(Control:TControl):Boolean;
begin
{*
>00489214    jmp         00489219
 00489216    mov         edx,dword ptr [edx+34]
 00489219    test        edx,edx
>0048921B    je          00489221
 0048921D    cmp         eax,edx
>0048921F    jne         00489216
 00489221    test        edx,edx
 00489223    setne       al
 00489226    ret
*}
end;

//00489228
procedure TWinControl.RemoveFocus(Removing:Boolean);
begin
{*
 00489228    push        ebx
 00489229    push        esi
 0048922A    mov         ebx,edx
 0048922C    mov         esi,eax
 0048922E    mov         dl,1
 00489230    mov         eax,esi
 00489232    call        GetParentForm
 00489237    test        eax,eax
>00489239    je          00489244
 0048923B    mov         ecx,ebx
 0048923D    mov         edx,esi
 0048923F    call        TCustomForm.DefocusControl
 00489244    pop         esi
 00489245    pop         ebx
 00489246    ret
*}
end;

//00489248
procedure TWinControl.Insert(AControl:TControl);
begin
{*
 00489248    push        ebx
 00489249    push        esi
 0048924A    mov         ebx,edx
 0048924C    mov         esi,eax
 0048924E    test        ebx,ebx
>00489250    je          0048928F
 00489252    mov         eax,ebx
 00489254    mov         edx,dword ptr ds:[47C4E8];TWinControl
 0048925A    call        @IsClass
 0048925F    test        al,al
>00489261    je          0048927F
 00489263    lea         eax,[esi+1E0]
 00489269    mov         edx,ebx
 0048926B    call        ListAdd
 00489270    lea         eax,[esi+1D8]
 00489276    mov         edx,ebx
 00489278    call        ListAdd
>0048927D    jmp         0048928C
 0048927F    lea         eax,[esi+1DC]
 00489285    mov         edx,ebx
 00489287    call        ListAdd
 0048928C    mov         dword ptr [ebx+34],esi
 0048928F    pop         esi
 00489290    pop         ebx
 00489291    ret
*}
end;

//00489294
procedure TWinControl.Remove(AControl:TControl);
begin
{*
 00489294    push        ebx
 00489295    push        esi
 00489296    mov         ebx,edx
 00489298    mov         esi,eax
 0048929A    mov         eax,ebx
 0048929C    mov         edx,dword ptr ds:[47C4E8];TWinControl
 004892A2    call        @IsClass
 004892A7    test        al,al
>004892A9    je          004892C7
 004892AB    lea         eax,[esi+1D8]
 004892B1    mov         edx,ebx
 004892B3    call        ListRemove
 004892B8    lea         eax,[esi+1E0]
 004892BE    mov         edx,ebx
 004892C0    call        ListRemove
>004892C5    jmp         004892D4
 004892C7    lea         eax,[esi+1DC]
 004892CD    mov         edx,ebx
 004892CF    call        ListRemove
 004892D4    xor         eax,eax
 004892D6    mov         dword ptr [ebx+34],eax
 004892D9    pop         esi
 004892DA    pop         ebx
 004892DB    ret
*}
end;

//004892DC
procedure TWinControl.InsertControl(AControl:TControl);
begin
{*
 004892DC    push        ebx
 004892DD    push        esi
 004892DE    push        edi
 004892DF    add         esp,0FFFFFFF8
 004892E2    mov         ebx,edx
 004892E4    mov         edi,eax
 004892E6    mov         edx,edi
 004892E8    mov         eax,ebx
 004892EA    mov         si,0FFF5
 004892EE    call        @CallDynaInst
 004892F3    mov         dword ptr [esp],ebx
 004892F6    mov         dword ptr [esp+4],edi
 004892FA    push        1
 004892FC    lea         ecx,[esp+4]
 00489300    mov         edx,0B04C
 00489305    mov         eax,edi
 00489307    call        TControl.Perform
 0048930C    cmp         edi,dword ptr [esp+4]
>00489310    jne         004893F3
 00489316    push        1
 00489318    mov         esi,ebx
 0048931A    mov         ecx,esi
 0048931C    mov         edx,0B02C
 00489321    mov         eax,edi
 00489323    call        TControl.Perform
 00489328    mov         edx,ebx
 0048932A    mov         eax,edi
 0048932C    call        TWinControl.Insert
 00489331    test        byte ptr [ebx+1C],2
>00489335    jne         004893E3
 0048933B    push        0
 0048933D    xor         ecx,ecx
 0048933F    mov         edx,0B009
 00489344    mov         eax,ebx
 00489346    call        TControl.Perform
 0048934B    push        0
 0048934D    xor         ecx,ecx
 0048934F    mov         edx,0B008
 00489354    mov         eax,ebx
 00489356    call        TControl.Perform
 0048935B    push        0
 0048935D    xor         ecx,ecx
 0048935F    mov         edx,0B023
 00489364    mov         eax,ebx
 00489366    call        TControl.Perform
 0048936B    push        0
 0048936D    xor         ecx,ecx
 0048936F    mov         edx,0B03D
 00489374    mov         eax,ebx
 00489376    call        TControl.Perform
 0048937B    push        0
 0048937D    xor         ecx,ecx
 0048937F    mov         edx,0B050
 00489384    mov         eax,ebx
 00489386    call        TControl.Perform
 0048938B    push        0
 0048938D    xor         ecx,ecx
 0048938F    mov         edx,0B058
 00489394    mov         eax,ebx
 00489396    call        TControl.Perform
 0048939B    mov         eax,ebx
 0048939D    mov         edx,dword ptr ds:[47C4E8];TWinControl
 004893A3    call        @IsClass
 004893A8    test        al,al
>004893AA    je          004893C5
 004893AC    push        0
 004893AE    xor         ecx,ecx
 004893B0    mov         edx,0B011
 004893B5    mov         eax,ebx
 004893B7    call        TControl.Perform
 004893BC    mov         eax,edi
 004893BE    call        TWinControl.UpdateControlState
>004893C3    jmp         004893DA
 004893C5    mov         eax,edi
 004893C7    call        TWinControl.HandleAllocated
 004893CC    test        al,al
>004893CE    je          004893DA
 004893D0    mov         eax,ebx
 004893D2    mov         edx,dword ptr [eax]
 004893D4    call        dword ptr [edx+90]
 004893DA    mov         edx,ebx
 004893DC    mov         eax,edi
 004893DE    call        TWinControl.AlignControl
 004893E3    push        1
 004893E5    mov         ecx,esi
 004893E7    mov         edx,0B036
 004893EC    mov         eax,edi
 004893EE    call        TControl.Perform
 004893F3    pop         ecx
 004893F4    pop         edx
 004893F5    pop         edi
 004893F6    pop         esi
 004893F7    pop         ebx
 004893F8    ret
*}
end;

//004893FC
procedure TWinControl.RemoveControl(AControl:TControl);
begin
{*
 004893FC    push        ebx
 004893FD    push        esi
 004893FE    push        edi
 004893FF    push        ebp
 00489400    add         esp,0FFFFFFF8
 00489403    mov         esi,edx
 00489405    mov         ebx,eax
 00489407    mov         dword ptr [esp],esi
 0048940A    mov         dword ptr [esp+4],ebx
 0048940E    push        0
 00489410    mov         edi,esi
 00489412    mov         ecx,edi
 00489414    mov         edx,0B036
 00489419    mov         eax,ebx
 0048941B    call        TControl.Perform
 00489420    mov         eax,esi
 00489422    mov         edx,dword ptr ds:[47C4E8];TWinControl
 00489428    call        @IsClass
 0048942D    test        al,al
>0048942F    je          00489448
 00489431    mov         dl,1
 00489433    mov         ebp,esi
 00489435    mov         eax,ebp
 00489437    call        TWinControl.RemoveFocus
 0048943C    mov         eax,ebp
 0048943E    mov         edx,dword ptr [eax]
 00489440    call        dword ptr [edx+0C0]
>00489446    jmp         00489460
 00489448    mov         eax,ebx
 0048944A    call        TWinControl.HandleAllocated
 0048944F    test        al,al
>00489451    je          00489460
 00489453    xor         ecx,ecx
 00489455    movzx       edx,byte ptr [esi+59]
 00489459    mov         eax,esi
 0048945B    call        TControl.InvalidateControl
 00489460    mov         edx,esi
 00489462    mov         eax,ebx
 00489464    call        TWinControl.Remove
 00489469    push        0
 0048946B    mov         ecx,edi
 0048946D    mov         edx,0B02C
 00489472    mov         eax,ebx
 00489474    call        TControl.Perform
 00489479    push        0
 0048947B    lea         ecx,[esp+4]
 0048947F    mov         edx,0B04C
 00489484    mov         eax,ebx
 00489486    call        TControl.Perform
 0048948B    xor         edx,edx
 0048948D    mov         eax,ebx
 0048948F    call        TWinControl.AlignControl
 00489494    pop         ecx
 00489495    pop         edx
 00489496    pop         ebp
 00489497    pop         edi
 00489498    pop         esi
 00489499    pop         ebx
 0048949A    ret
*}
end;

//0048949C
function TWinControl.GetControl(Index:Integer):TControl;
begin
{*
 0048949C    push        ebx
 0048949D    push        esi
 0048949E    push        edi
 0048949F    push        ebp
 004894A0    mov         edi,edx
 004894A2    mov         ebx,eax
 004894A4    mov         ebp,dword ptr [ebx+1DC]
 004894AA    test        ebp,ebp
>004894AC    je          004894B3
 004894AE    mov         esi,dword ptr [ebp+8]
>004894B1    jmp         004894B5
 004894B3    xor         esi,esi
 004894B5    cmp         esi,edi
>004894B7    jle         004894C4
 004894B9    mov         edx,edi
 004894BB    mov         eax,ebp
 004894BD    call        TList.Get
>004894C2    jmp         004894D3
 004894C4    mov         edx,edi
 004894C6    sub         edx,esi
 004894C8    mov         eax,dword ptr [ebx+1E0]
 004894CE    call        TList.Get
 004894D3    pop         ebp
 004894D4    pop         edi
 004894D5    pop         esi
 004894D6    pop         ebx
 004894D7    ret
*}
end;

//004894D8
function TWinControl.GetControlCount:Integer;
begin
{*
 004894D8    xor         edx,edx
 004894DA    mov         ecx,dword ptr [eax+1DC]
 004894E0    test        ecx,ecx
>004894E2    je          004894E7
 004894E4    add         edx,dword ptr [ecx+8]
 004894E7    mov         ecx,dword ptr [eax+1E0]
 004894ED    test        ecx,ecx
>004894EF    je          004894F4
 004894F1    add         edx,dword ptr [ecx+8]
 004894F4    mov         eax,edx
 004894F6    ret
*}
end;

//004894F8
{*procedure TWinControl.Broadcast(var Message:?);
begin
 004894F8    push        ebx
 004894F9    push        esi
 004894FA    push        edi
 004894FB    push        ebp
 004894FC    push        ecx
 004894FD    mov         esi,edx
 004894FF    mov         dword ptr [esp],eax
 00489502    mov         eax,dword ptr [esp]
 00489505    call        TWinControl.GetControlCount
 0048950A    mov         ebx,eax
 0048950C    dec         ebx
 0048950D    test        ebx,ebx
>0048950F    jl          00489532
 00489511    inc         ebx
 00489512    xor         edi,edi
 00489514    mov         edx,edi
 00489516    mov         eax,dword ptr [esp]
 00489519    call        TWinControl.GetControl
 0048951E    mov         ebp,eax
 00489520    mov         edx,esi
 00489522    mov         eax,dword ptr [ebp+3C]
 00489525    call        dword ptr [ebp+38]
 00489528    cmp         dword ptr [esi+0C],0
>0048952C    jne         00489532
 0048952E    inc         edi
 0048952F    dec         ebx
>00489530    jne         00489514
 00489532    pop         edx
 00489533    pop         ebp
 00489534    pop         edi
 00489535    pop         esi
 00489536    pop         ebx
 00489537    ret
end;*}

//00489538
procedure TWinControl.Notification(AComponent:TComponent; Operation:TOperation);
begin
{*
 00489538    push        ebx
 00489539    push        esi
 0048953A    push        edi
 0048953B    mov         ebx,ecx
 0048953D    mov         esi,edx
 0048953F    mov         edi,eax
 00489541    mov         ecx,ebx
 00489543    mov         edx,esi
 00489545    mov         eax,edi
 00489547    call        TControl.Notification
 0048954C    cmp         esi,dword ptr [edi+24C]
>00489552    jne         00489561
 00489554    cmp         bl,1
>00489557    jne         00489561
 00489559    xor         eax,eax
 0048955B    mov         dword ptr [edi+24C],eax
 00489561    pop         edi
 00489562    pop         esi
 00489563    pop         ebx
 00489564    ret
*}
end;

//00489568
procedure TWinControl.NotifyControls(Msg:Word);
begin
{*
 00489568    add         esp,0FFFFFFF0
 0048956B    movzx       edx,dx
 0048956E    mov         dword ptr [esp],edx
 00489571    xor         edx,edx
 00489573    mov         dword ptr [esp+4],edx
 00489577    xor         edx,edx
 00489579    mov         dword ptr [esp+8],edx
 0048957D    xor         edx,edx
 0048957F    mov         dword ptr [esp+0C],edx
 00489583    mov         edx,esp
 00489585    call        TWinControl.Broadcast
 0048958A    add         esp,10
 0048958D    ret
*}
end;

//00489590
procedure TWinControl.CreateSubClass(var Params:TCreateParams; ControlClassName:PChar);
begin
{*
 00489590    push        ebx
 00489591    push        esi
 00489592    push        edi
 00489593    mov         esi,ecx
 00489595    mov         ebx,edx
 00489597    test        esi,esi
>00489599    je          004895F7
 0048959B    mov         edi,dword ptr [ebx+34]
 0048959E    lea         eax,[ebx+24]
 004895A1    push        eax
 004895A2    push        esi
 004895A3    mov         eax,[00790C38];gvar_00790C38
 004895A8    push        eax
 004895A9    call        user32.GetClassInfoW
 004895AE    test        eax,eax
>004895B0    jne         004895E6
 004895B2    lea         eax,[ebx+24]
 004895B5    push        eax
 004895B6    push        esi
 004895B7    mov         eax,[0078D078];MainInstance:Cardinal
 004895BC    mov         eax,dword ptr [eax]
 004895BE    push        eax
 004895BF    call        user32.GetClassInfoW
 004895C4    test        eax,eax
>004895C6    jne         004895E6
 004895C8    lea         eax,[ebx+24]
 004895CB    push        eax
 004895CC    push        esi
 004895CD    push        0
 004895CF    call        user32.GetClassInfoW
 004895D4    test        eax,eax
>004895D6    jne         004895E6
 004895D8    lea         eax,[ebx+24]
 004895DB    push        eax
 004895DC    push        esi
 004895DD    mov         eax,dword ptr [ebx+34]
 004895E0    push        eax
 004895E1    call        user32.GetClassInfoW
 004895E6    mov         dword ptr [ebx+34],edi
 004895E9    mov         eax,dword ptr [ebx+24]
 004895EC    and         eax,0FFFFBF1F
 004895F1    or          eax,3
 004895F4    mov         dword ptr [ebx+24],eax
 004895F7    pop         edi
 004895F8    pop         esi
 004895F9    pop         ebx
 004895FA    ret
*}
end;

//004895FC
procedure TWinControl.AddBiDiModeExStyle(var ExStyle:DWORD);
begin
{*
 004895FC    push        ebx
 004895FD    push        esi
 004895FE    push        edi
 004895FF    mov         edi,edx
 00489601    mov         ebx,eax
 00489603    mov         eax,ebx
 00489605    call        TControl.UseRightToLeftReading
 0048960A    test        al,al
>0048960C    je          00489614
 0048960E    or          dword ptr [edi],2000
 00489614    mov         eax,ebx
 00489616    call        TControl.UseRightToLeftScrollBar
 0048961B    test        al,al
>0048961D    je          00489625
 0048961F    or          dword ptr [edi],4000
 00489625    mov         eax,ebx
 00489627    mov         si,0FFC7
 0048962B    call        @CallDynaInst
 00489630    test        al,al
>00489632    je          0048965D
 00489634    mov         eax,ebx
 00489636    mov         si,0FFCA
 0048963A    call        @CallDynaInst
 0048963F    test        al,al
>00489641    jne         0048964B
 00489643    or          dword ptr [edi],1000
>00489649    jmp         0048965D
 0048964B    mov         eax,ebx
 0048964D    mov         si,0FFCA
 00489651    call        @CallDynaInst
 00489656    cmp         al,1
>00489658    jne         0048965D
 0048965A    or          dword ptr [edi],0
 0048965D    pop         edi
 0048965E    pop         esi
 0048965F    pop         ebx
 00489660    ret
*}
end;

//00489664
procedure TWinControl.CreateParams(var Params:TCreateParams);
begin
{*
 00489664    push        ebp
 00489665    mov         ebp,esp
 00489667    push        0
 00489669    push        ebx
 0048966A    push        esi
 0048966B    push        edi
 0048966C    mov         ebx,edx
 0048966E    mov         esi,eax
 00489670    xor         eax,eax
 00489672    push        ebp
 00489673    push        48976B
 00489678    push        dword ptr fs:[eax]
 0048967B    mov         dword ptr fs:[eax],esp
 0048967E    mov         eax,ebx
 00489680    xor         ecx,ecx
 00489682    mov         edx,0CC
 00489687    call        @FillChar
 0048968C    mov         eax,dword ptr [esi+174]
 00489692    mov         dword ptr [ebx],eax
 00489694    mov         dword ptr [ebx+4],44000000
 0048969B    lea         edx,[ebx+8]
 0048969E    mov         eax,esi
 004896A0    call        TWinControl.AddBiDiModeExStyle
 004896A5    test        byte ptr [esi+50],1
>004896A9    je          004896B9
 004896AB    or          dword ptr [ebx+4],2000000
 004896B2    or          dword ptr [ebx+8],10000
 004896B9    test        byte ptr [esi+1C],10
>004896BD    jne         004896D1
 004896BF    mov         eax,esi
 004896C1    mov         edx,dword ptr [eax]
 004896C3    call        dword ptr [edx+5C]
 004896C6    test        al,al
>004896C8    jne         004896D1
 004896CA    or          dword ptr [ebx+4],8000000
 004896D1    cmp         byte ptr [esi+1E8],0
>004896D8    je          004896E1
 004896DA    or          dword ptr [ebx+4],10000
 004896E1    mov         eax,dword ptr [esi+40]
 004896E4    mov         dword ptr [ebx+0C],eax
 004896E7    mov         eax,dword ptr [esi+44]
 004896EA    mov         dword ptr [ebx+10],eax
 004896ED    mov         eax,dword ptr [esi+48]
 004896F0    mov         dword ptr [ebx+14],eax
 004896F3    mov         eax,dword ptr [esi+4C]
 004896F6    mov         dword ptr [ebx+18],eax
 004896F9    mov         edi,dword ptr [esi+34]
 004896FC    test        edi,edi
>004896FE    je          0048970C
 00489700    mov         eax,edi
 00489702    call        TWinControl.GetHandle
 00489707    mov         dword ptr [ebx+1C],eax
>0048970A    jmp         00489715
 0048970C    mov         eax,dword ptr [esi+1D4]
 00489712    mov         dword ptr [ebx+1C],eax
 00489715    mov         dword ptr [ebx+24],0B
 0048971C    push        7F00
 00489721    push        0
 00489723    call        user32.LoadCursorW
 00489728    mov         dword ptr [ebx+3C],eax
 0048972B    xor         eax,eax
 0048972D    mov         dword ptr [ebx+40],eax
 00489730    mov         eax,[00790C38];gvar_00790C38
 00489735    mov         dword ptr [ebx+34],eax
 00489738    mov         eax,40DD38;user32.DefWindowProcW:Integer
 0048973D    mov         dword ptr [ebx+28],eax
 00489740    lea         edx,[ebp-4]
 00489743    mov         eax,dword ptr [esi]
 00489745    call        TObject.ClassName
 0048974A    mov         edx,dword ptr [ebp-4]
 0048974D    lea         eax,[ebx+4C]
 00489750    call        StrPCopy
 00489755    xor         eax,eax
 00489757    pop         edx
 00489758    pop         ecx
 00489759    pop         ecx
 0048975A    mov         dword ptr fs:[eax],edx
 0048975D    push        489772
 00489762    lea         eax,[ebp-4]
 00489765    call        @UStrClr
 0048976A    ret
>0048976B    jmp         @HandleFinally
>00489770    jmp         00489762
 00489772    pop         edi
 00489773    pop         esi
 00489774    pop         ebx
 00489775    pop         ecx
 00489776    pop         ebp
 00489777    ret
*}
end;

//00489778
procedure TWinControl.CreateWnd;
begin
{*
 00489778    push        ebp
 00489779    mov         ebp,esp
 0048977B    add         esp,0FFFFFF00
 00489781    push        ebx
 00489782    push        esi
 00489783    push        edi
 00489784    xor         edx,edx
 00489786    mov         dword ptr [ebp-100],edx
 0048978C    mov         edi,eax
 0048978E    xor         eax,eax
 00489790    push        ebp
 00489791    push        489972
 00489796    push        dword ptr fs:[eax]
 00489799    mov         dword ptr fs:[eax],esp
 0048979C    lea         edx,[ebp-0CC]
 004897A2    mov         eax,edi
 004897A4    mov         ecx,dword ptr [eax]
 004897A6    call        dword ptr [ecx+0AC]
 004897AC    cmp         dword ptr [ebp-0B0],0
>004897B3    jne         0048982B
 004897B5    test        byte ptr [ebp-0C5],40
>004897BC    je          0048982B
 004897BE    mov         ebx,dword ptr [edi+4]
 004897C1    test        ebx,ebx
>004897C3    je          004897EB
 004897C5    test        byte ptr [ebx+1C],2
>004897C9    je          004897EB
 004897CB    mov         eax,ebx
 004897CD    mov         edx,dword ptr ds:[47C4E8];TWinControl
 004897D3    call        @IsClass
 004897D8    test        al,al
>004897DA    je          004897EB
 004897DC    mov         eax,ebx
 004897DE    call        TWinControl.GetHandle
 004897E3    mov         dword ptr [ebp-0B0],eax
>004897E9    jmp         0048982B
 004897EB    mov         eax,dword ptr [edi+8]
 004897EE    mov         dword ptr [ebp-0FC],eax
 004897F4    mov         byte ptr [ebp-0F8],11
 004897FB    lea         eax,[ebp-0FC]
 00489801    push        eax
 00489802    push        0
 00489804    lea         edx,[ebp-100]
 0048980A    mov         eax,[0078D6BC];^SResString201:TResStringRec
 0048980F    call        LoadResString
 00489814    mov         ecx,dword ptr [ebp-100]
 0048981A    mov         dl,1
 0048981C    mov         eax,[00439268];EInvalidOperation
 00489821    call        Exception.CreateFmt
 00489826    call        @RaiseExcept
 0048982B    mov         eax,dword ptr [ebp-0A4]
 00489831    mov         dword ptr [edi+254],eax
 00489837    lea         eax,[ebp-0F4]
 0048983D    push        eax
 0048983E    lea         eax,[ebp-80]
 00489841    push        eax
 00489842    mov         eax,dword ptr [ebp-98]
 00489848    push        eax
 00489849    call        user32.GetClassInfoW
 0048984E    cmp         eax,1
 00489851    sbb         eax,eax
 00489853    inc         eax
 00489854    test        al,al
>00489856    je          00489865
 00489858    mov         edx,480E34;InitWndProc:LRESULT
 0048985D    cmp         edx,dword ptr [ebp-0F0]
>00489863    je          004898A2
 00489865    test        al,al
>00489867    je          00489879
 00489869    mov         eax,dword ptr [ebp-98]
 0048986F    push        eax
 00489870    lea         eax,[ebp-80]
 00489873    push        eax
 00489874    call        user32.UnregisterClassW
 00489879    mov         dword ptr [ebp-0A4],480E34;InitWndProc:LRESULT
 00489883    lea         eax,[ebp-80]
 00489886    mov         dword ptr [ebp-84],eax
 0048988C    lea         eax,[ebp-0A8]
 00489892    push        eax
 00489893    call        user32.RegisterClassW
 00489898    test        ax,ax
>0048989B    jne         004898A2
 0048989D    call        RaiseLastOSError
 004898A2    mov         dword ptr ds:[7859A0],edi
 004898A8    lea         edx,[ebp-0CC]
 004898AE    mov         eax,edi
 004898B0    mov         ecx,dword ptr [eax]
 004898B2    call        dword ptr [ecx+0B0]
 004898B8    cmp         dword ptr [edi+258],0
>004898BF    jne         004898C6
 004898C1    call        RaiseLastOSError
 004898C6    push        0F0
 004898C8    mov         eax,dword ptr [edi+258]
 004898CE    push        eax
 004898CF    call        user32.GetWindowLongW
 004898D4    test        eax,40000000
>004898D9    je          004898FC
 004898DB    push        0F4
 004898DD    mov         eax,dword ptr [edi+258]
 004898E3    push        eax
 004898E4    call        user32.GetWindowLongW
 004898E9    test        eax,eax
>004898EB    jne         004898FC
 004898ED    mov         eax,dword ptr [edi+258]
 004898F3    push        eax
 004898F4    push        0F4
 004898F6    push        eax
 004898F7    call        user32.SetWindowLongW
 004898FC    mov         eax,dword ptr [edi+174]
 00489902    call        StrDispose
 00489907    xor         eax,eax
 00489909    mov         dword ptr [edi+174],eax
 0048990F    mov         eax,edi
 00489911    call        TWinControl.UpdateBounds
 00489916    push        1
 00489918    mov         eax,dword ptr [edi+64]
 0048991B    call        TFont.GetHandle
 00489920    mov         ecx,eax
 00489922    mov         edx,30
 00489927    mov         eax,edi
 00489929    call        TControl.Perform
 0048992E    cmp         byte ptr [edi+5E],0
>00489932    je          0048993F
 00489934    mov         eax,edi
 00489936    mov         si,0FFEF
 0048993A    call        @CallDynaInst
 0048993F    mov         eax,dword ptr [edi+0AC]
 00489945    mov         eax,dword ptr [eax+8]
 00489948    test        eax,eax
>0048994A    je          00489959
 0048994C    test        byte ptr [edi+52],20
>00489950    je          00489959
 00489952    mov         dl,1
 00489954    mov         ecx,dword ptr [eax]
 00489956    call        dword ptr [ecx+8]
 00489959    xor         eax,eax
 0048995B    pop         edx
 0048995C    pop         ecx
 0048995D    pop         ecx
 0048995E    mov         dword ptr fs:[eax],edx
 00489961    push        489979
 00489966    lea         eax,[ebp-100]
 0048996C    call        @UStrClr
 00489971    ret
>00489972    jmp         @HandleFinally
>00489977    jmp         00489966
 00489979    pop         edi
 0048997A    pop         esi
 0048997B    pop         ebx
 0048997C    mov         esp,ebp
 0048997E    pop         ebp
 0048997F    ret
*}
end;

//00489980
procedure TWinControl.CreateWindowHandle(const Params:TCreateParams);
begin
{*
 00489980    push        ebx
 00489981    push        esi
 00489982    mov         ebx,edx
 00489984    mov         esi,eax
 00489986    mov         eax,dword ptr [ebx+4]
 00489989    push        eax
 0048998A    mov         eax,dword ptr [ebx+0C]
 0048998D    push        eax
 0048998E    mov         eax,dword ptr [ebx+10]
 00489991    push        eax
 00489992    mov         eax,dword ptr [ebx+14]
 00489995    push        eax
 00489996    mov         eax,dword ptr [ebx+18]
 00489999    push        eax
 0048999A    mov         eax,dword ptr [ebx+1C]
 0048999D    push        eax
 0048999E    push        0
 004899A0    mov         eax,dword ptr [ebx+34]
 004899A3    push        eax
 004899A4    mov         eax,dword ptr [ebx+20]
 004899A7    push        eax
 004899A8    mov         ecx,dword ptr [ebx]
 004899AA    lea         edx,[ebx+4C]
 004899AD    mov         eax,dword ptr [ebx+8]
 004899B0    call        CreateWindowEx
 004899B5    mov         dword ptr [esi+258],eax
 004899BB    pop         esi
 004899BC    pop         ebx
 004899BD    ret
*}
end;

//004899C0
procedure TWinControl.ReadDesignSize(Reader:TReader);
begin
{*
 004899C0    push        ebx
 004899C1    push        esi
 004899C2    mov         esi,edx
 004899C4    mov         ebx,eax
 004899C6    mov         dl,1
 004899C8    mov         eax,esi
 004899CA    call        TReader.CheckValue
 004899CF    mov         eax,esi
 004899D1    call        TReader.ReadInteger
 004899D6    mov         dword ptr [ebx+264],eax
 004899DC    mov         eax,esi
 004899DE    call        TReader.ReadInteger
 004899E3    mov         dword ptr [ebx+268],eax
 004899E9    or          byte ptr [ebx+88],20
 004899F0    xor         edx,edx
 004899F2    mov         eax,esi
 004899F4    call        TReader.CheckValue
 004899F9    pop         esi
 004899FA    pop         ebx
 004899FB    ret
*}
end;

//004899FC
procedure TWinControl.WriteDesignSize(Writer:TWriter);
begin
{*
 004899FC    push        ebx
 004899FD    push        esi
 004899FE    add         esp,0FFFFFFF0
 00489A01    mov         esi,edx
 00489A03    mov         ebx,eax
 00489A05    mov         edx,esp
 00489A07    mov         eax,ebx
 00489A09    mov         ecx,dword ptr [eax]
 00489A0B    call        dword ptr [ecx+54]
 00489A0E    mov         eax,dword ptr [esp+8]
 00489A12    mov         dword ptr [ebx+264],eax
 00489A18    mov         eax,dword ptr [esp+0C]
 00489A1C    mov         dword ptr [ebx+268],eax
 00489A22    mov         dl,1
 00489A24    mov         eax,esi
 00489A26    call        TWriter.WriteValue
 00489A2B    mov         edx,dword ptr [ebx+264]
 00489A31    mov         eax,esi
 00489A33    call        TWriter.WriteInteger
 00489A38    mov         edx,dword ptr [ebx+268]
 00489A3E    mov         eax,esi
 00489A40    call        TWriter.WriteInteger
 00489A45    xor         edx,edx
 00489A47    mov         eax,esi
 00489A49    call        TWriter.WriteValue
 00489A4E    add         esp,10
 00489A51    pop         esi
 00489A52    pop         ebx
 00489A53    ret
*}
end;

//00489A54
function PointsEqual(const P1:TPoint; const P2:TPoint):Boolean;
begin
{*
 00489A54    mov         ecx,dword ptr [eax]
 00489A56    cmp         ecx,dword ptr [edx]
>00489A58    jne         00489A62
 00489A5A    mov         eax,dword ptr [eax+4]
 00489A5D    cmp         eax,dword ptr [edx+4]
>00489A60    je          00489A65
 00489A62    xor         eax,eax
 00489A64    ret
 00489A65    mov         al,1
 00489A67    ret
*}
end;

//00489A68
function DoWriteDesignSize:Boolean;
begin
{*
 00489A68    push        ebp
 00489A69    mov         ebp,esp
 00489A6B    push        ecx
 00489A6C    push        ebx
 00489A6D    push        esi
 00489A6E    push        edi
 00489A6F    mov         byte ptr [ebp-1],1
 00489A73    mov         eax,dword ptr [ebp+8]
 00489A76    mov         eax,dword ptr [eax-4]
 00489A79    mov         ebx,dword ptr [eax+20]
 00489A7C    test        ebx,ebx
>00489A7E    je          00489AA1
 00489A80    mov         eax,dword ptr [ebp+8]
 00489A83    lea         edx,[ebx+264]
 00489A89    mov         eax,dword ptr [ebp+8]
 00489A8C    mov         eax,dword ptr [eax-8]
 00489A8F    add         eax,264
 00489A94    call        PointsEqual
 00489A99    test        al,al
>00489A9B    jne         00489B33
 00489AA1    mov         eax,dword ptr [ebp+8]
 00489AA4    mov         eax,dword ptr [eax-8]
 00489AA7    mov         eax,dword ptr [eax+1DC]
 00489AAD    test        eax,eax
>00489AAF    je          00489AEA
 00489AB1    mov         edx,dword ptr [ebp+8]
 00489AB4    mov         ebx,dword ptr [eax+8]
 00489AB7    dec         ebx
 00489AB8    test        ebx,ebx
>00489ABA    jl          00489AEA
 00489ABC    inc         ebx
 00489ABD    xor         esi,esi
 00489ABF    mov         eax,dword ptr [ebp+8]
 00489AC2    mov         eax,dword ptr [eax-8]
 00489AC5    mov         eax,dword ptr [eax+1DC]
 00489ACB    mov         edx,esi
 00489ACD    call        TList.Get
 00489AD2    mov         edi,eax
 00489AD4    cmp         byte ptr [edi+5D],0
>00489AD8    jne         00489AE6
 00489ADA    movzx       eax,byte ptr ds:[489B44]
 00489AE1    cmp         al,byte ptr [edi+63]
>00489AE4    jne         00489B37
 00489AE6    inc         esi
 00489AE7    dec         ebx
>00489AE8    jne         00489ABF
 00489AEA    mov         eax,dword ptr [ebp+8]
 00489AED    mov         eax,dword ptr [eax-8]
 00489AF0    mov         eax,dword ptr [eax+1E0]
 00489AF6    test        eax,eax
>00489AF8    je          00489B33
 00489AFA    mov         edx,dword ptr [ebp+8]
 00489AFD    mov         ebx,dword ptr [eax+8]
 00489B00    dec         ebx
 00489B01    test        ebx,ebx
>00489B03    jl          00489B33
 00489B05    inc         ebx
 00489B06    xor         esi,esi
 00489B08    mov         eax,dword ptr [ebp+8]
 00489B0B    mov         eax,dword ptr [eax-8]
 00489B0E    mov         eax,dword ptr [eax+1E0]
 00489B14    mov         edx,esi
 00489B16    call        TList.Get
 00489B1B    mov         edi,eax
 00489B1D    cmp         byte ptr [edi+5D],0
>00489B21    jne         00489B2F
 00489B23    movzx       eax,byte ptr ds:[489B44]
 00489B2A    cmp         al,byte ptr [edi+63]
>00489B2D    jne         00489B37
 00489B2F    inc         esi
 00489B30    dec         ebx
>00489B31    jne         00489B08
 00489B33    mov         byte ptr [ebp-1],0
 00489B37    movzx       eax,byte ptr [ebp-1]
 00489B3B    pop         edi
 00489B3C    pop         esi
 00489B3D    pop         ebx
 00489B3E    pop         ecx
 00489B3F    pop         ebp
 00489B40    ret
*}
end;

//00489B48
procedure TWinControl.DefineProperties(Filer:TFiler);
begin
{*
 00489B48    push        ebp
 00489B49    mov         ebp,esp
 00489B4B    add         esp,0FFFFFFF8
 00489B4E    push        ebx
 00489B4F    mov         dword ptr [ebp-4],edx
 00489B52    mov         dword ptr [ebp-8],eax
 00489B55    mov         edx,dword ptr [ebp-4]
 00489B58    mov         eax,dword ptr [ebp-8]
 00489B5B    call        TControl.DefineProperties
 00489B60    mov         eax,dword ptr [ebp-8]
 00489B63    push        eax
 00489B64    push        4899C0;TWinControl.ReadDesignSize
 00489B69    mov         eax,dword ptr [ebp-8]
 00489B6C    push        eax
 00489B6D    push        4899FC;TWinControl.WriteDesignSize
 00489B72    push        ebp
 00489B73    call        DoWriteDesignSize
 00489B78    pop         ecx
 00489B79    mov         ecx,eax
 00489B7B    mov         edx,489B9C;'DesignSize'
 00489B80    mov         eax,dword ptr [ebp-4]
 00489B83    mov         ebx,dword ptr [eax]
 00489B85    call        dword ptr [ebx+4]
 00489B88    pop         ebx
 00489B89    pop         ecx
 00489B8A    pop         ecx
 00489B8B    pop         ebp
 00489B8C    ret
*}
end;

//00489BB4
procedure TWinControl.DestroyWnd;
begin
{*
 00489BB4    push        ebx
 00489BB5    push        esi
 00489BB6    push        edi
 00489BB7    mov         ebx,eax
 00489BB9    cmp         dword ptr [ebx+174],0
>00489BC0    jne         00489C04
 00489BC2    mov         eax,ebx
 00489BC4    call        TControl.GetTextLen
 00489BC9    mov         esi,eax
 00489BCB    cmp         esi,1
>00489BCE    jge         00489BE2
 00489BD0    mov         eax,489C18
 00489BD5    call        StrNew
 00489BDA    mov         dword ptr [ebx+174],eax
>00489BE0    jmp         00489C04
 00489BE2    lea         eax,[esi+1]
 00489BE5    call        StrAlloc
 00489BEA    mov         edi,eax
 00489BEC    mov         dword ptr [ebx+174],edi
 00489BF2    mov         eax,edi
 00489BF4    call        StrBufSize
 00489BF9    mov         ecx,eax
 00489BFB    mov         edx,edi
 00489BFD    mov         eax,ebx
 00489BFF    call        TControl.GetTextBuf
 00489C04    call        FreeDeviceContexts
 00489C09    mov         eax,ebx
 00489C0B    mov         edx,dword ptr [eax]
 00489C0D    call        dword ptr [edx+0C4]
 00489C13    pop         edi
 00489C14    pop         esi
 00489C15    pop         ebx
 00489C16    ret
*}
end;

//00489C1C
procedure TWinControl.DestroyWindowHandle;
begin
{*
 00489C1C    push        ebp
 00489C1D    mov         ebp,esp
 00489C1F    push        ecx
 00489C20    mov         dword ptr [ebp-4],eax
 00489C23    mov         eax,dword ptr [ebp-4]
 00489C26    mov         eax,dword ptr [eax+0AC]
 00489C2C    mov         eax,dword ptr [eax+8]
 00489C2F    test        eax,eax
>00489C31    je          00489C3A
 00489C33    xor         edx,edx
 00489C35    mov         ecx,dword ptr [eax]
 00489C37    call        dword ptr [ecx+8]
 00489C3A    mov         eax,dword ptr [ebp-4]
 00489C3D    or          dword ptr [eax+54],200
 00489C44    xor         eax,eax
 00489C46    push        ebp
 00489C47    push        489C82
 00489C4C    push        dword ptr fs:[eax]
 00489C4F    mov         dword ptr fs:[eax],esp
 00489C52    mov         eax,dword ptr [ebp-4]
 00489C55    mov         eax,dword ptr [eax+258]
 00489C5B    push        eax
 00489C5C    call        user32.DestroyWindow
 00489C61    test        eax,eax
>00489C63    jne         00489C6A
 00489C65    call        RaiseLastOSError
 00489C6A    xor         eax,eax
 00489C6C    pop         edx
 00489C6D    pop         ecx
 00489C6E    pop         ecx
 00489C6F    mov         dword ptr fs:[eax],edx
 00489C72    push        489C89
 00489C77    mov         eax,dword ptr [ebp-4]
 00489C7A    and         dword ptr [eax+54],0FFFFFDFF
 00489C81    ret
>00489C82    jmp         @HandleFinally
>00489C87    jmp         00489C77
 00489C89    mov         eax,dword ptr [ebp-4]
 00489C8C    xor         edx,edx
 00489C8E    mov         dword ptr [eax+258],edx
 00489C94    pop         ecx
 00489C95    pop         ebp
 00489C96    ret
*}
end;

//00489C98
function TWinControl.PrecedingWindow(Control:TWinControl):HWND;
begin
{*
 00489C98    push        ebx
 00489C99    push        esi
 00489C9A    push        edi
 00489C9B    mov         ebx,edx
 00489C9D    mov         edi,eax
 00489C9F    mov         eax,dword ptr [edi+1E0]
 00489CA5    mov         edx,ebx
 00489CA7    call        TList.IndexOf
 00489CAC    mov         esi,eax
 00489CAE    inc         esi
 00489CAF    mov         eax,dword ptr [edi+1E0]
 00489CB5    mov         ebx,dword ptr [eax+8]
 00489CB8    dec         ebx
 00489CB9    sub         ebx,esi
>00489CBB    jl          00489CD9
 00489CBD    inc         ebx
 00489CBE    mov         eax,dword ptr [edi+1E0]
 00489CC4    mov         edx,esi
 00489CC6    call        TList.Get
 00489CCB    mov         eax,dword ptr [eax+258]
 00489CD1    test        eax,eax
>00489CD3    jne         00489CDB
 00489CD5    inc         esi
 00489CD6    dec         ebx
>00489CD7    jne         00489CBE
 00489CD9    xor         eax,eax
 00489CDB    pop         edi
 00489CDC    pop         esi
 00489CDD    pop         ebx
 00489CDE    ret
*}
end;

//00489CE0
procedure TWinControl.CreateHandle;
begin
{*
 00489CE0    push        ebx
 00489CE1    push        esi
 00489CE2    push        edi
 00489CE3    mov         ebx,eax
 00489CE5    cmp         dword ptr [ebx+258],0
>00489CEC    jne         00489D72
 00489CF2    mov         eax,ebx
 00489CF4    mov         edx,dword ptr [eax]
 00489CF6    call        dword ptr [edx+0B4]
 00489CFC    mov         esi,ebx
 00489CFE    push        esi
 00489CFF    movzx       eax,word ptr ds:[7931A2]
 00489D06    push        eax
 00489D07    mov         eax,dword ptr [ebx+258]
 00489D0D    push        eax
 00489D0E    call        user32.SetPropW
 00489D13    push        esi
 00489D14    movzx       eax,word ptr ds:[7931A0]
 00489D1B    push        eax
 00489D1C    mov         eax,dword ptr [ebx+258]
 00489D22    push        eax
 00489D23    call        user32.SetPropW
 00489D28    mov         esi,dword ptr [ebx+34]
 00489D2B    test        esi,esi
>00489D2D    je          00489D4F
 00489D2F    push        13
 00489D31    push        0
 00489D33    push        0
 00489D35    push        0
 00489D37    push        0
 00489D39    mov         edx,ebx
 00489D3B    mov         eax,esi
 00489D3D    call        TWinControl.PrecedingWindow
 00489D42    push        eax
 00489D43    mov         eax,dword ptr [ebx+258]
 00489D49    push        eax
 00489D4A    call        user32.SetWindowPos
 00489D4F    mov         eax,ebx
 00489D51    call        TWinControl.GetControlCount
 00489D56    mov         esi,eax
 00489D58    dec         esi
 00489D59    test        esi,esi
>00489D5B    jl          00489D72
 00489D5D    inc         esi
 00489D5E    xor         edi,edi
 00489D60    mov         edx,edi
 00489D62    mov         eax,ebx
 00489D64    call        TWinControl.GetControl
 00489D69    call        TControl.UpdateAnchorRules
 00489D6E    inc         edi
 00489D6F    dec         esi
>00489D70    jne         00489D60
 00489D72    pop         edi
 00489D73    pop         esi
 00489D74    pop         ebx
 00489D75    ret
*}
end;

//00489D78
function TWinControl.CustomAlignInsertBefore(C1:TControl; C2:TControl):Boolean;
begin
{*
 00489D78    push        ebx
 00489D79    cmp         word ptr [eax+23A],0
>00489D81    je          00489D98
 00489D83    push        ecx
 00489D84    mov         ebx,eax
 00489D86    mov         ecx,edx
 00489D88    mov         edx,eax
 00489D8A    mov         eax,dword ptr [ebx+23C]
 00489D90    call        dword ptr [ebx+238]
 00489D96    pop         ebx
 00489D97    ret
 00489D98    xor         eax,eax
 00489D9A    pop         ebx
 00489D9B    ret
*}
end;

//00489D9C
procedure TWinControl.CustomAlignPosition(Control:TControl; var NewLeft:Integer; var NewTop:Integer; var NewWidth:Integer; var NewHeight:Integer; var AlignRect:TRect; AlignInfo:TAlignInfo);
begin
{*
 00489D9C    push        ebp
 00489D9D    mov         ebp,esp
 00489D9F    add         esp,0FFFFFFF0
 00489DA2    push        esi
 00489DA3    push        edi
 00489DA4    mov         esi,dword ptr [ebp+8]
 00489DA7    lea         edi,[ebp-10]
 00489DAA    movs        dword ptr [edi],dword ptr [esi]
 00489DAB    movs        dword ptr [edi],dword ptr [esi]
 00489DAC    movs        dword ptr [edi],dword ptr [esi]
 00489DAD    movs        dword ptr [edi],dword ptr [esi]
 00489DAE    mov         esi,eax
 00489DB0    cmp         word ptr [esi+242],0
>00489DB8    je          00489DE1
 00489DBA    push        ecx
 00489DBB    mov         eax,dword ptr [ebp+18]
 00489DBE    push        eax
 00489DBF    mov         eax,dword ptr [ebp+14]
 00489DC2    push        eax
 00489DC3    mov         eax,dword ptr [ebp+10]
 00489DC6    push        eax
 00489DC7    mov         eax,dword ptr [ebp+0C]
 00489DCA    push        eax
 00489DCB    lea         eax,[ebp-10]
 00489DCE    push        eax
 00489DCF    mov         eax,esi
 00489DD1    mov         ecx,edx
 00489DD3    mov         edx,eax
 00489DD5    mov         eax,dword ptr [esi+244]
 00489DDB    call        dword ptr [esi+240]
 00489DE1    pop         edi
 00489DE2    pop         esi
 00489DE3    mov         esp,ebp
 00489DE5    pop         ebp
 00489DE6    ret         14
*}
end;

//00489DEC
function DestroyChildWindow(Window:HWND; Data:PDestroyChildData):BOOL; stdcall;
begin
{*
 00489DEC    push        ebp
 00489DED    mov         ebp,esp
 00489DEF    push        ebx
 00489DF0    push        esi
 00489DF1    mov         esi,dword ptr [ebp+0C]
 00489DF4    mov         ebx,dword ptr [ebp+8]
 00489DF7    cmp         ebx,dword ptr [esi]
>00489DF9    je          00489E24
 00489DFB    mov         eax,ebx
 00489DFD    call        FindControl
 00489E02    test        eax,eax
>00489E04    jne         00489E24
 00489E06    push        0F8
 00489E08    push        ebx
 00489E09    call        user32.GetWindowLongW
 00489E0E    cmp         eax,dword ptr [esi]
>00489E10    jne         00489E24
 00489E12    push        0
 00489E14    movzx       eax,byte ptr [esi+4]
 00489E18    push        eax
 00489E19    push        0B04A
 00489E1E    push        ebx
 00489E1F    call        user32.SendMessageW
 00489E24    or          eax,0FFFFFFFF
 00489E27    pop         esi
 00489E28    pop         ebx
 00489E29    pop         ebp
 00489E2A    ret         8
*}
end;

//00489E30
procedure TWinControl.DestroyHandle;
begin
{*
 00489E30    push        ebx
 00489E31    push        esi
 00489E32    push        edi
 00489E33    add         esp,0FFFFFFF8
 00489E36    mov         ebx,eax
 00489E38    cmp         dword ptr [ebx+258],0
>00489E3F    je          00489E9B
 00489E41    mov         eax,dword ptr [ebx+1E0]
 00489E47    test        eax,eax
>00489E49    je          00489E6F
 00489E4B    mov         esi,dword ptr [eax+8]
 00489E4E    dec         esi
 00489E4F    test        esi,esi
>00489E51    jl          00489E6F
 00489E53    inc         esi
 00489E54    xor         edi,edi
 00489E56    mov         edx,edi
 00489E58    mov         eax,dword ptr [ebx+1E0]
 00489E5E    call        TList.Get
 00489E63    mov         edx,dword ptr [eax]
 00489E65    call        dword ptr [edx+0C0]
 00489E6B    inc         edi
 00489E6C    dec         esi
>00489E6D    jne         00489E56
 00489E6F    mov         eax,dword ptr [ebx+258]
 00489E75    mov         dword ptr [esp],eax
 00489E78    test        byte ptr [ebx+55],20
 00489E7C    setne       dl
 00489E7F    mov         byte ptr [esp+4],dl
 00489E83    mov         edx,esp
 00489E85    push        edx
 00489E86    push        489DEC;DestroyChildWindow:BOOL
 00489E8B    push        eax
 00489E8C    call        user32.EnumChildWindows
 00489E91    mov         eax,ebx
 00489E93    mov         edx,dword ptr [eax]
 00489E95    call        dword ptr [edx+0C8]
 00489E9B    pop         ecx
 00489E9C    pop         edx
 00489E9D    pop         edi
 00489E9E    pop         esi
 00489E9F    pop         ebx
 00489EA0    ret
*}
end;

//00489EA4
procedure TWinControl.RecreateWnd;
begin
{*
 00489EA4    cmp         dword ptr [eax+258],0
>00489EAB    je          00489EBB
 00489EAD    push        0
 00489EAF    xor         ecx,ecx
 00489EB1    mov         edx,0B033
 00489EB6    call        TControl.Perform
 00489EBB    ret
*}
end;

//00489EBC
procedure TWinControl.CMRecreateWnd(var Message:TMessage);
begin
{*
 00489EBC    push        ebp
 00489EBD    mov         ebp,esp
 00489EBF    add         esp,0FFFFFFF8
 00489EC2    push        esi
 00489EC3    mov         dword ptr [ebp-4],eax
 00489EC6    mov         eax,dword ptr [ebp-4]
 00489EC9    mov         si,0FFB3
 00489ECD    call        @CallDynaInst
 00489ED2    mov         byte ptr [ebp-5],al
 00489ED5    mov         dl,1
 00489ED7    mov         eax,dword ptr [ebp-4]
 00489EDA    call        TWinControl.UpdateRecreatingFlag
 00489EDF    xor         eax,eax
 00489EE1    push        ebp
 00489EE2    push        489F18
 00489EE7    push        dword ptr fs:[eax]
 00489EEA    mov         dword ptr fs:[eax],esp
 00489EED    mov         eax,dword ptr [ebp-4]
 00489EF0    mov         edx,dword ptr [eax]
 00489EF2    call        dword ptr [edx+0C0]
 00489EF8    mov         eax,dword ptr [ebp-4]
 00489EFB    call        TWinControl.UpdateControlState
 00489F00    xor         eax,eax
 00489F02    pop         edx
 00489F03    pop         ecx
 00489F04    pop         ecx
 00489F05    mov         dword ptr fs:[eax],edx
 00489F08    push        489F1F
 00489F0D    xor         edx,edx
 00489F0F    mov         eax,dword ptr [ebp-4]
 00489F12    call        TWinControl.UpdateRecreatingFlag
 00489F17    ret
>00489F18    jmp         @HandleFinally
>00489F1D    jmp         00489F0D
 00489F1F    cmp         byte ptr [ebp-5],0
>00489F23    je          00489F40
 00489F25    mov         eax,dword ptr [ebp-4]
 00489F28    cmp         dword ptr [eax+258],0
>00489F2F    je          00489F40
 00489F31    mov         eax,dword ptr [ebp-4]
 00489F34    mov         eax,dword ptr [eax+258]
 00489F3A    push        eax
 00489F3B    call        user32.SetFocus
 00489F40    pop         esi
 00489F41    pop         ecx
 00489F42    pop         ecx
 00489F43    pop         ebp
 00489F44    ret
*}
end;

//00489F48
procedure TWinControl.UpdateShowing;
begin
{*
 00489F48    push        ebp
 00489F49    mov         ebp,esp
 00489F4B    add         esp,0FFFFFFF8
 00489F4E    push        ebx
 00489F4F    push        esi
 00489F50    push        edi
 00489F51    mov         dword ptr [ebp-4],eax
 00489F54    mov         eax,dword ptr [ebp-4]
 00489F57    cmp         byte ptr [eax+59],0
>00489F5B    je          00489F6F
 00489F5D    mov         eax,dword ptr [ebp-4]
 00489F60    test        byte ptr [eax+1C],10
>00489F64    je          00489F8A
 00489F66    mov         eax,dword ptr [ebp-4]
 00489F69    test        byte ptr [eax+55],8
>00489F6D    je          00489F8A
 00489F6F    mov         eax,dword ptr [ebp-4]
 00489F72    test        byte ptr [eax+1C],10
>00489F76    je          00489F9C
 00489F78    mov         eax,dword ptr [ebp-4]
 00489F7B    test        byte ptr [eax+55],8
>00489F7F    jne         00489F9C
 00489F81    mov         eax,dword ptr [ebp-4]
 00489F84    test        byte ptr [eax+51],4
>00489F88    jne         00489F9C
 00489F8A    mov         eax,dword ptr [ebp-4]
 00489F8D    test        byte ptr [eax+54],8
>00489F91    jne         00489F9C
 00489F93    mov         eax,dword ptr [ebp-4]
 00489F96    test        byte ptr [eax+1C],8
>00489F9A    je          00489FA0
 00489F9C    xor         eax,eax
>00489F9E    jmp         00489FA2
 00489FA0    mov         al,1
 00489FA2    mov         byte ptr [ebp-5],al
 00489FA5    cmp         byte ptr [ebp-5],0
>00489FA9    je          00489FF3
 00489FAB    mov         eax,dword ptr [ebp-4]
 00489FAE    cmp         dword ptr [eax+258],0
>00489FB5    jne         00489FC2
 00489FB7    mov         eax,dword ptr [ebp-4]
 00489FBA    mov         edx,dword ptr [eax]
 00489FBC    call        dword ptr [edx+0A8]
 00489FC2    mov         eax,dword ptr [ebp-4]
 00489FC5    mov         eax,dword ptr [eax+1E0]
 00489FCB    test        eax,eax
>00489FCD    je          00489FF3
 00489FCF    mov         ebx,dword ptr [eax+8]
 00489FD2    dec         ebx
 00489FD3    test        ebx,ebx
>00489FD5    jl          00489FF3
 00489FD7    inc         ebx
 00489FD8    xor         esi,esi
 00489FDA    mov         eax,dword ptr [ebp-4]
 00489FDD    mov         eax,dword ptr [eax+1E0]
 00489FE3    mov         edx,esi
 00489FE5    call        TList.Get
 00489FEA    call        TWinControl.UpdateShowing
 00489FEF    inc         esi
 00489FF0    dec         ebx
>00489FF1    jne         00489FDA
 00489FF3    mov         eax,dword ptr [ebp-4]
 00489FF6    cmp         dword ptr [eax+258],0
>00489FFD    je          0048A0A1
 0048A003    mov         eax,dword ptr [ebp-4]
 0048A006    movzx       eax,byte ptr [eax+1EA]
 0048A00D    cmp         al,byte ptr [ebp-5]
>0048A010    je          0048A0A1
 0048A016    mov         eax,dword ptr [ebp-4]
 0048A019    movzx       edx,byte ptr [ebp-5]
 0048A01D    mov         byte ptr [eax+1EA],dl
 0048A023    xor         eax,eax
 0048A025    push        ebp
 0048A026    push        48A083
 0048A02B    push        dword ptr fs:[eax]
 0048A02E    mov         dword ptr fs:[eax],esp
 0048A031    mov         eax,dword ptr [ebp-4]
 0048A034    mov         byte ptr [eax+1EF],1
 0048A03B    xor         eax,eax
 0048A03D    push        ebp
 0048A03E    push        48A072
 0048A043    push        dword ptr fs:[eax]
 0048A046    mov         dword ptr fs:[eax],esp
 0048A049    push        0
 0048A04B    xor         ecx,ecx
 0048A04D    mov         edx,0B019
 0048A052    mov         eax,dword ptr [ebp-4]
 0048A055    call        TControl.Perform
 0048A05A    xor         eax,eax
 0048A05C    pop         edx
 0048A05D    pop         ecx
 0048A05E    pop         ecx
 0048A05F    mov         dword ptr fs:[eax],edx
 0048A062    push        48A079
 0048A067    mov         eax,dword ptr [ebp-4]
 0048A06A    mov         byte ptr [eax+1EF],0
 0048A071    ret
>0048A072    jmp         @HandleFinally
>0048A077    jmp         0048A067
 0048A079    xor         eax,eax
 0048A07B    pop         edx
 0048A07C    pop         ecx
 0048A07D    pop         ecx
 0048A07E    mov         dword ptr fs:[eax],edx
>0048A081    jmp         0048A0A1
>0048A083    jmp         @HandleAnyException
 0048A088    movzx       eax,byte ptr [ebp-5]
 0048A08C    xor         al,1
 0048A08E    mov         edx,dword ptr [ebp-4]
 0048A091    mov         byte ptr [edx+1EA],al
 0048A097    call        @RaiseAgain
 0048A09C    call        @DoneExcept
 0048A0A1    pop         edi
 0048A0A2    pop         esi
 0048A0A3    pop         ebx
 0048A0A4    pop         ecx
 0048A0A5    pop         ecx
 0048A0A6    pop         ebp
 0048A0A7    ret
*}
end;

//0048A0A8
procedure TWinControl.UpdateControlState;
begin
{*
 0048A0A8    push        ebp
 0048A0A9    mov         ebp,esp
 0048A0AB    push        ecx
 0048A0AC    push        ebx
 0048A0AD    push        esi
 0048A0AE    mov         dword ptr [ebp-4],eax
 0048A0B1    mov         ebx,dword ptr [ebp-4]
>0048A0B4    jmp         0048A133
 0048A0B6    mov         ebx,esi
 0048A0B8    cmp         byte ptr [ebx+1EA],0
>0048A0BF    jne         0048A133
 0048A0C1    mov         eax,dword ptr [ebp-4]
 0048A0C4    cmp         byte ptr [eax+1EA],0
>0048A0CB    je          0048A169
 0048A0D1    mov         eax,dword ptr [ebp-4]
 0048A0D4    cmp         byte ptr [eax+1EF],0
>0048A0DB    jne         0048A169
 0048A0E1    mov         eax,dword ptr [ebp-4]
 0048A0E4    mov         byte ptr [eax+1EF],1
 0048A0EB    xor         eax,eax
 0048A0ED    push        ebp
 0048A0EE    push        48A12C
 0048A0F3    push        dword ptr fs:[eax]
 0048A0F6    mov         dword ptr fs:[eax],esp
 0048A0F9    mov         eax,dword ptr [ebp-4]
 0048A0FC    mov         byte ptr [eax+1EA],0
 0048A103    push        0
 0048A105    xor         ecx,ecx
 0048A107    mov         edx,0B019
 0048A10C    mov         eax,dword ptr [ebp-4]
 0048A10F    call        TControl.Perform
 0048A114    xor         eax,eax
 0048A116    pop         edx
 0048A117    pop         ecx
 0048A118    pop         ecx
 0048A119    mov         dword ptr fs:[eax],edx
 0048A11C    push        48A169
 0048A121    mov         eax,dword ptr [ebp-4]
 0048A124    mov         byte ptr [eax+1EF],0
 0048A12B    ret
>0048A12C    jmp         @HandleFinally
>0048A131    jmp         0048A121
 0048A133    mov         esi,dword ptr [ebx+34]
 0048A136    test        esi,esi
>0048A138    jne         0048A0B6
 0048A13E    mov         eax,ebx
 0048A140    mov         edx,dword ptr ds:[4DF7D4];TCustomForm
 0048A146    call        @IsClass
 0048A14B    test        al,al
>0048A14D    jne         0048A161
 0048A14F    mov         eax,dword ptr [ebp-4]
 0048A152    test        byte ptr [eax+1C],8
>0048A156    jne         0048A169
 0048A158    cmp         dword ptr [ebx+1D4],0
>0048A15F    je          0048A169
 0048A161    mov         eax,dword ptr [ebp-4]
 0048A164    call        TWinControl.UpdateShowing
 0048A169    pop         esi
 0048A16A    pop         ebx
 0048A16B    pop         ecx
 0048A16C    pop         ebp
 0048A16D    ret
*}
end;

//0048A170
procedure TWinControl.SetParentDoubleBuffered(Value:Boolean);
begin
{*
 0048A170    cmp         dl,byte ptr [eax+1EE]
>0048A176    je          0048A198
 0048A178    mov         byte ptr [eax+1EE],dl
 0048A17E    cmp         dword ptr [eax+34],0
>0048A182    je          0048A198
 0048A184    test        byte ptr [eax+1C],2
>0048A188    jne         0048A198
 0048A18A    push        0
 0048A18C    xor         ecx,ecx
 0048A18E    mov         edx,0B050
 0048A193    call        TControl.Perform
 0048A198    ret
*}
end;

//0048A19C
procedure TWinControl.SetParentWindow(Value:HWND);
begin
{*
 0048A19C    push        ebp
 0048A19D    mov         ebp,esp
 0048A19F    push        ecx
 0048A1A0    push        ebx
 0048A1A1    mov         ebx,edx
 0048A1A3    mov         dword ptr [ebp-4],eax
 0048A1A6    mov         eax,dword ptr [ebp-4]
 0048A1A9    cmp         dword ptr [eax+34],0
>0048A1AD    jne         0048A27C
 0048A1B3    mov         eax,dword ptr [ebp-4]
 0048A1B6    cmp         ebx,dword ptr [eax+1D4]
>0048A1BC    je          0048A27C
 0048A1C2    mov         eax,dword ptr [ebp-4]
 0048A1C5    cmp         dword ptr [eax+258],0
>0048A1CC    je          0048A229
 0048A1CE    mov         eax,dword ptr [ebp-4]
 0048A1D1    cmp         dword ptr [eax+1D4],0
>0048A1D8    je          0048A229
 0048A1DA    test        ebx,ebx
>0048A1DC    je          0048A229
 0048A1DE    mov         eax,dword ptr [ebp-4]
 0048A1E1    mov         dword ptr [eax+1D4],ebx
 0048A1E7    push        ebx
 0048A1E8    mov         eax,dword ptr [ebp-4]
 0048A1EB    mov         eax,dword ptr [eax+258]
 0048A1F1    push        eax
 0048A1F2    call        user32.SetParent
 0048A1F7    mov         eax,[0078D080];^gvar_00784C80
 0048A1FC    cmp         dword ptr [eax],5
>0048A1FF    jl          0048A21F
 0048A201    mov         eax,[0078DB58];^gvar_00784C7C
 0048A206    cmp         dword ptr [eax],2
>0048A209    jne         0048A21F
 0048A20B    push        0
 0048A20D    mov         ecx,30003
 0048A212    mov         edx,127
 0048A217    mov         eax,dword ptr [ebp-4]
 0048A21A    call        TControl.Perform
 0048A21F    mov         eax,dword ptr [ebp-4]
 0048A222    call        TWinControl.UpdateControlState
>0048A227    jmp         0048A27C
 0048A229    mov         dl,1
 0048A22B    mov         eax,dword ptr [ebp-4]
 0048A22E    call        TWinControl.UpdateRecreatingFlag
 0048A233    xor         eax,eax
 0048A235    push        ebp
 0048A236    push        48A275
 0048A23B    push        dword ptr fs:[eax]
 0048A23E    mov         dword ptr fs:[eax],esp
 0048A241    mov         eax,dword ptr [ebp-4]
 0048A244    mov         edx,dword ptr [eax]
 0048A246    call        dword ptr [edx+0C0]
 0048A24C    mov         eax,dword ptr [ebp-4]
 0048A24F    mov         dword ptr [eax+1D4],ebx
 0048A255    mov         eax,dword ptr [ebp-4]
 0048A258    call        TWinControl.UpdateControlState
 0048A25D    xor         eax,eax
 0048A25F    pop         edx
 0048A260    pop         ecx
 0048A261    pop         ecx
 0048A262    mov         dword ptr fs:[eax],edx
 0048A265    push        48A27C
 0048A26A    xor         edx,edx
 0048A26C    mov         eax,dword ptr [ebp-4]
 0048A26F    call        TWinControl.UpdateRecreatingFlag
 0048A274    ret
>0048A275    jmp         @HandleFinally
>0048A27A    jmp         0048A26A
 0048A27C    pop         ebx
 0048A27D    pop         ecx
 0048A27E    pop         ebp
 0048A27F    ret
*}
end;

//0048A280
procedure TWinControl.MainWndProc(var Message:TMessage);
begin
{*
 0048A280    push        ebp
 0048A281    mov         ebp,esp
 0048A283    push        ecx
 0048A284    push        ebx
 0048A285    push        esi
 0048A286    push        edi
 0048A287    mov         dword ptr [ebp-4],eax
 0048A28A    xor         eax,eax
 0048A28C    push        ebp
 0048A28D    push        48A2D8
 0048A292    push        dword ptr fs:[eax]
 0048A295    mov         dword ptr fs:[eax],esp
 0048A298    xor         eax,eax
 0048A29A    push        ebp
 0048A29B    push        48A2C7
 0048A2A0    push        dword ptr fs:[eax]
 0048A2A3    mov         dword ptr fs:[eax],esp
 0048A2A6    mov         ebx,dword ptr [ebp-4]
 0048A2A9    mov         eax,dword ptr [ebx+3C]
 0048A2AC    call        dword ptr [ebx+38]
 0048A2AF    xor         eax,eax
 0048A2B1    pop         edx
 0048A2B2    pop         ecx
 0048A2B3    pop         ecx
 0048A2B4    mov         dword ptr fs:[eax],edx
 0048A2B7    push        48A2CE
 0048A2BC    call        FreeDeviceContexts
 0048A2C1    call        FreeMemoryContexts
 0048A2C6    ret
>0048A2C7    jmp         @HandleFinally
>0048A2CC    jmp         0048A2BC
 0048A2CE    xor         eax,eax
 0048A2D0    pop         edx
 0048A2D1    pop         ecx
 0048A2D2    pop         ecx
 0048A2D3    mov         dword ptr fs:[eax],edx
>0048A2D6    jmp         0048A2F1
>0048A2D8    jmp         @HandleAnyException
 0048A2DD    mov         eax,[0078D590];^Application:TApplication
 0048A2E2    mov         eax,dword ptr [eax]
 0048A2E4    mov         edx,dword ptr [ebp-4]
 0048A2E7    call        TApplication.HandleException
 0048A2EC    call        @DoneExcept
 0048A2F1    pop         edi
 0048A2F2    pop         esi
 0048A2F3    pop         ebx
 0048A2F4    pop         ecx
 0048A2F5    pop         ebp
 0048A2F6    ret
*}
end;

//0048A2F8
function GetControlAtPos(AControl:TControl):Boolean;
begin
{*
 0048A2F8    push        ebp
 0048A2F9    mov         ebp,esp
 0048A2FB    add         esp,0FFFFFFE0
 0048A2FE    push        ebx
 0048A2FF    push        esi
 0048A300    mov         ebx,eax
 0048A302    mov         eax,dword ptr [ebp+8]
 0048A305    mov         eax,dword ptr [eax-4]
 0048A308    mov         eax,dword ptr [eax]
 0048A30A    sub         eax,dword ptr [ebx+40]
 0048A30D    mov         edx,dword ptr [ebp+8]
 0048A310    mov         edx,dword ptr [edx-4]
 0048A313    mov         edx,dword ptr [edx+4]
 0048A316    sub         edx,dword ptr [ebx+44]
 0048A319    mov         dword ptr [ebp-8],eax
 0048A31C    mov         dword ptr [ebp-4],edx
 0048A31F    mov         eax,dword ptr [ebp+8]
 0048A322    mov         edx,dword ptr [ebp-8]
 0048A325    mov         dword ptr [eax-0C],edx
 0048A328    mov         edx,dword ptr [ebp-4]
 0048A32B    mov         dword ptr [eax-8],edx
 0048A32E    lea         edx,[ebp-20]
 0048A331    mov         eax,ebx
 0048A333    mov         ecx,dword ptr [eax]
 0048A335    call        dword ptr [ecx+54]
 0048A338    lea         eax,[ebp-20]
 0048A33B    mov         edx,dword ptr [ebp+8]
 0048A33E    add         edx,0FFFFFFF4
 0048A341    call        PtInRect
 0048A346    test        al,al
>0048A348    je          0048A3B4
 0048A34A    test        byte ptr [ebx+1C],10
>0048A34E    je          0048A360
 0048A350    cmp         byte ptr [ebx+59],0
>0048A354    jne         0048A35C
 0048A356    test        byte ptr [ebx+51],4
>0048A35A    jne         0048A360
 0048A35C    mov         al,1
>0048A35E    jmp         0048A3B6
 0048A360    cmp         byte ptr [ebx+59],0
>0048A364    je          0048A3B0
 0048A366    mov         eax,ebx
 0048A368    mov         edx,dword ptr [eax]
 0048A36A    call        dword ptr [edx+5C]
 0048A36D    test        al,al
>0048A36F    jne         0048A37A
 0048A371    mov         eax,dword ptr [ebp+8]
 0048A374    cmp         byte ptr [eax-0D],0
>0048A378    je          0048A3B0
 0048A37A    mov         eax,dword ptr [ebp+8]
 0048A37D    mov         edx,dword ptr [eax-0C]
 0048A380    mov         dword ptr [ebp-10],edx
 0048A383    mov         edx,dword ptr [eax-8]
 0048A386    mov         dword ptr [ebp-0C],edx
 0048A389    mov         esi,dword ptr [ebp-10]
 0048A38C    and         esi,0FFFF
 0048A392    mov         eax,dword ptr [ebp-0C]
 0048A395    shl         eax,10
 0048A398    or          esi,eax
 0048A39A    push        esi
 0048A39B    xor         ecx,ecx
 0048A39D    mov         edx,0B00A
 0048A3A2    mov         eax,ebx
 0048A3A4    call        TControl.Perform
 0048A3A9    test        eax,eax
 0048A3AB    setne       al
>0048A3AE    jmp         0048A3B6
 0048A3B0    xor         eax,eax
>0048A3B2    jmp         0048A3B6
 0048A3B4    xor         eax,eax
 0048A3B6    test        al,al
>0048A3B8    je          0048A3C0
 0048A3BA    mov         edx,dword ptr [ebp+8]
 0048A3BD    mov         dword ptr [edx-14],ebx
 0048A3C0    pop         esi
 0048A3C1    pop         ebx
 0048A3C2    mov         esp,ebp
 0048A3C4    pop         ebp
 0048A3C5    ret
*}
end;

//0048A3C8
function TWinControl.ControlAtPos(Pos:TPoint; AllowDisabled:Boolean; AllLevels:Boolean; AllowWinControls:Boolean):TControl;
begin
{*
 0048A3C8    push        ebp
 0048A3C9    mov         ebp,esp
 0048A3CB    add         esp,0FFFFFFEC
 0048A3CE    push        ebx
 0048A3CF    push        esi
 0048A3D0    push        edi
 0048A3D1    mov         byte ptr [ebp-0D],cl
 0048A3D4    mov         dword ptr [ebp-4],edx
 0048A3D7    mov         esi,eax
 0048A3D9    mov         ebx,dword ptr [ebp+8]
 0048A3DC    xor         eax,eax
 0048A3DE    mov         dword ptr [ebp-14],eax
 0048A3E1    cmp         byte ptr [ebp+0C],0
>0048A3E5    je          0048A447
 0048A3E7    cmp         dword ptr [esi+1E0],0
>0048A3EE    je          0048A447
 0048A3F0    mov         eax,dword ptr [esi+1E0]
 0048A3F6    mov         edi,dword ptr [eax+8]
 0048A3F9    dec         edi
 0048A3FA    cmp         edi,0
>0048A3FD    jl          0048A447
 0048A3FF    test        bl,bl
>0048A401    je          0048A423
 0048A403    push        1
 0048A405    push        1
 0048A407    mov         edx,edi
 0048A409    mov         eax,dword ptr [esi+1E0]
 0048A40F    call        TList.Get
 0048A414    mov         edx,dword ptr [ebp-4]
 0048A417    movzx       ecx,byte ptr [ebp-0D]
 0048A41B    call        TWinControl.ControlAtPos
 0048A420    mov         dword ptr [ebp-14],eax
 0048A423    cmp         dword ptr [ebp-14],0
>0048A427    jne         0048A441
 0048A429    push        ebp
 0048A42A    mov         edx,edi
 0048A42C    mov         eax,dword ptr [esi+1E0]
 0048A432    call        TList.Get
 0048A437    call        GetControlAtPos
 0048A43C    pop         ecx
 0048A43D    test        al,al
>0048A43F    jne         0048A447
 0048A441    dec         edi
 0048A442    cmp         edi,0FFFFFFFF
>0048A445    jne         0048A3FF
 0048A447    mov         eax,dword ptr [esi+1DC]
 0048A44D    test        eax,eax
>0048A44F    je          0048A47E
 0048A451    cmp         dword ptr [ebp-14],0
>0048A455    jne         0048A47E
 0048A457    mov         edi,dword ptr [eax+8]
 0048A45A    dec         edi
 0048A45B    cmp         edi,0
>0048A45E    jl          0048A47E
 0048A460    push        ebp
 0048A461    mov         edx,edi
 0048A463    mov         eax,dword ptr [esi+1DC]
 0048A469    call        TList.Get
 0048A46E    call        GetControlAtPos
 0048A473    pop         ecx
 0048A474    test        al,al
>0048A476    jne         0048A47E
 0048A478    dec         edi
 0048A479    cmp         edi,0FFFFFFFF
>0048A47C    jne         0048A460
 0048A47E    mov         eax,dword ptr [ebp-14]
 0048A481    pop         edi
 0048A482    pop         esi
 0048A483    pop         ebx
 0048A484    mov         esp,ebp
 0048A486    pop         ebp
 0048A487    ret         8
*}
end;

//0048A48C
function TWinControl.IsControlMouseMsg(var Message:TWMMouse):Boolean;
begin
{*
 0048A48C    push        ebx
 0048A48D    push        esi
 0048A48E    push        edi
 0048A48F    add         esp,0FFFFFFE4
 0048A492    mov         esi,edx
 0048A494    mov         ebx,eax
 0048A496    mov         eax,ebx
 0048A498    call        TWinControl.GetHandle
 0048A49D    mov         edi,eax
 0048A49F    call        user32.GetCapture
 0048A4A4    cmp         edi,eax
>0048A4A6    jne         0048A4C7
 0048A4A8    cmp         dword ptr ds:[785A5C],0
>0048A4AF    je          0048A4C3
 0048A4B1    mov         eax,[00785A5C]
 0048A4B6    cmp         ebx,dword ptr [eax+34]
>0048A4B9    jne         0048A4C3
 0048A4BB    mov         ebx,dword ptr ds:[785A5C]
>0048A4C1    jmp         0048A4F3
 0048A4C3    xor         ebx,ebx
>0048A4C5    jmp         0048A4F3
 0048A4C7    mov         eax,dword ptr [esi+8]
 0048A4CA    mov         dword ptr [esp+8],eax
 0048A4CE    movsx       eax,word ptr [esp+8]
 0048A4D3    mov         dword ptr [esp+0C],eax
 0048A4D7    movsx       eax,word ptr [esp+0A]
 0048A4DC    mov         dword ptr [esp+10],eax
 0048A4E0    push        0
 0048A4E2    push        0
 0048A4E4    lea         edx,[esp+14]
 0048A4E8    xor         ecx,ecx
 0048A4EA    mov         eax,ebx
 0048A4EC    call        TWinControl.ControlAtPos
 0048A4F1    mov         ebx,eax
 0048A4F3    xor         eax,eax
 0048A4F5    test        ebx,ebx
>0048A4F7    je          0048A542
 0048A4F9    movsx       eax,word ptr [esi+8]
 0048A4FD    sub         eax,dword ptr [ebx+40]
 0048A500    mov         dword ptr [esp],eax
 0048A503    movsx       eax,word ptr [esi+0A]
 0048A507    sub         eax,dword ptr [ebx+44]
 0048A50A    mov         dword ptr [esp+4],eax
 0048A50E    mov         eax,dword ptr [esp]
 0048A511    mov         dword ptr [esp+14],eax
 0048A515    mov         eax,dword ptr [esp+4]
 0048A519    mov         dword ptr [esp+18],eax
 0048A51D    mov         edi,dword ptr [esp+14]
 0048A521    and         edi,0FFFF
 0048A527    mov         eax,dword ptr [esp+18]
 0048A52B    shl         eax,10
 0048A52E    or          edi,eax
 0048A530    push        edi
 0048A531    mov         ecx,dword ptr [esi+4]
 0048A534    mov         edx,dword ptr [esi]
 0048A536    mov         eax,ebx
 0048A538    call        TControl.Perform
 0048A53D    mov         dword ptr [esi+0C],eax
 0048A540    mov         al,1
 0048A542    add         esp,1C
 0048A545    pop         edi
 0048A546    pop         esi
 0048A547    pop         ebx
 0048A548    ret
*}
end;

//0048A54C
function TWinControl.IsControlActivateMsg(var Message:TWMMouseActivate; Control:TControl):Boolean;
begin
{*
 0048A54C    push        ebx
 0048A54D    push        esi
 0048A54E    push        edi
 0048A54F    add         esp,0FFFFFED8
 0048A555    mov         ebx,ecx
 0048A557    mov         edi,edx
 0048A559    mov         esi,eax
 0048A55B    call        user32.GetMessagePos
 0048A560    call        SmallPoint
 0048A565    mov         dword ptr [esp+8],eax
 0048A569    movsx       eax,word ptr [esp+8]
 0048A56E    mov         dword ptr [esp+0C],eax
 0048A572    movsx       eax,word ptr [esp+0A]
 0048A577    mov         dword ptr [esp+10],eax
 0048A57B    mov         ecx,esp
 0048A57D    lea         edx,[esp+0C]
 0048A581    mov         eax,esi
 0048A583    call        TControl.ScreenToClient
 0048A588    test        ebx,ebx
>0048A58A    jne         0048A59F
 0048A58C    push        0
 0048A58E    push        0
 0048A590    lea         edx,[esp+8]
 0048A594    xor         ecx,ecx
 0048A596    mov         eax,esi
 0048A598    call        TWinControl.ControlAtPos
 0048A59D    mov         ebx,eax
 0048A59F    test        ebx,ebx
>0048A5A1    je          0048A695
 0048A5A7    cmp         esi,ebx
>0048A5A9    je          0048A5C8
 0048A5AB    mov         eax,dword ptr [esp]
 0048A5AE    sub         eax,dword ptr [ebx+40]
 0048A5B1    mov         dword ptr [esp+114],eax
 0048A5B8    mov         eax,dword ptr [esp+4]
 0048A5BC    sub         eax,dword ptr [ebx+44]
 0048A5BF    mov         dword ptr [esp+118],eax
>0048A5C6    jmp         0048A5DD
 0048A5C8    mov         eax,dword ptr [esp]
 0048A5CB    mov         dword ptr [esp+114],eax
 0048A5D2    mov         eax,dword ptr [esp+4]
 0048A5D6    mov         dword ptr [esp+118],eax
 0048A5DD    movzx       eax,word ptr [edi+8]
 0048A5E1    mov         dword ptr [esp+11C],eax
 0048A5E8    mov         eax,dword ptr [edi+4]
 0048A5EB    mov         dword ptr [esp+124],eax
 0048A5F2    movzx       eax,word ptr [edi+0A]
 0048A5F6    cmp         eax,201
>0048A5FB    jge         0048A615
 0048A5FD    add         eax,0FFFFFF5F
 0048A602    sub         eax,2
>0048A605    jb          0048A62D
 0048A607    dec         eax
 0048A608    sub         eax,2
>0048A60B    jb          0048A641
 0048A60D    dec         eax
 0048A60E    sub         eax,2
>0048A611    jb          0048A637
>0048A613    jmp         0048A64B
 0048A615    add         eax,0FFFFFDFF
 0048A61A    sub         eax,2
>0048A61D    jb          0048A62D
 0048A61F    dec         eax
 0048A620    sub         eax,2
>0048A623    jb          0048A641
 0048A625    dec         eax
 0048A626    sub         eax,2
>0048A629    jb          0048A637
>0048A62B    jmp         0048A64B
 0048A62D    mov         byte ptr [esp+120],0
>0048A635    jmp         0048A653
 0048A637    mov         byte ptr [esp+120],2
>0048A63F    jmp         0048A653
 0048A641    mov         byte ptr [esp+120],1
>0048A649    jmp         0048A653
 0048A64B    mov         byte ptr [esp+120],0
 0048A653    lea         eax,[esp+14]
 0048A657    push        eax
 0048A658    call        user32.GetKeyboardState
 0048A65D    lea         eax,[esp+14]
 0048A661    call        KeyboardStateToShiftState
 0048A666    mov         esi,eax
 0048A668    call        MouseOriginToShiftState
 0048A66D    or          si,ax
 0048A670    mov         word ptr [esp+121],si
 0048A678    lea         eax,[esp+114]
 0048A67F    push        eax
 0048A680    xor         ecx,ecx
 0048A682    mov         edx,0B04B
 0048A687    mov         eax,ebx
 0048A689    call        TControl.Perform
 0048A68E    mov         dword ptr [edi+0C],eax
 0048A691    mov         al,1
>0048A693    jmp         0048A697
 0048A695    xor         eax,eax
 0048A697    add         esp,128
 0048A69D    pop         edi
 0048A69E    pop         esi
 0048A69F    pop         ebx
 0048A6A0    ret
*}
end;

//0048A6A4
procedure TWinControl.WndProc(var Message:TMessage);
begin
{*
 0048A6A4    push        ebp
 0048A6A5    mov         ebp,esp
 0048A6A7    add         esp,0FFFFFFC4
 0048A6AA    push        ebx
 0048A6AB    push        esi
 0048A6AC    mov         dword ptr [ebp-8],edx
 0048A6AF    mov         dword ptr [ebp-4],eax
 0048A6B2    mov         eax,dword ptr [ebp-8]
 0048A6B5    mov         eax,dword ptr [eax]
 0048A6B7    cmp         eax,200
>0048A6BC    jge         0048A703
 0048A6BE    cmp         eax,21
>0048A6C1    jg          0048A6E7
>0048A6C3    je          0048AAD9
 0048A6C9    sub         eax,7
>0048A6CC    je          0048A7E5
 0048A6D2    dec         eax
>0048A6D3    je          0048A823
 0048A6D9    sub         eax,17
>0048A6DC    je          0048AB30
>0048A6E2    jmp         0048AC06
 0048A6E7    sub         eax,84
>0048A6EC    je          0048A835
 0048A6F2    add         eax,0FFFFFF84
 0048A6F5    sub         eax,0A
>0048A6F8    jb          0048AB1B
>0048A6FE    jmp         0048AC06
 0048A703    cmp         eax,0B047
>0048A708    jg          0048A735
>0048A70A    je          0048A7AA
 0048A710    add         eax,0FFFFFE00
 0048A715    sub         eax,0F
>0048A718    jb          0048A8E2
 0048A71E    sub         eax,31
>0048A721    je          0048ABE0
 0048A727    sub         eax,63
>0048A72A    je          0048A89A
>0048A730    jmp         0048AC06
 0048A735    sub         eax,0B04A
>0048A73A    je          0048AB7D
 0048A740    sub         eax,4
>0048A743    je          0048A753
 0048A745    sub         eax,3
>0048A748    je          0048ABD3
>0048A74E    jmp         0048AC06
 0048A753    mov         eax,dword ptr [ebp-4]
 0048A756    test        byte ptr [eax+1C],10
>0048A75A    je          0048AC06
 0048A760    call        ThemeServices
 0048A765    cmp         byte ptr [eax+5],0
>0048A769    je          0048AC06
 0048A76F    push        48AC30
 0048A774    push        48AC30
 0048A779    mov         eax,dword ptr [ebp-4]
 0048A77C    call        TWinControl.GetHandle
 0048A781    push        eax
 0048A782    mov         eax,[0078DB74];SetWindowTheme:function(val hwnd:Windows.HWND;val pszSubAppName:Windows.L...
 0048A787    mov         eax,dword ptr [eax]
 0048A789    call        eax
 0048A78B    push        77
 0048A78D    push        0
 0048A78F    push        0
 0048A791    push        0
 0048A793    push        0
 0048A795    push        0
 0048A797    mov         eax,dword ptr [ebp-4]
 0048A79A    call        TWinControl.GetHandle
 0048A79F    push        eax
 0048A7A0    call        user32.SetWindowPos
>0048A7A5    jmp         0048AC06
 0048A7AA    mov         dl,1
 0048A7AC    mov         eax,dword ptr [ebp-4]
 0048A7AF    call        GetParentForm
 0048A7B4    mov         ebx,eax
 0048A7B6    test        ebx,ebx
>0048A7B8    je          0048AC06
 0048A7BE    cmp         ebx,dword ptr [ebp-4]
>0048A7C1    je          0048AC06
 0048A7C7    mov         eax,dword ptr [ebp-8]
 0048A7CA    mov         eax,dword ptr [eax+8]
 0048A7CD    push        eax
 0048A7CE    mov         ecx,dword ptr [ebp-8]
 0048A7D1    mov         ecx,dword ptr [ecx+4]
 0048A7D4    mov         edx,0B047
 0048A7D9    mov         eax,ebx
 0048A7DB    call        TControl.Perform
>0048A7E0    jmp         0048AC06
 0048A7E5    mov         dl,1
 0048A7E7    mov         eax,dword ptr [ebp-4]
 0048A7EA    call        GetParentForm
 0048A7EF    mov         ebx,eax
 0048A7F1    test        ebx,ebx
>0048A7F3    je          0048AC06
 0048A7F9    test        byte ptr [ebx+1C],10
>0048A7FD    je          0048A809
 0048A7FF    cmp         dword ptr [ebx+34],0
>0048A803    jne         0048AC06
 0048A809    mov         edx,dword ptr [ebp-4]
 0048A80C    mov         eax,ebx
 0048A80E    mov         ecx,dword ptr [eax]
 0048A810    call        dword ptr [ecx+110]
 0048A816    test        al,al
>0048A818    je          0048AC27
>0048A81E    jmp         0048AC06
 0048A823    mov         eax,dword ptr [ebp-4]
 0048A826    test        byte ptr [eax+54],20
>0048A82A    jne         0048AC27
>0048A830    jmp         0048AC06
 0048A835    mov         edx,dword ptr [ebp-8]
 0048A838    mov         eax,dword ptr [ebp-4]
 0048A83B    call        TControl.WndProc
 0048A840    mov         eax,dword ptr [ebp-8]
 0048A843    cmp         dword ptr [eax+0C],0FFFFFFFF
>0048A847    jne         0048AC27
 0048A84D    mov         eax,dword ptr [ebp-8]
 0048A850    mov         eax,dword ptr [eax+8]
 0048A853    mov         dword ptr [ebp-14],eax
 0048A856    movsx       eax,word ptr [ebp-14]
 0048A85A    mov         dword ptr [ebp-1C],eax
 0048A85D    movsx       eax,word ptr [ebp-12]
 0048A861    mov         dword ptr [ebp-18],eax
 0048A864    push        0
 0048A866    push        0
 0048A868    lea         ecx,[ebp-3C]
 0048A86B    lea         edx,[ebp-1C]
 0048A86E    mov         eax,dword ptr [ebp-4]
 0048A871    call        TControl.ScreenToClient
 0048A876    lea         edx,[ebp-3C]
 0048A879    xor         ecx,ecx
 0048A87B    mov         eax,dword ptr [ebp-4]
 0048A87E    call        TWinControl.ControlAtPos
 0048A883    test        eax,eax
>0048A885    je          0048AC27
 0048A88B    mov         eax,dword ptr [ebp-8]
 0048A88E    mov         dword ptr [eax+0C],1
>0048A895    jmp         0048AC27
 0048A89A    mov         eax,dword ptr [ebp-4]
 0048A89D    mov         byte ptr [eax+248],0
 0048A8A4    mov         eax,dword ptr [ebp-4]
 0048A8A7    mov         eax,dword ptr [eax+24C]
 0048A8AD    test        eax,eax
>0048A8AF    je          0048A8C1
 0048A8B1    push        0
 0048A8B3    xor         ecx,ecx
 0048A8B5    mov         edx,0B014
 0048A8BA    call        TControl.Perform
>0048A8BF    jmp         0048A8D2
 0048A8C1    push        0
 0048A8C3    xor         ecx,ecx
 0048A8C5    mov         edx,0B014
 0048A8CA    mov         eax,dword ptr [ebp-4]
 0048A8CD    call        TControl.Perform
 0048A8D2    mov         eax,dword ptr [ebp-4]
 0048A8D5    xor         edx,edx
 0048A8D7    mov         dword ptr [eax+24C],edx
>0048A8DD    jmp         0048AC06
 0048A8E2    mov         eax,dword ptr [ebp-4]
 0048A8E5    mov         ebx,dword ptr [eax+0AC]
 0048A8EB    mov         esi,dword ptr [ebx+8]
 0048A8EE    test        esi,esi
>0048A8F0    je          0048A908
 0048A8F2    mov         eax,esi
 0048A8F4    mov         edx,dword ptr [eax]
 0048A8F6    call        dword ptr [edx+4]
 0048A8F9    test        al,1
>0048A8FB    je          0048A908
 0048A8FD    mov         edx,dword ptr [ebp-8]
 0048A900    mov         eax,dword ptr [ebx+8]
 0048A903    mov         ecx,dword ptr [eax]
 0048A905    call        dword ptr [ecx+10]
 0048A908    mov         eax,dword ptr [ebp-8]
 0048A90B    cmp         dword ptr [eax],200
>0048A911    jne         0048AA82
 0048A917    mov         eax,dword ptr [ebp-8]
 0048A91A    movsx       eax,word ptr [eax+8]
 0048A91E    mov         edx,dword ptr [ebp-8]
 0048A921    movsx       edx,word ptr [edx+0A]
 0048A925    mov         dword ptr [ebp-24],eax
 0048A928    mov         dword ptr [ebp-20],edx
 0048A92B    lea         ecx,[ebp-10]
 0048A92E    lea         edx,[ebp-24]
 0048A931    mov         eax,dword ptr [ebp-4]
 0048A934    call        TControl.ClientToScreen
 0048A939    call        GetCaptureControl
 0048A93E    mov         [00785A5C],eax
 0048A943    cmp         dword ptr ds:[785A5C],0
>0048A94A    jne         0048A95A
 0048A94C    lea         eax,[ebp-10]
 0048A94F    mov         dl,1
 0048A951    call        FindDragTarget
 0048A956    mov         ebx,eax
>0048A958    jmp         0048A960
 0048A95A    mov         ebx,dword ptr ds:[785A5C]
 0048A960    mov         eax,dword ptr [ebp-4]
 0048A963    cmp         ebx,dword ptr [eax+24C]
>0048A969    je          0048AA43
 0048A96F    mov         eax,dword ptr [ebp-4]
 0048A972    cmp         dword ptr [eax+24C],0
>0048A979    je          0048A984
 0048A97B    cmp         dword ptr ds:[785A5C],0
>0048A982    je          0048A9BA
 0048A984    cmp         dword ptr ds:[785A5C],0
>0048A98B    je          0048A99E
 0048A98D    mov         eax,dword ptr [ebp-4]
 0048A990    mov         eax,dword ptr [eax+24C]
 0048A996    cmp         eax,dword ptr ds:[785A5C]
>0048A99C    je          0048A9BA
 0048A99E    cmp         dword ptr ds:[785A5C],0
>0048A9A5    je          0048A9D1
 0048A9A7    mov         eax,[00785A5C]
 0048A9AC    mov         eax,dword ptr [eax+34]
 0048A9AF    mov         edx,dword ptr [ebp-4]
 0048A9B2    cmp         eax,dword ptr [edx+24C]
>0048A9B8    jne         0048A9D1
 0048A9BA    push        0
 0048A9BC    mov         eax,dword ptr [ebp-4]
 0048A9BF    mov         eax,dword ptr [eax+24C]
 0048A9C5    xor         ecx,ecx
 0048A9C7    mov         edx,0B014
 0048A9CC    call        TControl.Perform
 0048A9D1    mov         eax,dword ptr [ebp-4]
 0048A9D4    mov         eax,dword ptr [eax+24C]
 0048A9DA    test        eax,eax
>0048A9DC    je          0048A9E6
 0048A9DE    mov         edx,dword ptr [ebp-4]
 0048A9E1    call        TComponent.RemoveFreeNotification
 0048A9E6    mov         edx,dword ptr [ebp-4]
 0048A9E9    mov         eax,ebx
 0048A9EB    mov         dword ptr [edx+24C],eax
 0048A9F1    test        eax,eax
>0048A9F3    je          0048A9FD
 0048A9F5    mov         edx,dword ptr [ebp-4]
 0048A9F8    call        TComponent.FreeNotification
 0048A9FD    mov         eax,dword ptr [ebp-4]
 0048AA00    cmp         dword ptr [eax+24C],0
>0048AA07    je          0048AA12
 0048AA09    cmp         dword ptr ds:[785A5C],0
>0048AA10    je          0048AA2C
 0048AA12    cmp         dword ptr ds:[785A5C],0
>0048AA19    je          0048AA43
 0048AA1B    mov         eax,dword ptr [ebp-4]
 0048AA1E    mov         eax,dword ptr [eax+24C]
 0048AA24    cmp         eax,dword ptr ds:[785A5C]
>0048AA2A    jne         0048AA43
 0048AA2C    push        0
 0048AA2E    mov         eax,dword ptr [ebp-4]
 0048AA31    mov         eax,dword ptr [eax+24C]
 0048AA37    xor         ecx,ecx
 0048AA39    mov         edx,0B013
 0048AA3E    call        TControl.Perform
 0048AA43    mov         eax,dword ptr [ebp-4]
 0048AA46    cmp         byte ptr [eax+248],0
>0048AA4D    jne         0048AA82
 0048AA4F    mov         eax,dword ptr [ebp-4]
 0048AA52    mov         byte ptr [eax+248],1
 0048AA59    mov         dword ptr [ebp-30],2
 0048AA60    mov         eax,dword ptr [ebp-4]
 0048AA63    call        TWinControl.GetHandle
 0048AA68    mov         dword ptr [ebp-2C],eax
 0048AA6B    mov         dword ptr [ebp-28],0FFFFFFFF
 0048AA72    mov         dword ptr [ebp-34],10
 0048AA79    lea         eax,[ebp-34]
 0048AA7C    push        eax
 0048AA7D    call        comctl32._TrackMouseEvent
 0048AA82    mov         edx,dword ptr [ebp-8]
 0048AA85    mov         eax,dword ptr [ebp-4]
 0048AA88    call        TWinControl.IsControlMouseMsg
 0048AA8D    test        al,al
>0048AA8F    je          0048AC06
 0048AA95    mov         eax,dword ptr [ebp-8]
 0048AA98    cmp         dword ptr [eax+0C],0
>0048AA9C    jne         0048AC27
 0048AAA2    mov         eax,dword ptr [ebp-4]
 0048AAA5    call        TWinControl.HandleAllocated
 0048AAAA    test        al,al
>0048AAAC    je          0048AC27
 0048AAB2    mov         eax,dword ptr [ebp-8]
 0048AAB5    mov         eax,dword ptr [eax+8]
 0048AAB8    push        eax
 0048AAB9    mov         eax,dword ptr [ebp-8]
 0048AABC    mov         eax,dword ptr [eax+4]
 0048AABF    push        eax
 0048AAC0    mov         eax,dword ptr [ebp-8]
 0048AAC3    mov         eax,dword ptr [eax]
 0048AAC5    push        eax
 0048AAC6    mov         eax,dword ptr [ebp-4]
 0048AAC9    call        TWinControl.GetHandle
 0048AACE    push        eax
 0048AACF    call        user32.DefWindowProcW
>0048AAD4    jmp         0048AC27
 0048AAD9    mov         edx,dword ptr [ebp-8]
 0048AADC    xor         ecx,ecx
 0048AADE    mov         eax,dword ptr [ebp-4]
 0048AAE1    call        TWinControl.IsControlActivateMsg
 0048AAE6    test        al,al
>0048AAE8    je          0048AC06
 0048AAEE    mov         eax,dword ptr [ebp-8]
 0048AAF1    cmp         dword ptr [eax+0C],0
>0048AAF5    jne         0048AC27
 0048AAFB    mov         eax,dword ptr [ebp-4]
 0048AAFE    call        TWinControl.HandleAllocated
 0048AB03    test        al,al
>0048AB05    je          0048AC27
 0048AB0B    mov         edx,dword ptr [ebp-8]
 0048AB0E    mov         eax,dword ptr [ebp-4]
 0048AB11    call        TControl.WndProc
>0048AB16    jmp         0048AC27
 0048AB1B    mov         eax,dword ptr [ebp-4]
 0048AB1E    call        TControl.Dragging
 0048AB23    test        al,al
>0048AB25    jne         0048AC27
>0048AB2B    jmp         0048AC06
 0048AB30    mov         eax,dword ptr [ebp-4]
 0048AB33    call        TWinControl.GetHandle
 0048AB38    mov         ebx,eax
 0048AB3A    call        user32.GetCapture
 0048AB3F    cmp         ebx,eax
>0048AB41    jne         0048AC06
 0048AB47    cmp         dword ptr ds:[785A5C],0
>0048AB4E    je          0048AC06
 0048AB54    mov         eax,[00785A5C]
 0048AB59    mov         eax,dword ptr [eax+34]
 0048AB5C    cmp         eax,dword ptr [ebp-4]
>0048AB5F    jne         0048AC06
 0048AB65    push        0
 0048AB67    xor         ecx,ecx
 0048AB69    mov         edx,1F
 0048AB6E    mov         eax,[00785A5C]
 0048AB73    call        TControl.Perform
>0048AB78    jmp         0048AC06
 0048AB7D    mov         eax,dword ptr [ebp-8]
 0048AB80    mov         eax,dword ptr [eax+4]
 0048AB83    test        al,al
>0048AB85    je          0048AB91
 0048AB87    mov         dl,1
 0048AB89    mov         eax,dword ptr [ebp-4]
 0048AB8C    call        TWinControl.UpdateRecreatingFlag
 0048AB91    xor         eax,eax
 0048AB93    push        ebp
 0048AB94    push        48ABCC
 0048AB99    push        dword ptr fs:[eax]
 0048AB9C    mov         dword ptr fs:[eax],esp
 0048AB9F    mov         eax,dword ptr [ebp-4]
 0048ABA2    mov         edx,dword ptr [eax]
 0048ABA4    call        dword ptr [edx+0C0]
 0048ABAA    xor         eax,eax
 0048ABAC    pop         edx
 0048ABAD    pop         ecx
 0048ABAE    pop         ecx
 0048ABAF    mov         dword ptr fs:[eax],edx
 0048ABB2    push        48AC27
 0048ABB7    mov         eax,dword ptr [ebp-8]
 0048ABBA    mov         eax,dword ptr [eax+4]
 0048ABBD    test        al,al
>0048ABBF    je          0048ABCB
 0048ABC1    xor         edx,edx
 0048ABC3    mov         eax,dword ptr [ebp-4]
 0048ABC6    call        TWinControl.UpdateRecreatingFlag
 0048ABCB    ret
>0048ABCC    jmp         @HandleFinally
>0048ABD1    jmp         0048ABB7
 0048ABD3    mov         edx,dword ptr [ebp-8]
 0048ABD6    mov         eax,dword ptr [ebp-4]
 0048ABD9    call        TWinControl.Broadcast
>0048ABDE    jmp         0048AC06
 0048ABE0    mov         eax,dword ptr [ebp-4]
 0048ABE3    mov         ebx,dword ptr [eax+0AC]
 0048ABE9    mov         esi,dword ptr [ebx+8]
 0048ABEC    test        esi,esi
>0048ABEE    je          0048AC06
 0048ABF0    mov         eax,esi
 0048ABF2    mov         edx,dword ptr [eax]
 0048ABF4    call        dword ptr [edx+4]
 0048ABF7    test        al,2
>0048ABF9    je          0048AC06
 0048ABFB    mov         edx,dword ptr [ebp-8]
 0048ABFE    mov         eax,dword ptr [ebx+8]
 0048AC01    mov         ecx,dword ptr [eax]
 0048AC03    call        dword ptr [ecx+10]
 0048AC06    mov         edx,dword ptr [ebp-8]
 0048AC09    mov         eax,dword ptr [ebp-4]
 0048AC0C    call        TControl.WndProc
 0048AC11    mov         eax,dword ptr [ebp-8]
 0048AC14    cmp         dword ptr [eax],128
>0048AC1A    jne         0048AC27
 0048AC1C    mov         eax,dword ptr [ebp-4]
 0048AC1F    mov         edx,dword ptr [eax]
 0048AC21    call        dword ptr [edx+90]
 0048AC27    pop         esi
 0048AC28    pop         ebx
 0048AC29    mov         esp,ebp
 0048AC2B    pop         ebp
 0048AC2C    ret
*}
end;

//0048AC34
{*procedure TWinControl.DefaultHandler(var Message:?);
begin
 0048AC34    push        ebx
 0048AC35    push        esi
 0048AC36    push        edi
 0048AC37    push        ebp
 0048AC38    mov         ebx,edx
 0048AC3A    mov         esi,eax
 0048AC3C    cmp         dword ptr [esi+258],0
>0048AC43    je          0048AD2D
 0048AC49    mov         edi,dword ptr [ebx]
 0048AC4B    cmp         edi,7B
>0048AC4E    jne         0048AC74
 0048AC50    cmp         dword ptr [esi+34],0
>0048AC54    je          0048AC74
 0048AC56    mov         eax,dword ptr [ebx+8]
 0048AC59    push        eax
 0048AC5A    mov         ecx,dword ptr [ebx+4]
 0048AC5D    mov         edx,edi
 0048AC5F    mov         eax,dword ptr [esi+34]
 0048AC62    call        TControl.Perform
 0048AC67    mov         ebp,eax
 0048AC69    mov         dword ptr [ebx+0C],ebp
 0048AC6C    test        ebp,ebp
>0048AC6E    jne         0048AD36
 0048AC74    mov         edi,dword ptr [ebx]
 0048AC76    mov         eax,edi
 0048AC78    add         eax,0FFFFFECE
 0048AC7D    sub         eax,7
>0048AC80    jb          0048AC8E
 0048AC82    add         eax,0FFFF4407
 0048AC87    sub         eax,7
>0048AC8A    jb          0048ACA8
>0048AC8C    jmp         0048ACE8
 0048AC8E    mov         ebp,dword ptr [ebx+8]
 0048AC91    push        ebp
 0048AC92    mov         eax,dword ptr [ebx+4]
 0048AC95    push        eax
 0048AC96    add         edi,0BC00
 0048AC9C    push        edi
 0048AC9D    push        ebp
 0048AC9E    call        user32.SendMessageW
 0048ACA3    mov         dword ptr [ebx+0C],eax
>0048ACA6    jmp         0048AD14
 0048ACA8    mov         eax,dword ptr [esi+64]
 0048ACAB    mov         eax,dword ptr [eax+18]
 0048ACAE    call        ColorToRGB
 0048ACB3    push        eax
 0048ACB4    mov         eax,dword ptr [ebx+4]
 0048ACB7    push        eax
 0048ACB8    call        gdi32.SetTextColor
 0048ACBD    mov         eax,dword ptr [esi+1C0]
 0048ACC3    mov         eax,dword ptr [eax+10]
 0048ACC6    mov         eax,dword ptr [eax+18]
 0048ACC9    call        ColorToRGB
 0048ACCE    push        eax
 0048ACCF    mov         eax,dword ptr [ebx+4]
 0048ACD2    push        eax
 0048ACD3    call        gdi32.SetBkColor
 0048ACD8    mov         eax,dword ptr [esi+1C0]
 0048ACDE    call        TBrush.GetHandle
 0048ACE3    mov         dword ptr [ebx+0C],eax
>0048ACE6    jmp         0048AD14
 0048ACE8    cmp         edi,dword ptr ds:[7931AC]
>0048ACEE    jne         0048ACF5
 0048ACF0    mov         dword ptr [ebx+0C],esi
>0048ACF3    jmp         0048AD14
 0048ACF5    mov         eax,dword ptr [ebx+8]
 0048ACF8    push        eax
 0048ACF9    mov         eax,dword ptr [ebx+4]
 0048ACFC    push        eax
 0048ACFD    push        edi
 0048ACFE    mov         eax,dword ptr [esi+258]
 0048AD04    push        eax
 0048AD05    mov         eax,dword ptr [esi+254]
 0048AD0B    push        eax
 0048AD0C    call        user32.CallWindowProcW
 0048AD11    mov         dword ptr [ebx+0C],eax
 0048AD14    mov         eax,dword ptr [ebx]
 0048AD16    cmp         eax,0C
>0048AD19    jne         0048AD36
 0048AD1B    mov         edx,dword ptr [ebx+8]
 0048AD1E    push        edx
 0048AD1F    mov         ecx,dword ptr [ebx+4]
 0048AD22    mov         edx,eax
 0048AD24    mov         eax,esi
 0048AD26    call        TControl.SendDockNotification
>0048AD2B    jmp         0048AD36
 0048AD2D    mov         edx,ebx
 0048AD2F    mov         eax,esi
 0048AD31    call        TControl.DefaultHandler
 0048AD36    pop         ebp
 0048AD37    pop         edi
 0048AD38    pop         esi
 0048AD39    pop         ebx
 0048AD3A    ret
end;*}

//0048AD3C
function DoControlMsg(ControlHandle:HWND; var Message:void ):Boolean;
begin
{*
 0048AD3C    push        ebx
 0048AD3D    push        esi
 0048AD3E    push        edi
 0048AD3F    mov         esi,edx
 0048AD41    xor         ebx,ebx
 0048AD43    call        FindControl
 0048AD48    mov         edi,eax
 0048AD4A    test        edi,edi
>0048AD4C    je          0048AD69
 0048AD4E    mov         eax,dword ptr [esi+8]
 0048AD51    push        eax
 0048AD52    mov         ecx,dword ptr [esi+4]
 0048AD55    mov         edx,dword ptr [esi]
 0048AD57    add         edx,0BC00
 0048AD5D    mov         eax,edi
 0048AD5F    call        TControl.Perform
 0048AD64    mov         dword ptr [esi+0C],eax
 0048AD67    mov         bl,1
 0048AD69    mov         eax,ebx
 0048AD6B    pop         edi
 0048AD6C    pop         esi
 0048AD6D    pop         ebx
 0048AD6E    ret
*}
end;

//0048AD70
procedure TWinControl.PaintHandler(var Message:TWMPaint);
begin
{*
 0048AD70    push        ebp
 0048AD71    mov         ebp,esp
 0048AD73    add         esp,0FFFFFFB0
 0048AD76    push        ebx
 0048AD77    push        esi
 0048AD78    push        edi
 0048AD79    mov         dword ptr [ebp-8],edx
 0048AD7C    mov         dword ptr [ebp-4],eax
 0048AD7F    mov         eax,dword ptr [ebp-8]
 0048AD82    mov         eax,dword ptr [eax+4]
 0048AD85    mov         dword ptr [ebp-10],eax
 0048AD88    cmp         dword ptr [ebp-10],0
>0048AD8C    jne         0048ADA3
 0048AD8E    lea         eax,[ebp-50]
 0048AD91    push        eax
 0048AD92    mov         eax,dword ptr [ebp-4]
 0048AD95    call        TWinControl.GetHandle
 0048AD9A    push        eax
 0048AD9B    call        user32.BeginPaint
 0048ADA0    mov         dword ptr [ebp-10],eax
 0048ADA3    xor         ecx,ecx
 0048ADA5    push        ebp
 0048ADA6    push        48AECF
 0048ADAB    push        dword ptr fs:[ecx]
 0048ADAE    mov         dword ptr fs:[ecx],esp
 0048ADB1    mov         eax,dword ptr [ebp-4]
 0048ADB4    cmp         dword ptr [eax+1DC],0
>0048ADBB    jne         0048ADD0
 0048ADBD    mov         edx,dword ptr [ebp-10]
 0048ADC0    mov         eax,dword ptr [ebp-4]
 0048ADC3    mov         ecx,dword ptr [eax]
 0048ADC5    call        dword ptr [ecx+0D4]
>0048ADCB    jmp         0048AE99
 0048ADD0    mov         eax,dword ptr [ebp-10]
 0048ADD3    push        eax
 0048ADD4    call        gdi32.SaveDC
 0048ADD9    mov         dword ptr [ebp-0C],eax
 0048ADDC    xor         ecx,ecx
 0048ADDE    push        ebp
 0048ADDF    push        48AE92
 0048ADE4    push        dword ptr fs:[ecx]
 0048ADE7    mov         dword ptr fs:[ecx],esp
 0048ADEA    mov         edi,2
 0048ADEF    mov         eax,dword ptr [ebp-4]
 0048ADF2    mov         eax,dword ptr [eax+1DC]
 0048ADF8    mov         ebx,dword ptr [eax+8]
 0048ADFB    dec         ebx
 0048ADFC    test        ebx,ebx
>0048ADFE    jl          0048AE66
 0048AE00    inc         ebx
 0048AE01    xor         esi,esi
 0048AE03    mov         eax,dword ptr [ebp-4]
 0048AE06    mov         eax,dword ptr [eax+1DC]
 0048AE0C    mov         edx,esi
 0048AE0E    call        TList.Get
 0048AE13    cmp         byte ptr [eax+59],0
>0048AE17    je          0048AE25
 0048AE19    test        byte ptr [eax+1C],10
>0048AE1D    je          0048AE37
 0048AE1F    test        byte ptr [eax+55],8
>0048AE23    je          0048AE37
 0048AE25    test        byte ptr [eax+1C],10
>0048AE29    je          0048AE62
 0048AE2B    test        byte ptr [eax+55],8
>0048AE2F    jne         0048AE62
 0048AE31    test        byte ptr [eax+51],4
>0048AE35    jne         0048AE62
 0048AE37    test        byte ptr [eax+50],40
>0048AE3B    je          0048AE62
 0048AE3D    mov         ecx,dword ptr [eax+44]
 0048AE40    add         ecx,dword ptr [eax+4C]
 0048AE43    push        ecx
 0048AE44    mov         edx,dword ptr [eax+40]
 0048AE47    mov         ecx,edx
 0048AE49    add         ecx,dword ptr [eax+48]
 0048AE4C    push        ecx
 0048AE4D    mov         ecx,dword ptr [eax+44]
 0048AE50    push        ecx
 0048AE51    push        edx
 0048AE52    mov         eax,dword ptr [ebp-10]
 0048AE55    push        eax
 0048AE56    call        gdi32.ExcludeClipRect
 0048AE5B    mov         edi,eax
 0048AE5D    cmp         edi,1
>0048AE60    je          0048AE66
 0048AE62    inc         esi
 0048AE63    dec         ebx
>0048AE64    jne         0048AE03
 0048AE66    dec         edi
>0048AE67    je          0048AE77
 0048AE69    mov         edx,dword ptr [ebp-10]
 0048AE6C    mov         eax,dword ptr [ebp-4]
 0048AE6F    mov         ecx,dword ptr [eax]
 0048AE71    call        dword ptr [ecx+0D4]
 0048AE77    xor         eax,eax
 0048AE79    pop         edx
 0048AE7A    pop         ecx
 0048AE7B    pop         ecx
 0048AE7C    mov         dword ptr fs:[eax],edx
 0048AE7F    push        48AE99
 0048AE84    mov         eax,dword ptr [ebp-0C]
 0048AE87    push        eax
 0048AE88    mov         eax,dword ptr [ebp-10]
 0048AE8B    push        eax
 0048AE8C    call        gdi32.RestoreDC
 0048AE91    ret
>0048AE92    jmp         @HandleFinally
>0048AE97    jmp         0048AE84
 0048AE99    xor         ecx,ecx
 0048AE9B    mov         edx,dword ptr [ebp-10]
 0048AE9E    mov         eax,dword ptr [ebp-4]
 0048AEA1    call        TWinControl.PaintControls
 0048AEA6    xor         eax,eax
 0048AEA8    pop         edx
 0048AEA9    pop         ecx
 0048AEAA    pop         ecx
 0048AEAB    mov         dword ptr fs:[eax],edx
 0048AEAE    push        48AED6
 0048AEB3    mov         eax,dword ptr [ebp-8]
 0048AEB6    cmp         dword ptr [eax+4],0
>0048AEBA    jne         0048AECE
 0048AEBC    lea         eax,[ebp-50]
 0048AEBF    push        eax
 0048AEC0    mov         eax,dword ptr [ebp-4]
 0048AEC3    call        TWinControl.GetHandle
 0048AEC8    push        eax
 0048AEC9    call        user32.EndPaint
 0048AECE    ret
>0048AECF    jmp         @HandleFinally
>0048AED4    jmp         0048AEB3
 0048AED6    pop         edi
 0048AED7    pop         esi
 0048AED8    pop         ebx
 0048AED9    mov         esp,ebp
 0048AEDB    pop         ebp
 0048AEDC    ret
*}
end;

//0048AEE0
procedure TWinControl.PaintWindow(DC:HDC);
begin
{*
 0048AEE0    push        esi
 0048AEE1    add         esp,0FFFFFFF0
 0048AEE4    mov         esi,eax
 0048AEE6    test        byte ptr [esi+56],1
 0048AEEA    setne       al
 0048AEED    and         eax,7F
 0048AEF0    mov         eax,dword ptr [eax*4+785A60]
 0048AEF7    mov         dword ptr [esp],eax
 0048AEFA    mov         dword ptr [esp+4],edx
 0048AEFE    xor         eax,eax
 0048AF00    mov         dword ptr [esp+8],eax
 0048AF04    xor         eax,eax
 0048AF06    mov         dword ptr [esp+0C],eax
 0048AF0A    mov         edx,esp
 0048AF0C    mov         eax,esi
 0048AF0E    mov         ecx,dword ptr [eax]
 0048AF10    call        dword ptr [ecx-10]
 0048AF13    add         esp,10
 0048AF16    pop         esi
 0048AF17    ret
*}
end;

//0048AF18
procedure TWinControl.PaintControls(DC:HDC; First:TControl);
begin
{*
 0048AF18    push        ebp
 0048AF19    mov         ebp,esp
 0048AF1B    add         esp,0FFFFFFD8
 0048AF1E    push        ebx
 0048AF1F    push        esi
 0048AF20    push        edi
 0048AF21    mov         ebx,ecx
 0048AF23    mov         dword ptr [ebp-8],edx
 0048AF26    mov         dword ptr [ebp-4],eax
 0048AF29    mov         eax,dword ptr [ebp-4]
 0048AF2C    cmp         byte ptr [eax+1EC],0
>0048AF33    je          0048AF5E
 0048AF35    mov         eax,dword ptr [ebp-4]
 0048AF38    cmp         byte ptr [eax+1EB],0
>0048AF3F    je          0048AF5E
 0048AF41    mov         eax,dword ptr [ebp-4]
 0048AF44    cmp         dword ptr [eax+1C8],0
>0048AF4B    je          0048AF5E
 0048AF4D    mov         eax,dword ptr [ebp-4]
 0048AF50    mov         eax,dword ptr [eax+1C8]
 0048AF56    mov         edx,dword ptr [ebp-8]
 0048AF59    mov         ecx,dword ptr [eax]
 0048AF5B    call        dword ptr [ecx+20]
 0048AF5E    mov         eax,dword ptr [ebp-4]
 0048AF61    mov         eax,dword ptr [eax+1DC]
 0048AF67    test        eax,eax
>0048AF69    je          0048B0E6
 0048AF6F    xor         edx,edx
 0048AF71    mov         dword ptr [ebp-0C],edx
 0048AF74    test        ebx,ebx
>0048AF76    je          0048AF8D
 0048AF78    mov         edx,ebx
 0048AF7A    call        TList.IndexOf
 0048AF7F    mov         dword ptr [ebp-0C],eax
 0048AF82    cmp         dword ptr [ebp-0C],0
>0048AF86    jge         0048AF8D
 0048AF88    xor         eax,eax
 0048AF8A    mov         dword ptr [ebp-0C],eax
 0048AF8D    mov         eax,dword ptr [ebp-4]
 0048AF90    mov         eax,dword ptr [eax+1DC]
 0048AF96    mov         eax,dword ptr [eax+8]
 0048AF99    mov         dword ptr [ebp-10],eax
 0048AF9C    mov         eax,dword ptr [ebp-0C]
 0048AF9F    cmp         eax,dword ptr [ebp-10]
>0048AFA2    jge         0048B0E6
 0048AFA8    mov         eax,dword ptr [ebp-4]
 0048AFAB    mov         eax,dword ptr [eax+1DC]
 0048AFB1    mov         edx,dword ptr [ebp-0C]
 0048AFB4    call        TList.Get
 0048AFB9    mov         dword ptr [ebp-18],eax
 0048AFBC    mov         eax,dword ptr [ebp-18]
 0048AFBF    cmp         byte ptr [eax+59],0
>0048AFC3    je          0048AFD7
 0048AFC5    mov         eax,dword ptr [ebp-18]
 0048AFC8    test        byte ptr [eax+1C],10
>0048AFCC    je          0048AFFE
 0048AFCE    mov         eax,dword ptr [ebp-18]
 0048AFD1    test        byte ptr [eax+55],8
>0048AFD5    je          0048AFFE
 0048AFD7    mov         eax,dword ptr [ebp-18]
 0048AFDA    test        byte ptr [eax+1C],10
>0048AFDE    je          0048B0D7
 0048AFE4    mov         eax,dword ptr [ebp-18]
 0048AFE7    test        byte ptr [eax+55],8
>0048AFEB    jne         0048B0D7
 0048AFF1    mov         eax,dword ptr [ebp-18]
 0048AFF4    test        byte ptr [eax+51],4
>0048AFF8    jne         0048B0D7
 0048AFFE    mov         eax,dword ptr [ebp-18]
 0048B001    mov         esi,dword ptr [eax+44]
 0048B004    mov         eax,esi
 0048B006    mov         edx,dword ptr [ebp-18]
 0048B009    add         eax,dword ptr [edx+4C]
 0048B00C    push        eax
 0048B00D    lea         eax,[ebp-28]
 0048B010    push        eax
 0048B011    mov         eax,dword ptr [ebp-18]
 0048B014    mov         ebx,dword ptr [eax+40]
 0048B017    mov         ecx,ebx
 0048B019    mov         eax,dword ptr [ebp-18]
 0048B01C    add         ecx,dword ptr [eax+48]
 0048B01F    mov         edx,esi
 0048B021    mov         eax,ebx
 0048B023    call        Rect
 0048B028    lea         eax,[ebp-28]
 0048B02B    push        eax
 0048B02C    mov         eax,dword ptr [ebp-8]
 0048B02F    push        eax
 0048B030    call        gdi32.RectVisible
 0048B035    test        eax,eax
>0048B037    je          0048B0D7
 0048B03D    mov         eax,dword ptr [ebp-4]
 0048B040    test        byte ptr [eax+54],80
>0048B044    je          0048B050
 0048B046    mov         eax,dword ptr [ebp-18]
 0048B049    or          dword ptr [eax+54],80
 0048B050    mov         eax,dword ptr [ebp-8]
 0048B053    push        eax
 0048B054    call        gdi32.SaveDC
 0048B059    mov         dword ptr [ebp-14],eax
 0048B05C    xor         eax,eax
 0048B05E    push        ebp
 0048B05F    push        48B0C6
 0048B064    push        dword ptr fs:[eax]
 0048B067    mov         dword ptr fs:[eax],esp
 0048B06A    mov         eax,dword ptr [ebp-18]
 0048B06D    mov         ecx,dword ptr [eax+44]
 0048B070    mov         eax,dword ptr [ebp-18]
 0048B073    mov         edx,dword ptr [eax+40]
 0048B076    mov         eax,dword ptr [ebp-8]
 0048B079    call        MoveWindowOrg
 0048B07E    mov         eax,dword ptr [ebp-18]
 0048B081    mov         eax,dword ptr [eax+4C]
 0048B084    push        eax
 0048B085    mov         eax,dword ptr [ebp-18]
 0048B088    mov         eax,dword ptr [eax+48]
 0048B08B    push        eax
 0048B08C    push        0
 0048B08E    push        0
 0048B090    mov         eax,dword ptr [ebp-8]
 0048B093    push        eax
 0048B094    call        gdi32.IntersectClipRect
 0048B099    push        0
 0048B09B    mov         ecx,dword ptr [ebp-8]
 0048B09E    mov         edx,0F
 0048B0A3    mov         eax,dword ptr [ebp-18]
 0048B0A6    call        TControl.Perform
 0048B0AB    xor         eax,eax
 0048B0AD    pop         edx
 0048B0AE    pop         ecx
 0048B0AF    pop         ecx
 0048B0B0    mov         dword ptr fs:[eax],edx
 0048B0B3    push        48B0CD
 0048B0B8    mov         eax,dword ptr [ebp-14]
 0048B0BB    push        eax
 0048B0BC    mov         eax,dword ptr [ebp-8]
 0048B0BF    push        eax
 0048B0C0    call        gdi32.RestoreDC
 0048B0C5    ret
>0048B0C6    jmp         @HandleFinally
>0048B0CB    jmp         0048B0B8
 0048B0CD    mov         eax,dword ptr [ebp-18]
 0048B0D0    and         dword ptr [eax+54],0FFFFFF7F
 0048B0D7    inc         dword ptr [ebp-0C]
 0048B0DA    mov         eax,dword ptr [ebp-0C]
 0048B0DD    cmp         eax,dword ptr [ebp-10]
>0048B0E0    jl          0048AFA8
 0048B0E6    mov         eax,dword ptr [ebp-4]
 0048B0E9    mov         eax,dword ptr [eax+1E0]
 0048B0EF    test        eax,eax
>0048B0F1    je          0048B1F1
 0048B0F7    mov         edi,dword ptr [eax+8]
 0048B0FA    dec         edi
 0048B0FB    test        edi,edi
>0048B0FD    jl          0048B1F1
 0048B103    inc         edi
 0048B104    mov         dword ptr [ebp-0C],0
 0048B10B    mov         eax,dword ptr [ebp-4]
 0048B10E    mov         eax,dword ptr [eax+1E0]
 0048B114    mov         edx,dword ptr [ebp-0C]
 0048B117    call        TList.Get
 0048B11C    mov         ebx,eax
 0048B11E    cmp         byte ptr [ebx+1E9],0
>0048B125    je          0048B1E7
 0048B12B    test        byte ptr [ebx+50],10
>0048B12F    je          0048B1E7
 0048B135    test        byte ptr [ebx+1C],10
>0048B139    jne         0048B141
 0048B13B    cmp         byte ptr [ebx+59],0
>0048B13F    jne         0048B15F
 0048B141    test        byte ptr [ebx+1C],10
>0048B145    je          0048B1E7
 0048B14B    test        byte ptr [ebx+51],4
>0048B14F    jne         0048B1E7
 0048B155    test        byte ptr [ebx+55],8
>0048B159    jne         0048B1E7
 0048B15F    mov         eax,0FF000010
 0048B164    call        ColorToRGB
 0048B169    push        eax
 0048B16A    call        gdi32.CreateSolidBrush
 0048B16F    mov         esi,eax
 0048B171    push        esi
 0048B172    mov         eax,dword ptr [ebx+44]
 0048B175    add         eax,dword ptr [ebx+4C]
 0048B178    push        eax
 0048B179    lea         eax,[ebp-28]
 0048B17C    push        eax
 0048B17D    mov         ecx,dword ptr [ebx+40]
 0048B180    add         ecx,dword ptr [ebx+48]
 0048B183    mov         edx,dword ptr [ebx+44]
 0048B186    dec         edx
 0048B187    mov         eax,dword ptr [ebx+40]
 0048B18A    dec         eax
 0048B18B    call        Rect
 0048B190    lea         eax,[ebp-28]
 0048B193    push        eax
 0048B194    mov         eax,dword ptr [ebp-8]
 0048B197    push        eax
 0048B198    call        user32.FrameRect
 0048B19D    push        esi
 0048B19E    call        gdi32.DeleteObject
 0048B1A3    mov         eax,0FF000014
 0048B1A8    call        ColorToRGB
 0048B1AD    push        eax
 0048B1AE    call        gdi32.CreateSolidBrush
 0048B1B3    mov         esi,eax
 0048B1B5    push        esi
 0048B1B6    mov         eax,dword ptr [ebx+44]
 0048B1B9    add         eax,dword ptr [ebx+4C]
 0048B1BC    inc         eax
 0048B1BD    push        eax
 0048B1BE    lea         eax,[ebp-28]
 0048B1C1    push        eax
 0048B1C2    mov         ecx,dword ptr [ebx+40]
 0048B1C5    add         ecx,dword ptr [ebx+48]
 0048B1C8    inc         ecx
 0048B1C9    mov         edx,dword ptr [ebx+44]
 0048B1CC    mov         eax,dword ptr [ebx+40]
 0048B1CF    call        Rect
 0048B1D4    lea         eax,[ebp-28]
 0048B1D7    push        eax
 0048B1D8    mov         eax,dword ptr [ebp-8]
 0048B1DB    push        eax
 0048B1DC    call        user32.FrameRect
 0048B1E1    push        esi
 0048B1E2    call        gdi32.DeleteObject
 0048B1E7    inc         dword ptr [ebp-0C]
 0048B1EA    dec         edi
>0048B1EB    jne         0048B10B
 0048B1F1    pop         edi
 0048B1F2    pop         esi
 0048B1F3    pop         ebx
 0048B1F4    mov         esp,ebp
 0048B1F6    pop         ebp
 0048B1F7    ret
*}
end;

//0048B1F8
procedure TWinControl.PaintTo(Canvas:TCanvas; X:Integer; Y:Integer);
begin
{*
 0048B1F8    push        ebp
 0048B1F9    mov         ebp,esp
 0048B1FB    push        ecx
 0048B1FC    push        ebx
 0048B1FD    push        esi
 0048B1FE    mov         esi,ecx
 0048B200    mov         dword ptr [ebp-4],edx
 0048B203    mov         ebx,eax
 0048B205    mov         eax,dword ptr [ebp-4]
 0048B208    call        TCustomCanvas.Lock
 0048B20D    xor         eax,eax
 0048B20F    push        ebp
 0048B210    push        48B248
 0048B215    push        dword ptr fs:[eax]
 0048B218    mov         dword ptr fs:[eax],esp
 0048B21B    mov         eax,dword ptr [ebp+8]
 0048B21E    push        eax
 0048B21F    mov         eax,dword ptr [ebp-4]
 0048B222    call        TCanvas.GetHandle
 0048B227    mov         edx,eax
 0048B229    mov         ecx,esi
 0048B22B    mov         eax,ebx
 0048B22D    call        TWinControl.PaintTo
 0048B232    xor         eax,eax
 0048B234    pop         edx
 0048B235    pop         ecx
 0048B236    pop         ecx
 0048B237    mov         dword ptr fs:[eax],edx
 0048B23A    push        48B24F
 0048B23F    mov         eax,dword ptr [ebp-4]
 0048B242    call        TCustomCanvas.Unlock
 0048B247    ret
>0048B248    jmp         @HandleFinally
>0048B24D    jmp         0048B23F
 0048B24F    pop         esi
 0048B250    pop         ebx
 0048B251    pop         ecx
 0048B252    pop         ebp
 0048B253    ret         4
*}
end;

//0048B258
procedure DrawThemeEdge(DC:HDC; var DrawRect:TRect);
begin
{*
 0048B258    push        ebp
 0048B259    mov         ebp,esp
 0048B25B    add         esp,0FFFFFFE8
 0048B25E    mov         dword ptr [ebp-8],edx
 0048B261    mov         dword ptr [ebp-4],eax
 0048B264    mov         eax,dword ptr [ebp-4]
 0048B267    push        eax
 0048B268    call        gdi32.SaveDC
 0048B26D    mov         dword ptr [ebp-0C],eax
 0048B270    xor         eax,eax
 0048B272    push        ebp
 0048B273    push        48B2EC
 0048B278    push        dword ptr fs:[eax]
 0048B27B    mov         dword ptr fs:[eax],esp
 0048B27E    mov         eax,dword ptr [ebp-8]
 0048B281    mov         eax,dword ptr [eax+0C]
 0048B284    sub         eax,2
 0048B287    push        eax
 0048B288    mov         eax,dword ptr [ebp-8]
 0048B28B    mov         eax,dword ptr [eax+8]
 0048B28E    sub         eax,2
 0048B291    push        eax
 0048B292    mov         eax,dword ptr [ebp-8]
 0048B295    mov         eax,dword ptr [eax+4]
 0048B298    add         eax,2
 0048B29B    push        eax
 0048B29C    mov         eax,dword ptr [ebp-8]
 0048B29F    mov         eax,dword ptr [eax]
 0048B2A1    add         eax,2
 0048B2A4    push        eax
 0048B2A5    mov         eax,dword ptr [ebp-4]
 0048B2A8    push        eax
 0048B2A9    call        gdi32.ExcludeClipRect
 0048B2AE    call        ThemeServices
 0048B2B3    lea         ecx,[ebp-18]
 0048B2B6    mov         dl,2
 0048B2B8    call        TThemeServices.GetElementDetails
 0048B2BD    mov         eax,dword ptr [ebp-8]
 0048B2C0    push        eax
 0048B2C1    call        ThemeServices
 0048B2C6    lea         ecx,[ebp-18]
 0048B2C9    mov         edx,dword ptr [ebp-4]
 0048B2CC    call        TThemeServices.DrawElement
 0048B2D1    xor         eax,eax
 0048B2D3    pop         edx
 0048B2D4    pop         ecx
 0048B2D5    pop         ecx
 0048B2D6    mov         dword ptr fs:[eax],edx
 0048B2D9    push        48B2F3
 0048B2DE    mov         eax,dword ptr [ebp-0C]
 0048B2E1    push        eax
 0048B2E2    mov         eax,dword ptr [ebp-4]
 0048B2E5    push        eax
 0048B2E6    call        gdi32.RestoreDC
 0048B2EB    ret
>0048B2EC    jmp         @HandleFinally
>0048B2F1    jmp         0048B2DE
 0048B2F3    push        0FE
 0048B2F5    push        0FE
 0048B2F7    mov         eax,dword ptr [ebp-8]
 0048B2FA    push        eax
 0048B2FB    call        user32.InflateRect
 0048B300    mov         esp,ebp
 0048B302    pop         ebp
 0048B303    ret
*}
end;

//0048B304
procedure TWinControl.PaintTo(DC:HDC; X:Integer; Y:Integer);
begin
{*
 0048B304    push        ebp
 0048B305    mov         ebp,esp
 0048B307    add         esp,0FFFFFFE4
 0048B30A    push        ebx
 0048B30B    push        esi
 0048B30C    mov         ebx,ecx
 0048B30E    mov         dword ptr [ebp-8],edx
 0048B311    mov         dword ptr [ebp-4],eax
 0048B314    mov         eax,dword ptr [ebp-4]
 0048B317    or          dword ptr [eax+54],80
 0048B31E    mov         eax,dword ptr [ebp-8]
 0048B321    push        eax
 0048B322    call        gdi32.SaveDC
 0048B327    mov         dword ptr [ebp-0C],eax
 0048B32A    xor         edx,edx
 0048B32C    push        ebp
 0048B32D    push        48B53E
 0048B332    push        dword ptr fs:[edx]
 0048B335    mov         dword ptr fs:[edx],esp
 0048B338    mov         ecx,dword ptr [ebp+8]
 0048B33B    mov         edx,ebx
 0048B33D    mov         eax,dword ptr [ebp-8]
 0048B340    call        MoveWindowOrg
 0048B345    mov         eax,dword ptr [ebp-4]
 0048B348    mov         eax,dword ptr [eax+4C]
 0048B34B    push        eax
 0048B34C    mov         eax,dword ptr [ebp-4]
 0048B34F    mov         eax,dword ptr [eax+48]
 0048B352    push        eax
 0048B353    push        0
 0048B355    push        0
 0048B357    mov         eax,dword ptr [ebp-8]
 0048B35A    push        eax
 0048B35B    call        gdi32.IntersectClipRect
 0048B360    xor         esi,esi
 0048B362    xor         ebx,ebx
 0048B364    push        0EC
 0048B366    mov         eax,dword ptr [ebp-4]
 0048B369    call        TWinControl.GetHandle
 0048B36E    push        eax
 0048B36F    call        user32.GetWindowLongW
 0048B374    test        ah,2
>0048B377    je          0048B385
 0048B379    mov         ebx,0A
 0048B37E    mov         esi,200F
>0048B383    jmp         0048B3A6
 0048B385    push        0F0
 0048B387    mov         eax,dword ptr [ebp-4]
 0048B38A    call        TWinControl.GetHandle
 0048B38F    push        eax
 0048B390    call        user32.GetWindowLongW
 0048B395    test        eax,800000
>0048B39A    je          0048B3A6
 0048B39C    mov         ebx,3
 0048B3A1    mov         esi,0A00F
 0048B3A6    cmp         ebx,0A
>0048B3A9    jne         0048B467
 0048B3AF    call        ThemeServices
 0048B3B4    call        TThemeServices.GetThemesEnabled
 0048B3B9    test        al,al
>0048B3BB    je          0048B467
 0048B3C1    mov         eax,dword ptr [ebp-4]
 0048B3C4    test        byte ptr [eax+1C],10
>0048B3C8    je          0048B3DA
 0048B3CA    mov         eax,dword ptr [ebp-4]
 0048B3CD    call        UnthemedDesigner
 0048B3D2    test        al,al
>0048B3D4    jne         0048B467
 0048B3DA    mov         eax,dword ptr [ebp-4]
 0048B3DD    mov         eax,dword ptr [eax+4C]
 0048B3E0    push        eax
 0048B3E1    mov         eax,dword ptr [ebp-4]
 0048B3E4    mov         eax,dword ptr [eax+48]
 0048B3E7    push        eax
 0048B3E8    push        0
 0048B3EA    push        0
 0048B3EC    lea         eax,[ebp-1C]
 0048B3EF    push        eax
 0048B3F0    call        user32.SetRect
 0048B3F5    mov         eax,dword ptr [ebp-4]
 0048B3F8    test        byte ptr [eax+52],2
>0048B3FC    je          0048B40B
 0048B3FE    lea         edx,[ebp-1C]
 0048B401    mov         eax,dword ptr [ebp-8]
 0048B404    call        DrawThemeEdge
>0048B409    jmp         0048B43C
 0048B40B    mov         eax,dword ptr [ebp-4]
 0048B40E    mov         eax,dword ptr [eax+50]
 0048B411    or          eax,dword ptr ds:[48B558]
 0048B417    mov         edx,dword ptr [ebp-4]
 0048B41A    mov         dword ptr [edx+50],eax
 0048B41D    lea         edx,[ebp-1C]
 0048B420    mov         eax,dword ptr [ebp-8]
 0048B423    call        DrawThemeEdge
 0048B428    mov         eax,dword ptr [ebp-4]
 0048B42B    mov         edx,dword ptr ds:[48B558]
 0048B431    not         edx
 0048B433    and         edx,dword ptr [eax+50]
 0048B436    mov         eax,dword ptr [ebp-4]
 0048B439    mov         dword ptr [eax+50],edx
 0048B43C    mov         ecx,dword ptr [ebp-18]
 0048B43F    mov         edx,dword ptr [ebp-1C]
 0048B442    mov         eax,dword ptr [ebp-8]
 0048B445    call        MoveWindowOrg
 0048B44A    mov         eax,dword ptr [ebp-10]
 0048B44D    sub         eax,dword ptr [ebp-18]
 0048B450    push        eax
 0048B451    mov         eax,dword ptr [ebp-14]
 0048B454    sub         eax,dword ptr [ebp-1C]
 0048B457    push        eax
 0048B458    push        0
 0048B45A    push        0
 0048B45C    mov         eax,dword ptr [ebp-8]
 0048B45F    push        eax
 0048B460    call        gdi32.IntersectClipRect
>0048B465    jmp         0048B4BE
 0048B467    test        esi,esi
>0048B469    je          0048B4BE
 0048B46B    mov         eax,dword ptr [ebp-4]
 0048B46E    mov         eax,dword ptr [eax+4C]
 0048B471    push        eax
 0048B472    mov         eax,dword ptr [ebp-4]
 0048B475    mov         eax,dword ptr [eax+48]
 0048B478    push        eax
 0048B479    push        0
 0048B47B    push        0
 0048B47D    lea         eax,[ebp-1C]
 0048B480    push        eax
 0048B481    call        user32.SetRect
 0048B486    push        esi
 0048B487    push        ebx
 0048B488    lea         eax,[ebp-1C]
 0048B48B    push        eax
 0048B48C    mov         eax,dword ptr [ebp-8]
 0048B48F    push        eax
 0048B490    call        user32.DrawEdge
 0048B495    mov         ecx,dword ptr [ebp-18]
 0048B498    mov         edx,dword ptr [ebp-1C]
 0048B49B    mov         eax,dword ptr [ebp-8]
 0048B49E    call        MoveWindowOrg
 0048B4A3    mov         eax,dword ptr [ebp-10]
 0048B4A6    sub         eax,dword ptr [ebp-18]
 0048B4A9    push        eax
 0048B4AA    mov         eax,dword ptr [ebp-14]
 0048B4AD    sub         eax,dword ptr [ebp-1C]
 0048B4B0    push        eax
 0048B4B1    push        0
 0048B4B3    push        0
 0048B4B5    mov         eax,dword ptr [ebp-8]
 0048B4B8    push        eax
 0048B4B9    call        gdi32.IntersectClipRect
 0048B4BE    push        0
 0048B4C0    mov         ecx,dword ptr [ebp-8]
 0048B4C3    mov         edx,14
 0048B4C8    mov         eax,dword ptr [ebp-4]
 0048B4CB    call        TControl.Perform
 0048B4D0    push        0
 0048B4D2    mov         ecx,dword ptr [ebp-8]
 0048B4D5    mov         edx,0F
 0048B4DA    mov         eax,dword ptr [ebp-4]
 0048B4DD    call        TControl.Perform
 0048B4E2    mov         eax,dword ptr [ebp-4]
 0048B4E5    mov         eax,dword ptr [eax+1E0]
 0048B4EB    test        eax,eax
>0048B4ED    je          0048B523
 0048B4EF    mov         ebx,dword ptr [eax+8]
 0048B4F2    dec         ebx
 0048B4F3    test        ebx,ebx
>0048B4F5    jl          0048B523
 0048B4F7    inc         ebx
 0048B4F8    xor         esi,esi
 0048B4FA    mov         eax,dword ptr [ebp-4]
 0048B4FD    mov         eax,dword ptr [eax+1E0]
 0048B503    mov         edx,esi
 0048B505    call        TList.Get
 0048B50A    cmp         byte ptr [eax+59],0
>0048B50E    je          0048B51F
 0048B510    mov         edx,dword ptr [eax+44]
 0048B513    push        edx
 0048B514    mov         ecx,dword ptr [eax+40]
 0048B517    mov         edx,dword ptr [ebp-8]
 0048B51A    call        TWinControl.PaintTo
 0048B51F    inc         esi
 0048B520    dec         ebx
>0048B521    jne         0048B4FA
 0048B523    xor         eax,eax
 0048B525    pop         edx
 0048B526    pop         ecx
 0048B527    pop         ecx
 0048B528    mov         dword ptr fs:[eax],edx
 0048B52B    push        48B545
 0048B530    mov         eax,dword ptr [ebp-0C]
 0048B533    push        eax
 0048B534    mov         eax,dword ptr [ebp-8]
 0048B537    push        eax
 0048B538    call        gdi32.RestoreDC
 0048B53D    ret
>0048B53E    jmp         @HandleFinally
>0048B543    jmp         0048B530
 0048B545    mov         eax,dword ptr [ebp-4]
 0048B548    and         dword ptr [eax+54],0FFFFFF7F
 0048B54F    pop         esi
 0048B550    pop         ebx
 0048B551    mov         esp,ebp
 0048B553    pop         ebp
 0048B554    ret         4
*}
end;

//0048B55C
procedure TWinControl.WMPaint(var Message:TWMPaint);
begin
{*
 0048B55C    push        ebp
 0048B55D    mov         ebp,esp
 0048B55F    add         esp,0FFFFFFAC
 0048B562    push        ebx
 0048B563    push        esi
 0048B564    mov         ebx,edx
 0048B566    mov         dword ptr [ebp-4],eax
 0048B569    mov         eax,dword ptr [ebp-4]
 0048B56C    cmp         byte ptr [eax+260],0
>0048B573    je          0048B57B
 0048B575    cmp         dword ptr [ebx+4],0
>0048B579    je          0048B5AE
 0048B57B    mov         eax,dword ptr [ebp-4]
 0048B57E    test        byte ptr [eax+55],1
>0048B582    jne         0048B59F
 0048B584    mov         eax,dword ptr [ebp-4]
 0048B587    call        TWinControl.GetControlCount
 0048B58C    test        eax,eax
>0048B58E    jne         0048B59F
 0048B590    mov         edx,ebx
 0048B592    mov         eax,dword ptr [ebp-4]
 0048B595    mov         ecx,dword ptr [eax]
 0048B597    call        dword ptr [ecx-10]
>0048B59A    jmp         0048B7AA
 0048B59F    mov         edx,ebx
 0048B5A1    mov         eax,dword ptr [ebp-4]
 0048B5A4    call        TWinControl.PaintHandler
>0048B5A9    jmp         0048B7AA
 0048B5AE    call        DwmCompositionEnabled
 0048B5B3    test        al,al
>0048B5B5    je          0048B68E
 0048B5BB    lea         eax,[ebp-54]
 0048B5BE    push        eax
 0048B5BF    mov         eax,dword ptr [ebp-4]
 0048B5C2    call        TWinControl.GetHandle
 0048B5C7    push        eax
 0048B5C8    call        user32.BeginPaint
 0048B5CD    mov         esi,eax
 0048B5CF    xor         edx,edx
 0048B5D1    push        ebp
 0048B5D2    push        48B687
 0048B5D7    push        dword ptr fs:[edx]
 0048B5DA    mov         dword ptr fs:[edx],esp
 0048B5DD    lea         eax,[ebp-8]
 0048B5E0    push        eax
 0048B5E1    push        0
 0048B5E3    push        2
 0048B5E5    lea         eax,[ebp-4C]
 0048B5E8    push        eax
 0048B5E9    push        esi
 0048B5EA    call        BeginBufferedPaint
 0048B5EF    mov         dword ptr [ebp-14],eax
 0048B5F2    cmp         dword ptr [ebp-14],0
>0048B5F6    je          0048B667
 0048B5F8    xor         edx,edx
 0048B5FA    push        ebp
 0048B5FB    push        48B660
 0048B600    push        dword ptr fs:[edx]
 0048B603    mov         dword ptr fs:[edx],esp
 0048B606    mov         eax,dword ptr [ebp-8]
 0048B609    push        eax
 0048B60A    mov         ecx,dword ptr [ebp-8]
 0048B60D    mov         edx,14
 0048B612    mov         eax,dword ptr [ebp-4]
 0048B615    call        TControl.Perform
 0048B61A    push        4
 0048B61C    mov         ecx,dword ptr [ebp-8]
 0048B61F    mov         edx,318
 0048B624    mov         eax,dword ptr [ebp-4]
 0048B627    call        TControl.Perform
 0048B62C    mov         eax,dword ptr [ebp-4]
 0048B62F    test        byte ptr [eax+52],40
>0048B633    jne         0048B647
 0048B635    lea         eax,[ebp-4C]
 0048B638    push        0FF
 0048B63D    push        eax
 0048B63E    mov         eax,dword ptr [ebp-14]
 0048B641    push        eax
 0048B642    call        BufferedPaintSetAlpha
 0048B647    xor         eax,eax
 0048B649    pop         edx
 0048B64A    pop         ecx
 0048B64B    pop         ecx
 0048B64C    mov         dword ptr fs:[eax],edx
 0048B64F    push        48B667
 0048B654    push        0FF
 0048B656    mov         eax,dword ptr [ebp-14]
 0048B659    push        eax
 0048B65A    call        EndBufferedPaint
 0048B65F    ret
>0048B660    jmp         @HandleFinally
>0048B665    jmp         0048B654
 0048B667    xor         eax,eax
 0048B669    pop         edx
 0048B66A    pop         ecx
 0048B66B    pop         ecx
 0048B66C    mov         dword ptr fs:[eax],edx
 0048B66F    push        48B7AA
 0048B674    lea         eax,[ebp-54]
 0048B677    push        eax
 0048B678    mov         eax,dword ptr [ebp-4]
 0048B67B    call        TWinControl.GetHandle
 0048B680    push        eax
 0048B681    call        user32.EndPaint
 0048B686    ret
>0048B687    jmp         @HandleFinally
>0048B68C    jmp         0048B674
 0048B68E    lea         eax,[ebp-54]
 0048B691    push        eax
 0048B692    mov         eax,dword ptr [ebp-4]
 0048B695    call        TWinControl.GetHandle
 0048B69A    push        eax
 0048B69B    call        user32.BeginPaint
 0048B6A0    mov         esi,eax
 0048B6A2    mov         eax,dword ptr [ebp-40]
 0048B6A5    sub         eax,dword ptr [ebp-48]
 0048B6A8    push        eax
 0048B6A9    mov         eax,dword ptr [ebp-44]
 0048B6AC    sub         eax,dword ptr [ebp-4C]
 0048B6AF    push        eax
 0048B6B0    push        esi
 0048B6B1    call        gdi32.CreateCompatibleBitmap
 0048B6B6    mov         dword ptr [ebp-0C],eax
 0048B6B9    xor         ecx,ecx
 0048B6BB    push        ebp
 0048B6BC    push        48B7A3
 0048B6C1    push        dword ptr fs:[ecx]
 0048B6C4    mov         dword ptr fs:[ecx],esp
 0048B6C7    push        esi
 0048B6C8    call        gdi32.CreateCompatibleDC
 0048B6CD    mov         dword ptr [ebp-8],eax
 0048B6D0    mov         eax,dword ptr [ebp-0C]
 0048B6D3    push        eax
 0048B6D4    mov         eax,dword ptr [ebp-8]
 0048B6D7    push        eax
 0048B6D8    call        gdi32.SelectObject
 0048B6DD    mov         dword ptr [ebp-10],eax
 0048B6E0    xor         ecx,ecx
 0048B6E2    push        ebp
 0048B6E3    push        48B76A
 0048B6E8    push        dword ptr fs:[ecx]
 0048B6EB    mov         dword ptr fs:[ecx],esp
 0048B6EE    push        0
 0048B6F0    mov         eax,dword ptr [ebp-48]
 0048B6F3    push        eax
 0048B6F4    mov         eax,dword ptr [ebp-4C]
 0048B6F7    push        eax
 0048B6F8    mov         eax,dword ptr [ebp-8]
 0048B6FB    push        eax
 0048B6FC    call        gdi32.SetWindowOrgEx
 0048B701    mov         eax,dword ptr [ebp-8]
 0048B704    push        eax
 0048B705    mov         ecx,dword ptr [ebp-8]
 0048B708    mov         edx,14
 0048B70D    mov         eax,dword ptr [ebp-4]
 0048B710    call        TControl.Perform
 0048B715    mov         eax,dword ptr [ebp-8]
 0048B718    mov         dword ptr [ebx+4],eax
 0048B71B    mov         edx,ebx
 0048B71D    mov         eax,dword ptr [ebp-4]
 0048B720    call        TWinControl.WMPaint
 0048B725    xor         eax,eax
 0048B727    mov         dword ptr [ebx+4],eax
 0048B72A    push        0CC0020
 0048B72F    mov         edx,dword ptr [ebp-48]
 0048B732    push        edx
 0048B733    mov         eax,dword ptr [ebp-4C]
 0048B736    push        eax
 0048B737    mov         ecx,dword ptr [ebp-8]
 0048B73A    push        ecx
 0048B73B    mov         ecx,dword ptr [ebp-40]
 0048B73E    sub         ecx,edx
 0048B740    push        ecx
 0048B741    mov         ecx,dword ptr [ebp-44]
 0048B744    sub         ecx,eax
 0048B746    push        ecx
 0048B747    push        edx
 0048B748    push        eax
 0048B749    push        esi
 0048B74A    call        gdi32.BitBlt
 0048B74F    xor         eax,eax
 0048B751    pop         edx
 0048B752    pop         ecx
 0048B753    pop         ecx
 0048B754    mov         dword ptr fs:[eax],edx
 0048B757    push        48B771
 0048B75C    mov         eax,dword ptr [ebp-10]
 0048B75F    push        eax
 0048B760    mov         eax,dword ptr [ebp-8]
 0048B763    push        eax
 0048B764    call        gdi32.SelectObject
 0048B769    ret
>0048B76A    jmp         @HandleFinally
>0048B76F    jmp         0048B75C
 0048B771    xor         eax,eax
 0048B773    pop         edx
 0048B774    pop         ecx
 0048B775    pop         ecx
 0048B776    mov         dword ptr fs:[eax],edx
 0048B779    push        48B7AA
 0048B77E    lea         eax,[ebp-54]
 0048B781    push        eax
 0048B782    mov         eax,dword ptr [ebp-4]
 0048B785    call        TWinControl.GetHandle
 0048B78A    push        eax
 0048B78B    call        user32.EndPaint
 0048B790    mov         eax,dword ptr [ebp-8]
 0048B793    push        eax
 0048B794    call        gdi32.DeleteDC
 0048B799    mov         eax,dword ptr [ebp-0C]
 0048B79C    push        eax
 0048B79D    call        gdi32.DeleteObject
 0048B7A2    ret
>0048B7A3    jmp         @HandleFinally
>0048B7A8    jmp         0048B77E
 0048B7AA    pop         esi
 0048B7AB    pop         ebx
 0048B7AC    mov         esp,ebp
 0048B7AE    pop         ebp
 0048B7AF    ret
*}
end;

//0048B7B0
procedure TWinControl.WMCharToItem(var Message:TWMCharToItem);
begin
{*
 0048B7B0    push        ebx
 0048B7B1    push        esi
 0048B7B2    mov         ebx,edx
 0048B7B4    mov         esi,eax
 0048B7B6    mov         edx,ebx
 0048B7B8    mov         eax,dword ptr [ebx+8]
 0048B7BB    call        DoControlMsg
 0048B7C0    test        al,al
>0048B7C2    jne         0048B7CD
 0048B7C4    mov         edx,ebx
 0048B7C6    mov         eax,esi
 0048B7C8    mov         ecx,dword ptr [eax]
 0048B7CA    call        dword ptr [ecx-10]
 0048B7CD    pop         esi
 0048B7CE    pop         ebx
 0048B7CF    ret
*}
end;

//0048B7D0
procedure TWinControl.WMNotify(var Message:TWMNotify);
begin
{*
 0048B7D0    push        ebx
 0048B7D1    push        esi
 0048B7D2    mov         ebx,edx
 0048B7D4    mov         esi,eax
 0048B7D6    mov         edx,ebx
 0048B7D8    mov         eax,dword ptr [ebx+8]
 0048B7DB    mov         eax,dword ptr [eax]
 0048B7DD    call        DoControlMsg
 0048B7E2    test        al,al
>0048B7E4    jne         0048B7EF
 0048B7E6    mov         edx,ebx
 0048B7E8    mov         eax,esi
 0048B7EA    mov         ecx,dword ptr [eax]
 0048B7EC    call        dword ptr [ecx-10]
 0048B7EF    pop         esi
 0048B7F0    pop         ebx
 0048B7F1    ret
*}
end;

//0048B7F4
procedure TWinControl.WMSysColorChange(var Message:TWMSysColorChange);
begin
{*
 0048B7F4    push        ebx
 0048B7F5    mov         ebx,eax
 0048B7F7    call        PaletteChanged
 0048B7FC    push        0
 0048B7FE    xor         ecx,ecx
 0048B800    mov         edx,0B024
 0048B805    mov         eax,ebx
 0048B807    call        TControl.Perform
 0048B80C    pop         ebx
 0048B80D    ret
*}
end;

//0048B810
procedure TWinControl.WMWinIniChange(var Message:TMessage);
begin
{*
 0048B810    mov         ecx,dword ptr [edx+8]
 0048B813    push        ecx
 0048B814    mov         ecx,dword ptr [edx+4]
 0048B817    mov         edx,0B025
 0048B81C    call        TControl.Perform
 0048B821    ret
*}
end;

//0048B824
procedure TWinControl.WMFontChange(var Message:TMessage);
begin
{*
 0048B824    push        0
 0048B826    xor         ecx,ecx
 0048B828    mov         edx,0B026
 0048B82D    call        TControl.Perform
 0048B832    ret
*}
end;

//0048B834
procedure TWinControl.WMTimeChange(var Message:TMessage);
begin
{*
 0048B834    push        0
 0048B836    xor         ecx,ecx
 0048B838    mov         edx,0B027
 0048B83D    call        TControl.Perform
 0048B842    ret
*}
end;

//0048B844
procedure TWinControl.WMCommand(var Message:TWMCommand);
begin
{*
 0048B844    push        ebx
 0048B845    push        esi
 0048B846    mov         ebx,edx
 0048B848    mov         esi,eax
 0048B84A    mov         edx,ebx
 0048B84C    mov         eax,dword ptr [ebx+8]
 0048B84F    call        DoControlMsg
 0048B854    test        al,al
>0048B856    jne         0048B861
 0048B858    mov         edx,ebx
 0048B85A    mov         eax,esi
 0048B85C    mov         ecx,dword ptr [eax]
 0048B85E    call        dword ptr [ecx-10]
 0048B861    pop         esi
 0048B862    pop         ebx
 0048B863    ret
*}
end;

//0048B864
procedure TWinControl.WMHScroll(var Message:TWMHScroll);
begin
{*
 0048B864    push        ebx
 0048B865    push        esi
 0048B866    mov         ebx,edx
 0048B868    mov         esi,eax
 0048B86A    mov         edx,ebx
 0048B86C    mov         eax,dword ptr [ebx+8]
 0048B86F    call        DoControlMsg
 0048B874    test        al,al
>0048B876    jne         0048B881
 0048B878    mov         edx,ebx
 0048B87A    mov         eax,esi
 0048B87C    mov         ecx,dword ptr [eax]
 0048B87E    call        dword ptr [ecx-10]
 0048B881    pop         esi
 0048B882    pop         ebx
 0048B883    ret
*}
end;

//0048B884
procedure TWinControl.WMCompareItem(var Message:TWMCompareItem);
begin
{*
 0048B884    push        ebx
 0048B885    push        esi
 0048B886    mov         ebx,edx
 0048B888    mov         esi,eax
 0048B88A    mov         edx,ebx
 0048B88C    mov         eax,dword ptr [ebx+8]
 0048B88F    mov         eax,dword ptr [eax+8]
 0048B892    call        DoControlMsg
 0048B897    test        al,al
>0048B899    jne         0048B8A4
 0048B89B    mov         edx,ebx
 0048B89D    mov         eax,esi
 0048B89F    mov         ecx,dword ptr [eax]
 0048B8A1    call        dword ptr [ecx-10]
 0048B8A4    pop         esi
 0048B8A5    pop         ebx
 0048B8A6    ret
*}
end;

//0048B8A8
procedure TWinControl.WMDeleteItem(var Message:TWMDeleteItem);
begin
{*
 0048B8A8    push        ebx
 0048B8A9    push        esi
 0048B8AA    mov         ebx,edx
 0048B8AC    mov         esi,eax
 0048B8AE    mov         edx,ebx
 0048B8B0    mov         eax,dword ptr [ebx+8]
 0048B8B3    mov         eax,dword ptr [eax+0C]
 0048B8B6    call        DoControlMsg
 0048B8BB    test        al,al
>0048B8BD    jne         0048B8C8
 0048B8BF    mov         edx,ebx
 0048B8C1    mov         eax,esi
 0048B8C3    mov         ecx,dword ptr [eax]
 0048B8C5    call        dword ptr [ecx-10]
 0048B8C8    pop         esi
 0048B8C9    pop         ebx
 0048B8CA    ret
*}
end;

//0048B8CC
procedure TWinControl.WMDrawItem(var Message:TWMDrawItem);
begin
{*
 0048B8CC    push        ebx
 0048B8CD    push        esi
 0048B8CE    mov         ebx,edx
 0048B8D0    mov         esi,eax
 0048B8D2    mov         edx,ebx
 0048B8D4    mov         eax,dword ptr [ebx+8]
 0048B8D7    mov         eax,dword ptr [eax+14]
 0048B8DA    call        DoControlMsg
 0048B8DF    test        al,al
>0048B8E1    jne         0048B8EC
 0048B8E3    mov         edx,ebx
 0048B8E5    mov         eax,esi
 0048B8E7    mov         ecx,dword ptr [eax]
 0048B8E9    call        dword ptr [ecx-10]
 0048B8EC    pop         esi
 0048B8ED    pop         ebx
 0048B8EE    ret
*}
end;

//0048B8F0
procedure TWinControl.WMMeasureItem(var Message:TWMMeasureItem);
begin
{*
 0048B8F0    push        ebx
 0048B8F1    push        esi
 0048B8F2    mov         ebx,edx
 0048B8F4    mov         esi,eax
 0048B8F6    mov         edx,ebx
 0048B8F8    mov         eax,dword ptr [ebx+4]
 0048B8FB    call        DoControlMsg
 0048B900    test        al,al
>0048B902    jne         0048B90D
 0048B904    mov         edx,ebx
 0048B906    mov         eax,esi
 0048B908    mov         ecx,dword ptr [eax]
 0048B90A    call        dword ptr [ecx-10]
 0048B90D    pop         esi
 0048B90E    pop         ebx
 0048B90F    ret
*}
end;

//0048B910
procedure TWinControl.WMMouseActivate(var Message:TWMMouseActivate);
begin
{*
 0048B910    push        ebx
 0048B911    push        esi
 0048B912    mov         esi,edx
 0048B914    mov         ebx,eax
 0048B916    mov         edx,esi
 0048B918    mov         ecx,ebx
 0048B91A    mov         eax,ebx
 0048B91C    call        TWinControl.IsControlActivateMsg
 0048B921    test        al,al
>0048B923    je          0048B93F
 0048B925    cmp         dword ptr [esi+0C],0
>0048B929    jne         0048B93F
 0048B92B    mov         eax,ebx
 0048B92D    call        TWinControl.HandleAllocated
 0048B932    test        al,al
>0048B934    je          0048B93F
 0048B936    mov         edx,esi
 0048B938    mov         eax,ebx
 0048B93A    mov         ecx,dword ptr [eax]
 0048B93C    call        dword ptr [ecx-10]
 0048B93F    pop         esi
 0048B940    pop         ebx
 0048B941    ret
*}
end;

//0048B944
procedure TWinControl.WMEraseBkgnd(var Message:TWMEraseBkgnd);
begin
{*
 0048B944    push        ebx
 0048B945    push        esi
 0048B946    push        edi
 0048B947    add         esp,0FFFFFFF0
 0048B94A    mov         esi,edx
 0048B94C    mov         ebx,eax
 0048B94E    call        ThemeServices
 0048B953    mov         edi,eax
 0048B955    mov         eax,edi
 0048B957    call        TThemeServices.GetThemesEnabled
 0048B95C    test        al,al
>0048B95E    je          0048B99F
 0048B960    cmp         dword ptr [ebx+34],0
>0048B964    je          0048B99F
 0048B966    test        byte ptr [ebx+52],4
>0048B96A    je          0048B99F
 0048B96C    mov         eax,dword ptr [ebx+34]
 0048B96F    cmp         byte ptr [eax+260],0
>0048B976    je          0048B984
 0048B978    mov         edx,dword ptr [esi+4]
 0048B97B    mov         eax,ebx
 0048B97D    call        PerformEraseBackground
>0048B982    jmp         0048B9D5
 0048B984    push        0
 0048B986    push        0
 0048B988    push        0
 0048B98A    mov         eax,ebx
 0048B98C    call        TWinControl.GetHandle
 0048B991    mov         edx,eax
 0048B993    mov         ecx,dword ptr [esi+4]
 0048B996    mov         eax,edi
 0048B998    call        TThemeServices.DrawParentBackground
>0048B99D    jmp         0048B9D5
 0048B99F    cmp         byte ptr [ebx+260],0
>0048B9A6    je          0048B9B0
 0048B9A8    mov         eax,dword ptr [esi+4]
 0048B9AB    cmp         eax,dword ptr [esi+8]
>0048B9AE    jne         0048B9D5
 0048B9B0    mov         eax,dword ptr [ebx+1C0]
 0048B9B6    call        TBrush.GetHandle
 0048B9BB    push        eax
 0048B9BC    lea         edx,[esp+4]
 0048B9C0    mov         eax,ebx
 0048B9C2    mov         ecx,dword ptr [eax]
 0048B9C4    call        dword ptr [ecx+54]
 0048B9C7    lea         eax,[esp+4]
 0048B9CB    push        eax
 0048B9CC    mov         eax,dword ptr [esi+4]
 0048B9CF    push        eax
 0048B9D0    call        user32.FillRect
 0048B9D5    mov         dword ptr [esi+0C],1
 0048B9DC    add         esp,10
 0048B9DF    pop         edi
 0048B9E0    pop         esi
 0048B9E1    pop         ebx
 0048B9E2    ret
*}
end;

//0048B9E4
procedure TWinControl.WMWindowPosChanged(var Message:TWMWindowPosChanged);
begin
{*
 0048B9E4    push        ebx
 0048B9E5    push        esi
 0048B9E6    push        edi
 0048B9E7    push        ebp
 0048B9E8    push        ecx
 0048B9E9    mov         ebp,edx
 0048B9EB    mov         edi,eax
 0048B9ED    mov         esi,dword ptr [ebp+8]
 0048B9F0    cmp         byte ptr [edi+1E9],0
>0048B9F7    je          0048BA0B
 0048B9F9    test        byte ptr [edi+50],10
>0048B9FD    je          0048BA0B
 0048B9FF    cmp         dword ptr [edi+34],0
>0048BA03    je          0048BA0B
 0048BA05    test        byte ptr [esi+18],8
>0048BA09    je          0048BA0F
 0048BA0B    xor         ebx,ebx
>0048BA0D    jmp         0048BA11
 0048BA0F    mov         bl,1
 0048BA11    test        byte ptr [esi+18],2
>0048BA15    jne         0048BA27
 0048BA17    mov         eax,dword ptr [edi+258]
 0048BA1D    push        eax
 0048BA1E    call        user32.IsWindowVisible
 0048BA23    test        eax,eax
>0048BA25    jne         0048BA2B
 0048BA27    xor         eax,eax
>0048BA29    jmp         0048BA2D
 0048BA2B    mov         al,1
 0048BA2D    mov         byte ptr [esp],al
 0048BA30    test        byte ptr [esi+18],1
>0048BA34    jne         0048BA46
 0048BA36    mov         eax,dword ptr [edi+258]
 0048BA3C    push        eax
 0048BA3D    call        user32.IsWindowVisible
 0048BA42    test        eax,eax
>0048BA44    jne         0048BA4A
 0048BA46    xor         eax,eax
>0048BA48    jmp         0048BA4C
 0048BA4A    mov         al,1
 0048BA4C    mov         byte ptr [esp+1],al
 0048BA50    test        bl,bl
>0048BA52    je          0048BA65
 0048BA54    movzx       eax,byte ptr [esp]
 0048BA58    or          al,byte ptr [esp+1]
>0048BA5C    je          0048BA65
 0048BA5E    mov         eax,edi
 0048BA60    call        TWinControl.InvalidateFrame
 0048BA65    test        byte ptr [edi+55],2
>0048BA69    jne         0048BA72
 0048BA6B    mov         eax,edi
 0048BA6D    call        TWinControl.UpdateBounds
 0048BA72    mov         edx,ebp
 0048BA74    mov         eax,edi
 0048BA76    call        TControl.WMWindowPosChanged
 0048BA7B    test        bl,bl
>0048BA7D    je          0048BA96
 0048BA7F    movzx       eax,byte ptr [esp]
 0048BA83    or          al,byte ptr [esp+1]
>0048BA87    jne         0048BA8F
 0048BA89    test        byte ptr [esi+18],0C0
>0048BA8D    je          0048BA96
 0048BA8F    mov         eax,edi
 0048BA91    call        TWinControl.InvalidateFrame
 0048BA96    pop         edx
 0048BA97    pop         ebp
 0048BA98    pop         edi
 0048BA99    pop         esi
 0048BA9A    pop         ebx
 0048BA9B    ret
*}
end;

//0048BA9C
procedure TWinControl.WMWindowPosChanging(var Message:TWMWindowPosChanging);
begin
{*
 0048BA9C    push        ebx
 0048BA9D    push        esi
 0048BA9E    push        edi
 0048BA9F    mov         edi,edx
 0048BAA1    mov         ebx,eax
 0048BAA3    movzx       eax,word ptr ds:[48BAE8]
 0048BAAA    and         ax,word ptr [ebx+1C]
 0048BAAE    movzx       edx,word ptr ds:[48BAEC]
 0048BAB5    cmp         dx,ax
>0048BAB8    jne         0048BADA
 0048BABA    mov         eax,dword ptr [edi+8]
 0048BABD    mov         esi,eax
 0048BABF    test        byte ptr [esi+18],1
>0048BAC3    jne         0048BADA
 0048BAC5    lea         ecx,[esi+14]
 0048BAC8    lea         edx,[esi+10]
 0048BACB    mov         eax,ebx
 0048BACD    call        TControl.CheckNewSize
 0048BAD2    test        al,al
>0048BAD4    jne         0048BADA
 0048BAD6    or          dword ptr [esi+18],1
 0048BADA    mov         edx,edi
 0048BADC    mov         eax,ebx
 0048BADE    mov         ecx,dword ptr [eax]
 0048BAE0    call        dword ptr [ecx-10]
 0048BAE3    pop         edi
 0048BAE4    pop         esi
 0048BAE5    pop         ebx
 0048BAE6    ret
*}
end;

//0048BAF0
procedure TWinControl.WMSize(var Message:TWMSize);
begin
{*
 0048BAF0    push        ebx
 0048BAF1    push        esi
 0048BAF2    mov         ebx,edx
 0048BAF4    mov         esi,eax
 0048BAF6    mov         eax,esi
 0048BAF8    call        TWinControl.UpdateBounds
 0048BAFD    mov         eax,esi
 0048BAFF    call        TControl.UpdateExplicitBounds
 0048BB04    mov         edx,ebx
 0048BB06    mov         eax,esi
 0048BB08    mov         ecx,dword ptr [eax]
 0048BB0A    call        dword ptr [ecx-10]
 0048BB0D    xor         ebx,ebx
 0048BB0F    mov         eax,dword ptr [esi+34]
 0048BB12    test        eax,eax
>0048BB14    je          0048BB27
 0048BB16    cmp         dword ptr [eax+1A8],0
>0048BB1D    je          0048BB27
 0048BB1F    mov         ebx,dword ptr [eax+1A8]
>0048BB25    jmp         0048BB33
 0048BB27    mov         eax,dword ptr [esi+1A8]
 0048BB2D    test        eax,eax
>0048BB2F    je          0048BB33
 0048BB31    mov         ebx,eax
 0048BB33    test        ebx,ebx
>0048BB35    je          0048BB4F
 0048BB37    mov         edx,esi
 0048BB39    mov         eax,ebx
 0048BB3B    call        TList.IndexOf
 0048BB40    inc         eax
>0048BB41    jne         0048BB69
 0048BB43    mov         edx,esi
 0048BB45    mov         eax,ebx
 0048BB47    call        TList.Add
 0048BB4C    pop         esi
 0048BB4D    pop         ebx
 0048BB4E    ret
 0048BB4F    xor         edx,edx
 0048BB51    mov         eax,esi
 0048BB53    call        TWinControl.AlignControl
 0048BB58    test        byte ptr [esi+1C],1
>0048BB5C    jne         0048BB69
 0048BB5E    mov         eax,esi
 0048BB60    mov         si,0FFD0
 0048BB64    call        @CallDynaInst
 0048BB69    pop         esi
 0048BB6A    pop         ebx
 0048BB6B    ret
*}
end;

//0048BB6C
procedure TWinControl.WMMove(var Message:TWMMove);
begin
{*
 0048BB6C    push        esi
 0048BB6D    mov         esi,eax
 0048BB6F    mov         eax,esi
 0048BB71    mov         ecx,dword ptr [eax]
 0048BB73    call        dword ptr [ecx-10]
 0048BB76    mov         eax,esi
 0048BB78    call        TWinControl.UpdateBounds
 0048BB7D    mov         eax,esi
 0048BB7F    call        TControl.UpdateExplicitBounds
 0048BB84    pop         esi
 0048BB85    ret
*}
end;

//0048BB88
procedure TWinControl.WMSetCursor(var Message:TWMSetCursor);
begin
{*
 0048BB88    push        ebx
 0048BB89    push        esi
 0048BB8A    push        edi
 0048BB8B    add         esp,0FFFFFFF0
 0048BB8E    mov         esi,edx
 0048BB90    mov         ebx,eax
 0048BB92    mov         eax,dword ptr [esi+4]
 0048BB95    cmp         eax,dword ptr [ebx+258]
>0048BB9B    jne         0048BC7D
 0048BBA1    movzx       eax,word ptr [esi+8]
 0048BBA5    sub         ax,0FFFFFFFE
>0048BBA9    je          0048BC3B
 0048BBAF    sub         ax,3
>0048BBB3    jne         0048BC7D
 0048BBB9    mov         eax,[0078DB00];^Screen:TScreen
 0048BBBE    mov         eax,dword ptr [eax]
 0048BBC0    movzx       edi,word ptr [eax+48]
 0048BBC4    test        di,di
>0048BBC7    jne         0048BC18
 0048BBC9    push        esp
 0048BBCA    call        user32.GetCursorPos
 0048BBCF    push        0
 0048BBD1    push        0
 0048BBD3    lea         ecx,[esp+10]
 0048BBD7    lea         edx,[esp+8]
 0048BBDB    mov         eax,ebx
 0048BBDD    call        TControl.ScreenToClient
 0048BBE2    lea         edx,[esp+10]
 0048BBE6    xor         ecx,ecx
 0048BBE8    mov         eax,ebx
 0048BBEA    call        TWinControl.ControlAtPos
 0048BBEF    test        eax,eax
>0048BBF1    je          0048BC03
 0048BBF3    test        byte ptr [eax+1C],10
>0048BBF7    je          0048BBFF
 0048BBF9    mov         di,0FFFE
>0048BBFD    jmp         0048BC03
 0048BBFF    movzx       edi,word ptr [eax+78]
 0048BC03    test        di,di
>0048BC06    jne         0048BC18
 0048BC08    test        byte ptr [ebx+1C],10
>0048BC0C    je          0048BC14
 0048BC0E    mov         di,0FFFE
>0048BC12    jmp         0048BC18
 0048BC14    movzx       edi,word ptr [ebx+78]
 0048BC18    test        di,di
>0048BC1B    je          0048BC7D
 0048BC1D    movsx       edx,di
 0048BC20    mov         eax,[0078DB00];^Screen:TScreen
 0048BC25    mov         eax,dword ptr [eax]
 0048BC27    call        TScreen.GetCursors
 0048BC2C    push        eax
 0048BC2D    call        user32.SetCursor
 0048BC32    mov         dword ptr [esi+0C],1
>0048BC39    jmp         0048BC86
 0048BC3B    cmp         word ptr [esi+0A],201
>0048BC41    jne         0048BC7D
 0048BC43    mov         eax,[0078D590];^Application:TApplication
 0048BC48    mov         eax,dword ptr [eax]
 0048BC4A    cmp         dword ptr [eax+170],0
>0048BC51    je          0048BC7D
 0048BC53    mov         eax,[0078D590];^Application:TApplication
 0048BC58    mov         eax,dword ptr [eax]
 0048BC5A    mov         eax,dword ptr [eax+170]
 0048BC60    push        eax
 0048BC61    call        user32.GetLastActivePopup
 0048BC66    mov         edi,eax
 0048BC68    call        user32.GetForegroundWindow
 0048BC6D    cmp         edi,eax
>0048BC6F    je          0048BC7D
 0048BC71    mov         eax,[0078D590];^Application:TApplication
 0048BC76    mov         eax,dword ptr [eax]
 0048BC78    call        TApplication.BringToFront
 0048BC7D    mov         edx,esi
 0048BC7F    mov         eax,ebx
 0048BC81    mov         ecx,dword ptr [eax]
 0048BC83    call        dword ptr [ecx-10]
 0048BC86    add         esp,10
 0048BC89    pop         edi
 0048BC8A    pop         esi
 0048BC8B    pop         ebx
 0048BC8C    ret
*}
end;

//0048BC90
procedure TWinControl.WMSetFocus(var Message:TWMSetFocus);
begin
{*
 0048BC90    push        esi
 0048BC91    mov         esi,eax
 0048BC93    mov         eax,esi
 0048BC95    mov         ecx,dword ptr [eax]
 0048BC97    call        dword ptr [ecx-10]
 0048BC9A    mov         eax,esi
 0048BC9C    call        TWinControl.SetIme
 0048BCA1    xor         edx,edx
 0048BCA3    mov         eax,esi
 0048BCA5    call        TWinControl.InvalidateDockHostSite
 0048BCAA    pop         esi
 0048BCAB    ret
*}
end;

//0048BCAC
procedure TWinControl.WMKillFocus(var Message:TWMKillFocus);
begin
{*
 0048BCAC    push        esi
 0048BCAD    mov         esi,eax
 0048BCAF    mov         eax,esi
 0048BCB1    mov         ecx,dword ptr [eax]
 0048BCB3    call        dword ptr [ecx-10]
 0048BCB6    mov         eax,esi
 0048BCB8    call        TWinControl.ResetIme
 0048BCBD    mov         dl,1
 0048BCBF    mov         eax,esi
 0048BCC1    call        TWinControl.InvalidateDockHostSite
 0048BCC6    pop         esi
 0048BCC7    ret
*}
end;

//0048BCC8
procedure TWinControl.WMIMEStartComp(var Message:TMessage);
begin
{*
 0048BCC8    push        esi
 0048BCC9    mov         esi,eax
 0048BCCB    mov         byte ptr [esi+261],1
 0048BCD2    mov         eax,esi
 0048BCD4    mov         ecx,dword ptr [eax]
 0048BCD6    call        dword ptr [ecx-10]
 0048BCD9    pop         esi
 0048BCDA    ret
*}
end;

//0048BCDC
procedure TWinControl.WMInputLangChange(var Message:TMessage);
begin
{*
 0048BCDC    mov         ecx,dword ptr ds:[78D590];^Application:TApplication
 0048BCE2    cmp         dword ptr [ecx],0
>0048BCE5    je          0048BD08
 0048BCE7    mov         eax,dword ptr [edx+8]
 0048BCEA    push        eax
 0048BCEB    mov         eax,dword ptr [edx+4]
 0048BCEE    push        eax
 0048BCEF    push        0B056
 0048BCF4    mov         eax,[0078D590];^Application:TApplication
 0048BCF9    mov         eax,dword ptr [eax]
 0048BCFB    mov         eax,dword ptr [eax+170]
 0048BD01    push        eax
 0048BD02    call        user32.PostMessageW
 0048BD07    ret
 0048BD08    mov         eax,dword ptr [eax+34]
 0048BD0B    test        eax,eax
>0048BD0D    je          0048BD1C
 0048BD0F    mov         ecx,dword ptr [eax+34]
 0048BD12    test        ecx,ecx
>0048BD14    je          0048BD1C
 0048BD16    mov         eax,ecx
 0048BD18    test        eax,eax
>0048BD1A    jne         0048BD0F
 0048BD1C    test        eax,eax
>0048BD1E    je          0048BD31
 0048BD20    mov         ecx,dword ptr [edx+8]
 0048BD23    push        ecx
 0048BD24    mov         ecx,dword ptr [edx+4]
 0048BD27    mov         edx,0B056
 0048BD2C    call        TControl.Perform
 0048BD31    ret
*}
end;

//0048BD34
procedure TWinControl.WMIMEEndComp(var Message:TMessage);
begin
{*
 0048BD34    push        esi
 0048BD35    mov         esi,eax
 0048BD37    mov         byte ptr [esi+261],0
 0048BD3E    mov         eax,esi
 0048BD40    mov         ecx,dword ptr [eax]
 0048BD42    call        dword ptr [ecx-10]
 0048BD45    pop         esi
 0048BD46    ret
*}
end;

//0048BD48
function TWinControl.SetImeCompositionWindow(Font:TFont; XPos:Integer; YPos:Integer):Boolean;
begin
{*
 0048BD48    push        ebp
 0048BD49    mov         ebp,esp
 0048BD4B    add         esp,0FFFFFF80
 0048BD4E    push        ebx
 0048BD4F    push        esi
 0048BD50    push        edi
 0048BD51    mov         dword ptr [ebp-8],ecx
 0048BD54    mov         dword ptr [ebp-4],edx
 0048BD57    mov         esi,eax
 0048BD59    xor         ebx,ebx
 0048BD5B    mov         eax,esi
 0048BD5D    call        TWinControl.GetHandle
 0048BD62    call        Imm32GetContext
 0048BD67    mov         edi,eax
 0048BD69    test        edi,edi
>0048BD6B    je          0048BDBE
 0048BD6D    mov         dword ptr [ebp-24],2
 0048BD74    mov         eax,dword ptr [ebp-8]
 0048BD77    mov         dword ptr [ebp-20],eax
 0048BD7A    mov         eax,dword ptr [ebp+8]
 0048BD7D    mov         dword ptr [ebp-1C],eax
 0048BD80    lea         edx,[ebp-24]
 0048BD83    mov         eax,edi
 0048BD85    call        Imm32SetCompositionWindow
 0048BD8A    cmp         dword ptr [ebp-4],0
>0048BD8E    je          0048BDAE
 0048BD90    lea         eax,[ebp-80]
 0048BD93    push        eax
 0048BD94    push        5C
 0048BD96    mov         eax,dword ptr [ebp-4]
 0048BD99    call        TFont.GetHandle
 0048BD9E    push        eax
 0048BD9F    call        gdi32.GetObjectW
 0048BDA4    lea         edx,[ebp-80]
 0048BDA7    mov         eax,edi
 0048BDA9    call        Imm32SetCompositionFont
 0048BDAE    mov         eax,esi
 0048BDB0    call        TWinControl.GetHandle
 0048BDB5    mov         edx,edi
 0048BDB7    call        Imm32ReleaseContext
 0048BDBC    mov         bl,1
 0048BDBE    mov         eax,ebx
 0048BDC0    pop         edi
 0048BDC1    pop         esi
 0048BDC2    pop         ebx
 0048BDC3    mov         esp,ebp
 0048BDC5    pop         ebp
 0048BDC6    ret         4
*}
end;

//0048BDCC
procedure TWinControl.RequestAlign;
begin
{*
 0048BDCC    push        ebp
 0048BDCD    mov         ebp,esp
 0048BDCF    add         esp,0FFFFFFF8
 0048BDD2    mov         dword ptr [ebp-4],eax
 0048BDD5    mov         eax,dword ptr [ebp-4]
 0048BDD8    cmp         dword ptr [eax+34],0
>0048BDDC    je          0048BE4D
 0048BDDE    mov         byte ptr [ebp-5],0
 0048BDE2    mov         eax,dword ptr [ebp-4]
 0048BDE5    mov         eax,dword ptr [eax+1A8]
 0048BDEB    test        eax,eax
>0048BDED    je          0048BE0E
 0048BDEF    mov         edx,dword ptr [ebp-4]
 0048BDF2    mov         edx,dword ptr [edx+34]
 0048BDF5    cmp         dword ptr [edx+1A8],0
>0048BDFC    jne         0048BE0E
 0048BDFE    mov         edx,dword ptr [ebp-4]
 0048BE01    mov         edx,dword ptr [edx+34]
 0048BE04    mov         dword ptr [edx+1A8],eax
 0048BE0A    mov         byte ptr [ebp-5],1
 0048BE0E    xor         eax,eax
 0048BE10    push        ebp
 0048BE11    push        48BE46
 0048BE16    push        dword ptr fs:[eax]
 0048BE19    mov         dword ptr fs:[eax],esp
 0048BE1C    mov         eax,dword ptr [ebp-4]
 0048BE1F    call        TControl.RequestAlign
 0048BE24    xor         eax,eax
 0048BE26    pop         edx
 0048BE27    pop         ecx
 0048BE28    pop         ecx
 0048BE29    mov         dword ptr fs:[eax],edx
 0048BE2C    push        48BE4D
 0048BE31    cmp         byte ptr [ebp-5],0
>0048BE35    je          0048BE45
 0048BE37    mov         eax,dword ptr [ebp-4]
 0048BE3A    mov         eax,dword ptr [eax+34]
 0048BE3D    xor         edx,edx
 0048BE3F    mov         dword ptr [eax+1A8],edx
 0048BE45    ret
>0048BE46    jmp         @HandleFinally
>0048BE4B    jmp         0048BE31
 0048BE4D    pop         ecx
 0048BE4E    pop         ecx
 0048BE4F    pop         ebp
 0048BE50    ret
*}
end;

//0048BE54
procedure TWinControl.SetIme;
begin
{*
 0048BE54    push        ebp
 0048BE55    mov         ebp,esp
 0048BE57    push        0
 0048BE59    push        ebx
 0048BE5A    push        esi
 0048BE5B    push        edi
 0048BE5C    mov         ebx,eax
 0048BE5E    xor         eax,eax
 0048BE60    push        ebp
 0048BE61    push        48BF34
 0048BE66    push        dword ptr fs:[eax]
 0048BE69    mov         dword ptr fs:[eax],esp
 0048BE6C    mov         eax,[0078DB7C];SysLocale:TSysLocale
 0048BE71    cmp         byte ptr [eax+0C],0
>0048BE75    je          0048BF1E
 0048BE7B    cmp         dword ptr [ebx+1D0],0
>0048BE82    je          0048BF0B
 0048BE88    lea         edx,[ebp-4]
 0048BE8B    mov         eax,[0078DB00];^Screen:TScreen
 0048BE90    mov         eax,dword ptr [eax]
 0048BE92    call        TScreen.GetDefaultIME
 0048BE97    mov         edx,dword ptr [ebp-4]
 0048BE9A    mov         eax,dword ptr [ebx+1D0]
 0048BEA0    call        AnsiCompareText
 0048BEA5    test        eax,eax
>0048BEA7    je          0048BF0B
 0048BEA9    mov         eax,[0078DB00];^Screen:TScreen
 0048BEAE    mov         eax,dword ptr [eax]
 0048BEB0    call        TScreen.GetImes
 0048BEB5    mov         edx,dword ptr [eax]
 0048BEB7    call        dword ptr [edx+14]
 0048BEBA    test        eax,eax
>0048BEBC    je          0048BF0B
 0048BEBE    mov         eax,[0078DB00];^Screen:TScreen
 0048BEC3    mov         eax,dword ptr [eax]
 0048BEC5    mov         esi,dword ptr [eax+40]
 0048BEC8    cmp         byte ptr [ebx+1CC],0
>0048BECF    je          0048BF03
 0048BED1    mov         eax,[0078DB00];^Screen:TScreen
 0048BED6    mov         eax,dword ptr [eax]
 0048BED8    call        TScreen.GetImes
 0048BEDD    mov         edx,dword ptr [ebx+1D0]
 0048BEE3    mov         ecx,dword ptr [eax]
 0048BEE5    call        dword ptr [ecx+54]
 0048BEE8    mov         edi,eax
 0048BEEA    test        edi,edi
>0048BEEC    jl          0048BF03
 0048BEEE    mov         eax,[0078DB00];^Screen:TScreen
 0048BEF3    mov         eax,dword ptr [eax]
 0048BEF5    call        TScreen.GetImes
 0048BEFA    mov         edx,edi
 0048BEFC    mov         ecx,dword ptr [eax]
 0048BEFE    call        dword ptr [ecx+18]
 0048BF01    mov         esi,eax
 0048BF03    push        1
 0048BF05    push        esi
 0048BF06    call        user32.ActivateKeyboardLayout
 0048BF0B    mov         eax,ebx
 0048BF0D    call        TWinControl.GetHandle
 0048BF12    movzx       edx,byte ptr [ebx+1CC]
 0048BF19    call        SetImeMode
 0048BF1E    xor         eax,eax
 0048BF20    pop         edx
 0048BF21    pop         ecx
 0048BF22    pop         ecx
 0048BF23    mov         dword ptr fs:[eax],edx
 0048BF26    push        48BF3B
 0048BF2B    lea         eax,[ebp-4]
 0048BF2E    call        @UStrClr
 0048BF33    ret
>0048BF34    jmp         @HandleFinally
>0048BF39    jmp         0048BF2B
 0048BF3B    pop         edi
 0048BF3C    pop         esi
 0048BF3D    pop         ebx
 0048BF3E    pop         ecx
 0048BF3F    pop         ebp
 0048BF40    ret
*}
end;

//0048BF44
procedure TWinControl.ResetIme;
begin
{*
 0048BF44    push        ebp
 0048BF45    mov         ebp,esp
 0048BF47    push        0
 0048BF49    push        ebx
 0048BF4A    mov         ebx,eax
 0048BF4C    xor         eax,eax
 0048BF4E    push        ebp
 0048BF4F    push        48BFCE
 0048BF54    push        dword ptr fs:[eax]
 0048BF57    mov         dword ptr fs:[eax],esp
 0048BF5A    mov         eax,[0078DB7C];SysLocale:TSysLocale
 0048BF5F    cmp         byte ptr [eax+0C],0
>0048BF63    je          0048BFB8
 0048BF65    cmp         dword ptr [ebx+1D0],0
>0048BF6C    je          0048BFA1
 0048BF6E    lea         edx,[ebp-4]
 0048BF71    mov         eax,[0078DB00];^Screen:TScreen
 0048BF76    mov         eax,dword ptr [eax]
 0048BF78    call        TScreen.GetDefaultIME
 0048BF7D    mov         edx,dword ptr [ebp-4]
 0048BF80    mov         eax,dword ptr [ebx+1D0]
 0048BF86    call        AnsiCompareText
 0048BF8B    test        eax,eax
>0048BF8D    je          0048BFA1
 0048BF8F    push        1
 0048BF91    mov         eax,[0078DB00];^Screen:TScreen
 0048BF96    mov         eax,dword ptr [eax]
 0048BF98    mov         eax,dword ptr [eax+40]
 0048BF9B    push        eax
 0048BF9C    call        user32.ActivateKeyboardLayout
 0048BFA1    cmp         byte ptr [ebx+1CC],0
>0048BFA8    jne         0048BFB8
 0048BFAA    mov         eax,ebx
 0048BFAC    call        TWinControl.GetHandle
 0048BFB1    mov         dl,1
 0048BFB3    call        Win32NLSEnableIME
 0048BFB8    xor         eax,eax
 0048BFBA    pop         edx
 0048BFBB    pop         ecx
 0048BFBC    pop         ecx
 0048BFBD    mov         dword ptr fs:[eax],edx
 0048BFC0    push        48BFD5
 0048BFC5    lea         eax,[ebp-4]
 0048BFC8    call        @UStrClr
 0048BFCD    ret
>0048BFCE    jmp         @HandleFinally
>0048BFD3    jmp         0048BFC5
 0048BFD5    pop         ebx
 0048BFD6    pop         ecx
 0048BFD7    pop         ebp
 0048BFD8    ret
*}
end;

//0048BFDC
procedure TWinControl.DoAddDockClient(Client:TControl; const ARect:TRect);
begin
{*
 0048BFDC    xchg        eax,edx
 0048BFDD    mov         ecx,dword ptr [eax]
 0048BFDF    call        dword ptr [ecx+78]
 0048BFE2    ret
*}
end;

//0048BFE4
procedure TWinControl.DoRemoveDockClient(Client:TControl);
begin
{*
 0048BFE4    ret
*}
end;

//0048BFE8
procedure TWinControl.DoEnter;
begin
{*
 0048BFE8    push        ebx
 0048BFE9    cmp         word ptr [eax+202],0
>0048BFF1    je          0048C003
 0048BFF3    mov         ebx,eax
 0048BFF5    mov         edx,eax
 0048BFF7    mov         eax,dword ptr [ebx+204]
 0048BFFD    call        dword ptr [ebx+200]
 0048C003    pop         ebx
 0048C004    ret
*}
end;

//0048C008
procedure TWinControl.DoExit;
begin
{*
 0048C008    push        ebx
 0048C009    cmp         word ptr [eax+20A],0
>0048C011    je          0048C023
 0048C013    mov         ebx,eax
 0048C015    mov         edx,eax
 0048C017    mov         eax,dword ptr [ebx+20C]
 0048C01D    call        dword ptr [ebx+208]
 0048C023    pop         ebx
 0048C024    ret
*}
end;

//0048C028
procedure TWinControl.DockDrop(Source:TDragDockObject; X:Integer; Y:Integer);
begin
{*
 0048C028    push        ebp
 0048C029    mov         ebp,esp
 0048C02B    push        ecx
 0048C02C    push        ebx
 0048C02D    push        esi
 0048C02E    push        edi
 0048C02F    mov         edi,ecx
 0048C031    mov         esi,edx
 0048C033    mov         ebx,eax
 0048C035    mov         word ptr [ebp-4],di
 0048C039    movzx       eax,word ptr [ebp+8]
 0048C03D    mov         word ptr [ebp-2],ax
 0048C041    mov         eax,dword ptr [ebp-4]
 0048C044    push        eax
 0048C045    mov         ecx,esi
 0048C047    mov         edx,0B038
 0048C04C    mov         eax,ebx
 0048C04E    call        TControl.Perform
 0048C053    test        eax,eax
>0048C055    jl          0048C076
 0048C057    cmp         word ptr [ebx+1F2],0
>0048C05F    je          0048C076
 0048C061    push        edi
 0048C062    mov         eax,dword ptr [ebp+8]
 0048C065    push        eax
 0048C066    mov         ecx,esi
 0048C068    mov         edx,ebx
 0048C06A    mov         eax,dword ptr [ebx+1F4]
 0048C070    call        dword ptr [ebx+1F0]
 0048C076    pop         edi
 0048C077    pop         esi
 0048C078    pop         ebx
 0048C079    pop         ecx
 0048C07A    pop         ebp
 0048C07B    ret         4
*}
end;

//0048C080
procedure TWinControl.DoDockOver(Source:TDragDockObject; X:Integer; Y:Integer; State:TDragState; var Accept:Boolean);
begin
{*
 0048C080    push        ebp
 0048C081    mov         ebp,esp
 0048C083    push        ebx
 0048C084    cmp         word ptr [eax+1FA],0
>0048C08C    je          0048C0AE
 0048C08E    push        ecx
 0048C08F    mov         ecx,dword ptr [ebp+10]
 0048C092    push        ecx
 0048C093    movzx       ecx,byte ptr [ebp+0C]
 0048C097    push        ecx
 0048C098    mov         ecx,dword ptr [ebp+8]
 0048C09B    push        ecx
 0048C09C    mov         ebx,eax
 0048C09E    mov         ecx,edx
 0048C0A0    mov         edx,eax
 0048C0A2    mov         eax,dword ptr [ebx+1FC]
 0048C0A8    call        dword ptr [ebx+1F8]
 0048C0AE    pop         ebx
 0048C0AF    pop         ebp
 0048C0B0    ret         0C
*}
end;

//0048C0B4
procedure TWinControl.DockOver(Source:TDragDockObject; X:Integer; Y:Integer; State:TDragState; var Accept:Boolean);
begin
{*
 0048C0B4    push        ebp
 0048C0B5    mov         ebp,esp
 0048C0B7    push        ecx
 0048C0B8    push        ebx
 0048C0B9    push        esi
 0048C0BA    push        edi
 0048C0BB    mov         dword ptr [ebp-4],ecx
 0048C0BE    mov         edi,edx
 0048C0C0    mov         ebx,eax
 0048C0C2    mov         edx,edi
 0048C0C4    mov         eax,ebx
 0048C0C6    mov         si,0FFD2
 0048C0CA    call        @CallDynaInst
 0048C0CF    mov         eax,dword ptr [ebp+10]
 0048C0D2    push        eax
 0048C0D3    movzx       eax,byte ptr [ebp+0C]
 0048C0D7    push        eax
 0048C0D8    mov         eax,dword ptr [ebp+8]
 0048C0DB    push        eax
 0048C0DC    mov         ecx,dword ptr [ebp-4]
 0048C0DF    mov         edx,edi
 0048C0E1    mov         eax,ebx
 0048C0E3    mov         si,0FFC2
 0048C0E7    call        @CallDynaInst
 0048C0EC    pop         edi
 0048C0ED    pop         esi
 0048C0EE    pop         ebx
 0048C0EF    pop         ecx
 0048C0F0    pop         ebp
 0048C0F1    ret         0C
*}
end;

//0048C0F4
procedure TWinControl.DoUnDock(NewTarget:TWinControl; Client:TControl);
begin
{*
 0048C0F4    push        ebx
 0048C0F5    push        esi
 0048C0F6    push        edi
 0048C0F7    push        ecx
 0048C0F8    mov         edi,ecx
 0048C0FA    mov         esi,edx
 0048C0FC    mov         ebx,eax
 0048C0FE    mov         byte ptr [esp],1
 0048C102    cmp         word ptr [ebx+232],0
>0048C10A    je          0048C122
 0048C10C    push        esi
 0048C10D    lea         eax,[esp+4]
 0048C111    push        eax
 0048C112    mov         ecx,edi
 0048C114    mov         edx,ebx
 0048C116    mov         eax,dword ptr [ebx+234]
 0048C11C    call        dword ptr [ebx+230]
 0048C122    cmp         byte ptr [esp],0
>0048C126    je          0048C13B
 0048C128    push        edi
 0048C129    mov         ecx,esi
 0048C12B    mov         edx,0B039
 0048C130    mov         eax,ebx
 0048C132    call        TControl.Perform
 0048C137    test        eax,eax
>0048C139    je          0048C13F
 0048C13B    xor         eax,eax
>0048C13D    jmp         0048C141
 0048C13F    mov         al,1
 0048C141    mov         byte ptr [esp],al
 0048C144    movzx       eax,byte ptr [esp]
 0048C148    pop         edx
 0048C149    pop         edi
 0048C14A    pop         esi
 0048C14B    pop         ebx
 0048C14C    ret
*}
end;

//0048C150
procedure TWinControl.ReloadDockedControl(const AControlName:UnicodeString; var AControl:TControl);
begin
{*
 0048C150    push        ebx
 0048C151    push        esi
 0048C152    push        edi
 0048C153    mov         edi,ecx
 0048C155    mov         esi,edx
 0048C157    mov         ebx,eax
 0048C159    mov         edx,esi
 0048C15B    mov         eax,dword ptr [ebx+4]
 0048C15E    call        TComponent.FindComponent
 0048C163    mov         edx,dword ptr ds:[47A16C];TControl
 0048C169    call        @AsClass
 0048C16E    mov         dword ptr [edi],eax
 0048C170    pop         edi
 0048C171    pop         esi
 0048C172    pop         ebx
 0048C173    ret
*}
end;

//0048C174
function TWinControl.GetDockClientCount:Integer;
begin
{*
 0048C174    mov         edx,dword ptr [eax+1C4]
 0048C17A    test        edx,edx
>0048C17C    je          0048C182
 0048C17E    mov         eax,dword ptr [edx+8]
 0048C181    ret
 0048C182    xor         eax,eax
 0048C184    ret
*}
end;

//0048C188
function TWinControl.GetDockClients(Index:Integer):TControl;
begin
{*
 0048C188    push        ebx
 0048C189    push        esi
 0048C18A    push        edi
 0048C18B    mov         edi,edx
 0048C18D    mov         ebx,eax
 0048C18F    mov         esi,dword ptr [ebx+1C4]
 0048C195    test        esi,esi
>0048C197    je          0048C1A4
 0048C199    mov         edx,edi
 0048C19B    mov         eax,esi
 0048C19D    call        TList.Get
>0048C1A2    jmp         0048C1A6
 0048C1A4    xor         eax,eax
 0048C1A6    pop         edi
 0048C1A7    pop         esi
 0048C1A8    pop         ebx
 0048C1A9    ret
*}
end;

//0048C1AC
procedure TWinControl.GetSiteInfo(Client:TControl; var InfluenceRect:TRect; MousePos:TPoint; var CanDock:Boolean);
begin
{*
 0048C1AC    push        ebp
 0048C1AD    mov         ebp,esp
 0048C1AF    add         esp,0FFFFFFF8
 0048C1B2    push        ebx
 0048C1B3    push        esi
 0048C1B4    push        edi
 0048C1B5    mov         esi,dword ptr [ebp+0C]
 0048C1B8    lea         edi,[ebp-8]
 0048C1BB    movs        dword ptr [edi],dword ptr [esi]
 0048C1BC    movs        dword ptr [edi],dword ptr [esi]
 0048C1BD    mov         esi,ecx
 0048C1BF    mov         edi,edx
 0048C1C1    mov         ebx,eax
 0048C1C3    push        esi
 0048C1C4    mov         eax,ebx
 0048C1C6    call        TWinControl.GetHandle
 0048C1CB    push        eax
 0048C1CC    call        user32.GetWindowRect
 0048C1D1    push        0A
 0048C1D3    push        0A
 0048C1D5    push        esi
 0048C1D6    call        user32.InflateRect
 0048C1DB    cmp         word ptr [ebx+212],0
>0048C1E3    je          0048C1FE
 0048C1E5    push        esi
 0048C1E6    lea         eax,[ebp-8]
 0048C1E9    push        eax
 0048C1EA    mov         eax,dword ptr [ebp+8]
 0048C1ED    push        eax
 0048C1EE    mov         ecx,edi
 0048C1F0    mov         edx,ebx
 0048C1F2    mov         eax,dword ptr [ebx+214]
 0048C1F8    call        dword ptr [ebx+210]
 0048C1FE    pop         edi
 0048C1FF    pop         esi
 0048C200    pop         ebx
 0048C201    pop         ecx
 0048C202    pop         ecx
 0048C203    pop         ebp
 0048C204    ret         8
*}
end;

//0048C208
function TWinControl.GetVisibleDockClientCount:Integer;
begin
{*
 0048C208    push        ebx
 0048C209    push        esi
 0048C20A    push        edi
 0048C20B    mov         esi,eax
 0048C20D    mov         eax,esi
 0048C20F    call        TWinControl.GetDockClientCount
 0048C214    mov         edi,eax
 0048C216    test        edi,edi
>0048C218    jle         0048C23C
 0048C21A    mov         ebx,edi
 0048C21C    dec         ebx
 0048C21D    cmp         ebx,0
>0048C220    jl          0048C23C
 0048C222    mov         edx,ebx
 0048C224    mov         eax,dword ptr [esi+1C4]
 0048C22A    call        TList.Get
 0048C22F    cmp         byte ptr [eax+59],0
>0048C233    jne         0048C236
 0048C235    dec         edi
 0048C236    dec         ebx
 0048C237    cmp         ebx,0FFFFFFFF
>0048C23A    jne         0048C222
 0048C23C    mov         eax,edi
 0048C23E    pop         edi
 0048C23F    pop         esi
 0048C240    pop         ebx
 0048C241    ret
*}
end;

//0048C244
procedure TWinControl.sub_0048C244;
begin
{*
 0048C244    ret
*}
end;

//0048C248
procedure TWinControl.CreateDockManager;
begin
{*
 0048C248    push        ebx
 0048C249    push        esi
 0048C24A    mov         esi,edx
 0048C24C    mov         ebx,eax
 0048C24E    cmp         dword ptr [ebx+1C8],0
>0048C255    jne         0048C287
 0048C257    cmp         byte ptr [ebx+1EC],0
>0048C25E    je          0048C287
 0048C260    cmp         byte ptr [ebx+1EB],0
>0048C267    je          0048C287
 0048C269    mov         ecx,ebx
 0048C26B    mov         dl,1
 0048C26D    mov         eax,[0078599C]
 0048C272    call        dword ptr [eax+44]
 0048C275    mov         edx,eax
 0048C277    test        edx,edx
>0048C279    je          0048C27E
 0048C27B    sub         edx,0FFFFFF88
 0048C27E    mov         eax,esi
 0048C280    call        @IntfCopy
>0048C285    jmp         0048C294
 0048C287    mov         eax,esi
 0048C289    mov         edx,dword ptr [ebx+1C8]
 0048C28F    call        @IntfCopy
 0048C294    cmp         byte ptr [ebx+260],0
>0048C29B    jne         0048C2A6
 0048C29D    cmp         dword ptr [esi],0
>0048C2A0    jne         0048C2A6
 0048C2A2    xor         edx,edx
>0048C2A4    jmp         0048C2A8
 0048C2A6    mov         dl,1
 0048C2A8    mov         eax,ebx
 0048C2AA    call        TWinControl.SetDoubleBuffered
 0048C2AF    pop         esi
 0048C2B0    pop         ebx
 0048C2B1    ret
*}
end;

//0048C2B4
procedure TWinControl.SetDesignVisible(Value:Boolean);
begin
{*
 0048C2B4    push        ebx
 0048C2B5    mov         ebx,eax
 0048C2B7    test        byte ptr [ebx+1C],10
>0048C2BB    je          0048C2E5
 0048C2BD    test        byte ptr [ebx+55],8
 0048C2C1    setne       al
 0048C2C4    xor         al,1
 0048C2C6    cmp         dl,al
>0048C2C8    je          0048C2E5
 0048C2CA    test        dl,dl
>0048C2CC    jne         0048C2D7
 0048C2CE    or          dword ptr [ebx+54],800
>0048C2D5    jmp         0048C2DE
 0048C2D7    and         dword ptr [ebx+54],0FFFFF7FF
 0048C2DE    mov         eax,ebx
 0048C2E0    call        TWinControl.UpdateShowing
 0048C2E5    pop         ebx
 0048C2E6    ret
*}
end;

//0048C2E8
procedure TWinControl.SetDockSite(Value:Boolean);
begin
{*
 0048C2E8    push        ebp
 0048C2E9    mov         ebp,esp
 0048C2EB    push        0
 0048C2ED    push        ebx
 0048C2EE    push        esi
 0048C2EF    push        edi
 0048C2F0    mov         ebx,edx
 0048C2F2    mov         edi,eax
 0048C2F4    xor         eax,eax
 0048C2F6    push        ebp
 0048C2F7    push        48C390
 0048C2FC    push        dword ptr fs:[eax]
 0048C2FF    mov         dword ptr fs:[eax],esp
 0048C302    cmp         bl,byte ptr [edi+1EC]
>0048C308    je          0048C37A
 0048C30A    mov         byte ptr [edi+1EC],bl
 0048C310    test        byte ptr [edi+1C],10
>0048C314    jne         0048C37A
 0048C316    mov         edx,ebx
 0048C318    mov         eax,edi
 0048C31A    call        RegisterDockSite
 0048C31F    test        bl,bl
>0048C321    jne         0048C343
 0048C323    mov         eax,dword ptr [edi+1C4]
 0048C329    call        TObject.Free
 0048C32E    xor         eax,eax
 0048C330    mov         dword ptr [edi+1C4],eax
 0048C336    lea         eax,[edi+1C8]
 0048C33C    call        @IntfClear
>0048C341    jmp         0048C37A
 0048C343    cmp         dword ptr [edi+1C4],0
>0048C34A    jne         0048C35E
 0048C34C    mov         dl,1
 0048C34E    mov         eax,[00439644];TList
 0048C353    call        TObject.Create
 0048C358    mov         dword ptr [edi+1C4],eax
 0048C35E    lea         edx,[ebp-4]
 0048C361    mov         eax,edi
 0048C363    mov         si,0FFC5
 0048C367    call        @CallDynaInst
 0048C36C    mov         edx,dword ptr [ebp-4]
 0048C36F    lea         eax,[edi+1C8]
 0048C375    call        @IntfCopy
 0048C37A    xor         eax,eax
 0048C37C    pop         edx
 0048C37D    pop         ecx
 0048C37E    pop         ecx
 0048C37F    mov         dword ptr fs:[eax],edx
 0048C382    push        48C397
 0048C387    lea         eax,[ebp-4]
 0048C38A    call        @IntfClear
 0048C38F    ret
>0048C390    jmp         @HandleFinally
>0048C395    jmp         0048C387
 0048C397    pop         edi
 0048C398    pop         esi
 0048C399    pop         ebx
 0048C39A    pop         ecx
 0048C39B    pop         ebp
 0048C39C    ret
*}
end;

//0048C3A0
procedure TWinControl.SetDoubleBuffered(Value:Boolean);
begin
{*
 0048C3A0    cmp         dl,byte ptr [eax+260]
>0048C3A6    je          0048C3C3
 0048C3A8    mov         byte ptr [eax+260],dl
 0048C3AE    mov         byte ptr [eax+1EE],0
 0048C3B5    push        0
 0048C3B7    xor         ecx,ecx
 0048C3B9    mov         edx,0B04F
 0048C3BE    call        TControl.Perform
 0048C3C3    ret
*}
end;

//0048C3C4
procedure TWinControl.CMDockClient(var Message:TCMDockClient);
begin
{*
 0048C3C4    push        ebp
 0048C3C5    mov         ebp,esp
 0048C3C7    add         esp,0FFFFFFE8
 0048C3CA    push        ebx
 0048C3CB    push        esi
 0048C3CC    push        edi
 0048C3CD    mov         dword ptr [ebp-8],edx
 0048C3D0    mov         dword ptr [ebp-4],eax
 0048C3D3    mov         eax,dword ptr [ebp-8]
 0048C3D6    cmp         dword ptr [eax+0C],0
>0048C3DA    jne         0048C4AD
 0048C3E0    mov         eax,dword ptr [ebp-8]
 0048C3E3    mov         eax,dword ptr [eax+4]
 0048C3E6    lea         esi,[eax+4C]
 0048C3E9    lea         edi,[ebp-18]
 0048C3EC    movs        dword ptr [edi],dword ptr [esi]
 0048C3ED    movs        dword ptr [edi],dword ptr [esi]
 0048C3EE    movs        dword ptr [edi],dword ptr [esi]
 0048C3EF    movs        dword ptr [edi],dword ptr [esi]
 0048C3F0    push        2
 0048C3F2    lea         eax,[ebp-18]
 0048C3F5    push        eax
 0048C3F6    mov         eax,dword ptr [ebp-4]
 0048C3F9    call        TWinControl.GetHandle
 0048C3FE    push        eax
 0048C3FF    push        0
 0048C401    call        user32.MapWindowPoints
 0048C406    mov         eax,dword ptr [ebp-4]
 0048C409    inc         word ptr [eax+1AC]
 0048C410    xor         edx,edx
 0048C412    push        ebp
 0048C413    push        48C489
 0048C418    push        dword ptr fs:[edx]
 0048C41B    mov         dword ptr fs:[edx],esp
 0048C41E    mov         eax,dword ptr [ebp-8]
 0048C421    mov         eax,dword ptr [eax+4]
 0048C424    mov         eax,dword ptr [eax+40]
 0048C427    lea         ecx,[ebp-18]
 0048C42A    mov         edx,dword ptr [ebp-4]
 0048C42D    mov         si,0FFCC
 0048C431    call        @CallDynaInst
 0048C436    mov         eax,dword ptr [ebp-4]
 0048C439    cmp         byte ptr [eax+1EB],0
>0048C440    je          0048C473
 0048C442    mov         eax,dword ptr [ebp-4]
 0048C445    cmp         dword ptr [eax+1C8],0
>0048C44C    je          0048C473
 0048C44E    mov         eax,dword ptr [ebp-8]
 0048C451    mov         eax,dword ptr [eax+4]
 0048C454    mov         edx,dword ptr [eax+60]
 0048C457    push        edx
 0048C458    mov         edx,dword ptr [ebp-8]
 0048C45B    movzx       ecx,byte ptr [eax+5C]
 0048C45F    mov         edx,dword ptr [ebp-8]
 0048C462    mov         edx,dword ptr [eax+40]
 0048C465    mov         eax,dword ptr [ebp-4]
 0048C468    mov         eax,dword ptr [eax+1C8]
 0048C46E    mov         ebx,dword ptr [eax]
 0048C470    call        dword ptr [ebx+18]
 0048C473    xor         eax,eax
 0048C475    pop         edx
 0048C476    pop         ecx
 0048C477    pop         ecx
 0048C478    mov         dword ptr fs:[eax],edx
 0048C47B    push        48C490
 0048C480    mov         eax,dword ptr [ebp-4]
 0048C483    call        TWinControl.EnableAlign
 0048C488    ret
>0048C489    jmp         @HandleFinally
>0048C48E    jmp         0048C480
 0048C490    mov         dl,1
 0048C492    mov         eax,dword ptr [ebp-4]
 0048C495    call        GetParentForm
 0048C49A    test        eax,eax
>0048C49C    je          0048C4A3
 0048C49E    call        TControl.BringToFront
 0048C4A3    mov         eax,dword ptr [ebp-8]
 0048C4A6    mov         dword ptr [eax+0C],1
 0048C4AD    pop         edi
 0048C4AE    pop         esi
 0048C4AF    pop         ebx
 0048C4B0    mov         esp,ebp
 0048C4B2    pop         ebp
 0048C4B3    ret
*}
end;

//0048C4B4
procedure TWinControl.CMUnDockClient(var Message:TCMUnDockClient);
begin
{*
 0048C4B4    xor         ecx,ecx
 0048C4B6    mov         dword ptr [edx+0C],ecx
 0048C4B9    cmp         byte ptr [eax+1EB],0
>0048C4C0    je          0048C4D9
 0048C4C2    cmp         dword ptr [eax+1C8],0
>0048C4C9    je          0048C4D9
 0048C4CB    mov         edx,dword ptr [edx+8]
 0048C4CE    mov         eax,dword ptr [eax+1C8]
 0048C4D4    mov         ecx,dword ptr [eax]
 0048C4D6    call        dword ptr [ecx+28]
 0048C4D9    ret
*}
end;

//0048C4DC
procedure TWinControl.CMFloat(var Message:TCMFloat);
begin
{*
 0048C4DC    push        ebp
 0048C4DD    mov         ebp,esp
 0048C4DF    add         esp,0FFFFFFF8
 0048C4E2    push        esi
 0048C4E3    mov         esi,edx
 0048C4E5    mov         dword ptr [ebp-4],eax
 0048C4E8    mov         eax,dword ptr [ebp-4]
 0048C4EB    mov         edx,dword ptr [eax]
 0048C4ED    call        dword ptr [edx+64]
 0048C4F0    mov         ecx,dword ptr [ebp-4]
 0048C4F3    mov         ecx,dword ptr [ecx]
 0048C4F5    mov         edx,ecx
 0048C4F7    cmp         edx,eax
>0048C4F9    jne         0048C54A
 0048C4FB    mov         eax,dword ptr [ebp-4]
 0048C4FE    movzx       eax,byte ptr [eax+59]
 0048C502    mov         byte ptr [ebp-5],al
 0048C505    xor         eax,eax
 0048C507    push        ebp
 0048C508    push        48C543
 0048C50D    push        dword ptr fs:[eax]
 0048C510    mov         dword ptr fs:[eax],esp
 0048C513    mov         eax,dword ptr [esi+8]
 0048C516    lea         ecx,[eax+4C]
 0048C519    xor         edx,edx
 0048C51B    mov         eax,dword ptr [ebp-4]
 0048C51E    mov         si,0FFCC
 0048C522    call        @CallDynaInst
 0048C527    xor         eax,eax
 0048C529    pop         edx
 0048C52A    pop         ecx
 0048C52B    pop         ecx
 0048C52C    mov         dword ptr fs:[eax],edx
 0048C52F    push        48C554
 0048C534    cmp         byte ptr [ebp-5],0
>0048C538    je          0048C542
 0048C53A    mov         eax,dword ptr [ebp-4]
 0048C53D    call        TControl.BringToFront
 0048C542    ret
>0048C543    jmp         @HandleFinally
>0048C548    jmp         0048C534
 0048C54A    mov         edx,esi
 0048C54C    mov         eax,dword ptr [ebp-4]
 0048C54F    call        TControl.CMFloat
 0048C554    pop         esi
 0048C555    pop         ecx
 0048C556    pop         ecx
 0048C557    pop         ebp
 0048C558    ret
*}
end;

//0048C55C
procedure TWinControl.KeyDown(var Key:Word; Shift:TShiftState);
begin
{*
 0048C55C    push        ebx
 0048C55D    push        ecx
 0048C55E    mov         word ptr [esp],cx
 0048C562    cmp         word ptr [eax+21A],0
>0048C56A    je          0048C583
 0048C56C    movzx       ecx,word ptr [esp]
 0048C570    push        ecx
 0048C571    mov         ecx,edx
 0048C573    mov         ebx,eax
 0048C575    mov         edx,eax
 0048C577    mov         eax,dword ptr [ebx+21C]
 0048C57D    call        dword ptr [ebx+218]
 0048C583    pop         edx
 0048C584    pop         ebx
 0048C585    ret
*}
end;

//0048C588
function TWinControl.DoKeyDown(var Message:TWMKey):Boolean;
begin
{*
 0048C588    push        ebx
 0048C589    push        esi
 0048C58A    push        edi
 0048C58B    push        ebp
 0048C58C    add         esp,0FFFFFFF8
 0048C58F    mov         edi,edx
 0048C591    mov         esi,eax
 0048C593    mov         bl,1
 0048C595    xor         edx,edx
 0048C597    mov         eax,esi
 0048C599    call        GetParentForm
 0048C59E    mov         ebp,eax
 0048C5A0    test        ebp,ebp
>0048C5A2    je          0048C5F5
 0048C5A4    cmp         esi,ebp
>0048C5A6    je          0048C5F5
 0048C5A8    cmp         byte ptr [ebp+29C],0
>0048C5AF    je          0048C5BE
 0048C5B1    mov         edx,edi
 0048C5B3    mov         eax,ebp
 0048C5B5    call        TWinControl.DoKeyDown
 0048C5BA    test        al,al
>0048C5BC    jne         0048C632
 0048C5BE    cmp         dword ptr [ebp+34],0
>0048C5C2    je          0048C5F5
 0048C5C4    mov         dl,1
 0048C5C6    mov         eax,ebp
 0048C5C8    call        GetParentForm
 0048C5CD    mov         dword ptr [esp],eax
 0048C5D0    cmp         dword ptr [esp],0
>0048C5D4    je          0048C5F5
 0048C5D6    cmp         ebp,dword ptr [esp]
>0048C5D9    je          0048C5F5
 0048C5DB    mov         eax,dword ptr [esp]
 0048C5DE    cmp         byte ptr [eax+29C],0
>0048C5E5    je          0048C5F5
 0048C5E7    mov         edx,edi
 0048C5E9    mov         eax,dword ptr [esp]
 0048C5EC    call        TWinControl.DoKeyDown
 0048C5F1    test        al,al
>0048C5F3    jne         0048C632
 0048C5F5    mov         eax,dword ptr [edi+8]
 0048C5F8    call        KeyDataToShiftState
 0048C5FD    mov         ebp,eax
 0048C5FF    test        byte ptr [esi+51],10
>0048C603    jne         0048C630
 0048C605    movzx       eax,word ptr [edi+4]
 0048C609    mov         word ptr [esp+4],ax
 0048C60E    lea         edx,[esp+4]
 0048C612    mov         ecx,ebp
 0048C614    mov         eax,esi
 0048C616    mov         si,0FFBA
 0048C61A    call        @CallDynaInst
 0048C61F    movzx       eax,word ptr [esp+4]
 0048C624    mov         word ptr [edi+4],ax
 0048C628    cmp         word ptr [esp+4],0
>0048C62E    je          0048C632
 0048C630    xor         ebx,ebx
 0048C632    mov         eax,ebx
 0048C634    pop         ecx
 0048C635    pop         edx
 0048C636    pop         ebp
 0048C637    pop         edi
 0048C638    pop         esi
 0048C639    pop         ebx
 0048C63A    ret
*}
end;

//0048C63C
procedure TWinControl.WMKeyDown(var Message:TWMKeyDown);
begin
{*
 0048C63C    push        ebx
 0048C63D    push        esi
 0048C63E    mov         esi,edx
 0048C640    mov         ebx,eax
 0048C642    mov         edx,esi
 0048C644    mov         eax,ebx
 0048C646    call        TWinControl.DoKeyDown
 0048C64B    test        al,al
>0048C64D    jne         0048C658
 0048C64F    mov         edx,esi
 0048C651    mov         eax,ebx
 0048C653    mov         ecx,dword ptr [eax]
 0048C655    call        dword ptr [ecx-10]
 0048C658    movzx       edx,word ptr [esi+4]
 0048C65C    mov         eax,ebx
 0048C65E    call        TWinControl.UpdateUIState
 0048C663    pop         esi
 0048C664    pop         ebx
 0048C665    ret
*}
end;

//0048C668
procedure TWinControl.WMSysKeyDown(var Message:TWMSysKeyDown);
begin
{*
 0048C668    push        ebx
 0048C669    push        esi
 0048C66A    mov         esi,edx
 0048C66C    mov         ebx,eax
 0048C66E    mov         edx,esi
 0048C670    mov         eax,ebx
 0048C672    call        TWinControl.DoKeyDown
 0048C677    test        al,al
>0048C679    jne         0048C684
 0048C67B    mov         edx,esi
 0048C67D    mov         eax,ebx
 0048C67F    mov         ecx,dword ptr [eax]
 0048C681    call        dword ptr [ecx-10]
 0048C684    movzx       edx,word ptr [esi+4]
 0048C688    mov         eax,ebx
 0048C68A    call        TWinControl.UpdateUIState
 0048C68F    pop         esi
 0048C690    pop         ebx
 0048C691    ret
*}
end;

//0048C694
procedure TWinControl.KeyUp(var Key:Word; Shift:TShiftState);
begin
{*
 0048C694    push        ebx
 0048C695    push        ecx
 0048C696    mov         word ptr [esp],cx
 0048C69A    cmp         word ptr [eax+22A],0
>0048C6A2    je          0048C6BB
 0048C6A4    movzx       ecx,word ptr [esp]
 0048C6A8    push        ecx
 0048C6A9    mov         ecx,edx
 0048C6AB    mov         ebx,eax
 0048C6AD    mov         edx,eax
 0048C6AF    mov         eax,dword ptr [ebx+22C]
 0048C6B5    call        dword ptr [ebx+228]
 0048C6BB    pop         edx
 0048C6BC    pop         ebx
 0048C6BD    ret
*}
end;

//0048C6C0
function TWinControl.DoKeyUp(var Message:TWMKey):Boolean;
begin
{*
 0048C6C0    push        ebx
 0048C6C1    push        esi
 0048C6C2    push        edi
 0048C6C3    push        ebp
 0048C6C4    add         esp,0FFFFFFF8
 0048C6C7    mov         edi,edx
 0048C6C9    mov         esi,eax
 0048C6CB    mov         bl,1
 0048C6CD    xor         edx,edx
 0048C6CF    mov         eax,esi
 0048C6D1    call        GetParentForm
 0048C6D6    mov         ebp,eax
 0048C6D8    test        ebp,ebp
>0048C6DA    je          0048C72D
 0048C6DC    cmp         esi,ebp
>0048C6DE    je          0048C72D
 0048C6E0    cmp         byte ptr [ebp+29C],0
>0048C6E7    je          0048C6F6
 0048C6E9    mov         edx,edi
 0048C6EB    mov         eax,ebp
 0048C6ED    call        TWinControl.DoKeyUp
 0048C6F2    test        al,al
>0048C6F4    jne         0048C76A
 0048C6F6    cmp         dword ptr [ebp+34],0
>0048C6FA    je          0048C72D
 0048C6FC    mov         dl,1
 0048C6FE    mov         eax,ebp
 0048C700    call        GetParentForm
 0048C705    mov         dword ptr [esp],eax
 0048C708    cmp         dword ptr [esp],0
>0048C70C    je          0048C72D
 0048C70E    cmp         ebp,dword ptr [esp]
>0048C711    je          0048C72D
 0048C713    mov         eax,dword ptr [esp]
 0048C716    cmp         byte ptr [eax+29C],0
>0048C71D    je          0048C72D
 0048C71F    mov         edx,edi
 0048C721    mov         eax,dword ptr [esp]
 0048C724    call        TWinControl.DoKeyUp
 0048C729    test        al,al
>0048C72B    jne         0048C76A
 0048C72D    mov         eax,dword ptr [edi+8]
 0048C730    call        KeyDataToShiftState
 0048C735    mov         ebp,eax
 0048C737    test        byte ptr [esi+51],10
>0048C73B    jne         0048C768
 0048C73D    movzx       eax,word ptr [edi+4]
 0048C741    mov         word ptr [esp+4],ax
 0048C746    lea         edx,[esp+4]
 0048C74A    mov         ecx,ebp
 0048C74C    mov         eax,esi
 0048C74E    mov         si,0FFB9
 0048C752    call        @CallDynaInst
 0048C757    movzx       eax,word ptr [esp+4]
 0048C75C    mov         word ptr [edi+4],ax
 0048C760    cmp         word ptr [esp+4],0
>0048C766    je          0048C76A
 0048C768    xor         ebx,ebx
 0048C76A    mov         eax,ebx
 0048C76C    pop         ecx
 0048C76D    pop         edx
 0048C76E    pop         ebp
 0048C76F    pop         edi
 0048C770    pop         esi
 0048C771    pop         ebx
 0048C772    ret
*}
end;

//0048C774
procedure TWinControl.WMKeyUp(var Message:TWMKeyUp);
begin
{*
 0048C774    push        ebx
 0048C775    push        esi
 0048C776    mov         esi,edx
 0048C778    mov         ebx,eax
 0048C77A    mov         edx,esi
 0048C77C    mov         eax,ebx
 0048C77E    call        TWinControl.DoKeyUp
 0048C783    test        al,al
>0048C785    jne         0048C790
 0048C787    mov         edx,esi
 0048C789    mov         eax,ebx
 0048C78B    mov         ecx,dword ptr [eax]
 0048C78D    call        dword ptr [ecx-10]
 0048C790    pop         esi
 0048C791    pop         ebx
 0048C792    ret
*}
end;

//0048C794
procedure TWinControl.WMSysKeyUp(var Message:TWMSysKeyUp);
begin
{*
 0048C794    push        ebx
 0048C795    push        esi
 0048C796    mov         esi,edx
 0048C798    mov         ebx,eax
 0048C79A    mov         edx,esi
 0048C79C    mov         eax,ebx
 0048C79E    call        TWinControl.DoKeyUp
 0048C7A3    test        al,al
>0048C7A5    jne         0048C7B0
 0048C7A7    mov         edx,esi
 0048C7A9    mov         eax,ebx
 0048C7AB    mov         ecx,dword ptr [eax]
 0048C7AD    call        dword ptr [ecx-10]
 0048C7B0    pop         esi
 0048C7B1    pop         ebx
 0048C7B2    ret
*}
end;

//0048C7B4
procedure TWinControl.KeyPress(var Key:Char);
begin
{*
 0048C7B4    push        ebx
 0048C7B5    cmp         word ptr [eax+222],0
>0048C7BD    je          0048C7D1
 0048C7BF    mov         ecx,edx
 0048C7C1    mov         ebx,eax
 0048C7C3    mov         edx,eax
 0048C7C5    mov         eax,dword ptr [ebx+224]
 0048C7CB    call        dword ptr [ebx+220]
 0048C7D1    pop         ebx
 0048C7D2    ret
*}
end;

//0048C7D4
function TWinControl.DoKeyPress(var Message:TWMKey):Boolean;
begin
{*
 0048C7D4    push        ebx
 0048C7D5    push        esi
 0048C7D6    push        edi
 0048C7D7    push        ebp
 0048C7D8    push        ecx
 0048C7D9    mov         edi,edx
 0048C7DB    mov         esi,eax
 0048C7DD    mov         bl,1
 0048C7DF    mov         dl,1
 0048C7E1    mov         eax,esi
 0048C7E3    call        GetParentForm
 0048C7E8    mov         ebp,eax
 0048C7EA    test        ebp,ebp
>0048C7EC    je          0048C808
 0048C7EE    cmp         esi,ebp
>0048C7F0    je          0048C808
 0048C7F2    cmp         byte ptr [ebp+29C],0
>0048C7F9    je          0048C808
 0048C7FB    mov         edx,edi
 0048C7FD    mov         eax,ebp
 0048C7FF    call        TWinControl.DoKeyPress
 0048C804    test        al,al
>0048C806    jne         0048C834
 0048C808    test        byte ptr [esi+51],10
>0048C80C    jne         0048C832
 0048C80E    movzx       eax,word ptr [edi+4]
 0048C812    mov         word ptr [esp],ax
 0048C816    mov         edx,esp
 0048C818    mov         eax,esi
 0048C81A    mov         si,0FFB8
 0048C81E    call        @CallDynaInst
 0048C823    movzx       eax,word ptr [esp]
 0048C827    mov         word ptr [edi+4],ax
 0048C82B    cmp         word ptr [edi+4],0
>0048C830    je          0048C834
 0048C832    xor         ebx,ebx
 0048C834    mov         eax,ebx
 0048C836    pop         edx
 0048C837    pop         ebp
 0048C838    pop         edi
 0048C839    pop         esi
 0048C83A    pop         ebx
 0048C83B    ret
*}
end;

//0048C83C
procedure TWinControl.WMChar(var Message:TWMChar);
begin
{*
 0048C83C    push        ebx
 0048C83D    push        esi
 0048C83E    mov         esi,edx
 0048C840    mov         ebx,eax
 0048C842    mov         edx,esi
 0048C844    mov         eax,ebx
 0048C846    call        TWinControl.DoKeyPress
 0048C84B    test        al,al
>0048C84D    jne         0048C858
 0048C84F    mov         edx,esi
 0048C851    mov         eax,ebx
 0048C853    mov         ecx,dword ptr [eax]
 0048C855    call        dword ptr [ecx-10]
 0048C858    pop         esi
 0048C859    pop         ebx
 0048C85A    ret
*}
end;

//0048C85C
function TraverseControls(Container:TWinControl):Boolean;
begin
{*
 0048C85C    push        ebp
 0048C85D    mov         ebp,esp
 0048C85F    add         esp,0FFFFFFF8
 0048C862    push        ebx
 0048C863    push        esi
 0048C864    push        edi
 0048C865    mov         dword ptr [ebp-4],eax
 0048C868    mov         byte ptr [ebp-5],0
 0048C86C    mov         eax,dword ptr [ebp-4]
 0048C86F    cmp         byte ptr [eax+1EA],0
>0048C876    je          0048C8FF
 0048C87C    mov         eax,dword ptr [ebp-4]
 0048C87F    call        TWinControl.GetControlCount
 0048C884    mov         esi,eax
 0048C886    dec         esi
 0048C887    test        esi,esi
>0048C889    jl          0048C8FF
 0048C88B    inc         esi
 0048C88C    xor         edi,edi
 0048C88E    mov         edx,edi
 0048C890    mov         eax,dword ptr [ebp-4]
 0048C893    call        TWinControl.GetControl
 0048C898    mov         ebx,eax
 0048C89A    cmp         byte ptr [ebx+59],0
>0048C89E    je          0048C8FB
 0048C8A0    mov         eax,ebx
 0048C8A2    mov         edx,dword ptr [eax]
 0048C8A4    call        dword ptr [edx+5C]
 0048C8A7    test        al,al
>0048C8A9    je          0048C8FB
 0048C8AB    test        byte ptr [ebx+52],1
>0048C8AF    je          0048C8D4
 0048C8B1    mov         eax,dword ptr [ebp+8]
 0048C8B4    mov         eax,dword ptr [eax-4]
 0048C8B7    mov         eax,dword ptr [eax+8]
 0048C8BA    push        eax
 0048C8BB    mov         eax,dword ptr [ebp+8]
 0048C8BE    mov         ecx,dword ptr [eax-4]
 0048C8C1    mov         ecx,dword ptr [ecx+4]
 0048C8C4    mov         edx,112
 0048C8C9    mov         eax,ebx
 0048C8CB    call        TControl.Perform
 0048C8D0    test        eax,eax
>0048C8D2    jne         0048C8F5
 0048C8D4    mov         eax,ebx
 0048C8D6    mov         edx,dword ptr ds:[47C4E8];TWinControl
 0048C8DC    call        @IsClass
 0048C8E1    test        al,al
>0048C8E3    je          0048C8FB
 0048C8E5    mov         eax,dword ptr [ebp+8]
 0048C8E8    push        eax
 0048C8E9    mov         eax,ebx
 0048C8EB    call        TraverseControls
 0048C8F0    pop         ecx
 0048C8F1    test        al,al
>0048C8F3    je          0048C8FB
 0048C8F5    mov         byte ptr [ebp-5],1
>0048C8F9    jmp         0048C8FF
 0048C8FB    inc         edi
 0048C8FC    dec         esi
>0048C8FD    jne         0048C88E
 0048C8FF    movzx       eax,byte ptr [ebp-5]
 0048C903    pop         edi
 0048C904    pop         esi
 0048C905    pop         ebx
 0048C906    pop         ecx
 0048C907    pop         ecx
 0048C908    pop         ebp
 0048C909    ret
*}
end;

//0048C90C
procedure TWinControl.WMSysCommand(var Message:TWMSysCommand);
begin
{*
 0048C90C    push        ebp
 0048C90D    mov         ebp,esp
 0048C90F    push        ecx
 0048C910    push        ebx
 0048C911    push        esi
 0048C912    mov         dword ptr [ebp-4],edx
 0048C915    mov         ebx,eax
 0048C917    mov         eax,dword ptr [ebp-4]
 0048C91A    mov         eax,dword ptr [eax+4]
 0048C91D    and         eax,0FFF0
 0048C922    cmp         eax,0F100
>0048C927    jne         0048C987
 0048C929    mov         eax,dword ptr [ebp-4]
 0048C92C    cmp         word ptr [eax+8],20
>0048C931    je          0048C987
 0048C933    mov         eax,dword ptr [ebp-4]
 0048C936    cmp         word ptr [eax+8],2D
>0048C93B    je          0048C987
 0048C93D    mov         eax,dword ptr [ebx+258]
 0048C943    push        eax
 0048C944    call        user32.IsIconic
 0048C949    test        eax,eax
>0048C94B    jne         0048C987
 0048C94D    call        user32.GetCapture
 0048C952    test        eax,eax
>0048C954    jne         0048C987
 0048C956    mov         eax,[0078D590];^Application:TApplication
 0048C95B    mov         eax,dword ptr [eax]
 0048C95D    cmp         ebx,dword ptr [eax+44]
>0048C960    je          0048C987
 0048C962    mov         dl,1
 0048C964    mov         eax,ebx
 0048C966    call        GetParentForm
 0048C96B    mov         esi,eax
 0048C96D    test        esi,esi
>0048C96F    je          0048C987
 0048C971    mov         eax,dword ptr [ebp-4]
 0048C974    push        eax
 0048C975    xor         ecx,ecx
 0048C977    mov         edx,0B017
 0048C97C    mov         eax,esi
 0048C97E    call        TControl.Perform
 0048C983    test        eax,eax
>0048C985    jne         0048C9B0
 0048C987    mov         eax,dword ptr [ebp-4]
 0048C98A    mov         eax,dword ptr [eax+4]
 0048C98D    and         eax,0FFF0
 0048C992    cmp         eax,0F100
>0048C997    jne         0048C9A6
 0048C999    push        ebp
 0048C99A    mov         eax,ebx
 0048C99C    call        TraverseControls
 0048C9A1    pop         ecx
 0048C9A2    test        al,al
>0048C9A4    jne         0048C9B0
 0048C9A6    mov         edx,dword ptr [ebp-4]
 0048C9A9    mov         eax,ebx
 0048C9AB    mov         ecx,dword ptr [eax]
 0048C9AD    call        dword ptr [ecx-10]
 0048C9B0    pop         esi
 0048C9B1    pop         ebx
 0048C9B2    pop         ecx
 0048C9B3    pop         ebp
 0048C9B4    ret
*}
end;

//0048C9B8
procedure TWinControl.WMVKeyToItem(var Message:TWMVKeyToItem);
begin
{*
 0048C9B8    push        ebx
 0048C9B9    push        esi
 0048C9BA    mov         ebx,edx
 0048C9BC    mov         esi,eax
 0048C9BE    mov         edx,ebx
 0048C9C0    mov         eax,dword ptr [ebx+8]
 0048C9C3    call        DoControlMsg
 0048C9C8    test        al,al
>0048C9CA    jne         0048C9D5
 0048C9CC    mov         edx,ebx
 0048C9CE    mov         eax,esi
 0048C9D0    mov         ecx,dword ptr [eax]
 0048C9D2    call        dword ptr [ecx-10]
 0048C9D5    pop         esi
 0048C9D6    pop         ebx
 0048C9D7    ret
*}
end;

//0048C9D8
procedure TWinControl.WMParentNotify(var Message:TWMParentNotify);
begin
{*
 0048C9D8    push        ebx
 0048C9D9    push        esi
 0048C9DA    push        edi
 0048C9DB    mov         ebx,edx
 0048C9DD    mov         edi,eax
 0048C9DF    movzx       esi,word ptr [ebx+4]
 0048C9E3    cmp         si,1
>0048C9E7    je          0048C9EF
 0048C9E9    cmp         si,2
>0048C9ED    jne         0048C9FD
 0048C9EF    mov         edx,ebx
 0048C9F1    mov         eax,dword ptr [ebx+8]
 0048C9F4    call        DoControlMsg
 0048C9F9    test        al,al
>0048C9FB    jne         0048CA06
 0048C9FD    mov         edx,ebx
 0048C9FF    mov         eax,edi
 0048CA01    mov         ecx,dword ptr [eax]
 0048CA03    call        dword ptr [ecx-10]
 0048CA06    pop         edi
 0048CA07    pop         esi
 0048CA08    pop         ebx
 0048CA09    ret
*}
end;

//0048CA0C
procedure TWinControl.WMVScroll(var Message:TWMVScroll);
begin
{*
 0048CA0C    push        ebx
 0048CA0D    push        esi
 0048CA0E    mov         ebx,edx
 0048CA10    mov         esi,eax
 0048CA12    mov         edx,ebx
 0048CA14    mov         eax,dword ptr [ebx+8]
 0048CA17    call        DoControlMsg
 0048CA1C    test        al,al
>0048CA1E    jne         0048CA29
 0048CA20    mov         edx,ebx
 0048CA22    mov         eax,esi
 0048CA24    mov         ecx,dword ptr [eax]
 0048CA26    call        dword ptr [ecx-10]
 0048CA29    pop         esi
 0048CA2A    pop         ebx
 0048CA2B    ret
*}
end;

//0048CA2C
procedure TWinControl.WMDestroy(var Message:TWMDestroy);
begin
{*
 0048CA2C    push        ebx
 0048CA2D    push        esi
 0048CA2E    push        edi
 0048CA2F    push        ebp
 0048CA30    mov         edi,edx
 0048CA32    mov         ebx,eax
 0048CA34    cmp         dword ptr [ebx+174],0
>0048CA3B    jne         0048CA7F
 0048CA3D    mov         eax,ebx
 0048CA3F    call        TControl.GetTextLen
 0048CA44    mov         esi,eax
 0048CA46    cmp         esi,1
>0048CA49    jge         0048CA5D
 0048CA4B    mov         eax,48CA94
 0048CA50    call        StrNew
 0048CA55    mov         dword ptr [ebx+174],eax
>0048CA5B    jmp         0048CA7F
 0048CA5D    lea         eax,[esi+1]
 0048CA60    call        StrAlloc
 0048CA65    mov         ebp,eax
 0048CA67    mov         dword ptr [ebx+174],ebp
 0048CA6D    mov         eax,ebp
 0048CA6F    call        StrBufSize
 0048CA74    mov         ecx,eax
 0048CA76    mov         edx,ebp
 0048CA78    mov         eax,ebx
 0048CA7A    call        TControl.GetTextBuf
 0048CA7F    mov         edx,edi
 0048CA81    mov         eax,ebx
 0048CA83    mov         ecx,dword ptr [eax]
 0048CA85    call        dword ptr [ecx-10]
 0048CA88    mov         eax,ebx
 0048CA8A    call        TWinControl.RemoveWindowProps
 0048CA8F    pop         ebp
 0048CA90    pop         edi
 0048CA91    pop         esi
 0048CA92    pop         ebx
 0048CA93    ret
*}
end;

//0048CA98
procedure TWinControl.WMNCDestroy(var Message:TWMNCDestroy);
begin
{*
 0048CA98    push        esi
 0048CA99    mov         esi,eax
 0048CA9B    mov         eax,esi
 0048CA9D    mov         ecx,dword ptr [eax]
 0048CA9F    call        dword ptr [ecx-10]
 0048CAA2    xor         eax,eax
 0048CAA4    mov         dword ptr [esi+258],eax
 0048CAAA    mov         byte ptr [esi+1EA],0
 0048CAB1    pop         esi
 0048CAB2    ret
*}
end;

//0048CAB4
procedure TWinControl.WMNCHitTest(var Message:TWMNCHitTest);
begin
{*
 0048CAB4    push        esi
 0048CAB5    mov         esi,eax
 0048CAB7    test        byte ptr [esi+1C],10
>0048CABB    je          0048CACC
 0048CABD    cmp         dword ptr [esi+34],0
>0048CAC1    je          0048CACC
 0048CAC3    mov         dword ptr [edx+0C],1
 0048CACA    pop         esi
 0048CACB    ret
 0048CACC    mov         eax,esi
 0048CACE    mov         ecx,dword ptr [eax]
 0048CAD0    call        dword ptr [ecx-10]
 0048CAD3    pop         esi
 0048CAD4    ret
*}
end;

//0048CAD8
procedure TWinControl.PaletteChanged(Foreground:Boolean);
begin
{*
 0048CAD8    push        ebx
 0048CAD9    push        esi
 0048CADA    push        edi
 0048CADB    push        ebp
 0048CADC    push        ecx
 0048CADD    mov         byte ptr [esp],dl
 0048CAE0    mov         ebp,eax
 0048CAE2    movzx       edx,byte ptr [esp]
 0048CAE6    mov         eax,ebp
 0048CAE8    call        TControl.PaletteChanged
 0048CAED    mov         ebx,eax
 0048CAEF    cmp         byte ptr [ebp+59],0
>0048CAF3    je          0048CB27
 0048CAF5    mov         eax,ebp
 0048CAF7    call        TWinControl.GetControlCount
 0048CAFC    mov         edi,eax
 0048CAFE    dec         edi
 0048CAFF    cmp         edi,0
>0048CB02    jl          0048CB27
 0048CB04    test        byte ptr [esp],bl
>0048CB07    jne         0048CB27
 0048CB09    mov         edx,edi
 0048CB0B    mov         eax,ebp
 0048CB0D    call        TWinControl.GetControl
 0048CB12    movzx       edx,byte ptr [esp]
 0048CB16    mov         si,0FFD1
 0048CB1A    call        @CallDynaInst
 0048CB1F    or          bl,al
 0048CB21    dec         edi
 0048CB22    cmp         edi,0FFFFFFFF
>0048CB25    jne         0048CB04
 0048CB27    mov         eax,ebx
 0048CB29    pop         edx
 0048CB2A    pop         ebp
 0048CB2B    pop         edi
 0048CB2C    pop         esi
 0048CB2D    pop         ebx
 0048CB2E    ret
*}
end;

//0048CB30
procedure TWinControl.WMQueryNewPalette(var Message:TMessage);
begin
{*
 0048CB30    push        ebx
 0048CB31    push        esi
 0048CB32    push        edi
 0048CB33    mov         edi,edx
 0048CB35    mov         ebx,eax
 0048CB37    or          dword ptr [ebx+54],4
 0048CB3B    mov         dl,1
 0048CB3D    mov         eax,ebx
 0048CB3F    mov         si,0FFD1
 0048CB43    call        @CallDynaInst
 0048CB48    and         eax,7F
 0048CB4B    mov         dword ptr [edi+0C],eax
 0048CB4E    pop         edi
 0048CB4F    pop         esi
 0048CB50    pop         ebx
 0048CB51    ret
*}
end;

//0048CB54
procedure TWinControl.WMPaletteChanged(var Message:TMessage);
begin
{*
 0048CB54    push        ebx
 0048CB55    push        esi
 0048CB56    push        edi
 0048CB57    mov         edi,edx
 0048CB59    mov         ebx,eax
 0048CB5B    xor         edx,edx
 0048CB5D    mov         eax,ebx
 0048CB5F    mov         si,0FFD1
 0048CB63    call        @CallDynaInst
 0048CB68    and         eax,7F
 0048CB6B    mov         dword ptr [edi+0C],eax
 0048CB6E    pop         edi
 0048CB6F    pop         esi
 0048CB70    pop         ebx
 0048CB71    ret
*}
end;

//0048CB74
procedure TWinControl.CMShowHintChanged(var Message:TMessage);
begin
{*
 0048CB74    push        esi
 0048CB75    mov         esi,eax
 0048CB77    mov         eax,esi
 0048CB79    mov         ecx,dword ptr [eax]
 0048CB7B    call        dword ptr [ecx-10]
 0048CB7E    mov         dx,0B023
 0048CB82    mov         eax,esi
 0048CB84    call        TWinControl.NotifyControls
 0048CB89    pop         esi
 0048CB8A    ret
*}
end;

//0048CB8C
procedure TWinControl.CMBiDiModeChanged(var Message:TMessage);
begin
{*
 0048CB8C    push        ebx
 0048CB8D    push        esi
 0048CB8E    mov         esi,edx
 0048CB90    mov         ebx,eax
 0048CB92    mov         edx,esi
 0048CB94    mov         eax,ebx
 0048CB96    call        TControl.CMBiDiModeChanged
 0048CB9B    mov         eax,[0078DB7C];SysLocale:TSysLocale
 0048CBA0    cmp         byte ptr [eax+0D],0
>0048CBA4    je          0048CBB3
 0048CBA6    cmp         dword ptr [esi+4],0
>0048CBAA    jne         0048CBB3
 0048CBAC    mov         eax,ebx
 0048CBAE    call        TWinControl.RecreateWnd
 0048CBB3    mov         dx,0B03D
 0048CBB7    mov         eax,ebx
 0048CBB9    call        TWinControl.NotifyControls
 0048CBBE    pop         esi
 0048CBBF    pop         ebx
 0048CBC0    ret
*}
end;

//0048CBC4
procedure TWinControl.CMDoubleBufferedChanged(var Message:TMessage);
begin
{*
 0048CBC4    push        esi
 0048CBC5    mov         esi,eax
 0048CBC7    mov         eax,esi
 0048CBC9    mov         ecx,dword ptr [eax]
 0048CBCB    call        dword ptr [ecx-10]
 0048CBCE    mov         dx,0B050
 0048CBD2    mov         eax,esi
 0048CBD4    call        TWinControl.NotifyControls
 0048CBD9    mov         eax,esi
 0048CBDB    mov         edx,dword ptr [eax]
 0048CBDD    call        dword ptr [edx+90]
 0048CBE3    pop         esi
 0048CBE4    ret
*}
end;

//0048CBE8
procedure TWinControl.CMEnter(var Message:TWMNoParams);
begin
{*
 0048CBE8    push        ebx
 0048CBE9    push        esi
 0048CBEA    push        ecx
 0048CBEB    mov         ebx,eax
 0048CBED    mov         eax,[0078DB7C];SysLocale:TSysLocale
 0048CBF2    cmp         byte ptr [eax+0D],0
>0048CBF6    je          0048CC5D
 0048CBF8    mov         eax,ebx
 0048CBFA    call        TControl.UseRightToLeftReading
 0048CBFF    test        al,al
>0048CC01    je          0048CC31
 0048CC03    mov         eax,[0078D590];^Application:TApplication
 0048CC08    mov         eax,dword ptr [eax]
 0048CC0A    cmp         dword ptr [eax+38],0
>0048CC0E    je          0048CC5D
 0048CC10    mov         eax,[0078D590];^Application:TApplication
 0048CC15    mov         eax,dword ptr [eax]
 0048CC17    mov         esi,dword ptr [eax+38]
 0048CC1A    push        1
 0048CC1C    mov         dword ptr [esp+4],esi
 0048CC20    mov         eax,dword ptr [esp+4]
 0048CC24    call        @UStrToPWChar
 0048CC29    push        eax
 0048CC2A    call        user32.LoadKeyboardLayoutW
>0048CC2F    jmp         0048CC5D
 0048CC31    mov         eax,[0078D590];^Application:TApplication
 0048CC36    mov         eax,dword ptr [eax]
 0048CC38    cmp         dword ptr [eax+40],0
>0048CC3C    je          0048CC5D
 0048CC3E    mov         eax,[0078D590];^Application:TApplication
 0048CC43    mov         eax,dword ptr [eax]
 0048CC45    mov         esi,dword ptr [eax+40]
 0048CC48    push        1
 0048CC4A    mov         dword ptr [esp+4],esi
 0048CC4E    mov         eax,dword ptr [esp+4]
 0048CC52    call        @UStrToPWChar
 0048CC57    push        eax
 0048CC58    call        user32.LoadKeyboardLayoutW
 0048CC5D    mov         eax,ebx
 0048CC5F    mov         si,0FFC1
 0048CC63    call        @CallDynaInst
 0048CC68    pop         edx
 0048CC69    pop         esi
 0048CC6A    pop         ebx
 0048CC6B    ret
*}
end;

//0048CC6C
procedure TWinControl.CMExit(var Message:TWMNoParams);
begin
{*
 0048CC6C    push        esi
 0048CC6D    mov         si,0FFC0
 0048CC71    call        @CallDynaInst
 0048CC76    pop         esi
 0048CC77    ret
*}
end;

//0048CC78
procedure TWinControl.CMDesignHitTest(var Message:TWMMouse);
begin
{*
 0048CC78    push        ebx
 0048CC79    push        esi
 0048CC7A    mov         esi,edx
 0048CC7C    mov         ebx,eax
 0048CC7E    mov         edx,esi
 0048CC80    mov         eax,ebx
 0048CC82    call        TWinControl.IsControlMouseMsg
 0048CC87    test        al,al
>0048CC89    jne         0048CC94
 0048CC8B    mov         edx,esi
 0048CC8D    mov         eax,ebx
 0048CC8F    call        TControl.CMDesignHitTest
 0048CC94    pop         esi
 0048CC95    pop         ebx
 0048CC96    ret
*}
end;

//0048CC98
procedure TWinControl.CMChanged(var Message:TCMChanged);
begin
{*
 0048CC98    push        ebx
 0048CC99    mov         ecx,dword ptr [eax+34]
 0048CC9C    test        ecx,ecx
>0048CC9E    je          0048CCA8
 0048CCA0    mov         ebx,ecx
 0048CCA2    mov         eax,dword ptr [ebx+3C]
 0048CCA5    call        dword ptr [ebx+38]
 0048CCA8    pop         ebx
 0048CCA9    ret
*}
end;

//0048CCAC
procedure TWinControl.CMChildKey(var Message:TCMChildKey);
begin
{*
 0048CCAC    push        ebx
 0048CCAD    mov         ecx,dword ptr [eax+34]
 0048CCB0    test        ecx,ecx
>0048CCB2    je          0048CCBC
 0048CCB4    mov         ebx,ecx
 0048CCB6    mov         eax,dword ptr [ebx+3C]
 0048CCB9    call        dword ptr [ebx+38]
 0048CCBC    pop         ebx
 0048CCBD    ret
*}
end;

//0048CCC0
procedure TWinControl.CMDialogKey(var Message:TWMKey);
begin
{*
 0048CCC0    call        TWinControl.Broadcast
 0048CCC5    ret
*}
end;

//0048CCC8
procedure TWinControl.CMDialogChar(var Message:TWMKey);
begin
{*
 0048CCC8    call        TWinControl.Broadcast
 0048CCCD    ret
*}
end;

//0048CCD0
procedure TWinControl.CMFocusChanged(var Message:TCMFocusChanged);
begin
{*
 0048CCD0    call        TWinControl.Broadcast
 0048CCD5    ret
*}
end;

//0048CCD8
procedure TWinControl.CMVisibleChanged(var Message:TMessage);
begin
{*
 0048CCD8    push        ebx
 0048CCD9    mov         ebx,eax
 0048CCDB    cmp         byte ptr [ebx+59],0
>0048CCDF    jne         0048CCF0
 0048CCE1    cmp         dword ptr [ebx+34],0
>0048CCE5    je          0048CCF0
 0048CCE7    xor         edx,edx
 0048CCE9    mov         eax,ebx
 0048CCEB    call        TWinControl.RemoveFocus
 0048CCF0    test        byte ptr [ebx+1C],10
>0048CCF4    je          0048CCFC
 0048CCF6    test        byte ptr [ebx+51],4
>0048CCFA    je          0048CD03
 0048CCFC    mov         eax,ebx
 0048CCFE    call        TWinControl.UpdateControlState
 0048CD03    pop         ebx
 0048CD04    ret
*}
end;

//0048CD08
procedure TWinControl.CMShowingChanged(var Message:TMessage);
begin
{*
 0048CD08    movzx       edx,byte ptr [eax+1EA]
 0048CD0F    movzx       edx,word ptr [edx*2+785A68]
 0048CD17    push        edx
 0048CD18    push        0
 0048CD1A    push        0
 0048CD1C    push        0
 0048CD1E    push        0
 0048CD20    push        0
 0048CD22    mov         eax,dword ptr [eax+258]
 0048CD28    push        eax
 0048CD29    call        user32.SetWindowPos
 0048CD2E    ret
*}
end;

//0048CD30
procedure TWinControl.CMEnabledChanged(var Message:TMessage);
begin
{*
 0048CD30    push        ebx
 0048CD31    mov         ebx,eax
 0048CD33    mov         eax,ebx
 0048CD35    mov         edx,dword ptr [eax]
 0048CD37    call        dword ptr [edx+5C]
 0048CD3A    test        al,al
>0048CD3C    jne         0048CD4D
 0048CD3E    cmp         dword ptr [ebx+34],0
>0048CD42    je          0048CD4D
 0048CD44    xor         edx,edx
 0048CD46    mov         eax,ebx
 0048CD48    call        TWinControl.RemoveFocus
 0048CD4D    mov         eax,ebx
 0048CD4F    call        TWinControl.HandleAllocated
 0048CD54    test        al,al
>0048CD56    je          0048CD76
 0048CD58    test        byte ptr [ebx+1C],10
>0048CD5C    jne         0048CD76
 0048CD5E    mov         eax,ebx
 0048CD60    mov         edx,dword ptr [eax]
 0048CD62    call        dword ptr [edx+5C]
 0048CD65    neg         al
 0048CD67    sbb         eax,eax
 0048CD69    push        eax
 0048CD6A    mov         eax,dword ptr [ebx+258]
 0048CD70    push        eax
 0048CD71    call        user32.EnableWindow
 0048CD76    pop         ebx
 0048CD77    ret
*}
end;

//0048CD78
procedure TWinControl.CMColorChanged(var Message:TMessage);
begin
{*
 0048CD78    push        ebx
 0048CD79    mov         ebx,eax
 0048CD7B    mov         eax,ebx
 0048CD7D    call        TControl.CMFontChanged
 0048CD82    mov         edx,dword ptr [ebx+6C]
 0048CD85    mov         eax,dword ptr [ebx+1C0]
 0048CD8B    call        TBrush.SetColor
 0048CD90    mov         dx,0B009
 0048CD94    mov         eax,ebx
 0048CD96    call        TWinControl.NotifyControls
 0048CD9B    pop         ebx
 0048CD9C    ret
*}
end;

//0048CDA0
procedure TWinControl.CMFontChanged(var Message:TMessage);
begin
{*
 0048CDA0    push        ebx
 0048CDA1    mov         ebx,eax
 0048CDA3    mov         eax,ebx
 0048CDA5    call        TControl.CMEnabledChanged
 0048CDAA    mov         eax,ebx
 0048CDAC    call        TWinControl.HandleAllocated
 0048CDB1    test        al,al
>0048CDB3    je          0048CDCD
 0048CDB5    push        0
 0048CDB7    mov         eax,dword ptr [ebx+64]
 0048CDBA    call        TFont.GetHandle
 0048CDBF    mov         ecx,eax
 0048CDC1    mov         edx,30
 0048CDC6    mov         eax,ebx
 0048CDC8    call        TControl.Perform
 0048CDCD    mov         dx,0B008
 0048CDD1    mov         eax,ebx
 0048CDD3    call        TWinControl.NotifyControls
 0048CDD8    pop         ebx
 0048CDD9    ret
*}
end;

//0048CDDC
procedure TWinControl.CMCursorChanged(var Message:TMessage);
begin
{*
 0048CDDC    push        ebx
 0048CDDD    add         esp,0FFFFFFF8
 0048CDE0    mov         ebx,eax
 0048CDE2    call        user32.GetCapture
 0048CDE7    test        eax,eax
>0048CDE9    jne         0048CE15
 0048CDEB    push        esp
 0048CDEC    call        user32.GetCursorPos
 0048CDF1    mov         eax,esp
 0048CDF3    xor         edx,edx
 0048CDF5    call        FindDragTarget
 0048CDFA    cmp         ebx,eax
>0048CDFC    jne         0048CE15
 0048CDFE    push        1
 0048CE00    mov         eax,ebx
 0048CE02    call        TWinControl.GetHandle
 0048CE07    mov         ecx,eax
 0048CE09    mov         edx,20
 0048CE0E    mov         eax,ebx
 0048CE10    call        TControl.Perform
 0048CE15    pop         ecx
 0048CE16    pop         edx
 0048CE17    pop         ebx
 0048CE18    ret
*}
end;

//0048CE1C
procedure TWinControl.CMBorderChanged(var Message:TMessage);
begin
{*
 0048CE1C    push        esi
 0048CE1D    mov         esi,eax
 0048CE1F    mov         eax,esi
 0048CE21    mov         ecx,dword ptr [eax]
 0048CE23    call        dword ptr [ecx-10]
 0048CE26    mov         eax,esi
 0048CE28    call        TWinControl.HandleAllocated
 0048CE2D    test        al,al
>0048CE2F    je          0048CE5A
 0048CE31    push        37
 0048CE33    push        0
 0048CE35    push        0
 0048CE37    push        0
 0048CE39    push        0
 0048CE3B    push        0
 0048CE3D    mov         eax,esi
 0048CE3F    call        TWinControl.GetHandle
 0048CE44    push        eax
 0048CE45    call        user32.SetWindowPos
 0048CE4A    cmp         byte ptr [esi+59],0
>0048CE4E    je          0048CE5A
 0048CE50    mov         eax,esi
 0048CE52    mov         edx,dword ptr [eax]
 0048CE54    call        dword ptr [edx+90]
 0048CE5A    pop         esi
 0048CE5B    ret
*}
end;

//0048CE5C
procedure TWinControl.CMCtl3DChanged(var Message:TMessage);
begin
{*
 0048CE5C    push        ebx
 0048CE5D    mov         ebx,eax
 0048CE5F    test        byte ptr [ebx+50],10
>0048CE63    je          0048CE8D
 0048CE65    cmp         dword ptr [ebx+34],0
>0048CE69    je          0048CE8D
 0048CE6B    mov         eax,ebx
 0048CE6D    call        TWinControl.HandleAllocated
 0048CE72    test        al,al
>0048CE74    je          0048CE8D
 0048CE76    mov         eax,dword ptr [ebx+258]
 0048CE7C    push        eax
 0048CE7D    call        user32.IsWindowVisible
 0048CE82    test        eax,eax
>0048CE84    je          0048CE8D
 0048CE86    mov         eax,ebx
 0048CE88    call        TWinControl.InvalidateFrame
 0048CE8D    mov         dx,0B011
 0048CE91    mov         eax,ebx
 0048CE93    call        TWinControl.NotifyControls
 0048CE98    pop         ebx
 0048CE99    ret
*}
end;

//0048CE9C
procedure TWinControl.CMParentCtl3DChanged(var Message:TMessage);
begin
{*
 0048CE9C    push        ebx
 0048CE9D    mov         ebx,eax
 0048CE9F    cmp         byte ptr [ebx+1ED],0
>0048CEA6    je          0048CED8
 0048CEA8    cmp         dword ptr [edx+4],0
>0048CEAC    je          0048CEC0
 0048CEAE    cmp         dword ptr [edx+8],0
 0048CEB2    setne       al
 0048CEB5    mov         edx,eax
 0048CEB7    mov         eax,ebx
 0048CEB9    call        TWinControl.SetCtl3D
>0048CEBE    jmp         0048CED1
 0048CEC0    mov         eax,dword ptr [ebx+34]
 0048CEC3    movzx       edx,byte ptr [eax+1E9]
 0048CECA    mov         eax,ebx
 0048CECC    call        TWinControl.SetCtl3D
 0048CED1    mov         byte ptr [ebx+1ED],1
 0048CED8    pop         ebx
 0048CED9    ret
*}
end;

//0048CEDC
procedure TWinControl.CMParentDoubleBufferedChanged(var Message:TMessage);
begin
{*
 0048CEDC    push        ebx
 0048CEDD    mov         ebx,eax
 0048CEDF    cmp         byte ptr [ebx+1EE],0
>0048CEE6    je          0048CF04
 0048CEE8    mov         eax,dword ptr [ebx+34]
 0048CEEB    test        eax,eax
>0048CEED    je          0048CEFD
 0048CEEF    movzx       edx,byte ptr [eax+260]
 0048CEF6    mov         eax,ebx
 0048CEF8    call        TWinControl.SetDoubleBuffered
 0048CEFD    mov         byte ptr [ebx+1EE],1
 0048CF04    pop         ebx
 0048CF05    ret
*}
end;

//0048CF08
procedure TWinControl.CMSysColorChange(var Message:TMessage);
begin
{*
 0048CF08    call        TWinControl.Broadcast
 0048CF0D    ret
*}
end;

//0048CF10
procedure TWinControl.CMWinIniChange(var Message:TWMWinIniChange);
begin
{*
 0048CF10    call        TWinControl.Broadcast
 0048CF15    ret
*}
end;

//0048CF18
procedure TWinControl.CMFontChange;
begin
{*
 0048CF18    call        TWinControl.Broadcast
 0048CF1D    ret
*}
end;

//0048CF20
procedure TWinControl.CMTabletOptionsChanged(var Message:TMessage);
begin
{*
 0048CF20    push        ebx
 0048CF21    mov         ebx,eax
 0048CF23    mov         dx,0B058
 0048CF27    mov         eax,ebx
 0048CF29    call        TWinControl.NotifyControls
 0048CF2E    mov         eax,ebx
 0048CF30    mov         edx,dword ptr [eax]
 0048CF32    call        dword ptr [edx+90]
 0048CF38    pop         ebx
 0048CF39    ret
*}
end;

//0048CF3C
procedure TWinControl.CMTimeChange;
begin
{*
 0048CF3C    call        TWinControl.Broadcast
 0048CF41    ret
*}
end;

//0048CF44
procedure TWinControl.CMDrag(var Message:TCMDrag);
begin
{*
 0048CF44    push        ebx
 0048CF45    push        esi
 0048CF46    push        edi
 0048CF47    push        ebp
 0048CF48    add         esp,0FFFFFFF8
 0048CF4B    mov         ebx,edx
 0048CF4D    mov         esi,eax
 0048CF4F    mov         edi,dword ptr [ebx+8]
 0048CF52    movzx       eax,byte ptr [ebx+4]
 0048CF56    sub         al,4
>0048CF58    jb          0048CF60
 0048CF5A    dec         al
>0048CF5C    je          0048CF72
>0048CF5E    jmp         0048CF9C
 0048CF60    cmp         dword ptr [edi+0C],0
>0048CF64    je          0048CF9C
 0048CF66    mov         edx,ebx
 0048CF68    mov         eax,dword ptr [edi+0C]
 0048CF6B    call        TControl.DoDragMsg
>0048CF70    jmp         0048CF9C
 0048CF72    push        0
 0048CF74    push        0
 0048CF76    lea         ecx,[esp+8]
 0048CF7A    mov         edx,edi
 0048CF7C    mov         eax,esi
 0048CF7E    call        TControl.ScreenToClient
 0048CF83    lea         edx,[esp+8]
 0048CF87    xor         ecx,ecx
 0048CF89    mov         eax,esi
 0048CF8B    call        TWinControl.ControlAtPos
 0048CF90    mov         ebp,eax
 0048CF92    mov         dword ptr [ebx+0C],ebp
 0048CF95    test        ebp,ebp
>0048CF97    jne         0048CF9C
 0048CF99    mov         dword ptr [ebx+0C],esi
 0048CF9C    pop         ecx
 0048CF9D    pop         edx
 0048CF9E    pop         ebp
 0048CF9F    pop         edi
 0048CFA0    pop         esi
 0048CFA1    pop         ebx
 0048CFA2    ret
*}
end;

//0048CFA4
procedure TWinControl.CMControlListChange(var Message:TMessage);
begin
{*
 0048CFA4    push        ebx
 0048CFA5    mov         ecx,dword ptr [eax+34]
 0048CFA8    test        ecx,ecx
>0048CFAA    je          0048CFB4
 0048CFAC    mov         ebx,ecx
 0048CFAE    mov         eax,dword ptr [ebx+3C]
 0048CFB1    call        dword ptr [ebx+38]
 0048CFB4    pop         ebx
 0048CFB5    ret
*}
end;

//0048CFB8
procedure TWinControl.CMControlListChanging(var Message:TMessage);
begin
{*
 0048CFB8    push        ebx
 0048CFB9    mov         ecx,dword ptr [eax+34]
 0048CFBC    test        ecx,ecx
>0048CFBE    je          0048CFC8
 0048CFC0    mov         ebx,ecx
 0048CFC2    mov         eax,dword ptr [ebx+3C]
 0048CFC5    call        dword ptr [ebx+38]
 0048CFC8    pop         ebx
 0048CFC9    ret
*}
end;

//0048CFCC
procedure TWinControl.CMSysFontChanged(var Message:TMessage);
begin
{*
 0048CFCC    push        ebx
 0048CFCD    push        esi
 0048CFCE    mov         esi,edx
 0048CFD0    mov         ebx,eax
 0048CFD2    mov         edx,esi
 0048CFD4    mov         eax,ebx
 0048CFD6    call        TControl.CMSysFontChanged
 0048CFDB    mov         edx,esi
 0048CFDD    mov         eax,ebx
 0048CFDF    call        TWinControl.Broadcast
 0048CFE4    pop         esi
 0048CFE5    pop         ebx
 0048CFE6    ret
*}
end;

//0048CFE8
function TWinControl.IsMenuKey(var Message:TWMKey):Boolean;
begin
{*
 0048CFE8    push        ebx
 0048CFE9    push        esi
 0048CFEA    push        edi
 0048CFEB    push        ebp
 0048CFEC    add         esp,0FFFFFFF8
 0048CFEF    mov         ebp,edx
 0048CFF1    mov         dword ptr [esp],eax
 0048CFF4    mov         byte ptr [esp+4],1
 0048CFF9    mov         eax,dword ptr [esp]
 0048CFFC    test        byte ptr [eax+1C],10
>0048D000    jne         0048D059
 0048D002    mov         ebx,dword ptr [esp]
 0048D005    test        ebx,ebx
>0048D007    je          0048D038
 0048D009    mov         eax,ebx
 0048D00B    mov         si,0FFD8
 0048D00F    call        @CallDynaInst
 0048D014    mov         edi,eax
 0048D016    test        edi,edi
>0048D018    je          0048D031
 0048D01A    cmp         dword ptr [edi+3C],0
>0048D01E    je          0048D031
 0048D020    mov         edx,ebp
 0048D022    mov         eax,edi
 0048D024    mov         si,0FFEF
 0048D028    call        @CallDynaInst
 0048D02D    test        al,al
>0048D02F    jne         0048D073
 0048D031    mov         ebx,dword ptr [ebx+34]
 0048D034    test        ebx,ebx
>0048D036    jne         0048D009
 0048D038    mov         dl,1
 0048D03A    mov         eax,dword ptr [esp]
 0048D03D    call        GetParentForm
 0048D042    mov         ebx,eax
 0048D044    test        ebx,ebx
>0048D046    je          0048D059
 0048D048    mov         edx,ebp
 0048D04A    mov         eax,ebx
 0048D04C    mov         si,0FFA3
 0048D050    call        @CallDynaInst
 0048D055    test        al,al
>0048D057    jne         0048D073
 0048D059    mov         ecx,dword ptr [ebp+8]
 0048D05C    movzx       edx,word ptr [ebp+4]
 0048D060    mov         eax,0B016
 0048D065    call        SendAppMessage
 0048D06A    test        eax,eax
>0048D06C    jne         0048D073
 0048D06E    mov         byte ptr [esp+4],0
 0048D073    movzx       eax,byte ptr [esp+4]
 0048D078    pop         ecx
 0048D079    pop         edx
 0048D07A    pop         ebp
 0048D07B    pop         edi
 0048D07C    pop         esi
 0048D07D    pop         ebx
 0048D07E    ret
*}
end;

//0048D080
procedure TWinControl.CNKeyDown(var Message:TWMKeyDown);
begin
{*
 0048D080    push        ebx
 0048D081    push        esi
 0048D082    push        edi
 0048D083    mov         esi,edx
 0048D085    mov         ebx,eax
 0048D087    mov         dword ptr [esi+0C],1
 0048D08E    movzx       edx,word ptr [esi+4]
 0048D092    mov         eax,ebx
 0048D094    call        TWinControl.UpdateUIState
 0048D099    mov         edx,esi
 0048D09B    mov         eax,ebx
 0048D09D    call        TWinControl.IsMenuKey
 0048D0A2    test        al,al
>0048D0A4    jne         0048D15F
 0048D0AA    test        byte ptr [ebx+1C],10
>0048D0AE    jne         0048D15A
 0048D0B4    push        ebx
 0048D0B5    movzx       ecx,word ptr [esi+4]
 0048D0B9    mov         edx,0B02E
 0048D0BE    mov         eax,ebx
 0048D0C0    call        TControl.Perform
 0048D0C5    test        eax,eax
>0048D0C7    jne         0048D15F
 0048D0CD    xor         edi,edi
 0048D0CF    movzx       eax,word ptr [esi+4]
 0048D0D3    cmp         eax,1B
>0048D0D6    jg          0048D0EB
>0048D0D8    je          0048D108
 0048D0DA    sub         eax,3
>0048D0DD    je          0048D108
 0048D0DF    sub         eax,6
>0048D0E2    je          0048D0FA
 0048D0E4    sub         eax,4
>0048D0E7    je          0048D108
>0048D0E9    jmp         0048D10D
 0048D0EB    add         eax,0FFFFFFDB
 0048D0EE    sub         eax,4
>0048D0F1    jb          0048D101
 0048D0F3    sub         eax,2
>0048D0F6    je          0048D108
>0048D0F8    jmp         0048D10D
 0048D0FA    mov         edi,2
>0048D0FF    jmp         0048D10D
 0048D101    mov         edi,1
>0048D106    jmp         0048D10D
 0048D108    mov         edi,4
 0048D10D    test        edi,edi
>0048D10F    je          0048D15A
 0048D111    push        0
 0048D113    movzx       ecx,word ptr [esi+4]
 0048D117    mov         edx,0B01E
 0048D11C    mov         eax,ebx
 0048D11E    call        TControl.Perform
 0048D123    test        eax,eax
>0048D125    jne         0048D15A
 0048D127    push        0
 0048D129    xor         ecx,ecx
 0048D12B    mov         edx,87
 0048D130    mov         eax,ebx
 0048D132    call        TControl.Perform
 0048D137    test        eax,edi
>0048D139    jne         0048D15A
 0048D13B    mov         eax,dword ptr [esi+8]
 0048D13E    push        eax
 0048D13F    mov         dl,1
 0048D141    mov         eax,ebx
 0048D143    call        GetParentForm
 0048D148    movzx       ecx,word ptr [esi+4]
 0048D14C    mov         edx,0B005
 0048D151    call        TControl.Perform
 0048D156    test        eax,eax
>0048D158    jne         0048D15F
 0048D15A    xor         eax,eax
 0048D15C    mov         dword ptr [esi+0C],eax
 0048D15F    pop         edi
 0048D160    pop         esi
 0048D161    pop         ebx
 0048D162    ret
*}
end;

//0048D164
procedure TWinControl.CNKeyUp(var Message:TWMKeyUp);
begin
{*
 0048D164    push        ebx
 0048D165    push        esi
 0048D166    push        edi
 0048D167    mov         esi,edx
 0048D169    mov         ebx,eax
 0048D16B    test        byte ptr [ebx+1C],10
>0048D16F    jne         0048D1B1
 0048D171    movzx       edi,word ptr [esi+4]
 0048D175    movzx       eax,di
 0048D178    cmp         eax,1B
>0048D17B    jg          0048D190
>0048D17D    je          0048D19D
 0048D17F    sub         eax,3
>0048D182    je          0048D19D
 0048D184    sub         eax,6
>0048D187    je          0048D19D
 0048D189    sub         eax,4
>0048D18C    je          0048D19D
>0048D18E    jmp         0048D1B1
 0048D190    add         eax,0FFFFFFDB
 0048D193    sub         eax,4
>0048D196    jb          0048D19D
 0048D198    sub         eax,2
>0048D19B    jne         0048D1B1
 0048D19D    push        0
 0048D19F    movzx       ecx,di
 0048D1A2    mov         edx,0B01E
 0048D1A7    mov         eax,ebx
 0048D1A9    call        TControl.Perform
 0048D1AE    mov         dword ptr [esi+0C],eax
 0048D1B1    pop         edi
 0048D1B2    pop         esi
 0048D1B3    pop         ebx
 0048D1B4    ret
*}
end;

//0048D1B8
procedure TWinControl.CNChar(var Message:TWMChar);
begin
{*
 0048D1B8    push        ebx
 0048D1B9    push        esi
 0048D1BA    mov         esi,edx
 0048D1BC    mov         ebx,eax
 0048D1BE    test        byte ptr [ebx+1C],10
>0048D1C2    jne         0048D203
 0048D1C4    mov         dword ptr [esi+0C],1
 0048D1CB    push        0
 0048D1CD    xor         ecx,ecx
 0048D1CF    mov         edx,87
 0048D1D4    mov         eax,ebx
 0048D1D6    call        TControl.Perform
 0048D1DB    test        al,80
>0048D1DD    jne         0048D1FE
 0048D1DF    mov         eax,dword ptr [esi+8]
 0048D1E2    push        eax
 0048D1E3    mov         dl,1
 0048D1E5    mov         eax,ebx
 0048D1E7    call        GetParentForm
 0048D1EC    movzx       ecx,word ptr [esi+4]
 0048D1F0    mov         edx,0B006
 0048D1F5    call        TControl.Perform
 0048D1FA    test        eax,eax
>0048D1FC    jne         0048D203
 0048D1FE    xor         eax,eax
 0048D200    mov         dword ptr [esi+0C],eax
 0048D203    pop         esi
 0048D204    pop         ebx
 0048D205    ret
*}
end;

//0048D208
procedure TWinControl.CNSysKeyDown(var Message:TWMKeyDown);
begin
{*
 0048D208    push        ebx
 0048D209    push        esi
 0048D20A    mov         esi,edx
 0048D20C    mov         ebx,eax
 0048D20E    mov         dword ptr [esi+0C],1
 0048D215    mov         edx,esi
 0048D217    mov         eax,ebx
 0048D219    call        TWinControl.IsMenuKey
 0048D21E    test        al,al
>0048D220    jne         0048D261
 0048D222    test        byte ptr [ebx+1C],10
>0048D226    jne         0048D25C
 0048D228    push        ebx
 0048D229    movzx       ecx,word ptr [esi+4]
 0048D22D    mov         edx,0B02E
 0048D232    mov         eax,ebx
 0048D234    call        TControl.Perform
 0048D239    test        eax,eax
>0048D23B    jne         0048D261
 0048D23D    mov         eax,dword ptr [esi+8]
 0048D240    push        eax
 0048D241    mov         dl,1
 0048D243    mov         eax,ebx
 0048D245    call        GetParentForm
 0048D24A    movzx       ecx,word ptr [esi+4]
 0048D24E    mov         edx,0B005
 0048D253    call        TControl.Perform
 0048D258    test        eax,eax
>0048D25A    jne         0048D261
 0048D25C    xor         eax,eax
 0048D25E    mov         dword ptr [esi+0C],eax
 0048D261    pop         esi
 0048D262    pop         ebx
 0048D263    ret
*}
end;

//0048D264
procedure TWinControl.CNSysChar(var Message:TWMChar);
begin
{*
 0048D264    push        ebx
 0048D265    push        esi
 0048D266    mov         esi,edx
 0048D268    mov         ebx,eax
 0048D26A    test        byte ptr [ebx+1C],10
>0048D26E    jne         0048D295
 0048D270    cmp         word ptr [esi+4],20
>0048D275    je          0048D295
 0048D277    mov         eax,dword ptr [esi+8]
 0048D27A    push        eax
 0048D27B    mov         dl,1
 0048D27D    mov         eax,ebx
 0048D27F    call        GetParentForm
 0048D284    movzx       ecx,word ptr [esi+4]
 0048D288    mov         edx,0B006
 0048D28D    call        TControl.Perform
 0048D292    mov         dword ptr [esi+0C],eax
 0048D295    pop         esi
 0048D296    pop         ebx
 0048D297    ret
*}
end;

//0048D298
procedure TWinControl.SetBounds(ALeft:Integer; ATop:Integer; AHeight:Integer; AWidth:Integer);
begin
{*
 0048D298    push        ebp
 0048D299    mov         ebp,esp
 0048D29B    add         esp,0FFFFFFC4
 0048D29E    push        ebx
 0048D29F    push        esi
 0048D2A0    push        edi
 0048D2A1    mov         edi,ecx
 0048D2A3    mov         esi,edx
 0048D2A5    mov         ebx,eax
 0048D2A7    cmp         esi,dword ptr [ebx+40]
>0048D2AA    jne         0048D2C5
 0048D2AC    cmp         edi,dword ptr [ebx+44]
>0048D2AF    jne         0048D2C5
 0048D2B1    mov         eax,dword ptr [ebp+0C]
 0048D2B4    cmp         eax,dword ptr [ebx+48]
>0048D2B7    jne         0048D2C5
 0048D2B9    mov         eax,dword ptr [ebp+8]
 0048D2BC    cmp         eax,dword ptr [ebx+4C]
>0048D2BF    je          0048D369
 0048D2C5    mov         eax,ebx
 0048D2C7    call        TWinControl.HandleAllocated
 0048D2CC    test        al,al
>0048D2CE    je          0048D2FC
 0048D2D0    mov         eax,dword ptr [ebx+258]
 0048D2D6    push        eax
 0048D2D7    call        user32.IsIconic
 0048D2DC    test        eax,eax
>0048D2DE    jne         0048D2FC
 0048D2E0    push        14
 0048D2E2    mov         eax,dword ptr [ebp+8]
 0048D2E5    push        eax
 0048D2E6    mov         eax,dword ptr [ebp+0C]
 0048D2E9    push        eax
 0048D2EA    push        edi
 0048D2EB    push        esi
 0048D2EC    push        0
 0048D2EE    mov         eax,dword ptr [ebx+258]
 0048D2F4    push        eax
 0048D2F5    call        user32.SetWindowPos
>0048D2FA    jmp         0048D354
 0048D2FC    mov         dword ptr [ebx+40],esi
 0048D2FF    mov         dword ptr [ebx+44],edi
 0048D302    mov         eax,dword ptr [ebp+0C]
 0048D305    mov         dword ptr [ebx+48],eax
 0048D308    mov         eax,dword ptr [ebp+8]
 0048D30B    mov         dword ptr [ebx+4C],eax
 0048D30E    mov         eax,ebx
 0048D310    call        TWinControl.HandleAllocated
 0048D315    test        al,al
>0048D317    je          0048D354
 0048D319    mov         dword ptr [ebp-2C],2C
 0048D320    lea         eax,[ebp-2C]
 0048D323    push        eax
 0048D324    mov         eax,dword ptr [ebx+258]
 0048D32A    push        eax
 0048D32B    call        user32.GetWindowPlacement
 0048D330    lea         edx,[ebp-3C]
 0048D333    mov         eax,ebx
 0048D335    call        TControl.GetBoundsRect
 0048D33A    lea         esi,[ebp-3C]
 0048D33D    lea         edi,[ebp-10]
 0048D340    movs        dword ptr [edi],dword ptr [esi]
 0048D341    movs        dword ptr [edi],dword ptr [esi]
 0048D342    movs        dword ptr [edi],dword ptr [esi]
 0048D343    movs        dword ptr [edi],dword ptr [esi]
 0048D344    lea         eax,[ebp-2C]
 0048D347    push        eax
 0048D348    mov         eax,dword ptr [ebx+258]
 0048D34E    push        eax
 0048D34F    call        user32.SetWindowPlacement
 0048D354    mov         eax,ebx
 0048D356    call        TControl.UpdateAnchorRules
 0048D35B    mov         eax,ebx
 0048D35D    call        TControl.UpdateExplicitBounds
 0048D362    mov         eax,ebx
 0048D364    mov         edx,dword ptr [eax]
 0048D366    call        dword ptr [edx+68]
 0048D369    pop         edi
 0048D36A    pop         esi
 0048D36B    pop         ebx
 0048D36C    mov         esp,ebp
 0048D36E    pop         ebp
 0048D36F    ret         8
*}
end;

//0048D374
procedure TWinControl.ScaleControls(M:Integer; D:Integer);
begin
{*
 0048D374    push        ebx
 0048D375    push        esi
 0048D376    push        edi
 0048D377    push        ebp
 0048D378    add         esp,0FFFFFFF8
 0048D37B    mov         dword ptr [esp+4],ecx
 0048D37F    mov         dword ptr [esp],edx
 0048D382    mov         ebp,eax
 0048D384    mov         eax,ebp
 0048D386    call        TWinControl.GetControlCount
 0048D38B    mov         ebx,eax
 0048D38D    dec         ebx
 0048D38E    test        ebx,ebx
>0048D390    jl          0048D3B2
 0048D392    inc         ebx
 0048D393    xor         edi,edi
 0048D395    mov         edx,edi
 0048D397    mov         eax,ebp
 0048D399    call        TWinControl.GetControl
 0048D39E    mov         ecx,dword ptr [esp+4]
 0048D3A2    mov         edx,dword ptr [esp]
 0048D3A5    mov         si,0FFED
 0048D3A9    call        @CallDynaInst
 0048D3AE    inc         edi
 0048D3AF    dec         ebx
>0048D3B0    jne         0048D395
 0048D3B2    pop         ecx
 0048D3B3    pop         edx
 0048D3B4    pop         ebp
 0048D3B5    pop         edi
 0048D3B6    pop         esi
 0048D3B7    pop         ebx
 0048D3B8    ret
*}
end;

//0048D3BC
procedure TWinControl.ScalePadding(M:Integer; D:Integer);
begin
{*
 0048D3BC    push        ebx
 0048D3BD    push        esi
 0048D3BE    push        edi
 0048D3BF    push        ebp
 0048D3C0    mov         edi,ecx
 0048D3C2    mov         esi,edx
 0048D3C4    mov         ebx,dword ptr [eax+1BC]
 0048D3CA    mov         ebp,dword ptr [ebx+8]
 0048D3CD    test        ebp,ebp
>0048D3CF    jbe         0048D3E4
 0048D3D1    push        edi
 0048D3D2    push        esi
 0048D3D3    push        ebp
 0048D3D4    call        kernel32.MulDiv
 0048D3D9    mov         ecx,eax
 0048D3DB    xor         edx,edx
 0048D3DD    mov         eax,ebx
 0048D3DF    call        TMargins.SetMargin
 0048D3E4    mov         ebp,dword ptr [ebx+0C]
 0048D3E7    test        ebp,ebp
>0048D3E9    jbe         0048D401
 0048D3EB    push        edi
 0048D3EC    push        esi
 0048D3ED    push        ebp
 0048D3EE    call        kernel32.MulDiv
 0048D3F3    mov         ecx,eax
 0048D3F5    mov         edx,1
 0048D3FA    mov         eax,ebx
 0048D3FC    call        TMargins.SetMargin
 0048D401    mov         ebp,dword ptr [ebx+10]
 0048D404    test        ebp,ebp
>0048D406    jbe         0048D41E
 0048D408    push        edi
 0048D409    push        esi
 0048D40A    push        ebp
 0048D40B    call        kernel32.MulDiv
 0048D410    mov         ecx,eax
 0048D412    mov         edx,2
 0048D417    mov         eax,ebx
 0048D419    call        TMargins.SetMargin
 0048D41E    mov         ebp,dword ptr [ebx+14]
 0048D421    test        ebp,ebp
>0048D423    jbe         0048D43B
 0048D425    push        edi
 0048D426    push        esi
 0048D427    push        ebp
 0048D428    call        kernel32.MulDiv
 0048D42D    mov         ecx,eax
 0048D42F    mov         edx,3
 0048D434    mov         eax,ebx
 0048D436    call        TMargins.SetMargin
 0048D43B    pop         ebp
 0048D43C    pop         edi
 0048D43D    pop         esi
 0048D43E    pop         ebx
 0048D43F    ret
*}
end;

//0048D440
procedure TWinControl.ChangeScale(M:Integer; D:Integer);
begin
{*
 0048D440    push        ebp
 0048D441    mov         ebp,esp
 0048D443    push        ecx
 0048D444    push        ebx
 0048D445    push        esi
 0048D446    mov         esi,ecx
 0048D448    mov         ebx,edx
 0048D44A    mov         dword ptr [ebp-4],eax
 0048D44D    mov         eax,dword ptr [ebp-4]
 0048D450    inc         word ptr [eax+1AC]
 0048D457    xor         eax,eax
 0048D459    push        ebp
 0048D45A    push        48D4EC
 0048D45F    push        dword ptr fs:[eax]
 0048D462    mov         dword ptr fs:[eax],esp
 0048D465    mov         ecx,esi
 0048D467    mov         edx,ebx
 0048D469    mov         eax,dword ptr [ebp-4]
 0048D46C    call        TWinControl.ScaleControls
 0048D471    cmp         esi,ebx
>0048D473    je          0048D4BE
 0048D475    mov         eax,dword ptr [ebp-4]
 0048D478    test        byte ptr [eax+1C],2
>0048D47C    je          0048D4BE
 0048D47E    mov         eax,dword ptr [ebp-4]
 0048D481    test        byte ptr [eax+88],20
>0048D488    je          0048D4BE
 0048D48A    push        esi
 0048D48B    push        ebx
 0048D48C    mov         eax,dword ptr [ebp-4]
 0048D48F    mov         eax,dword ptr [eax+264]
 0048D495    push        eax
 0048D496    call        kernel32.MulDiv
 0048D49B    mov         edx,dword ptr [ebp-4]
 0048D49E    mov         dword ptr [edx+264],eax
 0048D4A4    push        esi
 0048D4A5    push        ebx
 0048D4A6    mov         eax,dword ptr [ebp-4]
 0048D4A9    mov         eax,dword ptr [eax+268]
 0048D4AF    push        eax
 0048D4B0    call        kernel32.MulDiv
 0048D4B5    mov         edx,dword ptr [ebp-4]
 0048D4B8    mov         dword ptr [edx+268],eax
 0048D4BE    mov         ecx,esi
 0048D4C0    mov         edx,ebx
 0048D4C2    mov         eax,dword ptr [ebp-4]
 0048D4C5    call        TControl.ChangeScale
 0048D4CA    mov         ecx,esi
 0048D4CC    mov         edx,ebx
 0048D4CE    mov         eax,dword ptr [ebp-4]
 0048D4D1    call        TWinControl.ScalePadding
 0048D4D6    xor         eax,eax
 0048D4D8    pop         edx
 0048D4D9    pop         ecx
 0048D4DA    pop         ecx
 0048D4DB    mov         dword ptr fs:[eax],edx
 0048D4DE    push        48D4F3
 0048D4E3    mov         eax,dword ptr [ebp-4]
 0048D4E6    call        TWinControl.EnableAlign
 0048D4EB    ret
>0048D4EC    jmp         @HandleFinally
>0048D4F1    jmp         0048D4E3
 0048D4F3    pop         esi
 0048D4F4    pop         ebx
 0048D4F5    pop         ecx
 0048D4F6    pop         ebp
 0048D4F7    ret
*}
end;

//0048D4F8
procedure TWinControl.ScaleBy(M:Integer; D:Integer);
begin
{*
 0048D4F8    push        ebx
 0048D4F9    push        esi
 0048D4FA    push        edi
 0048D4FB    push        ebp
 0048D4FC    add         esp,0FFFFFFEC
 0048D4FF    mov         ebp,ecx
 0048D501    mov         esi,edx
 0048D503    mov         edi,eax
 0048D505    mov         eax,edi
 0048D507    call        TWinControl.HandleAllocated
 0048D50C    test        al,al
>0048D50E    je          0048D521
 0048D510    mov         eax,edi
 0048D512    call        TWinControl.GetHandle
 0048D517    push        eax
 0048D518    call        user32.IsWindowVisible
 0048D51D    test        eax,eax
>0048D51F    jne         0048D525
 0048D521    xor         eax,eax
>0048D523    jmp         0048D527
 0048D525    mov         al,1
 0048D527    mov         byte ptr [esp],al
 0048D52A    cmp         byte ptr [esp],0
>0048D52E    je          0048D54C
 0048D530    push        97
 0048D535    push        0
 0048D537    push        0
 0048D539    push        0
 0048D53B    push        0
 0048D53D    push        0
 0048D53F    mov         eax,edi
 0048D541    call        TWinControl.GetHandle
 0048D546    push        eax
 0048D547    call        user32.SetWindowPos
 0048D54C    lea         edx,[esp+4]
 0048D550    mov         eax,edi
 0048D552    call        TControl.GetBoundsRect
 0048D557    mov         ecx,ebp
 0048D559    mov         edx,esi
 0048D55B    mov         eax,edi
 0048D55D    mov         si,0FFED
 0048D561    call        @CallDynaInst
 0048D566    mov         eax,dword ptr [edi+48]
 0048D569    push        eax
 0048D56A    mov         eax,dword ptr [edi+4C]
 0048D56D    push        eax
 0048D56E    mov         ecx,dword ptr [esp+10]
 0048D572    mov         edx,dword ptr [esp+0C]
 0048D576    mov         eax,edi
 0048D578    mov         ebx,dword ptr [eax]
 0048D57A    call        dword ptr [ebx+98]
 0048D580    cmp         byte ptr [esp],0
>0048D584    je          0048D59F
 0048D586    push        57
 0048D588    push        0
 0048D58A    push        0
 0048D58C    push        0
 0048D58E    push        0
 0048D590    push        0
 0048D592    mov         eax,edi
 0048D594    call        TWinControl.GetHandle
 0048D599    push        eax
 0048D59A    call        user32.SetWindowPos
 0048D59F    add         esp,14
 0048D5A2    pop         ebp
 0048D5A3    pop         edi
 0048D5A4    pop         esi
 0048D5A5    pop         ebx
 0048D5A6    ret
*}
end;

//0048D5A8
procedure TWinControl.ScrollBy(DeltaX:Integer; DeltaY:Integer);
begin
{*
 0048D5A8    push        ebx
 0048D5A9    push        esi
 0048D5AA    push        edi
 0048D5AB    push        ebp
 0048D5AC    add         esp,0FFFFFFF4
 0048D5AF    mov         dword ptr [esp+4],ecx
 0048D5B3    mov         dword ptr [esp],edx
 0048D5B6    mov         edi,eax
 0048D5B8    mov         ebx,dword ptr [edi+258]
 0048D5BE    test        ebx,ebx
>0048D5C0    je          0048D5CC
 0048D5C2    push        ebx
 0048D5C3    call        user32.IsWindowVisible
 0048D5C8    test        eax,eax
>0048D5CA    jne         0048D5D0
 0048D5CC    xor         eax,eax
>0048D5CE    jmp         0048D5D2
 0048D5D0    mov         al,1
 0048D5D2    mov         byte ptr [esp+8],al
 0048D5D6    cmp         byte ptr [esp+8],0
>0048D5DB    je          0048D5F7
 0048D5DD    push        0
 0048D5DF    push        0
 0048D5E1    mov         eax,dword ptr [esp+0C]
 0048D5E5    push        eax
 0048D5E6    mov         eax,dword ptr [esp+0C]
 0048D5EA    push        eax
 0048D5EB    mov         eax,dword ptr [edi+258]
 0048D5F1    push        eax
 0048D5F2    call        user32.ScrollWindow
 0048D5F7    mov         eax,edi
 0048D5F9    call        TWinControl.GetControlCount
 0048D5FE    mov         esi,eax
 0048D600    dec         esi
 0048D601    test        esi,esi
>0048D603    jl          0048D671
 0048D605    inc         esi
 0048D606    xor         ebp,ebp
 0048D608    mov         edx,ebp
 0048D60A    mov         eax,edi
 0048D60C    call        TWinControl.GetControl
 0048D611    mov         ebx,eax
 0048D613    mov         eax,ebx
 0048D615    mov         edx,dword ptr ds:[47C4E8];TWinControl
 0048D61B    call        @IsClass
 0048D620    test        al,al
>0048D622    je          0048D62D
 0048D624    cmp         dword ptr [ebx+258],0
>0048D62B    jne         0048D63C
 0048D62D    mov         eax,dword ptr [esp]
 0048D630    add         dword ptr [ebx+40],eax
 0048D633    mov         eax,dword ptr [esp+4]
 0048D637    add         dword ptr [ebx+44],eax
>0048D63A    jmp         0048D66D
 0048D63C    cmp         byte ptr [esp+8],0
>0048D641    jne         0048D66D
 0048D643    push        14
 0048D645    mov         eax,ebx
 0048D647    mov         edx,dword ptr [eax+4C]
 0048D64A    push        edx
 0048D64B    mov         edx,dword ptr [eax+48]
 0048D64E    push        edx
 0048D64F    mov         edx,dword ptr [eax+44]
 0048D652    add         edx,dword ptr [esp+10]
 0048D656    push        edx
 0048D657    mov         edx,dword ptr [eax+40]
 0048D65A    add         edx,dword ptr [esp+10]
 0048D65E    push        edx
 0048D65F    push        0
 0048D661    mov         eax,dword ptr [eax+258]
 0048D667    push        eax
 0048D668    call        user32.SetWindowPos
 0048D66D    inc         ebp
 0048D66E    dec         esi
>0048D66F    jne         0048D608
 0048D671    xor         edx,edx
 0048D673    mov         eax,edi
 0048D675    call        TWinControl.AlignControl
 0048D67A    add         esp,0C
 0048D67D    pop         ebp
 0048D67E    pop         edi
 0048D67F    pop         esi
 0048D680    pop         ebx
 0048D681    ret
*}
end;

//0048D684
procedure TWinControl.ShowControl(AControl:TControl);
begin
{*
 0048D684    push        esi
 0048D685    push        edi
 0048D686    mov         esi,eax
 0048D688    mov         edi,dword ptr [esi+34]
 0048D68B    test        edi,edi
>0048D68D    je          0048D69B
 0048D68F    mov         edx,esi
 0048D691    mov         eax,edi
 0048D693    mov         ecx,dword ptr [eax]
 0048D695    call        dword ptr [ecx+0E0]
 0048D69B    pop         edi
 0048D69C    pop         esi
 0048D69D    ret
*}
end;

//0048D6A0
procedure TWinControl.SetZOrderPosition(Position:Integer);
begin
{*
 0048D6A0    push        ebx
 0048D6A1    push        esi
 0048D6A2    push        edi
 0048D6A3    push        ebp
 0048D6A4    mov         esi,edx
 0048D6A6    mov         ebx,eax
 0048D6A8    mov         eax,dword ptr [ebx+34]
 0048D6AB    test        eax,eax
>0048D6AD    je          0048D772
 0048D6B3    mov         edx,dword ptr [eax+1DC]
 0048D6B9    test        edx,edx
>0048D6BB    je          0048D6C0
 0048D6BD    sub         esi,dword ptr [edx+8]
 0048D6C0    mov         eax,dword ptr [eax+1E0]
 0048D6C6    mov         edx,ebx
 0048D6C8    call        TList.IndexOf
 0048D6CD    mov         edi,eax
 0048D6CF    test        edi,edi
>0048D6D1    jl          0048D70B
 0048D6D3    mov         eax,dword ptr [ebx+34]
 0048D6D6    mov         edx,dword ptr [eax+1E0]
 0048D6DC    mov         eax,dword ptr [edx+8]
 0048D6DF    test        esi,esi
>0048D6E1    jge         0048D6E5
 0048D6E3    xor         esi,esi
 0048D6E5    cmp         eax,esi
>0048D6E7    jg          0048D6EC
 0048D6E9    mov         esi,eax
 0048D6EB    dec         esi
 0048D6EC    cmp         edi,esi
>0048D6EE    je          0048D70B
 0048D6F0    mov         eax,edx
 0048D6F2    mov         edx,edi
 0048D6F4    call        TList.Delete
 0048D6F9    mov         eax,dword ptr [ebx+34]
 0048D6FC    mov         eax,dword ptr [eax+1E0]
 0048D702    mov         ecx,ebx
 0048D704    mov         edx,esi
 0048D706    call        TList.Insert
 0048D70B    cmp         dword ptr [ebx+258],0
>0048D712    je          0048D772
 0048D714    test        esi,esi
>0048D716    jne         0048D71F
 0048D718    mov         eax,1
>0048D71D    jmp         0048D75B
 0048D71F    mov         eax,dword ptr [ebx+34]
 0048D722    mov         ebp,dword ptr [eax+1E0]
 0048D728    mov         eax,dword ptr [ebp+8]
 0048D72B    dec         eax
 0048D72C    cmp         esi,eax
>0048D72E    jne         0048D734
 0048D730    xor         eax,eax
>0048D732    jmp         0048D75B
 0048D734    cmp         edi,esi
>0048D736    jge         0048D749
 0048D738    lea         edx,[esi+1]
 0048D73B    mov         eax,ebp
 0048D73D    call        TList.Get
 0048D742    call        TWinControl.GetHandle
>0048D747    jmp         0048D75B
 0048D749    cmp         edi,esi
>0048D74B    jle         0048D772
 0048D74D    mov         eax,ebp
 0048D74F    mov         edx,esi
 0048D751    call        TList.Get
 0048D756    call        TWinControl.GetHandle
 0048D75B    push        3
 0048D75D    push        0
 0048D75F    push        0
 0048D761    push        0
 0048D763    push        0
 0048D765    push        eax
 0048D766    mov         eax,dword ptr [ebx+258]
 0048D76C    push        eax
 0048D76D    call        user32.SetWindowPos
 0048D772    pop         ebp
 0048D773    pop         edi
 0048D774    pop         esi
 0048D775    pop         ebx
 0048D776    ret
*}
end;

//0048D778
procedure TWinControl.SetZOrder(TopMost:Boolean);
begin
{*
 0048D778    push        ebx
 0048D779    push        esi
 0048D77A    mov         ebx,dword ptr [eax+34]
 0048D77D    test        ebx,ebx
>0048D77F    je          0048D7AE
 0048D781    test        dl,dl
>0048D783    je          0048D791
 0048D785    mov         edx,dword ptr [ebx+1E0]
 0048D78B    mov         ecx,dword ptr [edx+8]
 0048D78E    dec         ecx
>0048D78F    jmp         0048D793
 0048D791    xor         ecx,ecx
 0048D793    xor         edx,edx
 0048D795    mov         esi,dword ptr [ebx+1DC]
 0048D79B    test        esi,esi
>0048D79D    je          0048D7A2
 0048D79F    mov         edx,dword ptr [esi+8]
 0048D7A2    add         ecx,edx
 0048D7A4    mov         edx,ecx
 0048D7A6    call        TWinControl.SetZOrderPosition
 0048D7AB    pop         esi
 0048D7AC    pop         ebx
 0048D7AD    ret
 0048D7AE    mov         ecx,dword ptr [eax+258]
 0048D7B4    test        ecx,ecx
>0048D7B6    je          0048D7D4
 0048D7B8    push        3
 0048D7BA    push        0
 0048D7BC    push        0
 0048D7BE    push        0
 0048D7C0    push        0
 0048D7C2    and         edx,7F
 0048D7C5    movzx       edx,word ptr [edx*2+785A6C];WINDOWPOS
 0048D7CD    push        edx
 0048D7CE    push        ecx
 0048D7CF    call        user32.SetWindowPos
 0048D7D4    pop         esi
 0048D7D5    pop         ebx
 0048D7D6    ret
*}
end;

//0048D7D8
function TWinControl.GetDeviceContext(var WindowHandle:HWND):HDC;
begin
{*
 0048D7D8    push        ebx
 0048D7D9    push        esi
 0048D7DA    mov         esi,edx
 0048D7DC    mov         ebx,eax
 0048D7DE    test        byte ptr [ebx+1C],10
>0048D7E2    je          0048D7F7
 0048D7E4    push        12
 0048D7E6    push        0
 0048D7E8    mov         eax,ebx
 0048D7EA    call        TWinControl.GetHandle
 0048D7EF    push        eax
 0048D7F0    call        user32.GetDCEx
>0048D7F5    jmp         0048D804
 0048D7F7    mov         eax,ebx
 0048D7F9    call        TWinControl.GetHandle
 0048D7FE    push        eax
 0048D7FF    call        user32.GetDC
 0048D804    test        eax,eax
>0048D806    jne         0048D81F
 0048D808    mov         ecx,dword ptr ds:[78D508];^SResString198:TResStringRec
 0048D80E    mov         dl,1
 0048D810    mov         eax,[004391C8];EOutOfResources
 0048D815    call        Exception.CreateRes
 0048D81A    call        @RaiseExcept
 0048D81F    mov         edx,dword ptr [ebx+258]
 0048D825    mov         dword ptr [esi],edx
 0048D827    pop         esi
 0048D828    pop         ebx
 0048D829    ret
*}
end;

//0048D82C
function TWinControl.GetParentHandle:HWND;
begin
{*
 0048D82C    mov         edx,dword ptr [eax+34]
 0048D82F    test        edx,edx
>0048D831    je          0048D83B
 0048D833    mov         eax,edx
 0048D835    call        TWinControl.GetHandle
 0048D83A    ret
 0048D83B    mov         eax,dword ptr [eax+1D4]
 0048D841    ret
*}
end;

//0048D844
function TWinControl.GetTopParentHandle:HWND;
begin
{*
>0048D844    jmp         0048D848
 0048D846    mov         eax,edx
 0048D848    mov         edx,dword ptr [eax+34]
 0048D84B    test        edx,edx
>0048D84D    jne         0048D846
 0048D84F    mov         edx,dword ptr [eax+1D4]
 0048D855    test        edx,edx
>0048D857    jne         0048D860
 0048D859    call        TWinControl.GetHandle
 0048D85E    mov         edx,eax
 0048D860    mov         eax,edx
 0048D862    ret
*}
end;

//0048D864
procedure TWinControl.Invalidate;
begin
{*
 0048D864    push        0
 0048D866    xor         ecx,ecx
 0048D868    mov         edx,0B034
 0048D86D    call        TControl.Perform
 0048D872    ret
*}
end;

//0048D874
procedure TWinControl.CMInputLangChange(var Message:TMessage);
begin
{*
 0048D874    push        ebx
 0048D875    push        esi
 0048D876    push        edi
 0048D877    push        ebp
 0048D878    mov         ebp,edx
 0048D87A    mov         edi,eax
 0048D87C    mov         eax,edi
 0048D87E    call        TComponent.GetComponentCount
 0048D883    mov         esi,eax
 0048D885    dec         esi
 0048D886    test        esi,esi
>0048D888    jl          0048D8C3
 0048D88A    inc         esi
 0048D88B    xor         ebx,ebx
 0048D88D    mov         edx,ebx
 0048D88F    mov         eax,edi
 0048D891    call        TComponent.GetComponent
 0048D896    mov         edx,dword ptr ds:[47C4E8];TWinControl
 0048D89C    call        @IsClass
 0048D8A1    test        al,al
>0048D8A3    je          0048D8BF
 0048D8A5    mov         eax,dword ptr [ebp+8]
 0048D8A8    push        eax
 0048D8A9    mov         edx,ebx
 0048D8AB    mov         eax,edi
 0048D8AD    call        TComponent.GetComponent
 0048D8B2    mov         ecx,dword ptr [ebp+4]
 0048D8B5    mov         edx,0B056
 0048D8BA    call        TControl.Perform
 0048D8BF    inc         ebx
 0048D8C0    dec         esi
>0048D8C1    jne         0048D88D
 0048D8C3    pop         ebp
 0048D8C4    pop         edi
 0048D8C5    pop         esi
 0048D8C6    pop         ebx
 0048D8C7    ret
*}
end;

//0048D8C8
procedure TWinControl.CMInvalidate(var Message:TMessage);
begin
{*
 0048D8C8    push        ebx
 0048D8C9    push        esi
 0048D8CA    push        edi
 0048D8CB    mov         esi,edx
 0048D8CD    mov         ebx,eax
 0048D8CF    mov         eax,ebx
 0048D8D1    call        TWinControl.HandleAllocated
 0048D8D6    test        al,al
>0048D8D8    je          0048D957
 0048D8DA    mov         eax,dword ptr [ebx+34]
 0048D8DD    test        eax,eax
>0048D8DF    je          0048D8F2
 0048D8E1    push        0
 0048D8E3    mov         ecx,1
 0048D8E8    mov         edx,0B034
 0048D8ED    call        TControl.Perform
 0048D8F2    cmp         dword ptr [esi+4],0
>0048D8F6    jne         0048D957
 0048D8F8    test        byte ptr [ebx+50],40
 0048D8FC    setne       al
 0048D8FF    xor         al,1
 0048D901    neg         al
 0048D903    sbb         eax,eax
 0048D905    push        eax
 0048D906    push        0
 0048D908    mov         eax,dword ptr [ebx+258]
 0048D90E    push        eax
 0048D90F    call        user32.InvalidateRect
 0048D914    call        ThemeServices
 0048D919    call        TThemeServices.GetThemesEnabled
 0048D91E    test        al,al
>0048D920    je          0048D957
 0048D922    mov         eax,ebx
 0048D924    call        TWinControl.GetControlCount
 0048D929    mov         edi,eax
 0048D92B    dec         edi
 0048D92C    test        edi,edi
>0048D92E    jl          0048D957
 0048D930    inc         edi
 0048D931    xor         esi,esi
 0048D933    mov         edx,esi
 0048D935    mov         eax,ebx
 0048D937    call        TWinControl.GetControl
 0048D93C    test        byte ptr [eax+52],4
>0048D940    je          0048D953
 0048D942    mov         edx,esi
 0048D944    mov         eax,ebx
 0048D946    call        TWinControl.GetControl
 0048D94B    mov         edx,dword ptr [eax]
 0048D94D    call        dword ptr [edx+90]
 0048D953    inc         esi
 0048D954    dec         edi
>0048D955    jne         0048D933
 0048D957    pop         edi
 0048D958    pop         esi
 0048D959    pop         ebx
 0048D95A    ret
*}
end;

//0048D95C
procedure TWinControl.Update;
begin
{*
 0048D95C    push        ebx
 0048D95D    mov         ebx,eax
 0048D95F    mov         eax,ebx
 0048D961    call        TWinControl.HandleAllocated
 0048D966    test        al,al
>0048D968    je          0048D976
 0048D96A    mov         eax,dword ptr [ebx+258]
 0048D970    push        eax
 0048D971    call        user32.UpdateWindow
 0048D976    pop         ebx
 0048D977    ret
*}
end;

//0048D978
procedure TWinControl.Repaint;
begin
{*
 0048D978    push        ebx
 0048D979    mov         ebx,eax
 0048D97B    mov         eax,ebx
 0048D97D    mov         edx,dword ptr [eax]
 0048D97F    call        dword ptr [edx+90]
 0048D985    mov         eax,ebx
 0048D987    mov         edx,dword ptr [eax]
 0048D989    call        dword ptr [edx+9C]
 0048D98F    pop         ebx
 0048D990    ret
*}
end;

//0048D994
procedure TWinControl.InvalidateFrame;
begin
{*
 0048D994    push        ebx
 0048D995    add         esp,0FFFFFFF0
 0048D998    mov         ebx,eax
 0048D99A    mov         edx,esp
 0048D99C    mov         eax,ebx
 0048D99E    call        TControl.GetBoundsRect
 0048D9A3    push        1
 0048D9A5    push        1
 0048D9A7    lea         eax,[esp+8]
 0048D9AB    push        eax
 0048D9AC    call        user32.InflateRect
 0048D9B1    push        0FF
 0048D9B3    lea         eax,[esp+4]
 0048D9B7    push        eax
 0048D9B8    mov         eax,dword ptr [ebx+34]
 0048D9BB    mov         eax,dword ptr [eax+258]
 0048D9C1    push        eax
 0048D9C2    call        user32.InvalidateRect
 0048D9C7    add         esp,10
 0048D9CA    pop         ebx
 0048D9CB    ret
*}
end;

//0048D9CC
procedure TWinControl.CanFocus;
begin
{*
 0048D9CC    push        ebx
 0048D9CD    push        esi
 0048D9CE    push        ecx
 0048D9CF    mov         ebx,eax
 0048D9D1    mov         byte ptr [esp],0
 0048D9D5    mov         dl,1
 0048D9D7    mov         eax,ebx
 0048D9D9    call        GetParentForm
 0048D9DE    mov         esi,eax
 0048D9E0    test        esi,esi
>0048D9E2    je          0048DA04
 0048D9E4    cmp         esi,ebx
>0048D9E6    je          0048DA00
 0048D9E8    cmp         byte ptr [ebx+59],0
>0048D9EC    je          0048DA04
 0048D9EE    mov         eax,ebx
 0048D9F0    mov         edx,dword ptr [eax]
 0048D9F2    call        dword ptr [edx+5C]
 0048D9F5    test        al,al
>0048D9F7    je          0048DA04
 0048D9F9    mov         ebx,dword ptr [ebx+34]
 0048D9FC    cmp         esi,ebx
>0048D9FE    jne         0048D9E8
 0048DA00    mov         byte ptr [esp],1
 0048DA04    movzx       eax,byte ptr [esp]
 0048DA08    pop         edx
 0048DA09    pop         esi
 0048DA0A    pop         ebx
 0048DA0B    ret
*}
end;

//0048DA0C
procedure TWinControl.SetFocus;
begin
{*
 0048DA0C    push        ebx
 0048DA0D    mov         ebx,eax
 0048DA0F    mov         dl,1
 0048DA11    mov         eax,ebx
 0048DA13    call        GetParentForm
 0048DA18    test        eax,eax
>0048DA1A    je          0048DA25
 0048DA1C    mov         edx,ebx
 0048DA1E    call        TCustomForm.FocusControl
 0048DA23    pop         ebx
 0048DA24    ret
 0048DA25    cmp         dword ptr [ebx+1D4],0
>0048DA2C    je          0048DA3D
 0048DA2E    mov         eax,ebx
 0048DA30    call        TWinControl.GetHandle
 0048DA35    push        eax
 0048DA36    call        user32.SetFocus
>0048DA3B    jmp         0048DA46
 0048DA3D    mov         dl,1
 0048DA3F    mov         eax,ebx
 0048DA41    call        ValidParentForm
 0048DA46    pop         ebx
 0048DA47    ret
*}
end;

//0048DA48
procedure TWinControl.Focused;
begin
{*
 0048DA48    push        ebx
 0048DA49    mov         ebx,eax
 0048DA4B    cmp         dword ptr [ebx+258],0
>0048DA52    je          0048DA61
 0048DA54    call        user32.GetFocus
 0048DA59    cmp         eax,dword ptr [ebx+258]
>0048DA5F    je          0048DA65
 0048DA61    xor         eax,eax
 0048DA63    pop         ebx
 0048DA64    ret
 0048DA65    mov         al,1
 0048DA67    pop         ebx
 0048DA68    ret
*}
end;

//0048DA6C
procedure TWinControl.HandleNeeded;
begin
{*
 0048DA6C    push        esi
 0048DA6D    mov         esi,eax
 0048DA6F    cmp         dword ptr [esi+258],0
>0048DA76    jne         0048DA8E
 0048DA78    mov         eax,dword ptr [esi+34]
 0048DA7B    test        eax,eax
>0048DA7D    je          0048DA84
 0048DA7F    call        TWinControl.HandleNeeded
 0048DA84    mov         eax,esi
 0048DA86    mov         edx,dword ptr [eax]
 0048DA88    call        dword ptr [edx+0A8]
 0048DA8E    pop         esi
 0048DA8F    ret
*}
end;

//0048DA90
function TWinControl.GetHandle:HWND;
begin
{*
 0048DA90    push        ebx
 0048DA91    mov         ebx,eax
 0048DA93    mov         eax,ebx
 0048DA95    call        TWinControl.HandleNeeded
 0048DA9A    mov         eax,dword ptr [ebx+258]
 0048DAA0    pop         ebx
 0048DAA1    ret
*}
end;

//0048DAA4
function TWinControl.GetControlExtents:TRect;
begin
{*
 0048DAA4    push        ebx
 0048DAA5    push        esi
 0048DAA6    push        edi
 0048DAA7    push        ebp
 0048DAA8    add         esp,0FFFFFFF8
 0048DAAB    mov         esi,edx
 0048DAAD    mov         dword ptr [esp],eax
 0048DAB0    push        0
 0048DAB2    push        esi
 0048DAB3    xor         ecx,ecx
 0048DAB5    mov         edx,7FFFFFFF
 0048DABA    mov         eax,7FFFFFFF
 0048DABF    call        Rect
 0048DAC4    mov         eax,dword ptr [esp]
 0048DAC7    call        TWinControl.GetControlCount
 0048DACC    mov         edi,eax
 0048DACE    dec         edi
 0048DACF    test        edi,edi
>0048DAD1    jl          0048DBD1
 0048DAD7    inc         edi
 0048DAD8    mov         dword ptr [esp+4],0
 0048DAE0    mov         edx,dword ptr [esp+4]
 0048DAE4    mov         eax,dword ptr [esp]
 0048DAE7    call        TWinControl.GetControl
 0048DAEC    mov         ebx,eax
 0048DAEE    cmp         byte ptr [ebx+59],0
>0048DAF2    jne         0048DB08
 0048DAF4    test        byte ptr [ebx+1C],10
>0048DAF8    je          0048DBC6
 0048DAFE    test        byte ptr [ebx+51],4
>0048DB02    jne         0048DBC6
 0048DB08    xor         edx,edx
 0048DB0A    mov         eax,dword ptr [ebx+74]
 0048DB0D    mov         ecx,dword ptr [eax]
 0048DB0F    call        dword ptr [ecx+10]
 0048DB12    cmp         eax,dword ptr [esi]
>0048DB14    jge         0048DB22
 0048DB16    xor         edx,edx
 0048DB18    mov         eax,dword ptr [ebx+74]
 0048DB1B    mov         ecx,dword ptr [eax]
 0048DB1D    call        dword ptr [ecx+10]
 0048DB20    mov         dword ptr [esi],eax
 0048DB22    mov         edx,1
 0048DB27    mov         eax,dword ptr [ebx+74]
 0048DB2A    mov         ecx,dword ptr [eax]
 0048DB2C    call        dword ptr [ecx+10]
 0048DB2F    cmp         eax,dword ptr [esi+4]
>0048DB32    jge         0048DB44
 0048DB34    mov         edx,1
 0048DB39    mov         eax,dword ptr [ebx+74]
 0048DB3C    mov         ecx,dword ptr [eax]
 0048DB3E    call        dword ptr [ecx+10]
 0048DB41    mov         dword ptr [esi+4],eax
 0048DB44    xor         edx,edx
 0048DB46    mov         eax,dword ptr [ebx+74]
 0048DB49    mov         ecx,dword ptr [eax]
 0048DB4B    call        dword ptr [ecx+10]
 0048DB4E    mov         ebp,eax
 0048DB50    mov         edx,2
 0048DB55    mov         eax,dword ptr [ebx+74]
 0048DB58    mov         ecx,dword ptr [eax]
 0048DB5A    call        dword ptr [ecx+10]
 0048DB5D    add         ebp,eax
 0048DB5F    cmp         ebp,dword ptr [esi+8]
>0048DB62    jle         0048DB82
 0048DB64    xor         edx,edx
 0048DB66    mov         eax,dword ptr [ebx+74]
 0048DB69    mov         ecx,dword ptr [eax]
 0048DB6B    call        dword ptr [ecx+10]
 0048DB6E    mov         ebp,eax
 0048DB70    mov         edx,2
 0048DB75    mov         eax,dword ptr [ebx+74]
 0048DB78    mov         ecx,dword ptr [eax]
 0048DB7A    call        dword ptr [ecx+10]
 0048DB7D    add         ebp,eax
 0048DB7F    mov         dword ptr [esi+8],ebp
 0048DB82    mov         edx,1
 0048DB87    mov         eax,dword ptr [ebx+74]
 0048DB8A    mov         ecx,dword ptr [eax]
 0048DB8C    call        dword ptr [ecx+10]
 0048DB8F    mov         ebp,eax
 0048DB91    mov         edx,3
 0048DB96    mov         eax,dword ptr [ebx+74]
 0048DB99    mov         ecx,dword ptr [eax]
 0048DB9B    call        dword ptr [ecx+10]
 0048DB9E    add         ebp,eax
 0048DBA0    cmp         ebp,dword ptr [esi+0C]
>0048DBA3    jle         0048DBC6
 0048DBA5    mov         edx,1
 0048DBAA    mov         eax,dword ptr [ebx+74]
 0048DBAD    mov         ecx,dword ptr [eax]
 0048DBAF    call        dword ptr [ecx+10]
 0048DBB2    mov         ebp,eax
 0048DBB4    mov         edx,3
 0048DBB9    mov         eax,dword ptr [ebx+74]
 0048DBBC    mov         ecx,dword ptr [eax]
 0048DBBE    call        dword ptr [ecx+10]
 0048DBC1    add         ebp,eax
 0048DBC3    mov         dword ptr [esi+0C],ebp
 0048DBC6    inc         dword ptr [esp+4]
 0048DBCA    dec         edi
>0048DBCB    jne         0048DAE0
 0048DBD1    pop         ecx
 0048DBD2    pop         edx
 0048DBD3    pop         ebp
 0048DBD4    pop         edi
 0048DBD5    pop         esi
 0048DBD6    pop         ebx
 0048DBD7    ret
*}
end;

//0048DBD8
function TWinControl.GetClientOrigin:TPoint;
begin
{*
 0048DBD8    push        ebx
 0048DBD9    push        esi
 0048DBDA    mov         ebx,edx
 0048DBDC    mov         esi,eax
 0048DBDE    xor         eax,eax
 0048DBE0    mov         dword ptr [ebx],eax
 0048DBE2    xor         eax,eax
 0048DBE4    mov         dword ptr [ebx+4],eax
 0048DBE7    push        ebx
 0048DBE8    mov         eax,esi
 0048DBEA    call        TWinControl.GetHandle
 0048DBEF    push        eax
 0048DBF0    call        user32.ClientToScreen
 0048DBF5    pop         esi
 0048DBF6    pop         ebx
 0048DBF7    ret
*}
end;

//0048DBF8
function TWinControl.GetClientRect:TRect;
begin
{*
 0048DBF8    push        ebx
 0048DBF9    push        esi
 0048DBFA    mov         esi,edx
 0048DBFC    mov         ebx,eax
 0048DBFE    push        esi
 0048DBFF    mov         eax,ebx
 0048DC01    call        TWinControl.GetHandle
 0048DC06    push        eax
 0048DC07    call        user32.GetClientRect
 0048DC0C    pop         esi
 0048DC0D    pop         ebx
 0048DC0E    ret
*}
end;

//0048DC10
procedure TWinControl.AdjustSize;
begin
{*
 0048DC10    push        esi
 0048DC11    mov         esi,eax
 0048DC13    test        byte ptr [esi+1C],1
>0048DC17    jne         0048DC48
 0048DC19    mov         eax,esi
 0048DC1B    call        TWinControl.HandleAllocated
 0048DC20    test        al,al
>0048DC22    je          0048DC48
 0048DC24    push        16
 0048DC26    mov         eax,dword ptr [esi+4C]
 0048DC29    push        eax
 0048DC2A    mov         eax,dword ptr [esi+48]
 0048DC2D    push        eax
 0048DC2E    push        0
 0048DC30    push        0
 0048DC32    push        0
 0048DC34    mov         eax,esi
 0048DC36    call        TWinControl.GetHandle
 0048DC3B    push        eax
 0048DC3C    call        user32.SetWindowPos
 0048DC41    mov         eax,esi
 0048DC43    mov         edx,dword ptr [eax]
 0048DC45    call        dword ptr [edx+68]
 0048DC48    pop         esi
 0048DC49    ret
*}
end;

//0048DC4C
procedure TWinControl.SetBorderWidth(Value:TBorderWidth);
begin
{*
 0048DC4C    cmp         edx,dword ptr [eax+1B8]
>0048DC52    je          0048DC68
 0048DC54    mov         dword ptr [eax+1B8],edx
 0048DC5A    push        0
 0048DC5C    xor         ecx,ecx
 0048DC5E    mov         edx,0B03B
 0048DC63    call        TControl.Perform
 0048DC68    ret
*}
end;

//0048DC6C
procedure TWinControl.SetCtl3D(Value:Boolean);
begin
{*
 0048DC6C    cmp         dl,byte ptr [eax+1E9]
>0048DC72    je          0048DC8F
 0048DC74    mov         byte ptr [eax+1E9],dl
 0048DC7A    mov         byte ptr [eax+1ED],0
 0048DC81    push        0
 0048DC83    xor         ecx,ecx
 0048DC85    mov         edx,0B010
 0048DC8A    call        TControl.Perform
 0048DC8F    ret
*}
end;

//0048DC90
function TWinControl.IsCtl3DStored(Value:Boolean):Boolean;
begin
{*
 0048DC90    movzx       eax,byte ptr [eax+1ED]
 0048DC97    xor         al,1
 0048DC99    ret
*}
end;

//0048DC9C
function TWinControl.IsDoubleBufferedStored(Value:Boolean):Boolean;
begin
{*
 0048DC9C    movzx       eax,byte ptr [eax+1EE]
 0048DCA3    xor         al,1
 0048DCA5    ret
*}
end;

//0048DCA8
procedure TWinControl.SetParentCtl3D(Value:Boolean);
begin
{*
 0048DCA8    cmp         dl,byte ptr [eax+1ED]
>0048DCAE    je          0048DCD0
 0048DCB0    mov         byte ptr [eax+1ED],dl
 0048DCB6    cmp         dword ptr [eax+34],0
>0048DCBA    je          0048DCD0
 0048DCBC    test        byte ptr [eax+1C],2
>0048DCC0    jne         0048DCD0
 0048DCC2    push        0
 0048DCC4    xor         ecx,ecx
 0048DCC6    mov         edx,0B011
 0048DCCB    call        TControl.Perform
 0048DCD0    ret
*}
end;

//0048DCD4
function TWinControl.GetTabOrder:TTabOrder;
begin
{*
 0048DCD4    push        ebx
 0048DCD5    push        esi
 0048DCD6    mov         ebx,eax
 0048DCD8    mov         esi,dword ptr [ebx+34]
 0048DCDB    test        esi,esi
>0048DCDD    je          0048DCEF
 0048DCDF    mov         eax,dword ptr [esi+1D8]
 0048DCE5    mov         edx,ebx
 0048DCE7    call        TList.IndexOf
 0048DCEC    pop         esi
 0048DCED    pop         ebx
 0048DCEE    ret
 0048DCEF    or          eax,0FFFFFFFF
 0048DCF2    pop         esi
 0048DCF3    pop         ebx
 0048DCF4    ret
*}
end;

//0048DCF8
procedure TWinControl.UpdateTabOrder(Value:TTabOrder);
begin
{*
 0048DCF8    push        ebx
 0048DCF9    push        esi
 0048DCFA    push        edi
 0048DCFB    push        ebp
 0048DCFC    mov         esi,edx
 0048DCFE    mov         ebx,eax
 0048DD00    mov         eax,ebx
 0048DD02    call        TWinControl.GetTabOrder
 0048DD07    movsx       eax,ax
 0048DD0A    test        eax,eax
>0048DD0C    jl          0048DD4C
 0048DD0E    mov         edx,dword ptr [ebx+34]
 0048DD11    mov         ebp,dword ptr [edx+1D8]
 0048DD17    mov         edx,dword ptr [ebp+8]
 0048DD1A    test        si,si
>0048DD1D    jge         0048DD21
 0048DD1F    xor         esi,esi
 0048DD21    movsx       ecx,si
 0048DD24    cmp         edx,ecx
>0048DD26    jg          0048DD2B
 0048DD28    mov         esi,edx
 0048DD2A    dec         esi
 0048DD2B    movsx       edi,si
 0048DD2E    cmp         eax,edi
>0048DD30    je          0048DD4C
 0048DD32    mov         edx,ebp
 0048DD34    xchg        eax,edx
 0048DD35    call        TList.Delete
 0048DD3A    mov         edx,edi
 0048DD3C    mov         eax,dword ptr [ebx+34]
 0048DD3F    mov         eax,dword ptr [eax+1D8]
 0048DD45    mov         ecx,ebx
 0048DD47    call        TList.Insert
 0048DD4C    pop         ebp
 0048DD4D    pop         edi
 0048DD4E    pop         esi
 0048DD4F    pop         ebx
 0048DD50    ret
*}
end;

//0048DD54
procedure TWinControl.SetTabOrder(Value:TTabOrder);
begin
{*
 0048DD54    test        byte ptr [eax+54],8
>0048DD58    je          0048DD64
 0048DD5A    movsx       edx,dx
 0048DD5D    mov         dword ptr [eax+1E4],edx
 0048DD63    ret
 0048DD64    call        TWinControl.UpdateTabOrder
 0048DD69    ret
*}
end;

//0048DD6C
procedure TWinControl.SetTabStop(Value:Boolean);
begin
{*
 0048DD6C    push        ebx
 0048DD6D    push        esi
 0048DD6E    mov         ebx,edx
 0048DD70    mov         esi,eax
 0048DD72    cmp         bl,byte ptr [esi+1E8]
>0048DD78    je          0048DDC6
 0048DD7A    mov         byte ptr [esi+1E8],bl
 0048DD80    mov         eax,esi
 0048DD82    call        TWinControl.HandleAllocated
 0048DD87    test        al,al
>0048DD89    je          0048DDB6
 0048DD8B    push        0F0
 0048DD8D    mov         eax,dword ptr [esi+258]
 0048DD93    push        eax
 0048DD94    call        user32.GetWindowLongW
 0048DD99    and         eax,0FFFEFFFF
 0048DD9E    test        bl,bl
>0048DDA0    je          0048DDA7
 0048DDA2    or          eax,10000
 0048DDA7    push        eax
 0048DDA8    push        0F0
 0048DDAA    mov         eax,dword ptr [esi+258]
 0048DDB0    push        eax
 0048DDB1    call        user32.SetWindowLongW
 0048DDB6    push        0
 0048DDB8    xor         ecx,ecx
 0048DDBA    mov         edx,0B028
 0048DDBF    mov         eax,esi
 0048DDC1    call        TControl.Perform
 0048DDC6    pop         esi
 0048DDC7    pop         ebx
 0048DDC8    ret
*}
end;

//0048DDCC
procedure TWinControl.SetUseDockManager(Value:Boolean);
begin
{*
 0048DDCC    push        ebp
 0048DDCD    mov         ebp,esp
 0048DDCF    push        0
 0048DDD1    push        ebx
 0048DDD2    push        esi
 0048DDD3    mov         ebx,eax
 0048DDD5    xor         eax,eax
 0048DDD7    push        ebp
 0048DDD8    push        48DE30
 0048DDDD    push        dword ptr fs:[eax]
 0048DDE0    mov         dword ptr fs:[eax],esp
 0048DDE3    cmp         dl,byte ptr [ebx+1EB]
>0048DDE9    je          0048DE1A
 0048DDEB    mov         byte ptr [ebx+1EB],dl
 0048DDF1    test        byte ptr [ebx+1C],10
 0048DDF5    setne       al
 0048DDF8    xor         al,1
 0048DDFA    test        al,dl
>0048DDFC    je          0048DE1A
 0048DDFE    lea         edx,[ebp-4]
 0048DE01    mov         eax,ebx
 0048DE03    mov         si,0FFC5
 0048DE07    call        @CallDynaInst
 0048DE0C    mov         edx,dword ptr [ebp-4]
 0048DE0F    lea         eax,[ebx+1C8]
 0048DE15    call        @IntfCopy
 0048DE1A    xor         eax,eax
 0048DE1C    pop         edx
 0048DE1D    pop         ecx
 0048DE1E    pop         ecx
 0048DE1F    mov         dword ptr fs:[eax],edx
 0048DE22    push        48DE37
 0048DE27    lea         eax,[ebp-4]
 0048DE2A    call        @IntfClear
 0048DE2F    ret
>0048DE30    jmp         @HandleFinally
>0048DE35    jmp         0048DE27
 0048DE37    pop         esi
 0048DE38    pop         ebx
 0048DE39    pop         ecx
 0048DE3A    pop         ebp
 0048DE3B    ret
*}
end;

//0048DE3C
function TWinControl.HandleAllocated:Boolean;
begin
{*
 0048DE3C    cmp         dword ptr [eax+258],0
 0048DE43    setne       al
 0048DE46    ret
*}
end;

//0048DE48
procedure TWinControl.UpdateBounds;
begin
{*
 0048DE48    push        ebx
 0048DE49    push        esi
 0048DE4A    push        edi
 0048DE4B    add         esp,0FFFFFFBC
 0048DE4E    mov         ebx,eax
 0048DE50    mov         eax,dword ptr [ebx+258]
 0048DE56    push        eax
 0048DE57    call        user32.IsIconic
 0048DE5C    test        eax,eax
>0048DE5E    je          0048DE87
 0048DE60    mov         dword ptr [esp+18],2C
 0048DE68    lea         eax,[esp+18]
 0048DE6C    push        eax
 0048DE6D    mov         eax,dword ptr [ebx+258]
 0048DE73    push        eax
 0048DE74    call        user32.GetWindowPlacement
 0048DE79    lea         esi,[esp+34]
 0048DE7D    lea         edi,[esp+8]
 0048DE81    movs        dword ptr [edi],dword ptr [esi]
 0048DE82    movs        dword ptr [edi],dword ptr [esi]
 0048DE83    movs        dword ptr [edi],dword ptr [esi]
 0048DE84    movs        dword ptr [edi],dword ptr [esi]
>0048DE85    jmp         0048DE98
 0048DE87    lea         eax,[esp+8]
 0048DE8B    push        eax
 0048DE8C    mov         eax,dword ptr [ebx+258]
 0048DE92    push        eax
 0048DE93    call        user32.GetWindowRect
 0048DE98    push        0F0
 0048DE9A    mov         eax,dword ptr [ebx+258]
 0048DEA0    push        eax
 0048DEA1    call        user32.GetWindowLongW
 0048DEA6    test        eax,40000000
>0048DEAB    je          0048DF31
 0048DEB1    push        0F8
 0048DEB3    mov         eax,dword ptr [ebx+258]
 0048DEB9    push        eax
 0048DEBA    call        user32.GetWindowLongW
 0048DEBF    mov         esi,eax
 0048DEC1    test        esi,esi
>0048DEC3    je          0048DF31
 0048DEC5    push        0EC
 0048DEC7    push        esi
 0048DEC8    call        user32.GetWindowLongW
 0048DECD    test        eax,400000
>0048DED2    je          0048DEE7
 0048DED4    mov         eax,dword ptr [esp+8]
 0048DED8    mov         dword ptr [esp],eax
 0048DEDB    mov         edx,dword ptr [esp+10]
 0048DEDF    mov         dword ptr [esp+8],edx
 0048DEE3    mov         dword ptr [esp+10],eax
 0048DEE7    mov         eax,dword ptr [esp+8]
 0048DEEB    mov         dword ptr [esp],eax
 0048DEEE    mov         eax,dword ptr [esp+0C]
 0048DEF2    mov         dword ptr [esp+4],eax
 0048DEF6    push        esp
 0048DEF7    push        esi
 0048DEF8    call        user32.ScreenToClient
 0048DEFD    mov         eax,dword ptr [esp]
 0048DF00    mov         dword ptr [esp+8],eax
 0048DF04    mov         eax,dword ptr [esp+4]
 0048DF08    mov         dword ptr [esp+0C],eax
 0048DF0C    mov         eax,dword ptr [esp+10]
 0048DF10    mov         dword ptr [esp],eax
 0048DF13    mov         eax,dword ptr [esp+14]
 0048DF17    mov         dword ptr [esp+4],eax
 0048DF1B    push        esp
 0048DF1C    push        esi
 0048DF1D    call        user32.ScreenToClient
 0048DF22    mov         eax,dword ptr [esp]
 0048DF25    mov         dword ptr [esp+10],eax
 0048DF29    mov         eax,dword ptr [esp+4]
 0048DF2D    mov         dword ptr [esp+14],eax
 0048DF31    mov         eax,dword ptr [esp+8]
 0048DF35    mov         dword ptr [ebx+40],eax
 0048DF38    mov         eax,dword ptr [esp+0C]
 0048DF3C    mov         dword ptr [ebx+44],eax
 0048DF3F    mov         eax,dword ptr [esp+10]
 0048DF43    sub         eax,dword ptr [esp+8]
 0048DF47    mov         dword ptr [ebx+48],eax
 0048DF4A    mov         eax,dword ptr [esp+14]
 0048DF4E    sub         eax,dword ptr [esp+0C]
 0048DF52    mov         dword ptr [ebx+4C],eax
 0048DF55    mov         eax,ebx
 0048DF57    call        TControl.UpdateAnchorRules
 0048DF5C    add         esp,44
 0048DF5F    pop         edi
 0048DF60    pop         esi
 0048DF61    pop         ebx
 0048DF62    ret
*}
end;

//0048DF64
procedure TWinControl.GetTabControlList(List:TList);
begin
{*
 0048DF64    push        ebx
 0048DF65    push        esi
 0048DF66    push        edi
 0048DF67    push        ebp
 0048DF68    mov         ebp,edx
 0048DF6A    mov         esi,eax
 0048DF6C    mov         eax,dword ptr [esi+1D8]
 0048DF72    test        eax,eax
>0048DF74    je          0048DF9B
 0048DF76    mov         ebx,dword ptr [eax+8]
 0048DF79    dec         ebx
 0048DF7A    test        ebx,ebx
>0048DF7C    jl          0048DF9B
 0048DF7E    inc         ebx
 0048DF7F    xor         edi,edi
 0048DF81    mov         edx,edi
 0048DF83    mov         eax,dword ptr [esi+1D8]
 0048DF89    call        TList.Get
 0048DF8E    mov         edx,eax
 0048DF90    mov         eax,ebp
 0048DF92    call        TList.Add
 0048DF97    inc         edi
 0048DF98    dec         ebx
>0048DF99    jne         0048DF81
 0048DF9B    pop         ebp
 0048DF9C    pop         edi
 0048DF9D    pop         esi
 0048DF9E    pop         ebx
 0048DF9F    ret
*}
end;

//0048DFA0
procedure TWinControl.GetTabOrderList(List:TList);
begin
{*
 0048DFA0    push        ebx
 0048DFA1    push        esi
 0048DFA2    push        edi
 0048DFA3    push        ebp
 0048DFA4    add         esp,0FFFFFFF8
 0048DFA7    mov         dword ptr [esp],edx
 0048DFAA    mov         ebp,eax
 0048DFAC    mov         eax,dword ptr [ebp+1D8]
 0048DFB2    test        eax,eax
>0048DFB4    je          0048DFF7
 0048DFB6    mov         edi,dword ptr [eax+8]
 0048DFB9    dec         edi
 0048DFBA    test        edi,edi
>0048DFBC    jl          0048DFF7
 0048DFBE    inc         edi
 0048DFBF    mov         dword ptr [esp+4],0
 0048DFC7    mov         eax,dword ptr [ebp+1D8]
 0048DFCD    mov         edx,dword ptr [esp+4]
 0048DFD1    call        TList.Get
 0048DFD6    mov         ebx,eax
 0048DFD8    mov         edx,ebx
 0048DFDA    mov         eax,dword ptr [esp]
 0048DFDD    call        TList.Add
 0048DFE2    mov         edx,dword ptr [esp]
 0048DFE5    mov         eax,ebx
 0048DFE7    mov         si,0FFB1
 0048DFEB    call        @CallDynaInst
 0048DFF0    inc         dword ptr [esp+4]
 0048DFF4    dec         edi
>0048DFF5    jne         0048DFC7
 0048DFF7    pop         ecx
 0048DFF8    pop         edx
 0048DFF9    pop         ebp
 0048DFFA    pop         edi
 0048DFFB    pop         esi
 0048DFFC    pop         ebx
 0048DFFD    ret
*}
end;

//0048E000
function TWinControl.FindNextControl(CurControl:TWinControl; GoForward:Boolean; CheckTabStop:Boolean; CheckParent:Boolean):TWinControl;
begin
{*
 0048E000    push        ebp
 0048E001    mov         ebp,esp
 0048E003    add         esp,0FFFFFFEC
 0048E006    push        ebx
 0048E007    push        esi
 0048E008    push        edi
 0048E009    mov         byte ptr [ebp-5],cl
 0048E00C    mov         edi,edx
 0048E00E    mov         dword ptr [ebp-4],eax
 0048E011    xor         eax,eax
 0048E013    mov         dword ptr [ebp-0C],eax
 0048E016    mov         dl,1
 0048E018    mov         eax,[00439644];TList
 0048E01D    call        TObject.Create
 0048E022    mov         dword ptr [ebp-14],eax
 0048E025    xor         eax,eax
 0048E027    push        ebp
 0048E028    push        48E0F6
 0048E02D    push        dword ptr fs:[eax]
 0048E030    mov         dword ptr fs:[eax],esp
 0048E033    mov         edx,dword ptr [ebp-14]
 0048E036    mov         eax,dword ptr [ebp-4]
 0048E039    mov         si,0FFB1
 0048E03D    call        @CallDynaInst
 0048E042    mov         eax,dword ptr [ebp-14]
 0048E045    cmp         dword ptr [eax+8],0
>0048E049    jle         0048E0E0
 0048E04F    mov         edx,edi
 0048E051    mov         eax,dword ptr [ebp-14]
 0048E054    call        TList.IndexOf
 0048E059    mov         dword ptr [ebp-10],eax
 0048E05C    cmp         dword ptr [ebp-10],0FFFFFFFF
>0048E060    jne         0048E079
 0048E062    cmp         byte ptr [ebp-5],0
>0048E066    je          0048E074
 0048E068    mov         eax,dword ptr [ebp-14]
 0048E06B    mov         eax,dword ptr [eax+8]
 0048E06E    dec         eax
 0048E06F    mov         dword ptr [ebp-10],eax
>0048E072    jmp         0048E079
 0048E074    xor         eax,eax
 0048E076    mov         dword ptr [ebp-10],eax
 0048E079    mov         ebx,dword ptr [ebp-10]
 0048E07C    cmp         byte ptr [ebp-5],0
>0048E080    je          0048E08F
 0048E082    inc         ebx
 0048E083    mov         eax,dword ptr [ebp-14]
 0048E086    cmp         ebx,dword ptr [eax+8]
>0048E089    jne         0048E09A
 0048E08B    xor         ebx,ebx
>0048E08D    jmp         0048E09A
 0048E08F    test        ebx,ebx
>0048E091    jne         0048E099
 0048E093    mov         eax,dword ptr [ebp-14]
 0048E096    mov         ebx,dword ptr [eax+8]
 0048E099    dec         ebx
 0048E09A    mov         edx,ebx
 0048E09C    mov         eax,dword ptr [ebp-14]
 0048E09F    call        TList.Get
 0048E0A4    mov         edi,eax
 0048E0A6    mov         eax,edi
 0048E0A8    mov         si,0FFB6
 0048E0AC    call        @CallDynaInst
 0048E0B1    test        al,al
>0048E0B3    je          0048E0D5
 0048E0B5    cmp         byte ptr [ebp+0C],0
>0048E0B9    je          0048E0C4
 0048E0BB    cmp         byte ptr [edi+1E8],0
>0048E0C2    je          0048E0D5
 0048E0C4    cmp         byte ptr [ebp+8],0
>0048E0C8    je          0048E0D2
 0048E0CA    mov         eax,dword ptr [edi+34]
 0048E0CD    cmp         eax,dword ptr [ebp-4]
>0048E0D0    jne         0048E0D5
 0048E0D2    mov         dword ptr [ebp-0C],edi
 0048E0D5    cmp         dword ptr [ebp-0C],0
>0048E0D9    jne         0048E0E0
 0048E0DB    cmp         ebx,dword ptr [ebp-10]
>0048E0DE    jne         0048E07C
 0048E0E0    xor         eax,eax
 0048E0E2    pop         edx
 0048E0E3    pop         ecx
 0048E0E4    pop         ecx
 0048E0E5    mov         dword ptr fs:[eax],edx
 0048E0E8    push        48E0FD
 0048E0ED    mov         eax,dword ptr [ebp-14]
 0048E0F0    call        TObject.Free
 0048E0F5    ret
>0048E0F6    jmp         @HandleFinally
>0048E0FB    jmp         0048E0ED
 0048E0FD    mov         eax,dword ptr [ebp-0C]
 0048E100    pop         edi
 0048E101    pop         esi
 0048E102    pop         ebx
 0048E103    mov         esp,ebp
 0048E105    pop         ebp
 0048E106    ret         8
*}
end;

//0048E10C
procedure TWinControl.SelectNext(CurControl:TWinControl; GoForward:Boolean; CheckTabStop:Boolean);
begin
{*
 0048E10C    push        ebp
 0048E10D    mov         ebp,esp
 0048E10F    push        ecx
 0048E110    mov         byte ptr [ebp-1],cl
 0048E113    mov         ecx,dword ptr [ebp+8]
 0048E116    push        ecx
 0048E117    xor         cl,1
 0048E11A    push        ecx
 0048E11B    movzx       ecx,byte ptr [ebp-1]
 0048E11F    call        TWinControl.FindNextControl
 0048E124    mov         edx,eax
 0048E126    test        edx,edx
>0048E128    je          0048E134
 0048E12A    mov         eax,edx
 0048E12C    mov         edx,dword ptr [eax]
 0048E12E    call        dword ptr [edx+0E8]
 0048E134    pop         ecx
 0048E135    pop         ebp
 0048E136    ret         4
*}
end;

//0048E13C
procedure TWinControl.SelectFirst;
begin
{*
 0048E13C    push        ebx
 0048E13D    push        esi
 0048E13E    mov         ebx,eax
 0048E140    mov         dl,1
 0048E142    mov         eax,ebx
 0048E144    call        GetParentForm
 0048E149    mov         esi,eax
 0048E14B    test        esi,esi
>0048E14D    je          0048E17E
 0048E14F    push        1
 0048E151    push        0
 0048E153    mov         cl,1
 0048E155    xor         edx,edx
 0048E157    mov         eax,ebx
 0048E159    call        TWinControl.FindNextControl
 0048E15E    test        eax,eax
>0048E160    jne         0048E171
 0048E162    push        0
 0048E164    push        0
 0048E166    mov         cl,1
 0048E168    xor         edx,edx
 0048E16A    mov         eax,ebx
 0048E16C    call        TWinControl.FindNextControl
 0048E171    test        eax,eax
>0048E173    je          0048E17E
 0048E175    mov         edx,eax
 0048E177    mov         eax,esi
 0048E179    call        TCustomForm.SetActiveControl
 0048E17E    pop         esi
 0048E17F    pop         ebx
 0048E180    ret
*}
end;

//0048E184
procedure TWinControl.GetChildren(Root:TComponent; Proc:TGetChildProc);
begin
{*
 0048E184    push        ebp
 0048E185    mov         ebp,esp
 0048E187    add         esp,0FFFFFFF8
 0048E18A    push        ebx
 0048E18B    push        esi
 0048E18C    mov         dword ptr [ebp-8],edx
 0048E18F    mov         dword ptr [ebp-4],eax
 0048E192    mov         eax,dword ptr [ebp-4]
 0048E195    call        TWinControl.GetControlCount
 0048E19A    mov         ebx,eax
 0048E19C    dec         ebx
 0048E19D    test        ebx,ebx
>0048E19F    jl          0048E1C2
 0048E1A1    inc         ebx
 0048E1A2    xor         esi,esi
 0048E1A4    mov         edx,esi
 0048E1A6    mov         eax,dword ptr [ebp-4]
 0048E1A9    call        TWinControl.GetControl
 0048E1AE    mov         edx,dword ptr [eax+4]
 0048E1B1    cmp         edx,dword ptr [ebp-8]
>0048E1B4    jne         0048E1BE
 0048E1B6    mov         edx,eax
 0048E1B8    mov         eax,dword ptr [ebp+0C]
 0048E1BB    call        dword ptr [ebp+8]
 0048E1BE    inc         esi
 0048E1BF    dec         ebx
>0048E1C0    jne         0048E1A4
 0048E1C2    pop         esi
 0048E1C3    pop         ebx
 0048E1C4    pop         ecx
 0048E1C5    pop         ecx
 0048E1C6    pop         ebp
 0048E1C7    ret         8
*}
end;

//0048E1CC
procedure TWinControl.SetChildOrder(Child:TComponent; Order:Integer);
begin
{*
 0048E1CC    push        ebx
 0048E1CD    push        esi
 0048E1CE    mov         esi,ecx
 0048E1D0    mov         ebx,edx
 0048E1D2    mov         eax,ebx
 0048E1D4    mov         edx,dword ptr ds:[47C4E8];TWinControl
 0048E1DA    call        @IsClass
 0048E1DF    test        al,al
>0048E1E1    je          0048E1EF
 0048E1E3    mov         edx,esi
 0048E1E5    mov         eax,ebx
 0048E1E7    call        TWinControl.SetZOrderPosition
 0048E1EC    pop         esi
 0048E1ED    pop         ebx
 0048E1EE    ret
 0048E1EF    mov         eax,ebx
 0048E1F1    mov         edx,dword ptr ds:[47A16C];TControl
 0048E1F7    call        @IsClass
 0048E1FC    test        al,al
>0048E1FE    je          0048E209
 0048E200    mov         edx,esi
 0048E202    mov         eax,ebx
 0048E204    call        TControl.SetZOrderPosition
 0048E209    pop         esi
 0048E20A    pop         ebx
 0048E20B    ret
*}
end;

//0048E20C
procedure TWinControl.CanResize(var NewWidth:Integer; var NewHeight:Integer);
begin
{*
 0048E20C    call        TControl.CanResize
 0048E211    ret
*}
end;

//0048E214
procedure DoCalcConstraints(Control:TControl; var MinWidth:Integer; var MinHeight:Integer; var MaxWidth:Integer; var MaxHeight:Integer);
begin
{*
 0048E214    push        ebp
 0048E215    mov         ebp,esp
 0048E217    push        ebx
 0048E218    push        esi
 0048E219    push        edi
 0048E21A    mov         esi,eax
 0048E21C    mov         eax,dword ptr [esi+70]
 0048E21F    cmp         dword ptr [eax+14],0
>0048E223    jbe         0048E22F
 0048E225    mov         ebx,dword ptr [esi+70]
 0048E228    mov         ebx,dword ptr [ebx+14]
 0048E22B    mov         dword ptr [edx],ebx
>0048E22D    jmp         0048E233
 0048E22F    xor         ebx,ebx
 0048E231    mov         dword ptr [edx],ebx
 0048E233    cmp         dword ptr [eax+10],0
>0048E237    jbe         0048E243
 0048E239    mov         ebx,dword ptr [esi+70]
 0048E23C    mov         ebx,dword ptr [ebx+10]
 0048E23F    mov         dword ptr [ecx],ebx
>0048E241    jmp         0048E247
 0048E243    xor         ebx,ebx
 0048E245    mov         dword ptr [ecx],ebx
 0048E247    cmp         dword ptr [eax+0C],0
>0048E24B    jbe         0048E25A
 0048E24D    mov         ebx,dword ptr [esi+70]
 0048E250    mov         ebx,dword ptr [ebx+0C]
 0048E253    mov         edi,dword ptr [ebp+0C]
 0048E256    mov         dword ptr [edi],ebx
>0048E258    jmp         0048E261
 0048E25A    mov         ebx,dword ptr [ebp+0C]
 0048E25D    xor         edi,edi
 0048E25F    mov         dword ptr [ebx],edi
 0048E261    cmp         dword ptr [eax+8],0
>0048E265    jbe         0048E274
 0048E267    mov         eax,dword ptr [esi+70]
 0048E26A    mov         eax,dword ptr [eax+8]
 0048E26D    mov         ebx,dword ptr [ebp+8]
 0048E270    mov         dword ptr [ebx],eax
>0048E272    jmp         0048E27B
 0048E274    mov         eax,dword ptr [ebp+8]
 0048E277    xor         ebx,ebx
 0048E279    mov         dword ptr [eax],ebx
 0048E27B    test        byte ptr [esi+52],10
>0048E27F    je          0048E2BF
 0048E281    mov         eax,dword ptr [esi+74]
 0048E284    mov         eax,dword ptr [eax+8]
 0048E287    mov         ebx,dword ptr [esi+74]
 0048E28A    add         eax,dword ptr [ebx+10]
 0048E28D    cmp         dword ptr [edx],0
>0048E290    jle         0048E294
 0048E292    add         dword ptr [edx],eax
 0048E294    mov         ebx,dword ptr [ebp+0C]
 0048E297    cmp         eax,dword ptr [ebx]
>0048E299    jg          0048E2A0
 0048E29B    mov         ebx,dword ptr [ebp+0C]
 0048E29E    sub         dword ptr [ebx],eax
 0048E2A0    mov         eax,dword ptr [esi+74]
 0048E2A3    mov         eax,dword ptr [eax+0C]
 0048E2A6    mov         ebx,dword ptr [esi+74]
 0048E2A9    add         eax,dword ptr [ebx+14]
 0048E2AC    cmp         dword ptr [ecx],0
>0048E2AF    jle         0048E2B3
 0048E2B1    add         dword ptr [ecx],eax
 0048E2B3    mov         ebx,dword ptr [ebp+8]
 0048E2B6    cmp         eax,dword ptr [ebx]
>0048E2B8    jg          0048E2BF
 0048E2BA    mov         ebx,dword ptr [ebp+8]
 0048E2BD    sub         dword ptr [ebx],eax
 0048E2BF    mov         eax,dword ptr [ebp+0C]
 0048E2C2    push        eax
 0048E2C3    mov         eax,dword ptr [ebp+8]
 0048E2C6    push        eax
 0048E2C7    mov         eax,esi
 0048E2C9    mov         ebx,dword ptr [eax]
 0048E2CB    call        dword ptr [ebx+3C]
 0048E2CE    pop         edi
 0048E2CF    pop         esi
 0048E2D0    pop         ebx
 0048E2D1    pop         ebp
 0048E2D2    ret         8
*}
end;

//0048E2D8
procedure TWinControl.CalcConstraints(var MinWidth:Integer; var MinHeight:Integer; var MaxWidth:Integer; var MaxHeight:Integer);
begin
{*
 0048E2D8    push        ebp
 0048E2D9    mov         ebp,esp
 0048E2DB    add         esp,0FFFFFFA0
 0048E2DE    push        ebx
 0048E2DF    push        esi
 0048E2E0    push        edi
 0048E2E1    mov         dword ptr [ebp-8],ecx
 0048E2E4    mov         dword ptr [ebp-4],edx
 0048E2E7    mov         esi,eax
 0048E2E9    mov         eax,esi
 0048E2EB    call        TWinControl.HandleAllocated
 0048E2F0    test        al,al
>0048E2F2    je          0048E750
 0048E2F8    mov         eax,esi
 0048E2FA    call        TWinControl.GetControlCount
 0048E2FF    test        eax,eax
>0048E301    je          0048E750
 0048E307    lea         edx,[ebp-60]
 0048E30A    mov         eax,esi
 0048E30C    mov         ecx,dword ptr [eax]
 0048E30E    call        dword ptr [ecx+54]
 0048E311    lea         edx,[ebp-60]
 0048E314    mov         eax,esi
 0048E316    mov         ecx,dword ptr [eax]
 0048E318    call        dword ptr [ecx+0A0]
 0048E31E    lea         eax,[ebp-60]
 0048E321    call        IsRectEmpty
 0048E326    test        al,al
>0048E328    jne         0048E750
 0048E32E    mov         eax,dword ptr [esi+74]
 0048E331    mov         edx,2
 0048E336    mov         ecx,dword ptr [eax]
 0048E338    call        dword ptr [ecx+10]
 0048E33B    mov         edx,dword ptr [ebp-58]
 0048E33E    sub         edx,dword ptr [ebp-60]
 0048E341    sub         eax,edx
 0048E343    mov         dword ptr [ebp-0C],eax
 0048E346    mov         eax,dword ptr [esi+74]
 0048E349    mov         edx,3
 0048E34E    mov         ecx,dword ptr [eax]
 0048E350    call        dword ptr [ecx+10]
 0048E353    mov         edx,dword ptr [ebp-54]
 0048E356    sub         edx,dword ptr [ebp-5C]
 0048E359    sub         eax,edx
 0048E35B    mov         dword ptr [ebp-10],eax
 0048E35E    mov         eax,dword ptr [esi+74]
 0048E361    mov         edx,2
 0048E366    mov         ecx,dword ptr [eax]
 0048E368    call        dword ptr [ecx+10]
 0048E36B    mov         edx,dword ptr [ebp-58]
 0048E36E    sub         edx,dword ptr [ebp-60]
 0048E371    sub         eax,edx
 0048E373    mov         dword ptr [ebp-14],eax
 0048E376    mov         eax,dword ptr [esi+74]
 0048E379    mov         edx,3
 0048E37E    mov         ecx,dword ptr [eax]
 0048E380    call        dword ptr [ecx+10]
 0048E383    mov         edx,dword ptr [ebp-54]
 0048E386    sub         edx,dword ptr [ebp-5C]
 0048E389    sub         eax,edx
 0048E38B    mov         dword ptr [ebp-18],eax
 0048E38E    mov         eax,dword ptr [ebp-4]
 0048E391    cmp         dword ptr [eax],0
>0048E394    jle         0048E39E
 0048E396    mov         eax,dword ptr [ebp-4]
 0048E399    mov         edx,dword ptr [ebp-0C]
 0048E39C    sub         dword ptr [eax],edx
 0048E39E    mov         eax,dword ptr [ebp-8]
 0048E3A1    cmp         dword ptr [eax],0
>0048E3A4    jle         0048E3AE
 0048E3A6    mov         eax,dword ptr [ebp-8]
 0048E3A9    mov         edx,dword ptr [ebp-10]
 0048E3AC    sub         dword ptr [eax],edx
 0048E3AE    mov         eax,dword ptr [ebp+0C]
 0048E3B1    cmp         dword ptr [eax],0
>0048E3B4    jle         0048E3BE
 0048E3B6    mov         eax,dword ptr [ebp+0C]
 0048E3B9    mov         edx,dword ptr [ebp-14]
 0048E3BC    sub         dword ptr [eax],edx
 0048E3BE    mov         eax,dword ptr [ebp+8]
 0048E3C1    cmp         dword ptr [eax],0
>0048E3C4    jle         0048E3CE
 0048E3C6    mov         eax,dword ptr [ebp+8]
 0048E3C9    mov         edx,dword ptr [ebp-18]
 0048E3CC    sub         dword ptr [eax],edx
 0048E3CE    xor         eax,eax
 0048E3D0    push        ebp
 0048E3D1    push        48E749
 0048E3D6    push        dword ptr fs:[eax]
 0048E3D9    mov         dword ptr fs:[eax],esp
 0048E3DC    xor         eax,eax
 0048E3DE    mov         dword ptr [ebp-20],eax
 0048E3E1    xor         eax,eax
 0048E3E3    mov         dword ptr [ebp-30],eax
 0048E3E6    xor         eax,eax
 0048E3E8    mov         dword ptr [ebp-24],eax
 0048E3EB    xor         eax,eax
 0048E3ED    mov         dword ptr [ebp-34],eax
 0048E3F0    xor         eax,eax
 0048E3F2    mov         dword ptr [ebp-28],eax
 0048E3F5    xor         eax,eax
 0048E3F7    mov         dword ptr [ebp-38],eax
 0048E3FA    xor         eax,eax
 0048E3FC    mov         dword ptr [ebp-2C],eax
 0048E3FF    xor         eax,eax
 0048E401    mov         dword ptr [ebp-3C],eax
 0048E404    mov         eax,esi
 0048E406    call        TWinControl.GetControlCount
 0048E40B    mov         edi,eax
 0048E40D    dec         edi
 0048E40E    test        edi,edi
>0048E410    jl          0048E673
 0048E416    inc         edi
 0048E417    mov         dword ptr [ebp-1C],0
 0048E41E    mov         edx,dword ptr [ebp-1C]
 0048E421    mov         eax,esi
 0048E423    call        TWinControl.GetControl
 0048E428    mov         ebx,eax
 0048E42A    cmp         byte ptr [ebx+59],0
>0048E42E    jne         0048E444
 0048E430    test        byte ptr [ebx+1C],10
>0048E434    je          0048E669
 0048E43A    test        byte ptr [ebx+51],4
>0048E43E    jne         0048E669
 0048E444    lea         eax,[ebp-44]
 0048E447    push        eax
 0048E448    lea         eax,[ebp-4C]
 0048E44B    push        eax
 0048E44C    lea         ecx,[ebp-48]
 0048E44F    lea         edx,[ebp-40]
 0048E452    mov         eax,ebx
 0048E454    call        DoCalcConstraints
 0048E459    movzx       eax,byte ptr [ebx+5D]
 0048E45D    sub         al,1
>0048E45F    jb          0048E477
 0048E461    sub         al,2
>0048E463    jb          0048E46B
 0048E465    sub         al,2
>0048E467    je          0048E471
>0048E469    jmp         0048E4DA
 0048E46B    mov         byte ptr [ebp-4D],1
>0048E46F    jmp         0048E4DE
 0048E471    mov         byte ptr [ebp-4D],2
>0048E475    jmp         0048E4DE
 0048E477    movzx       eax,byte ptr [ebx+63]
 0048E47B    and         al,byte ptr ds:[48E75C]
 0048E481    movzx       edx,byte ptr ds:[48E75C]
 0048E488    cmp         dl,al
>0048E48A    jne         0048E4D4
 0048E48C    mov         byte ptr [ebp-4D],1
 0048E490    cmp         dword ptr [ebp-40],0
>0048E494    jle         0048E4B1
 0048E496    mov         eax,dword ptr [ebx+74]
 0048E499    mov         edx,2
 0048E49E    mov         ecx,dword ptr [eax]
 0048E4A0    call        dword ptr [ecx+10]
 0048E4A3    mov         edx,dword ptr [ebp-58]
 0048E4A6    sub         edx,dword ptr [ebp-60]
 0048E4A9    sub         edx,eax
 0048E4AB    sub         edx,dword ptr [ebp-40]
 0048E4AE    mov         dword ptr [ebp-40],edx
 0048E4B1    cmp         dword ptr [ebp-44],0
>0048E4B5    jle         0048E4DE
 0048E4B7    mov         eax,dword ptr [ebx+74]
 0048E4BA    mov         edx,2
 0048E4BF    mov         ecx,dword ptr [eax]
 0048E4C1    call        dword ptr [ecx+10]
 0048E4C4    mov         edx,dword ptr [ebp-58]
 0048E4C7    sub         edx,dword ptr [ebp-60]
 0048E4CA    add         edx,dword ptr [ebp-44]
 0048E4CD    sub         edx,eax
 0048E4CF    mov         dword ptr [ebp-44],edx
>0048E4D2    jmp         0048E4DE
 0048E4D4    mov         byte ptr [ebp-4D],0
>0048E4D8    jmp         0048E4DE
 0048E4DA    mov         byte ptr [ebp-4D],3
 0048E4DE    movzx       eax,byte ptr [ebx+5D]
 0048E4E2    sub         al,1
>0048E4E4    jb          0048E4FC
 0048E4E6    add         al,0FE
 0048E4E8    sub         al,2
>0048E4EA    jb          0048E4F0
>0048E4EC    je          0048E4F6
>0048E4EE    jmp         0048E55F
 0048E4F0    mov         byte ptr [ebp-4E],1
>0048E4F4    jmp         0048E563
 0048E4F6    mov         byte ptr [ebp-4E],2
>0048E4FA    jmp         0048E563
 0048E4FC    movzx       eax,byte ptr [ebx+63]
 0048E500    and         al,byte ptr ds:[48E760]
 0048E506    movzx       edx,byte ptr ds:[48E760]
 0048E50D    cmp         dl,al
>0048E50F    jne         0048E559
 0048E511    mov         byte ptr [ebp-4E],1
 0048E515    cmp         dword ptr [ebp-48],0
>0048E519    jle         0048E536
 0048E51B    mov         eax,dword ptr [ebx+74]
 0048E51E    mov         edx,3
 0048E523    mov         ecx,dword ptr [eax]
 0048E525    call        dword ptr [ecx+10]
 0048E528    mov         edx,dword ptr [ebp-54]
 0048E52B    sub         edx,dword ptr [ebp-5C]
 0048E52E    sub         edx,eax
 0048E530    sub         edx,dword ptr [ebp-48]
 0048E533    mov         dword ptr [ebp-48],edx
 0048E536    cmp         dword ptr [ebp-4C],0
>0048E53A    jle         0048E563
 0048E53C    mov         eax,dword ptr [ebx+74]
 0048E53F    mov         edx,3
 0048E544    mov         ecx,dword ptr [eax]
 0048E546    call        dword ptr [ecx+10]
 0048E549    mov         edx,dword ptr [ebp-54]
 0048E54C    sub         edx,dword ptr [ebp-5C]
 0048E54F    add         edx,dword ptr [ebp-4C]
 0048E552    sub         edx,eax
 0048E554    mov         dword ptr [ebp-4C],edx
>0048E557    jmp         0048E563
 0048E559    mov         byte ptr [ebp-4E],0
>0048E55D    jmp         0048E563
 0048E55F    mov         byte ptr [ebp-4E],3
 0048E563    movzx       eax,byte ptr [ebp-4D]
 0048E567    dec         eax
 0048E568    sub         al,2
>0048E56A    jb          0048E570
>0048E56C    je          0048E5C6
>0048E56E    jmp         0048E5E6
 0048E570    cmp         dword ptr [ebp-40],0
>0048E574    jle         0048E59A
 0048E576    mov         eax,dword ptr [ebp-4]
 0048E579    mov         eax,dword ptr [eax]
 0048E57B    cmp         eax,dword ptr [ebp-40]
>0048E57E    jge         0048E59A
 0048E580    mov         eax,dword ptr [ebp-4]
 0048E583    mov         edx,dword ptr [ebp-40]
 0048E586    mov         dword ptr [eax],edx
 0048E588    mov         eax,dword ptr [ebp-4]
 0048E58B    mov         eax,dword ptr [eax]
 0048E58D    cmp         eax,dword ptr [ebp-20]
>0048E590    jle         0048E59A
 0048E592    mov         eax,dword ptr [ebp-4]
 0048E595    mov         eax,dword ptr [eax]
 0048E597    mov         dword ptr [ebp-20],eax
 0048E59A    cmp         dword ptr [ebp-44],0
>0048E59E    jle         0048E5E6
 0048E5A0    mov         eax,dword ptr [ebp+0C]
 0048E5A3    mov         eax,dword ptr [eax]
 0048E5A5    cmp         eax,dword ptr [ebp-44]
>0048E5A8    jle         0048E5E6
 0048E5AA    mov         eax,dword ptr [ebp+0C]
 0048E5AD    mov         edx,dword ptr [ebp-44]
 0048E5B0    mov         dword ptr [eax],edx
 0048E5B2    mov         eax,dword ptr [ebp+0C]
 0048E5B5    mov         eax,dword ptr [eax]
 0048E5B7    cmp         eax,dword ptr [ebp-24]
>0048E5BA    jle         0048E5E6
 0048E5BC    mov         eax,dword ptr [ebp+0C]
 0048E5BF    mov         eax,dword ptr [eax]
 0048E5C1    mov         dword ptr [ebp-24],eax
>0048E5C4    jmp         0048E5E6
 0048E5C6    mov         eax,dword ptr [ebx+74]
 0048E5C9    mov         edx,2
 0048E5CE    mov         ecx,dword ptr [eax]
 0048E5D0    call        dword ptr [ecx+10]
 0048E5D3    add         dword ptr [ebp-30],eax
 0048E5D6    mov         eax,dword ptr [ebx+74]
 0048E5D9    mov         edx,2
 0048E5DE    mov         ecx,dword ptr [eax]
 0048E5E0    call        dword ptr [ecx+10]
 0048E5E3    add         dword ptr [ebp-34],eax
 0048E5E6    movzx       eax,byte ptr [ebp-4E]
 0048E5EA    dec         eax
 0048E5EB    sub         al,2
>0048E5ED    jb          0048E5F3
>0048E5EF    je          0048E649
>0048E5F1    jmp         0048E669
 0048E5F3    cmp         dword ptr [ebp-48],0
>0048E5F7    jle         0048E61D
 0048E5F9    mov         eax,dword ptr [ebp-8]
 0048E5FC    mov         eax,dword ptr [eax]
 0048E5FE    cmp         eax,dword ptr [ebp-48]
>0048E601    jge         0048E61D
 0048E603    mov         eax,dword ptr [ebp-8]
 0048E606    mov         edx,dword ptr [ebp-48]
 0048E609    mov         dword ptr [eax],edx
 0048E60B    mov         eax,dword ptr [ebp-8]
 0048E60E    mov         eax,dword ptr [eax]
 0048E610    cmp         eax,dword ptr [ebp-28]
>0048E613    jle         0048E61D
 0048E615    mov         eax,dword ptr [ebp-8]
 0048E618    mov         eax,dword ptr [eax]
 0048E61A    mov         dword ptr [ebp-28],eax
 0048E61D    cmp         dword ptr [ebp-4C],0
>0048E621    jle         0048E669
 0048E623    mov         eax,dword ptr [ebp+8]
 0048E626    mov         eax,dword ptr [eax]
 0048E628    cmp         eax,dword ptr [ebp-4C]
>0048E62B    jle         0048E669
 0048E62D    mov         eax,dword ptr [ebp+8]
 0048E630    mov         edx,dword ptr [ebp-4C]
 0048E633    mov         dword ptr [eax],edx
 0048E635    mov         eax,dword ptr [ebp+8]
 0048E638    mov         eax,dword ptr [eax]
 0048E63A    cmp         eax,dword ptr [ebp-2C]
>0048E63D    jle         0048E669
 0048E63F    mov         eax,dword ptr [ebp+8]
 0048E642    mov         eax,dword ptr [eax]
 0048E644    mov         dword ptr [ebp-2C],eax
>0048E647    jmp         0048E669
 0048E649    mov         eax,dword ptr [ebx+74]
 0048E64C    mov         edx,3
 0048E651    mov         ecx,dword ptr [eax]
 0048E653    call        dword ptr [ecx+10]
 0048E656    add         dword ptr [ebp-38],eax
 0048E659    mov         eax,dword ptr [ebx+74]
 0048E65C    mov         edx,3
 0048E661    mov         ecx,dword ptr [eax]
 0048E663    call        dword ptr [ecx+10]
 0048E666    add         dword ptr [ebp-3C],eax
 0048E669    inc         dword ptr [ebp-1C]
 0048E66C    dec         edi
>0048E66D    jne         0048E41E
 0048E673    cmp         dword ptr [ebp-20],0
>0048E677    jle         0048E691
 0048E679    mov         eax,dword ptr [ebp-20]
 0048E67C    add         eax,dword ptr [ebp-30]
 0048E67F    mov         edx,dword ptr [ebp-4]
 0048E682    cmp         eax,dword ptr [edx]
>0048E684    jle         0048E691
 0048E686    mov         eax,dword ptr [ebp-20]
 0048E689    add         eax,dword ptr [ebp-30]
 0048E68C    mov         edx,dword ptr [ebp-4]
 0048E68F    mov         dword ptr [edx],eax
 0048E691    cmp         dword ptr [ebp-24],0
>0048E695    jle         0048E6B7
 0048E697    mov         eax,dword ptr [ebp+0C]
 0048E69A    cmp         dword ptr [eax],0
>0048E69D    je          0048E6AC
 0048E69F    mov         eax,dword ptr [ebp-24]
 0048E6A2    add         eax,dword ptr [ebp-34]
 0048E6A5    mov         edx,dword ptr [ebp+0C]
 0048E6A8    cmp         eax,dword ptr [edx]
>0048E6AA    jle         0048E6B7
 0048E6AC    mov         eax,dword ptr [ebp-24]
 0048E6AF    add         eax,dword ptr [ebp-34]
 0048E6B2    mov         edx,dword ptr [ebp+0C]
 0048E6B5    mov         dword ptr [edx],eax
 0048E6B7    cmp         dword ptr [ebp-28],0
>0048E6BB    jle         0048E6D5
 0048E6BD    mov         eax,dword ptr [ebp-28]
 0048E6C0    add         eax,dword ptr [ebp-38]
 0048E6C3    mov         edx,dword ptr [ebp-8]
 0048E6C6    cmp         eax,dword ptr [edx]
>0048E6C8    jle         0048E6D5
 0048E6CA    mov         eax,dword ptr [ebp-28]
 0048E6CD    add         eax,dword ptr [ebp-38]
 0048E6D0    mov         edx,dword ptr [ebp-8]
 0048E6D3    mov         dword ptr [edx],eax
 0048E6D5    cmp         dword ptr [ebp-2C],0
>0048E6D9    jle         0048E6FB
 0048E6DB    mov         eax,dword ptr [ebp+8]
 0048E6DE    cmp         dword ptr [eax],0
>0048E6E1    je          0048E6F0
 0048E6E3    mov         eax,dword ptr [ebp-2C]
 0048E6E6    add         eax,dword ptr [ebp-3C]
 0048E6E9    mov         edx,dword ptr [ebp+8]
 0048E6EC    cmp         eax,dword ptr [edx]
>0048E6EE    jle         0048E6FB
 0048E6F0    mov         eax,dword ptr [ebp-2C]
 0048E6F3    add         eax,dword ptr [ebp-3C]
 0048E6F6    mov         edx,dword ptr [ebp+8]
 0048E6F9    mov         dword ptr [edx],eax
 0048E6FB    xor         eax,eax
 0048E6FD    pop         edx
 0048E6FE    pop         ecx
 0048E6FF    pop         ecx
 0048E700    mov         dword ptr fs:[eax],edx
 0048E703    push        48E750
 0048E708    mov         eax,dword ptr [ebp-4]
 0048E70B    cmp         dword ptr [eax],0
>0048E70E    jle         0048E718
 0048E710    mov         eax,dword ptr [ebp-4]
 0048E713    mov         edx,dword ptr [ebp-0C]
 0048E716    add         dword ptr [eax],edx
 0048E718    mov         eax,dword ptr [ebp-8]
 0048E71B    cmp         dword ptr [eax],0
>0048E71E    jle         0048E728
 0048E720    mov         eax,dword ptr [ebp-8]
 0048E723    mov         edx,dword ptr [ebp-10]
 0048E726    add         dword ptr [eax],edx
 0048E728    mov         eax,dword ptr [ebp+0C]
 0048E72B    cmp         dword ptr [eax],0
>0048E72E    jle         0048E738
 0048E730    mov         eax,dword ptr [ebp+0C]
 0048E733    mov         edx,dword ptr [ebp-14]
 0048E736    add         dword ptr [eax],edx
 0048E738    mov         eax,dword ptr [ebp+8]
 0048E73B    cmp         dword ptr [eax],0
>0048E73E    jle         0048E748
 0048E740    mov         eax,dword ptr [ebp+8]
 0048E743    mov         edx,dword ptr [ebp-18]
 0048E746    add         dword ptr [eax],edx
 0048E748    ret
>0048E749    jmp         @HandleFinally
>0048E74E    jmp         0048E708
 0048E750    pop         edi
 0048E751    pop         esi
 0048E752    pop         ebx
 0048E753    mov         esp,ebp
 0048E755    pop         ebp
 0048E756    ret         8
*}
end;

//0048E764
procedure TWinControl.ConstrainedResize(var MinWidth:Integer; var MinHeight:Integer; var MaxWidth:Integer; var MaxHeight:Integer);
begin
{*
 0048E764    push        ebp
 0048E765    mov         ebp,esp
 0048E767    push        ebx
 0048E768    push        esi
 0048E769    push        edi
 0048E76A    mov         edi,ecx
 0048E76C    mov         esi,edx
 0048E76E    mov         ebx,eax
 0048E770    mov         eax,dword ptr [ebp+0C]
 0048E773    push        eax
 0048E774    mov         eax,dword ptr [ebp+8]
 0048E777    push        eax
 0048E778    mov         ecx,edi
 0048E77A    mov         edx,esi
 0048E77C    mov         eax,ebx
 0048E77E    call        TWinControl.CalcConstraints
 0048E783    mov         eax,dword ptr [ebp+0C]
 0048E786    push        eax
 0048E787    mov         eax,dword ptr [ebp+8]
 0048E78A    push        eax
 0048E78B    mov         ecx,edi
 0048E78D    mov         edx,esi
 0048E78F    mov         eax,ebx
 0048E791    call        TControl.ConstrainedResize
 0048E796    pop         edi
 0048E797    pop         esi
 0048E798    pop         ebx
 0048E799    pop         ebp
 0048E79A    ret         8
*}
end;

//0048E7A0
procedure TWinControl.ActionChange(Sender:TObject; CheckDefaults:Boolean);
begin
{*
 0048E7A0    push        ebx
 0048E7A1    push        esi
 0048E7A2    push        edi
 0048E7A3    mov         ebx,ecx
 0048E7A5    mov         esi,edx
 0048E7A7    mov         edi,eax
 0048E7A9    mov         ecx,ebx
 0048E7AB    mov         edx,esi
 0048E7AD    mov         eax,edi
 0048E7AF    call        TControl.ActionChange
 0048E7B4    mov         eax,esi
 0048E7B6    mov         edx,dword ptr ds:[4743FC];TCustomAction
 0048E7BC    call        @IsClass
 0048E7C1    test        al,al
>0048E7C3    je          0048E7DC
 0048E7C5    test        bl,bl
>0048E7C7    je          0048E7D2
 0048E7C9    cmp         dword ptr [edi+168],0
>0048E7D0    jne         0048E7DC
 0048E7D2    mov         edx,dword ptr [esi+74]
 0048E7D5    mov         eax,edi
 0048E7D7    call        TControl.SetHelpKeyword
 0048E7DC    pop         edi
 0048E7DD    pop         esi
 0048E7DE    pop         ebx
 0048E7DF    ret
*}
end;

//0048E7E0
procedure TWinControl.sub_0048751C;
begin
{*
 0048E7E0    mov         eax,[0047BF2C];TWinControlActionLink
 0048E7E5    ret
*}
end;

//0048E7E8
procedure TWinControl.AssignTo(Dest:TPersistent);
begin
{*
 0048E7E8    push        ebx
 0048E7E9    push        esi
 0048E7EA    mov         esi,edx
 0048E7EC    mov         ebx,eax
 0048E7EE    mov         edx,esi
 0048E7F0    mov         eax,ebx
 0048E7F2    call        TControl.AssignTo
 0048E7F7    mov         eax,esi
 0048E7F9    mov         edx,dword ptr ds:[4743FC];TCustomAction
 0048E7FF    call        @IsClass
 0048E804    test        al,al
>0048E806    je          0048E815
 0048E808    mov         edx,dword ptr [ebx+168]
 0048E80E    mov         eax,esi
 0048E810    mov         ecx,dword ptr [eax]
 0048E812    call        dword ptr [ecx+4C]
 0048E815    pop         esi
 0048E816    pop         ebx
 0048E817    ret
*}
end;

//0048E818
function TWinControl.CanAutoSize(var NewWidth:Integer; var NewHeight:Integer):Boolean;
begin
{*
 0048E818    push        ebp
 0048E819    mov         ebp,esp
 0048E81B    add         esp,0FFFFFFCC
 0048E81E    push        ebx
 0048E81F    push        esi
 0048E820    push        edi
 0048E821    mov         dword ptr [ebp-0C],ecx
 0048E824    mov         dword ptr [ebp-8],edx
 0048E827    mov         dword ptr [ebp-4],eax
 0048E82A    mov         byte ptr [ebp-0D],1
 0048E82E    mov         eax,dword ptr [ebp-4]
 0048E831    call        TWinControl.HandleAllocated
 0048E836    test        al,al
>0048E838    je          0048E9CF
 0048E83E    mov         eax,dword ptr [ebp-4]
 0048E841    cmp         byte ptr [eax+5D],5
>0048E845    je          0048E9CF
 0048E84B    mov         eax,dword ptr [ebp-4]
 0048E84E    test        byte ptr [eax+1C],10
>0048E852    je          0048E864
 0048E854    mov         eax,dword ptr [ebp-4]
 0048E857    call        TWinControl.GetControlCount
 0048E85C    test        eax,eax
>0048E85E    jle         0048E9CF
 0048E864    lea         edx,[ebp-24]
 0048E867    mov         eax,dword ptr [ebp-4]
 0048E86A    mov         ecx,dword ptr [eax]
 0048E86C    call        dword ptr [ecx+0D0]
 0048E872    lea         edx,[ebp-34]
 0048E875    mov         eax,dword ptr [ebp-4]
 0048E878    mov         ecx,dword ptr [eax]
 0048E87A    call        dword ptr [ecx+54]
 0048E87D    lea         edx,[ebp-34]
 0048E880    mov         eax,dword ptr [ebp-4]
 0048E883    mov         ecx,dword ptr [eax]
 0048E885    call        dword ptr [ecx+0A0]
 0048E88B    mov         eax,dword ptr [ebp-4]
 0048E88E    inc         word ptr [eax+1AC]
 0048E895    xor         ecx,ecx
 0048E897    push        ebp
 0048E898    push        48E942
 0048E89D    push        dword ptr fs:[ecx]
 0048E8A0    mov         dword ptr fs:[ecx],esp
 0048E8A3    mov         eax,dword ptr [ebp-4]
 0048E8A6    call        TWinControl.GetControlCount
 0048E8AB    mov         esi,eax
 0048E8AD    dec         esi
 0048E8AE    test        esi,esi
>0048E8B0    jl          0048E925
 0048E8B2    inc         esi
 0048E8B3    mov         dword ptr [ebp-14],0
 0048E8BA    mov         edx,dword ptr [ebp-14]
 0048E8BD    mov         eax,dword ptr [ebp-4]
 0048E8C0    call        TWinControl.GetControl
 0048E8C5    cmp         byte ptr [eax+59],0
>0048E8C9    jne         0048E8D7
 0048E8CB    test        byte ptr [eax+1C],10
>0048E8CF    je          0048E91F
 0048E8D1    test        byte ptr [eax+51],4
>0048E8D5    jne         0048E91F
 0048E8D7    mov         edx,dword ptr [ebp-4]
 0048E8DA    movzx       edx,byte ptr [edx+5D]
 0048E8DE    mov         ecx,edx
 0048E8E0    test        cl,cl
>0048E8E2    je          0048E8EC
 0048E8E4    add         cl,0FD
 0048E8E7    sub         cl,2
>0048E8EA    jae         0048E8F4
 0048E8EC    mov         edi,dword ptr [ebp-24]
 0048E8EF    sub         edi,dword ptr [ebp-34]
>0048E8F2    jmp         0048E8F6
 0048E8F4    xor         edi,edi
 0048E8F6    sub         dl,3
>0048E8F9    jae         0048E903
 0048E8FB    mov         edx,dword ptr [ebp-20]
 0048E8FE    sub         edx,dword ptr [ebp-30]
>0048E901    jmp         0048E905
 0048E903    xor         edx,edx
 0048E905    mov         ecx,dword ptr [eax+48]
 0048E908    push        ecx
 0048E909    mov         ecx,dword ptr [eax+4C]
 0048E90C    push        ecx
 0048E90D    mov         ecx,dword ptr [eax+44]
 0048E910    sub         ecx,edx
 0048E912    mov         edx,dword ptr [eax+40]
 0048E915    sub         edx,edi
 0048E917    mov         ebx,dword ptr [eax]
 0048E919    call        dword ptr [ebx+98]
 0048E91F    inc         dword ptr [ebp-14]
 0048E922    dec         esi
>0048E923    jne         0048E8BA
 0048E925    xor         eax,eax
 0048E927    pop         edx
 0048E928    pop         ecx
 0048E929    pop         ecx
 0048E92A    mov         dword ptr fs:[eax],edx
 0048E92D    push        48E949
 0048E932    mov         eax,dword ptr [ebp-4]
 0048E935    and         dword ptr [eax+54],0FFFFFFEF
 0048E939    mov         eax,dword ptr [ebp-4]
 0048E93C    call        TWinControl.EnableAlign
 0048E941    ret
>0048E942    jmp         @HandleFinally
>0048E947    jmp         0048E932
 0048E949    mov         eax,dword ptr [ebp-4]
 0048E94C    movzx       edx,byte ptr [eax+5D]
 0048E950    mov         eax,edx
 0048E952    test        al,al
>0048E954    je          0048E95C
 0048E956    add         al,0FD
 0048E958    sub         al,2
>0048E95A    jae         0048E98F
 0048E95C    mov         eax,dword ptr [ebp-1C]
 0048E95F    sub         eax,dword ptr [ebp-24]
 0048E962    test        eax,eax
>0048E964    jle         0048E988
 0048E966    mov         ecx,dword ptr [ebp-4]
 0048E969    add         eax,dword ptr [ecx+48]
 0048E96C    mov         ecx,dword ptr [ebp-2C]
 0048E96F    sub         ecx,dword ptr [ebp-34]
 0048E972    sub         eax,ecx
 0048E974    mov         ecx,dword ptr [ebp-8]
 0048E977    mov         dword ptr [ecx],eax
 0048E979    cmp         dl,4
>0048E97C    jne         0048E98F
 0048E97E    mov         eax,dword ptr [ebp-4]
 0048E981    mov         edx,dword ptr [eax]
 0048E983    call        dword ptr [edx+68]
>0048E986    jmp         0048E98F
 0048E988    mov         eax,dword ptr [ebp-8]
 0048E98B    xor         edx,edx
 0048E98D    mov         dword ptr [eax],edx
 0048E98F    mov         eax,dword ptr [ebp-4]
 0048E992    movzx       edx,byte ptr [eax+5D]
 0048E996    mov         eax,edx
 0048E998    sub         al,3
>0048E99A    jae         0048E9CF
 0048E99C    mov         eax,dword ptr [ebp-18]
 0048E99F    sub         eax,dword ptr [ebp-20]
 0048E9A2    test        eax,eax
>0048E9A4    jle         0048E9C8
 0048E9A6    mov         ecx,dword ptr [ebp-4]
 0048E9A9    add         eax,dword ptr [ecx+4C]
 0048E9AC    mov         ecx,dword ptr [ebp-28]
 0048E9AF    sub         ecx,dword ptr [ebp-30]
 0048E9B2    sub         eax,ecx
 0048E9B4    mov         ecx,dword ptr [ebp-0C]
 0048E9B7    mov         dword ptr [ecx],eax
 0048E9B9    cmp         dl,2
>0048E9BC    jne         0048E9CF
 0048E9BE    mov         eax,dword ptr [ebp-4]
 0048E9C1    mov         edx,dword ptr [eax]
 0048E9C3    call        dword ptr [edx+68]
>0048E9C6    jmp         0048E9CF
 0048E9C8    mov         eax,dword ptr [ebp-0C]
 0048E9CB    xor         edx,edx
 0048E9CD    mov         dword ptr [eax],edx
 0048E9CF    movzx       eax,byte ptr [ebp-0D]
 0048E9D3    pop         edi
 0048E9D4    pop         esi
 0048E9D5    pop         ebx
 0048E9D6    mov         esp,ebp
 0048E9D8    pop         ebp
 0048E9D9    ret
*}
end;

//0048E9DC
procedure TWinControl.SetBevelCut(Index:Integer; const Value:TBevelCut);
begin
{*
 0048E9DC    sub         edx,1
>0048E9DF    jb          0048E9E5
>0048E9E1    je          0048EA02
>0048E9E3    jmp         0048EA1E
 0048E9E5    cmp         cl,byte ptr [eax+1AF]
>0048E9EB    je          0048EA1E
 0048E9ED    mov         byte ptr [eax+1AF],cl
 0048E9F3    push        0
 0048E9F5    xor         ecx,ecx
 0048E9F7    mov         edx,0B03B
 0048E9FC    call        TControl.Perform
 0048EA01    ret
 0048EA02    cmp         cl,byte ptr [eax+1B0]
>0048EA08    je          0048EA1E
 0048EA0A    mov         byte ptr [eax+1B0],cl
 0048EA10    push        0
 0048EA12    xor         ecx,ecx
 0048EA14    mov         edx,0B03B
 0048EA19    call        TControl.Perform
 0048EA1E    ret
*}
end;

//0048EA20
procedure TWinControl.SetBevelEdges(const Value:TBevelEdges);
begin
{*
 0048EA20    push        ebx
 0048EA21    push        ecx
 0048EA22    mov         byte ptr [esp],dl
 0048EA25    mov         ebx,eax
 0048EA27    movzx       eax,byte ptr [ebx+1AE]
 0048EA2E    cmp         al,byte ptr [esp]
>0048EA31    je          0048EA4D
 0048EA33    movzx       eax,byte ptr [esp]
 0048EA37    mov         byte ptr [ebx+1AE],al
 0048EA3D    push        0
 0048EA3F    xor         ecx,ecx
 0048EA41    mov         edx,0B03B
 0048EA46    mov         eax,ebx
 0048EA48    call        TControl.Perform
 0048EA4D    pop         edx
 0048EA4E    pop         ebx
 0048EA4F    ret
*}
end;

//0048EA50
procedure TWinControl.SetBevelKind(const Value:TBevelKind);
begin
{*
 0048EA50    cmp         dl,byte ptr [eax+1B1]
>0048EA56    je          0048EA6C
 0048EA58    mov         byte ptr [eax+1B1],dl
 0048EA5E    push        0
 0048EA60    xor         ecx,ecx
 0048EA62    mov         edx,0B03B
 0048EA67    call        TControl.Perform
 0048EA6C    ret
*}
end;

//0048EA70
procedure TWinControl.SetBevelWidth(const Value:TBevelWidth);
begin
{*
 0048EA70    cmp         edx,dword ptr [eax+1B4]
>0048EA76    je          0048EA8C
 0048EA78    mov         dword ptr [eax+1B4],edx
 0048EA7E    push        0
 0048EA80    xor         ecx,ecx
 0048EA82    mov         edx,0B03B
 0048EA87    call        TControl.Perform
 0048EA8C    ret
*}
end;

//0048EA90
procedure TWinControl.WMNCCalcSize(var Message:TWMNCCalcSize);
begin
{*
 0048EA90    push        ebx
 0048EA91    push        esi
 0048EA92    push        edi
 0048EA93    mov         esi,edx
 0048EA95    mov         ebx,eax
 0048EA97    mov         edx,esi
 0048EA99    mov         eax,ebx
 0048EA9B    mov         ecx,dword ptr [eax]
 0048EA9D    call        dword ptr [ecx-10]
 0048EAA0    mov         eax,dword ptr [esi+8]
 0048EAA3    mov         esi,eax
 0048EAA5    mov         eax,dword ptr [ebx+1B8]
 0048EAAB    neg         eax
 0048EAAD    push        eax
 0048EAAE    mov         edx,dword ptr [ebx+1B8]
 0048EAB4    neg         edx
 0048EAB6    push        eax
 0048EAB7    mov         edi,esi
 0048EAB9    push        edi
 0048EABA    call        user32.InflateRect
 0048EABF    cmp         byte ptr [ebx+1B1],0
>0048EAC6    je          0048EB1D
 0048EAC8    xor         eax,eax
 0048EACA    cmp         byte ptr [ebx+1AF],0
>0048EAD1    je          0048EADB
 0048EAD3    mov         edx,dword ptr [ebx+1B4]
 0048EAD9    add         eax,edx
 0048EADB    cmp         byte ptr [ebx+1B0],0
>0048EAE2    je          0048EAEC
 0048EAE4    mov         edx,dword ptr [ebx+1B4]
 0048EAEA    add         eax,edx
 0048EAEC    mov         esi,edi
 0048EAEE    test        byte ptr [ebx+1AE],1
>0048EAF5    je          0048EAF9
 0048EAF7    add         dword ptr [esi],eax
 0048EAF9    test        byte ptr [ebx+1AE],2
>0048EB00    je          0048EB05
 0048EB02    add         dword ptr [esi+4],eax
 0048EB05    test        byte ptr [ebx+1AE],4
>0048EB0C    je          0048EB11
 0048EB0E    sub         dword ptr [esi+8],eax
 0048EB11    test        byte ptr [ebx+1AE],8
>0048EB18    je          0048EB1D
 0048EB1A    sub         dword ptr [esi+0C],eax
 0048EB1D    pop         edi
 0048EB1E    pop         esi
 0048EB1F    pop         ebx
 0048EB20    ret
*}
end;

//0048EB24
procedure TWinControl.WMNCPaint(var Message:TWMNCPaint);
begin
{*
 0048EB24    push        ebp
 0048EB25    mov         ebp,esp
 0048EB27    add         esp,0FFFFFFC4
 0048EB2A    push        ebx
 0048EB2B    push        esi
 0048EB2C    push        edi
 0048EB2D    mov         dword ptr [ebp-8],edx
 0048EB30    mov         dword ptr [ebp-4],eax
 0048EB33    mov         eax,dword ptr [ebp-4]
 0048EB36    cmp         byte ptr [eax+1B1],0
>0048EB3D    jne         0048EB4F
 0048EB3F    mov         eax,dword ptr [ebp-4]
 0048EB42    cmp         dword ptr [eax+1B8],0
>0048EB49    jbe         0048EDE6
 0048EB4F    mov         eax,dword ptr [ebp-4]
 0048EB52    call        TWinControl.GetHandle
 0048EB57    push        eax
 0048EB58    call        user32.GetWindowDC
 0048EB5D    mov         dword ptr [ebp-0C],eax
 0048EB60    xor         ecx,ecx
 0048EB62    push        ebp
 0048EB63    push        48EDDF
 0048EB68    push        dword ptr fs:[ecx]
 0048EB6B    mov         dword ptr fs:[ecx],esp
 0048EB6E    lea         eax,[ebp-1C]
 0048EB71    push        eax
 0048EB72    mov         eax,dword ptr [ebp-4]
 0048EB75    call        TWinControl.GetHandle
 0048EB7A    push        eax
 0048EB7B    call        user32.GetClientRect
 0048EB80    lea         eax,[ebp-2C]
 0048EB83    push        eax
 0048EB84    mov         eax,dword ptr [ebp-4]
 0048EB87    call        TWinControl.GetHandle
 0048EB8C    push        eax
 0048EB8D    call        user32.GetWindowRect
 0048EB92    push        2
 0048EB94    lea         eax,[ebp-2C]
 0048EB97    push        eax
 0048EB98    mov         eax,dword ptr [ebp-4]
 0048EB9B    call        TWinControl.GetHandle
 0048EBA0    push        eax
 0048EBA1    push        0
 0048EBA3    call        user32.MapWindowPoints
 0048EBA8    mov         ecx,dword ptr [ebp-28]
 0048EBAB    neg         ecx
 0048EBAD    mov         edx,dword ptr [ebp-2C]
 0048EBB0    neg         edx
 0048EBB2    lea         eax,[ebp-1C]
 0048EBB5    call        OffsetRect
 0048EBBA    mov         eax,dword ptr [ebp-10]
 0048EBBD    push        eax
 0048EBBE    mov         eax,dword ptr [ebp-14]
 0048EBC1    push        eax
 0048EBC2    mov         eax,dword ptr [ebp-18]
 0048EBC5    push        eax
 0048EBC6    mov         eax,dword ptr [ebp-1C]
 0048EBC9    push        eax
 0048EBCA    mov         eax,dword ptr [ebp-0C]
 0048EBCD    push        eax
 0048EBCE    call        gdi32.ExcludeClipRect
 0048EBD3    lea         esi,[ebp-2C]
 0048EBD6    lea         edi,[ebp-3C]
 0048EBD9    movs        dword ptr [edi],dword ptr [esi]
 0048EBDA    movs        dword ptr [edi],dword ptr [esi]
 0048EBDB    movs        dword ptr [edi],dword ptr [esi]
 0048EBDC    movs        dword ptr [edi],dword ptr [esi]
 0048EBDD    mov         eax,dword ptr [ebp-4]
 0048EBE0    mov         eax,dword ptr [eax+1B8]
 0048EBE6    push        eax
 0048EBE7    push        eax
 0048EBE8    lea         eax,[ebp-1C]
 0048EBEB    push        eax
 0048EBEC    call        user32.InflateRect
 0048EBF1    lea         esi,[ebp-1C]
 0048EBF4    lea         edi,[ebp-2C]
 0048EBF7    movs        dword ptr [edi],dword ptr [esi]
 0048EBF8    movs        dword ptr [edi],dword ptr [esi]
 0048EBF9    movs        dword ptr [edi],dword ptr [esi]
 0048EBFA    movs        dword ptr [edi],dword ptr [esi]
 0048EBFB    push        0F0
 0048EBFD    mov         eax,dword ptr [ebp-4]
 0048EC00    call        TWinControl.GetHandle
 0048EC05    push        eax
 0048EC06    call        user32.GetWindowLongW
 0048EC0B    mov         ebx,eax
 0048EC0D    test        ebx,200000
>0048EC13    je          0048EC37
 0048EC15    mov         eax,dword ptr [ebp-4]
 0048EC18    call        TControl.UseRightToLeftScrollBar
 0048EC1D    test        al,al
>0048EC1F    je          0048EC2D
 0048EC21    push        14
 0048EC23    call        user32.GetSystemMetrics
 0048EC28    sub         dword ptr [ebp-2C],eax
>0048EC2B    jmp         0048EC37
 0048EC2D    push        14
 0048EC2F    call        user32.GetSystemMetrics
 0048EC34    add         dword ptr [ebp-24],eax
 0048EC37    test        ebx,100000
>0048EC3D    je          0048EC49
 0048EC3F    push        15
 0048EC41    call        user32.GetSystemMetrics
 0048EC46    add         dword ptr [ebp-20],eax
 0048EC49    mov         eax,dword ptr [ebp-4]
 0048EC4C    cmp         byte ptr [eax+1B1],0
>0048EC53    je          0048ED1E
 0048EC59    xor         esi,esi
 0048EC5B    mov         eax,dword ptr [ebp-4]
 0048EC5E    movzx       edx,byte ptr [eax+1AF]
 0048EC65    test        dl,dl
>0048EC67    je          0048EC74
 0048EC69    mov         eax,dword ptr [ebp-4]
 0048EC6C    mov         eax,dword ptr [eax+1B4]
 0048EC72    add         esi,eax
 0048EC74    mov         eax,dword ptr [ebp-4]
 0048EC77    movzx       eax,byte ptr [eax+1B0]
 0048EC7E    test        al,al
>0048EC80    je          0048EC8D
 0048EC82    mov         ecx,dword ptr [ebp-4]
 0048EC85    mov         ecx,dword ptr [ecx+1B4]
 0048EC8B    add         esi,ecx
 0048EC8D    mov         ecx,dword ptr [ebp-4]
 0048EC90    test        byte ptr [ecx+1AE],1
>0048EC97    je          0048EC9C
 0048EC99    sub         dword ptr [ebp-2C],esi
 0048EC9C    mov         ecx,dword ptr [ebp-4]
 0048EC9F    test        byte ptr [ecx+1AE],2
>0048ECA6    je          0048ECAB
 0048ECA8    sub         dword ptr [ebp-28],esi
 0048ECAB    mov         ecx,dword ptr [ebp-4]
 0048ECAE    test        byte ptr [ecx+1AE],4
>0048ECB5    je          0048ECBA
 0048ECB7    add         dword ptr [ebp-24],esi
 0048ECBA    mov         ecx,dword ptr [ebp-4]
 0048ECBD    test        byte ptr [ecx+1AE],8
>0048ECC4    je          0048ECC9
 0048ECC6    add         dword ptr [ebp-20],esi
 0048ECC9    mov         ecx,dword ptr [ebp-4]
 0048ECCC    movzx       ecx,byte ptr [ecx+1AE]
 0048ECD3    mov         ebx,dword ptr [ebp-4]
 0048ECD6    movzx       ebx,byte ptr [ebx+1B1]
 0048ECDD    or          ecx,dword ptr [ebx*4+785A90]
 0048ECE4    mov         ebx,dword ptr [ebp-4]
 0048ECE7    movzx       ebx,byte ptr [ebx+1E9]
 0048ECEE    or          ecx,dword ptr [ebx*4+785AA0]
 0048ECF5    or          ecx,2000
 0048ECFB    push        ecx
 0048ECFC    and         edx,7F
 0048ECFF    mov         edx,dword ptr [edx*4+785A70]
 0048ED06    and         eax,7F
 0048ED09    or          edx,dword ptr [eax*4+785A80]
 0048ED10    push        edx
 0048ED11    lea         eax,[ebp-2C]
 0048ED14    push        eax
 0048ED15    mov         eax,dword ptr [ebp-0C]
 0048ED18    push        eax
 0048ED19    call        user32.DrawEdge
 0048ED1E    mov         eax,dword ptr [ebp-20]
 0048ED21    push        eax
 0048ED22    mov         eax,dword ptr [ebp-24]
 0048ED25    push        eax
 0048ED26    mov         eax,dword ptr [ebp-28]
 0048ED29    push        eax
 0048ED2A    mov         eax,dword ptr [ebp-2C]
 0048ED2D    push        eax
 0048ED2E    mov         eax,dword ptr [ebp-0C]
 0048ED31    push        eax
 0048ED32    call        gdi32.IntersectClipRect
 0048ED37    lea         esi,[ebp-3C]
 0048ED3A    lea         edi,[ebp-2C]
 0048ED3D    movs        dword ptr [edi],dword ptr [esi]
 0048ED3E    movs        dword ptr [edi],dword ptr [esi]
 0048ED3F    movs        dword ptr [edi],dword ptr [esi]
 0048ED40    movs        dword ptr [edi],dword ptr [esi]
 0048ED41    mov         eax,dword ptr [ebp-8]
 0048ED44    mov         eax,dword ptr [eax+4]
 0048ED47    cmp         eax,1
>0048ED4A    jne         0048ED60
 0048ED4C    mov         ecx,dword ptr [ebp-28]
 0048ED4F    neg         ecx
 0048ED51    mov         edx,dword ptr [ebp-2C]
 0048ED54    neg         edx
 0048ED56    lea         eax,[ebp-2C]
 0048ED59    call        OffsetRect
>0048ED5E    jmp         0048EDA3
 0048ED60    lea         edx,[ebp-1C]
 0048ED63    push        edx
 0048ED64    mov         edx,dword ptr [ebp-8]
 0048ED67    push        eax
 0048ED68    call        gdi32.GetRgnBox
 0048ED6D    push        2
 0048ED6F    lea         eax,[ebp-1C]
 0048ED72    push        eax
 0048ED73    mov         eax,dword ptr [ebp-4]
 0048ED76    call        TWinControl.GetHandle
 0048ED7B    push        eax
 0048ED7C    push        0
 0048ED7E    call        user32.MapWindowPoints
 0048ED83    lea         ecx,[ebp-1C]
 0048ED86    lea         edx,[ebp-2C]
 0048ED89    lea         eax,[ebp-2C]
 0048ED8C    call        IntersectRect
 0048ED91    mov         ecx,dword ptr [ebp-38]
 0048ED94    neg         ecx
 0048ED96    mov         edx,dword ptr [ebp-3C]
 0048ED99    neg         edx
 0048ED9B    lea         eax,[ebp-2C]
 0048ED9E    call        OffsetRect
 0048EDA3    mov         eax,dword ptr [ebp-4]
 0048EDA6    mov         eax,dword ptr [eax+1C0]
 0048EDAC    call        TBrush.GetHandle
 0048EDB1    push        eax
 0048EDB2    lea         eax,[ebp-2C]
 0048EDB5    push        eax
 0048EDB6    mov         eax,dword ptr [ebp-0C]
 0048EDB9    push        eax
 0048EDBA    call        user32.FillRect
 0048EDBF    xor         eax,eax
 0048EDC1    pop         edx
 0048EDC2    pop         ecx
 0048EDC3    pop         ecx
 0048EDC4    mov         dword ptr fs:[eax],edx
 0048EDC7    push        48EDE6
 0048EDCC    mov         eax,dword ptr [ebp-0C]
 0048EDCF    push        eax
 0048EDD0    mov         eax,dword ptr [ebp-4]
 0048EDD3    call        TWinControl.GetHandle
 0048EDD8    push        eax
 0048EDD9    call        user32.ReleaseDC
 0048EDDE    ret
>0048EDDF    jmp         @HandleFinally
>0048EDE4    jmp         0048EDCC
 0048EDE6    mov         edx,dword ptr [ebp-8]
 0048EDE9    mov         eax,dword ptr [ebp-4]
 0048EDEC    mov         ecx,dword ptr [eax]
 0048EDEE    call        dword ptr [ecx-10]
 0048EDF1    mov         eax,dword ptr [ebp-4]
 0048EDF4    call        ThemeControl
 0048EDF9    test        al,al
>0048EDFB    je          0048EE15
 0048EDFD    mov         eax,dword ptr [ebp-4]
 0048EE00    test        byte ptr [eax+52],2
>0048EE04    je          0048EE15
 0048EE06    call        ThemeServices
 0048EE0B    xor         ecx,ecx
 0048EE0D    mov         edx,dword ptr [ebp-4]
 0048EE10    call        TThemeServices.PaintBorder
 0048EE15    pop         edi
 0048EE16    pop         esi
 0048EE17    pop         ebx
 0048EE18    mov         esp,ebp
 0048EE1A    pop         ebp
 0048EE1B    ret
*}
end;

//0048EE1C
function TWinControl.FindChildControl(ControlName:string):TControl;
begin
{*
 0048EE1C    push        ebx
 0048EE1D    push        esi
 0048EE1E    push        edi
 0048EE1F    push        ebp
 0048EE20    push        ecx
 0048EE21    mov         ebp,edx
 0048EE23    mov         ebx,eax
 0048EE25    xor         eax,eax
 0048EE27    mov         dword ptr [esp],eax
 0048EE2A    mov         eax,dword ptr [ebx+1E0]
 0048EE30    test        eax,eax
>0048EE32    je          0048EE70
 0048EE34    mov         edi,dword ptr [eax+8]
 0048EE37    dec         edi
 0048EE38    test        edi,edi
>0048EE3A    jl          0048EE70
 0048EE3C    inc         edi
 0048EE3D    xor         esi,esi
 0048EE3F    mov         edx,esi
 0048EE41    mov         eax,dword ptr [ebx+1E0]
 0048EE47    call        TList.Get
 0048EE4C    mov         eax,dword ptr [eax+8]
 0048EE4F    mov         edx,ebp
 0048EE51    call        CompareText
 0048EE56    test        eax,eax
>0048EE58    jne         0048EE6C
 0048EE5A    mov         edx,esi
 0048EE5C    mov         eax,dword ptr [ebx+1E0]
 0048EE62    call        TList.Get
 0048EE67    mov         dword ptr [esp],eax
>0048EE6A    jmp         0048EE70
 0048EE6C    inc         esi
 0048EE6D    dec         edi
>0048EE6E    jne         0048EE3F
 0048EE70    mov         eax,dword ptr [esp]
 0048EE73    pop         edx
 0048EE74    pop         ebp
 0048EE75    pop         edi
 0048EE76    pop         esi
 0048EE77    pop         ebx
 0048EE78    ret
*}
end;

//0048EE7C
procedure TWinControl.WMContextMenu(var Message:TWMContextMenu);
begin
{*
 0048EE7C    push        ebx
 0048EE7D    push        esi
 0048EE7E    push        edi
 0048EE7F    push        ebp
 0048EE80    add         esp,0FFFFFFD8
 0048EE83    mov         ebx,edx
 0048EE85    mov         esi,eax
 0048EE87    cmp         dword ptr [ebx+0C],0
>0048EE8B    jne         0048EF2B
 0048EE91    mov         eax,dword ptr [ebx+8]
 0048EE94    mov         dword ptr [esp],eax
 0048EE97    movsx       eax,word ptr [esp]
 0048EE9B    mov         dword ptr [esp+4],eax
 0048EE9F    movsx       eax,word ptr [esp+2]
 0048EEA4    mov         dword ptr [esp+8],eax
 0048EEA8    push        0
 0048EEAA    push        0
 0048EEAC    lea         ecx,[esp+28]
 0048EEB0    lea         edx,[esp+0C]
 0048EEB4    mov         eax,esi
 0048EEB6    call        TControl.ScreenToClient
 0048EEBB    lea         edx,[esp+28]
 0048EEBF    xor         ecx,ecx
 0048EEC1    mov         eax,esi
 0048EEC3    call        TWinControl.ControlAtPos
 0048EEC8    mov         edi,eax
 0048EECA    test        edi,edi
>0048EECC    je          0048EF1C
 0048EECE    mov         eax,dword ptr [ebx+8]
 0048EED1    mov         dword ptr [esp+0C],eax
 0048EED5    movsx       eax,word ptr [esp+0C]
 0048EEDA    mov         dword ptr [esp+10],eax
 0048EEDE    movsx       eax,word ptr [esp+0E]
 0048EEE3    mov         dword ptr [esp+14],eax
 0048EEE7    mov         eax,dword ptr [esp+10]
 0048EEEB    mov         dword ptr [esp+18],eax
 0048EEEF    mov         eax,dword ptr [esp+14]
 0048EEF3    mov         dword ptr [esp+1C],eax
 0048EEF7    mov         ebp,dword ptr [esp+18]
 0048EEFB    and         ebp,0FFFF
 0048EF01    mov         eax,dword ptr [esp+1C]
 0048EF05    shl         eax,10
 0048EF08    or          ebp,eax
 0048EF0A    push        ebp
 0048EF0B    xor         ecx,ecx
 0048EF0D    mov         edx,7B
 0048EF12    mov         eax,edi
 0048EF14    call        TControl.Perform
 0048EF19    mov         dword ptr [ebx+0C],eax
 0048EF1C    cmp         dword ptr [ebx+0C],0
>0048EF20    jne         0048EF2B
 0048EF22    mov         edx,ebx
 0048EF24    mov         eax,esi
 0048EF26    call        TControl.WMContextMenu
 0048EF2B    add         esp,28
 0048EF2E    pop         ebp
 0048EF2F    pop         edi
 0048EF30    pop         esi
 0048EF31    pop         ebx
 0048EF32    ret
*}
end;

//0048EF34
procedure TWinControl.UpdateUIState(CharCode:Word);
begin
{*
 0048EF34    push        ebx
 0048EF35    mov         ebx,edx
 0048EF37    mov         dl,1
 0048EF39    call        GetParentForm
 0048EF3E    test        eax,eax
>0048EF40    je          0048EF7B
 0048EF42    sub         bx,9
>0048EF46    je          0048EF57
 0048EF48    sub         bx,9
>0048EF4C    je          0048EF6A
 0048EF4E    add         ebx,0FFFFFFED
 0048EF51    sub         bx,4
>0048EF55    jae         0048EF7B
 0048EF57    push        0
 0048EF59    mov         ecx,10002
 0048EF5E    mov         edx,127
 0048EF63    call        TControl.Perform
>0048EF68    jmp         0048EF7B
 0048EF6A    push        0
 0048EF6C    mov         ecx,20002
 0048EF71    mov         edx,127
 0048EF76    call        TControl.Perform
 0048EF7B    pop         ebx
 0048EF7C    ret
*}
end;

//0048EF80
procedure TWinControl.WMPrintClient(var Message:TWMPrintClient);
begin
{*
 0048EF80    push        ebp
 0048EF81    mov         ebp,esp
 0048EF83    add         esp,0FFFFFFF0
 0048EF86    mov         dword ptr [ebp-8],edx
 0048EF89    mov         dword ptr [ebp-4],eax
 0048EF8C    mov         eax,dword ptr [ebp-4]
 0048EF8F    test        byte ptr [eax+56],1
 0048EF93    setne       al
 0048EF96    mov         byte ptr [ebp-0D],al
 0048EF99    mov         eax,dword ptr [ebp-4]
 0048EF9C    or          dword ptr [eax+54],10000
 0048EFA3    xor         eax,eax
 0048EFA5    push        ebp
 0048EFA6    push        48F04F
 0048EFAB    push        dword ptr fs:[eax]
 0048EFAE    mov         dword ptr fs:[eax],esp
 0048EFB1    mov         eax,dword ptr [ebp-8]
 0048EFB4    cmp         dword ptr [eax+0C],1
>0048EFB8    je          0048F026
 0048EFBA    mov         eax,dword ptr [ebp-8]
 0048EFBD    test        byte ptr [eax+8],1
>0048EFC1    je          0048EFCC
 0048EFC3    mov         eax,dword ptr [ebp-4]
 0048EFC6    cmp         byte ptr [eax+59],0
>0048EFCA    je          0048F019
 0048EFCC    mov         eax,dword ptr [ebp-8]
 0048EFCF    mov         eax,dword ptr [eax+4]
 0048EFD2    push        eax
 0048EFD3    call        gdi32.SaveDC
 0048EFD8    mov         dword ptr [ebp-0C],eax
 0048EFDB    xor         eax,eax
 0048EFDD    push        ebp
 0048EFDE    push        48F012
 0048EFE3    push        dword ptr fs:[eax]
 0048EFE6    mov         dword ptr fs:[eax],esp
 0048EFE9    mov         edx,dword ptr [ebp-8]
 0048EFEC    mov         eax,dword ptr [ebp-4]
 0048EFEF    call        TWinControl.PaintHandler
 0048EFF4    xor         eax,eax
 0048EFF6    pop         edx
 0048EFF7    pop         ecx
 0048EFF8    pop         ecx
 0048EFF9    mov         dword ptr fs:[eax],edx
 0048EFFC    push        48F031
 0048F001    mov         eax,dword ptr [ebp-0C]
 0048F004    push        eax
 0048F005    mov         eax,dword ptr [ebp-8]
 0048F008    mov         eax,dword ptr [eax+4]
 0048F00B    push        eax
 0048F00C    call        gdi32.RestoreDC
 0048F011    ret
>0048F012    jmp         @HandleFinally
>0048F017    jmp         0048F001
 0048F019    mov         edx,dword ptr [ebp-8]
 0048F01C    mov         eax,dword ptr [ebp-4]
 0048F01F    mov         ecx,dword ptr [eax]
 0048F021    call        dword ptr [ecx-10]
>0048F024    jmp         0048F031
 0048F026    mov         edx,dword ptr [ebp-8]
 0048F029    mov         eax,dword ptr [ebp-4]
 0048F02C    mov         ecx,dword ptr [eax]
 0048F02E    call        dword ptr [ecx-10]
 0048F031    xor         eax,eax
 0048F033    pop         edx
 0048F034    pop         ecx
 0048F035    pop         ecx
 0048F036    mov         dword ptr fs:[eax],edx
 0048F039    push        48F056
 0048F03E    cmp         byte ptr [ebp-0D],0
>0048F042    jne         0048F04E
 0048F044    mov         eax,dword ptr [ebp-4]
 0048F047    and         dword ptr [eax+54],0FFFEFFFF
 0048F04E    ret
>0048F04F    jmp         @HandleFinally
>0048F054    jmp         0048F03E
 0048F056    mov         esp,ebp
 0048F058    pop         ebp
 0048F059    ret
*}
end;

//0048F05C
procedure TWinControl.WMGesture(var Message:TMessage);
begin
{*
 0048F05C    push        ebp
 0048F05D    mov         ebp,esp
 0048F05F    add         esp,0FFFFFF5C
 0048F065    push        ebx
 0048F066    push        esi
 0048F067    mov         dword ptr [ebp-8],edx
 0048F06A    mov         dword ptr [ebp-4],eax
 0048F06D    mov         eax,dword ptr [ebp-4]
 0048F070    cmp         dword ptr [eax+250],0
>0048F077    jne         0048F0A6
 0048F079    mov         eax,dword ptr [ebp-8]
 0048F07C    mov         eax,dword ptr [eax+8]
 0048F07F    push        eax
 0048F080    mov         eax,dword ptr [ebp-8]
 0048F083    mov         eax,dword ptr [eax+4]
 0048F086    push        eax
 0048F087    mov         eax,dword ptr [ebp-8]
 0048F08A    mov         eax,dword ptr [eax]
 0048F08C    push        eax
 0048F08D    mov         eax,dword ptr [ebp-4]
 0048F090    call        TWinControl.GetHandle
 0048F095    push        eax
 0048F096    call        user32.DefWindowProcW
 0048F09B    mov         edx,dword ptr [ebp-8]
 0048F09E    mov         dword ptr [edx+0C],eax
>0048F0A1    jmp         0048F3EB
 0048F0A6    lea         eax,[ebp-78]
 0048F0A9    xor         ecx,ecx
 0048F0AB    mov         edx,30
 0048F0B0    call        @FillChar
 0048F0B5    mov         dword ptr [ebp-78],30
 0048F0BC    lea         eax,[ebp-78]
 0048F0BF    push        eax
 0048F0C0    mov         eax,dword ptr [ebp-8]
 0048F0C3    mov         eax,dword ptr [eax+8]
 0048F0C6    push        eax
 0048F0C7    call        GetGestureInfo
 0048F0CC    test        eax,eax
>0048F0CE    je          0048F3EB
 0048F0D4    xor         edx,edx
 0048F0D6    push        ebp
 0048F0D7    push        48F3E4
 0048F0DC    push        dword ptr fs:[edx]
 0048F0DF    mov         dword ptr fs:[edx],esp
 0048F0E2    lea         eax,[ebp-98]
 0048F0E8    xor         ecx,ecx
 0048F0EA    mov         edx,20
 0048F0EF    call        @FillChar
 0048F0F4    movzx       eax,word ptr [ebp-70]
 0048F0F8    add         ax,100
 0048F0FC    mov         word ptr [ebp-98],ax
 0048F103    movzx       eax,word ptr [ebp-98]
 0048F10A    cmp         ax,101
>0048F10E    je          0048F38B
 0048F114    cmp         ax,102
>0048F118    je          0048F38B
 0048F11E    mov         eax,dword ptr [ebp-4]
 0048F121    mov         ebx,dword ptr [eax+250]
>0048F127    jmp         0048F12B
 0048F129    mov         ebx,eax
 0048F12B    mov         eax,dword ptr [ebx+34]
 0048F12E    test        eax,eax
>0048F130    je          0048F163
 0048F132    mov         edx,dword ptr [ebx+0AC]
 0048F138    test        byte ptr [edx+11],10
>0048F13C    je          0048F163
 0048F13E    movsx       edx,word ptr [ebp-98]
 0048F145    movzx       edx,byte ptr [edx+7859A5]
 0048F14C    mov         ecx,dword ptr [ebx+0AC]
 0048F152    cmp         dl,7
>0048F155    ja          0048F161
 0048F157    and         edx,7F
 0048F15A    movzx       ecx,byte ptr [ecx+10]
 0048F15E    bt          ecx,edx
>0048F161    jae         0048F129
 0048F163    movsx       eax,word ptr [ebp-68]
 0048F167    mov         dword ptr [ebp-18],eax
 0048F16A    movsx       eax,word ptr [ebp-66]
 0048F16E    mov         dword ptr [ebp-14],eax
 0048F171    mov         eax,dword ptr [ebp-18]
 0048F174    mov         dword ptr [ebp-10],eax
 0048F177    mov         eax,dword ptr [ebp-14]
 0048F17A    mov         dword ptr [ebp-0C],eax
 0048F17D    lea         eax,[ebp-10]
 0048F180    push        eax
 0048F181    mov         eax,dword ptr [ebp-4]
 0048F184    mov         eax,dword ptr [eax+258]
 0048F18A    push        eax
 0048F18B    call        PhysicalToLogicalPoint
 0048F190    lea         ecx,[ebp-0A0]
 0048F196    lea         edx,[ebp-10]
 0048F199    mov         eax,ebx
 0048F19B    call        TControl.ScreenToClient
 0048F1A0    mov         eax,dword ptr [ebp-0A0]
 0048F1A6    mov         dword ptr [ebp-94],eax
 0048F1AC    mov         eax,dword ptr [ebp-9C]
 0048F1B2    mov         dword ptr [ebp-90],eax
 0048F1B8    movzx       eax,byte ptr ds:[48F3F4]
 0048F1BF    mov         byte ptr [ebp-8C],al
 0048F1C5    mov         esi,dword ptr [ebp-74]
 0048F1C8    mov         eax,esi
 0048F1CA    and         eax,1
 0048F1CD    cmp         eax,1
>0048F1D0    jne         0048F1D9
 0048F1D2    or          byte ptr [ebp-8C],1
 0048F1D9    mov         eax,esi
 0048F1DB    and         eax,2
 0048F1DE    cmp         eax,2
>0048F1E1    jne         0048F1EA
 0048F1E3    or          byte ptr [ebp-8C],2
 0048F1EA    and         esi,4
 0048F1ED    cmp         esi,4
>0048F1F0    jne         0048F1F9
 0048F1F2    or          byte ptr [ebp-8C],4
 0048F1F9    movsx       eax,word ptr [ebp-98]
 0048F200    add         eax,0FFFFFEFD
 0048F205    cmp         eax,4
>0048F208    ja          0048F33D
 0048F20E    jmp         dword ptr [eax*4+48F215]
 0048F20E    dd          0048F24F
 0048F20E    dd          0048F229
 0048F20E    dd          0048F2EF
 0048F20E    dd          0048F24F
 0048F20E    dd          0048F25A
 0048F229    mov         eax,dword ptr [ebp-58]
 0048F22C    mov         dword ptr [ebp-7C],eax
 0048F22F    mov         eax,dword ptr [ebp-54]
 0048F232    xor         edx,edx
 0048F234    mov         word ptr [ebp-1C],ax
 0048F238    mov         eax,dword ptr [ebp-54]
 0048F23B    xor         edx,edx
 0048F23D    shr         eax,10
 0048F240    mov         word ptr [ebp-1A],ax
 0048F244    mov         eax,dword ptr [ebp-1C]
 0048F247    mov         dword ptr [ebp-80],eax
>0048F24A    jmp         0048F33D
 0048F24F    mov         eax,dword ptr [ebp-58]
 0048F252    mov         dword ptr [ebp-7C],eax
>0048F255    jmp         0048F33D
 0048F25A    mov         eax,dword ptr [ebp-58]
 0048F25D    mov         dword ptr [ebp-0A4],eax
 0048F263    mov         eax,dword ptr [ebp-0A4]
 0048F269    mov         dword ptr [ebp-20],eax
 0048F26C    movsx       eax,word ptr [ebp-20]
 0048F270    mov         dword ptr [ebp-28],eax
 0048F273    movsx       eax,word ptr [ebp-1E]
 0048F277    mov         dword ptr [ebp-24],eax
 0048F27A    mov         eax,dword ptr [ebp-28]
 0048F27D    mov         dword ptr [ebp-10],eax
 0048F280    mov         eax,dword ptr [ebp-24]
 0048F283    mov         dword ptr [ebp-0C],eax
 0048F286    movsx       eax,word ptr [ebp-68]
 0048F28A    add         dword ptr [ebp-10],eax
 0048F28D    movsx       eax,word ptr [ebp-66]
 0048F291    add         dword ptr [ebp-0C],eax
 0048F294    mov         eax,ebx
 0048F296    mov         edx,dword ptr ds:[47C4E8];TWinControl
 0048F29C    call        @IsClass
 0048F2A1    test        al,al
>0048F2A3    je          0048F2B8
 0048F2A5    lea         eax,[ebp-10]
 0048F2A8    push        eax
 0048F2A9    mov         eax,ebx
 0048F2AB    call        TWinControl.GetHandle
 0048F2B0    push        eax
 0048F2B1    call        PhysicalToLogicalPoint
>0048F2B6    jmp         0048F2CA
 0048F2B8    lea         eax,[ebp-10]
 0048F2BB    push        eax
 0048F2BC    mov         eax,dword ptr [ebx+34]
 0048F2BF    call        TWinControl.GetHandle
 0048F2C4    push        eax
 0048F2C5    call        PhysicalToLogicalPoint
 0048F2CA    lea         ecx,[ebp-30]
 0048F2CD    lea         edx,[ebp-10]
 0048F2D0    mov         eax,ebx
 0048F2D2    call        TControl.ScreenToClient
 0048F2D7    movzx       eax,word ptr [ebp-30]
 0048F2DB    mov         word ptr [ebp-34],ax
 0048F2DF    movzx       eax,word ptr [ebp-2C]
 0048F2E3    mov         word ptr [ebp-32],ax
 0048F2E7    mov         eax,dword ptr [ebp-34]
 0048F2EA    mov         dword ptr [ebp-7C],eax
>0048F2ED    jmp         0048F33D
 0048F2EF    movzx       eax,word ptr [ebp-58]
 0048F2F3    mov         dword ptr [ebp-0A4],eax
 0048F2F9    fild        dword ptr [ebp-0A4]
 0048F2FF    fdiv        dword ptr ds:[48F3F8]
 0048F305    fmul        dword ptr ds:[48F3FC]
 0048F30B    fld         tbyte ptr ds:[48F400]
 0048F311    fmulp       st(1),st
 0048F313    fld         tbyte ptr ds:[48F40C]
 0048F319    fsubp       st(1),st
 0048F31B    fstp        qword ptr [ebp-48]
 0048F31E    wait
 0048F31F    mov         eax,dword ptr [ebp-48]
 0048F322    mov         dword ptr [ebp-40],eax
 0048F325    mov         eax,dword ptr [ebp-44]
 0048F328    mov         dword ptr [ebp-3C],eax
 0048F32B    mov         eax,dword ptr [ebp-40]
 0048F32E    mov         dword ptr [ebp-88],eax
 0048F334    mov         eax,dword ptr [ebp-3C]
 0048F337    mov         dword ptr [ebp-84],eax
 0048F33D    lea         eax,[ebp-98]
 0048F343    push        eax
 0048F344    xor         ecx,ecx
 0048F346    mov         edx,0B052
 0048F34B    mov         eax,ebx
 0048F34D    call        TControl.Perform
 0048F352    mov         esi,eax
 0048F354    mov         eax,dword ptr [ebp-8]
 0048F357    mov         dword ptr [eax+0C],esi
 0048F35A    mov         eax,dword ptr [ebp-8]
 0048F35D    dec         esi
>0048F35E    je          0048F3B4
 0048F360    mov         eax,dword ptr [ebp-8]
 0048F363    mov         eax,dword ptr [eax+8]
 0048F366    push        eax
 0048F367    mov         eax,dword ptr [ebp-8]
 0048F36A    mov         eax,dword ptr [eax+4]
 0048F36D    push        eax
 0048F36E    mov         eax,dword ptr [ebp-8]
 0048F371    mov         eax,dword ptr [eax]
 0048F373    push        eax
 0048F374    mov         eax,dword ptr [ebp-4]
 0048F377    mov         eax,dword ptr [eax+258]
 0048F37D    push        eax
 0048F37E    call        user32.DefWindowProcW
 0048F383    mov         edx,dword ptr [ebp-8]
 0048F386    mov         dword ptr [edx+0C],eax
>0048F389    jmp         0048F3B4
 0048F38B    mov         eax,dword ptr [ebp-8]
 0048F38E    mov         eax,dword ptr [eax+8]
 0048F391    push        eax
 0048F392    mov         eax,dword ptr [ebp-8]
 0048F395    mov         eax,dword ptr [eax+4]
 0048F398    push        eax
 0048F399    mov         eax,dword ptr [ebp-8]
 0048F39C    mov         eax,dword ptr [eax]
 0048F39E    push        eax
 0048F39F    mov         eax,dword ptr [ebp-4]
 0048F3A2    mov         eax,dword ptr [eax+258]
 0048F3A8    push        eax
 0048F3A9    call        user32.DefWindowProcW
 0048F3AE    mov         edx,dword ptr [ebp-8]
 0048F3B1    mov         dword ptr [edx+0C],eax
 0048F3B4    xor         eax,eax
 0048F3B6    pop         edx
 0048F3B7    pop         ecx
 0048F3B8    pop         ecx
 0048F3B9    mov         dword ptr fs:[eax],edx
 0048F3BC    push        48F3EB
 0048F3C1    mov         eax,dword ptr [ebp-8]
 0048F3C4    mov         eax,dword ptr [eax+8]
 0048F3C7    push        eax
 0048F3C8    call        CloseGestureInfoHandle
 0048F3CD    cmp         word ptr [ebp-98],102
>0048F3D6    jne         0048F3E3
 0048F3D8    mov         eax,dword ptr [ebp-4]
 0048F3DB    xor         edx,edx
 0048F3DD    mov         dword ptr [eax+250],edx
 0048F3E3    ret
>0048F3E4    jmp         @HandleFinally
>0048F3E9    jmp         0048F3C1
 0048F3EB    pop         esi
 0048F3EC    pop         ebx
 0048F3ED    mov         esp,ebp
 0048F3EF    pop         ebp
 0048F3F0    ret
*}
end;

//0048F44C
procedure TWinControl.WMGestureNotify(var Message:TWMGestureNotify);
begin
{*
 0048F44C    push        ebp
 0048F44D    mov         ebp,esp
 0048F44F    add         esp,0FFFFFFC8
 0048F452    push        ebx
 0048F453    push        esi
 0048F454    push        edi
 0048F455    xor         ecx,ecx
 0048F457    mov         dword ptr [ebp-4],ecx
 0048F45A    mov         dword ptr [ebp-8],edx
 0048F45D    mov         esi,eax
 0048F45F    xor         eax,eax
 0048F461    push        ebp
 0048F462    push        48F815
 0048F467    push        dword ptr fs:[eax]
 0048F46A    mov         dword ptr fs:[eax],esp
 0048F46D    mov         eax,dword ptr [ebp-8]
 0048F470    mov         eax,dword ptr [eax+8]
 0048F473    mov         eax,dword ptr [eax+0C]
 0048F476    mov         dword ptr [ebp-18],eax
 0048F479    movsx       eax,word ptr [ebp-18]
 0048F47D    mov         dword ptr [ebp-20],eax
 0048F480    movsx       eax,word ptr [ebp-16]
 0048F484    mov         dword ptr [ebp-1C],eax
 0048F487    mov         eax,dword ptr [ebp-20]
 0048F48A    mov         dword ptr [ebp-10],eax
 0048F48D    mov         eax,dword ptr [ebp-1C]
 0048F490    mov         dword ptr [ebp-0C],eax
 0048F493    lea         eax,[ebp-10]
 0048F496    push        eax
 0048F497    mov         eax,dword ptr [esi+258]
 0048F49D    push        eax
 0048F49E    call        PhysicalToLogicalPoint
 0048F4A3    lea         ecx,[ebp-28]
 0048F4A6    lea         edx,[ebp-10]
 0048F4A9    mov         eax,esi
 0048F4AB    call        TControl.ScreenToClient
 0048F4B0    mov         eax,dword ptr [ebp-28]
 0048F4B3    mov         dword ptr [ebp-10],eax
 0048F4B6    mov         eax,dword ptr [ebp-24]
 0048F4B9    mov         dword ptr [ebp-0C],eax
 0048F4BC    lea         edx,[ebp-38]
 0048F4BF    mov         eax,esi
 0048F4C1    mov         ecx,dword ptr [eax]
 0048F4C3    call        dword ptr [ecx+54]
 0048F4C6    lea         eax,[ebp-38]
 0048F4C9    lea         edx,[ebp-10]
 0048F4CC    call        PtInRect
 0048F4D1    test        al,al
>0048F4D3    jne         0048F52C
 0048F4D5    push        1
 0048F4D7    lea         eax,[ebp-4]
 0048F4DA    mov         ecx,1
 0048F4DF    mov         edx,dword ptr ds:[48F418];:TWinControl.:2
 0048F4E5    call        @DynArraySetLength
 0048F4EA    add         esp,4
 0048F4ED    mov         eax,dword ptr [ebp-4]
 0048F4F0    xor         edx,edx
 0048F4F2    mov         dword ptr [eax],edx
 0048F4F4    mov         eax,dword ptr [ebp-4]
 0048F4F7    xor         edx,edx
 0048F4F9    mov         dword ptr [eax+4],edx
 0048F4FC    mov         eax,dword ptr [ebp-4]
 0048F4FF    mov         dword ptr [eax+8],1
 0048F506    push        0C
 0048F508    mov         eax,dword ptr [ebp-4]
 0048F50B    push        eax
 0048F50C    push        1
 0048F50E    push        0
 0048F510    mov         eax,esi
 0048F512    call        TWinControl.GetHandle
 0048F517    push        eax
 0048F518    call        SetGestureConfig
 0048F51D    mov         eax,dword ptr [ebp-8]
 0048F520    mov         dword ptr [eax+0C],1
>0048F527    jmp         0048F7F9
 0048F52C    push        0
 0048F52E    push        0
 0048F530    lea         edx,[ebp-10]
 0048F533    mov         cl,1
 0048F535    mov         eax,esi
 0048F537    call        TWinControl.ControlAtPos
 0048F53C    mov         ebx,eax
 0048F53E    mov         dword ptr [esi+250],ebx
 0048F544    test        ebx,ebx
>0048F546    jne         0048F54E
 0048F548    mov         dword ptr [esi+250],esi
 0048F54E    mov         ebx,dword ptr [esi+250]
 0048F554    lea         ecx,[ebp-13]
 0048F557    lea         edx,[ebp-11]
 0048F55A    mov         eax,ebx
 0048F55C    mov         edi,dword ptr [eax]
 0048F55E    call        dword ptr [edi+48]
>0048F561    jmp         0048F5A1
 0048F563    mov         ebx,dword ptr [ebx+34]
 0048F566    lea         ecx,[ebp-14]
 0048F569    lea         edx,[ebp-12]
 0048F56C    mov         eax,ebx
 0048F56E    mov         edi,dword ptr [eax]
 0048F570    call        dword ptr [edi+48]
 0048F573    test        byte ptr [ebp-11],2
>0048F577    je          0048F58D
 0048F579    movzx       eax,byte ptr ds:[785AAD]
 0048F580    not         eax
 0048F582    and         al,byte ptr [ebp-14]
 0048F585    or          al,byte ptr [ebp-13]
 0048F588    mov         byte ptr [ebp-13],al
>0048F58B    jmp         0048F597
 0048F58D    movzx       eax,byte ptr [ebp-14]
 0048F591    or          al,byte ptr [ebp-13]
 0048F594    mov         byte ptr [ebp-13],al
 0048F597    movzx       eax,byte ptr [ebp-12]
 0048F59B    or          al,byte ptr [ebp-11]
 0048F59E    mov         byte ptr [ebp-11],al
 0048F5A1    cmp         dword ptr [ebx+34],0
>0048F5A5    je          0048F5B3
 0048F5A7    mov         eax,dword ptr [ebx+0AC]
 0048F5AD    test        byte ptr [eax+11],10
>0048F5B1    jne         0048F563
 0048F5B3    movzx       eax,byte ptr ds:[48F824]
 0048F5BA    cmp         al,byte ptr [ebp-11]
>0048F5BD    jne         0048F5F5
 0048F5BF    push        1
 0048F5C1    lea         eax,[ebp-4]
 0048F5C4    mov         ecx,1
 0048F5C9    mov         edx,dword ptr ds:[48F418];:TWinControl.:2
 0048F5CF    call        @DynArraySetLength
 0048F5D4    add         esp,4
 0048F5D7    mov         eax,dword ptr [ebp-4]
 0048F5DA    xor         edx,edx
 0048F5DC    mov         dword ptr [eax],edx
 0048F5DE    mov         eax,dword ptr [ebp-4]
 0048F5E1    xor         edx,edx
 0048F5E3    mov         dword ptr [eax+4],edx
 0048F5E6    mov         eax,dword ptr [ebp-4]
 0048F5E9    mov         dword ptr [eax+8],1
>0048F5F0    jmp         0048F7D1
 0048F5F5    push        5
 0048F5F7    lea         eax,[ebp-4]
 0048F5FA    mov         ecx,1
 0048F5FF    mov         edx,dword ptr ds:[48F418];:TWinControl.:2
 0048F605    call        @DynArraySetLength
 0048F60A    add         esp,4
 0048F60D    mov         eax,dword ptr [ebp-4]
 0048F610    xor         ecx,ecx
 0048F612    mov         edx,3C
 0048F617    call        @FillChar
 0048F61C    mov         eax,dword ptr [ebp-4]
 0048F61F    mov         dword ptr [eax],4
 0048F625    test        byte ptr [ebp-11],2
 0048F629    setne       al
 0048F62C    and         eax,7F
 0048F62F    mov         eax,dword ptr [eax*4+785AB0]
 0048F636    test        byte ptr [ebp-13],2
 0048F63A    setne       dl
 0048F63D    and         edx,7F
 0048F640    or          eax,dword ptr [edx*4+785AD8]
 0048F647    test        byte ptr [ebp-13],1
 0048F64B    setne       dl
 0048F64E    and         edx,7F
 0048F651    or          eax,dword ptr [edx*4+785AE0]
 0048F658    test        byte ptr [ebp-13],8
 0048F65C    setne       dl
 0048F65F    and         edx,7F
 0048F662    or          eax,dword ptr [edx*4+785AE8]
 0048F669    test        byte ptr [ebp-13],4
 0048F66D    setne       dl
 0048F670    and         edx,7F
 0048F673    or          eax,dword ptr [edx*4+785AF0]
 0048F67A    mov         edx,dword ptr [ebp-4]
 0048F67D    mov         dword ptr [edx+4],eax
 0048F680    test        byte ptr [ebp-11],2
 0048F684    setne       al
 0048F687    xor         al,1
 0048F689    and         eax,7F
 0048F68C    mov         eax,dword ptr [eax*4+785AB0]
 0048F693    test        byte ptr [ebp-13],2
 0048F697    setne       dl
 0048F69A    xor         dl,1
 0048F69D    and         edx,7F
 0048F6A0    or          eax,dword ptr [edx*4+785AD8]
 0048F6A7    test        byte ptr [ebp-13],1
 0048F6AB    setne       dl
 0048F6AE    xor         dl,1
 0048F6B1    and         edx,7F
 0048F6B4    or          eax,dword ptr [edx*4+785AE0]
 0048F6BB    test        byte ptr [ebp-13],8
 0048F6BF    setne       dl
 0048F6C2    xor         dl,1
 0048F6C5    and         edx,7F
 0048F6C8    or          eax,dword ptr [edx*4+785AE8]
 0048F6CF    test        byte ptr [ebp-13],4
 0048F6D3    setne       dl
 0048F6D6    xor         dl,1
 0048F6D9    and         edx,7F
 0048F6DC    or          eax,dword ptr [edx*4+785AF0]
 0048F6E3    mov         edx,dword ptr [ebp-4]
 0048F6E6    mov         dword ptr [edx+8],eax
 0048F6E9    mov         eax,dword ptr [ebp-4]
 0048F6EC    mov         dword ptr [eax+0C],3
 0048F6F3    test        byte ptr [ebp-11],1
 0048F6F7    setne       al
 0048F6FA    and         eax,7F
 0048F6FD    mov         eax,dword ptr [eax*4+785AB8]
 0048F704    mov         edx,dword ptr [ebp-4]
 0048F707    mov         dword ptr [edx+10],eax
 0048F70A    test        byte ptr [ebp-11],1
 0048F70E    setne       al
 0048F711    xor         al,1
 0048F713    and         eax,7F
 0048F716    mov         eax,dword ptr [eax*4+785AB8]
 0048F71D    mov         edx,dword ptr [ebp-4]
 0048F720    mov         dword ptr [edx+14],eax
 0048F723    mov         eax,dword ptr [ebp-4]
 0048F726    mov         dword ptr [eax+18],5
 0048F72D    test        byte ptr [ebp-11],4
 0048F731    setne       al
 0048F734    and         eax,7F
 0048F737    mov         eax,dword ptr [eax*4+785AC0]
 0048F73E    mov         edx,dword ptr [ebp-4]
 0048F741    mov         dword ptr [edx+1C],eax
 0048F744    test        byte ptr [ebp-11],4
 0048F748    setne       al
 0048F74B    xor         al,1
 0048F74D    and         eax,7F
 0048F750    mov         eax,dword ptr [eax*4+785AC0]
 0048F757    mov         edx,dword ptr [ebp-4]
 0048F75A    mov         dword ptr [edx+20],eax
 0048F75D    mov         eax,dword ptr [ebp-4]
 0048F760    mov         dword ptr [eax+24],6
 0048F767    test        byte ptr [ebp-11],8
 0048F76B    setne       al
 0048F76E    and         eax,7F
 0048F771    mov         eax,dword ptr [eax*4+785AD0]
 0048F778    mov         edx,dword ptr [ebp-4]
 0048F77B    mov         dword ptr [edx+28],eax
 0048F77E    test        byte ptr [ebp-11],8
 0048F782    setne       al
 0048F785    xor         al,1
 0048F787    and         eax,7F
 0048F78A    mov         eax,dword ptr [eax*4+785AD0]
 0048F791    mov         edx,dword ptr [ebp-4]
 0048F794    mov         dword ptr [edx+2C],eax
 0048F797    mov         eax,dword ptr [ebp-4]
 0048F79A    mov         dword ptr [eax+30],7
 0048F7A1    test        byte ptr [ebp-11],10
 0048F7A5    setne       al
 0048F7A8    and         eax,7F
 0048F7AB    mov         eax,dword ptr [eax*4+785AC8]
 0048F7B2    mov         edx,dword ptr [ebp-4]
 0048F7B5    mov         dword ptr [edx+34],eax
 0048F7B8    test        byte ptr [ebp-11],10
 0048F7BC    setne       al
 0048F7BF    xor         al,1
 0048F7C1    and         eax,7F
 0048F7C4    mov         eax,dword ptr [eax*4+785AC8]
 0048F7CB    mov         edx,dword ptr [ebp-4]
 0048F7CE    mov         dword ptr [edx+38],eax
 0048F7D1    push        0C
 0048F7D3    mov         eax,dword ptr [ebp-4]
 0048F7D6    push        eax
 0048F7D7    mov         eax,dword ptr [ebp-4]
 0048F7DA    call        @DynArrayLength
 0048F7DF    push        eax
 0048F7E0    push        0
 0048F7E2    mov         eax,esi
 0048F7E4    call        TWinControl.GetHandle
 0048F7E9    push        eax
 0048F7EA    call        SetGestureConfig
 0048F7EF    mov         eax,dword ptr [ebp-8]
 0048F7F2    mov         dword ptr [eax+0C],1
 0048F7F9    xor         eax,eax
 0048F7FB    pop         edx
 0048F7FC    pop         ecx
 0048F7FD    pop         ecx
 0048F7FE    mov         dword ptr fs:[eax],edx
 0048F801    push        48F81C
 0048F806    lea         eax,[ebp-4]
 0048F809    mov         edx,dword ptr ds:[48F418];:TWinControl.:2
 0048F80F    call        @DynArrayClear
 0048F814    ret
>0048F815    jmp         @HandleFinally
>0048F81A    jmp         0048F806
 0048F81C    pop         edi
 0048F81D    pop         esi
 0048F81E    pop         ebx
 0048F81F    mov         esp,ebp
 0048F821    pop         ebp
 0048F822    ret
*}
end;

//0048F828
procedure TWinControl.WMTabletQuerySystemGestureStatus(var Message:TMessage);
begin
{*
 0048F828    push        ebx
 0048F829    push        esi
 0048F82A    push        edi
 0048F82B    add         esp,0FFFFFFE8
 0048F82E    mov         edi,edx
 0048F830    mov         ebx,eax
 0048F832    movzx       eax,word ptr [edi+8]
 0048F836    movzx       edx,word ptr [edi+0A]
 0048F83A    mov         dword ptr [esp+8],eax
 0048F83E    mov         dword ptr [esp+0C],edx
 0048F842    mov         eax,dword ptr [esp+8]
 0048F846    mov         dword ptr [esp],eax
 0048F849    mov         eax,dword ptr [esp+0C]
 0048F84D    mov         dword ptr [esp+4],eax
 0048F851    push        esp
 0048F852    mov         eax,dword ptr [ebx+258]
 0048F858    push        eax
 0048F859    call        PhysicalToLogicalPoint
 0048F85E    lea         ecx,[esp+10]
 0048F862    mov         edx,esp
 0048F864    mov         eax,ebx
 0048F866    call        TControl.ScreenToClient
 0048F86B    mov         eax,dword ptr [esp+10]
 0048F86F    mov         dword ptr [esp],eax
 0048F872    mov         eax,dword ptr [esp+14]
 0048F876    mov         dword ptr [esp+4],eax
 0048F87A    push        0
 0048F87C    push        0
 0048F87E    lea         edx,[esp+8]
 0048F882    mov         cl,1
 0048F884    mov         eax,ebx
 0048F886    call        TWinControl.ControlAtPos
 0048F88B    mov         esi,eax
 0048F88D    test        esi,esi
>0048F88F    jne         0048F893
 0048F891    mov         esi,ebx
 0048F893    mov         dword ptr [edi+0C],198319
 0048F89A    xor         eax,eax
 0048F89C    mov         edx,785AF8
 0048F8A1    mov         ecx,dword ptr [esi+0AC]
 0048F8A7    mov         ebx,eax
 0048F8A9    cmp         bl,0F
>0048F8AC    ja          0048F8B6
 0048F8AE    and         ebx,7F
 0048F8B1    bt          word ptr [ecx+1E],bx
>0048F8B6    jae         0048F8BF
 0048F8B8    mov         ecx,dword ptr [edx]
 0048F8BA    not         ecx
 0048F8BC    and         dword ptr [edi+0C],ecx
 0048F8BF    inc         eax
 0048F8C0    add         edx,4
 0048F8C3    cmp         al,9
>0048F8C5    jne         0048F8A1
 0048F8C7    add         esp,18
 0048F8CA    pop         edi
 0048F8CB    pop         esi
 0048F8CC    pop         ebx
 0048F8CD    ret
*}
end;

//0048F8D0
function TWinControl.GetParentBackground:Boolean;
begin
{*
 0048F8D0    test        byte ptr [eax+52],4
 0048F8D4    setne       al
 0048F8D7    ret
*}
end;

//0048F8D8
procedure TWinControl.SetParentBackground(Value:Boolean);
begin
{*
 0048F8D8    push        esi
 0048F8D9    mov         esi,eax
 0048F8DB    test        byte ptr [esi+52],4
 0048F8DF    setne       al
 0048F8E2    cmp         dl,al
>0048F8E4    je          0048F90E
 0048F8E6    test        dl,dl
>0048F8E8    je          0048F8F7
 0048F8EA    mov         eax,[0048F910]
 0048F8EF    or          eax,dword ptr [esi+50]
 0048F8F2    mov         dword ptr [esi+50],eax
>0048F8F5    jmp         0048F904
 0048F8F7    mov         eax,[0048F910]
 0048F8FC    not         eax
 0048F8FE    and         eax,dword ptr [esi+50]
 0048F901    mov         dword ptr [esi+50],eax
 0048F904    mov         eax,esi
 0048F906    mov         edx,dword ptr [eax]
 0048F908    call        dword ptr [edx+90]
 0048F90E    pop         esi
 0048F90F    ret
*}
end;

//0048F914
procedure TWinControl.CMTextChanged(var Message:TMessage);
begin
{*
 0048F914    push        esi
 0048F915    mov         esi,eax
 0048F917    mov         eax,esi
 0048F919    mov         ecx,dword ptr [eax]
 0048F91B    call        dword ptr [ecx-10]
 0048F91E    xor         edx,edx
 0048F920    mov         eax,esi
 0048F922    call        TWinControl.InvalidateDockHostSite
 0048F927    pop         esi
 0048F928    ret
*}
end;

//0048F92C
procedure TWinControl.InvalidateDockHostSite(FocusLost:Boolean);
begin
{*
 0048F92C    push        esi
 0048F92D    mov         esi,eax
 0048F92F    mov         ecx,dword ptr [eax+34]
>0048F932    jmp         0048F939
 0048F934    mov         esi,ecx
 0048F936    mov         ecx,dword ptr [ecx+34]
 0048F939    cmp         dword ptr [esi+90],0
>0048F940    jne         0048F946
 0048F942    test        ecx,ecx
>0048F944    jne         0048F934
 0048F946    test        esi,esi
>0048F948    je          0048F95C
 0048F94A    and         edx,7F
 0048F94D    push        edx
 0048F94E    mov         ecx,eax
 0048F950    mov         eax,esi
 0048F952    mov         edx,0B046
 0048F957    call        TControl.SendDockNotification
 0048F95C    pop         esi
 0048F95D    ret
*}
end;

//0048F960
function TWinControl.DockReplaceDockClient(Client:TControl; NewDockSite:TWinControl; DropControl:TControl; ControlSide:TAlign; ReplacementClient:TControl):Boolean;
begin
{*
 0048F960    push        ebp
 0048F961    mov         ebp,esp
 0048F963    xor         eax,eax
 0048F965    pop         ebp
 0048F966    ret         0C
*}
end;

//0048F96C
procedure TWinControl.PreProcessMessage(var Msg:tagMSG);
begin
{*
 0048F96C    xor         eax,eax
 0048F96E    ret
*}
end;

//0048F970
procedure TWinControl.RemoveWindowProps;
begin
{*
 0048F970    push        ebx
 0048F971    mov         ebx,eax
 0048F973    movzx       eax,word ptr ds:[7931A2]
 0048F97A    push        eax
 0048F97B    mov         eax,dword ptr [ebx+258]
 0048F981    push        eax
 0048F982    call        user32.RemovePropW
 0048F987    movzx       eax,word ptr ds:[7931A0]
 0048F98E    push        eax
 0048F98F    mov         eax,dword ptr [ebx+258]
 0048F995    push        eax
 0048F996    call        user32.RemovePropW
 0048F99B    pop         ebx
 0048F99C    ret
*}
end;

//0048F9A0
procedure TWinControl.IsQualifyingSite(const Client:TControl);
begin
{*
 0048F9A0    push        ebx
 0048F9A1    push        esi
 0048F9A2    mov         esi,edx
 0048F9A4    mov         ebx,eax
 0048F9A6    cmp         ebx,dword ptr [esi+90]
>0048F9AC    jne         0048F9BD
 0048F9AE    mov         eax,ebx
 0048F9B0    call        TWinControl.GetVisibleDockClientCount
 0048F9B5    dec         eax
>0048F9B6    jg          0048F9BD
 0048F9B8    xor         eax,eax
 0048F9BA    pop         esi
 0048F9BB    pop         ebx
 0048F9BC    ret
 0048F9BD    mov         al,1
 0048F9BF    pop         esi
 0048F9C0    pop         ebx
 0048F9C1    ret
*}
end;

//0048F9C4
procedure TWinControl.DoPaddingChange(Sender:TObject);
begin
{*
 0048F9C4    xor         edx,edx
 0048F9C6    call        TWinControl.AlignControl
 0048F9CB    ret
*}
end;

//0048F9CC
procedure TWinControl.SetPadding(const Value:TPadding);
begin
{*
 0048F9CC    mov         eax,dword ptr [eax+1BC]
 0048F9D2    mov         ecx,dword ptr [eax]
 0048F9D4    call        dword ptr [ecx+8]
 0048F9D7    ret
*}
end;

//0048F9D8
procedure TWinControl.UpdateRecreatingFlag(Recreating:Boolean);
begin
{*
 0048F9D8    push        ebx
 0048F9D9    push        esi
 0048F9DA    push        edi
 0048F9DB    push        ebp
 0048F9DC    mov         ebx,edx
 0048F9DE    mov         ebp,eax
 0048F9E0    test        bl,bl
>0048F9E2    je          0048F9ED
 0048F9E4    or          dword ptr [ebp+54],2000
>0048F9EB    jmp         0048F9F4
 0048F9ED    and         dword ptr [ebp+54],0FFFFDFFF
 0048F9F4    mov         eax,dword ptr [ebp+1E0]
 0048F9FA    test        eax,eax
>0048F9FC    je          0048FA21
 0048F9FE    mov         esi,dword ptr [eax+8]
 0048FA01    dec         esi
 0048FA02    test        esi,esi
>0048FA04    jl          0048FA21
 0048FA06    inc         esi
 0048FA07    xor         edi,edi
 0048FA09    mov         edx,edi
 0048FA0B    mov         eax,dword ptr [ebp+1E0]
 0048FA11    call        TList.Get
 0048FA16    mov         edx,ebx
 0048FA18    call        TWinControl.UpdateRecreatingFlag
 0048FA1D    inc         edi
 0048FA1E    dec         esi
>0048FA1F    jne         0048FA09
 0048FA21    pop         ebp
 0048FA22    pop         edi
 0048FA23    pop         esi
 0048FA24    pop         ebx
 0048FA25    ret
*}
end;

//0048FA28
procedure TWinControl.UpdateControlOriginalParentSize(AControl:TControl; var AOriginalParentSize:TPoint);
begin
{*
 0048FA28    push        ebx
 0048FA29    push        esi
 0048FA2A    add         esp,0FFFFFFF0
 0048FA2D    mov         esi,ecx
 0048FA2F    mov         ebx,eax
 0048FA31    test        byte ptr [ebx+1C],2
>0048FA35    je          0048FA50
 0048FA37    test        byte ptr [edx+1C],10
>0048FA3B    jne         0048FA7E
 0048FA3D    mov         eax,dword ptr [ebx+264]
 0048FA43    mov         dword ptr [esi],eax
 0048FA45    mov         eax,dword ptr [ebx+268]
 0048FA4B    mov         dword ptr [esi+4],eax
>0048FA4E    jmp         0048FA7E
 0048FA50    mov         eax,ebx
 0048FA52    call        TWinControl.HandleAllocated
 0048FA57    test        al,al
>0048FA59    je          0048FA73
 0048FA5B    mov         edx,esp
 0048FA5D    mov         eax,ebx
 0048FA5F    mov         ecx,dword ptr [eax]
 0048FA61    call        dword ptr [ecx+54]
 0048FA64    mov         eax,dword ptr [esp+8]
 0048FA68    mov         dword ptr [esi],eax
 0048FA6A    mov         eax,dword ptr [esp+0C]
 0048FA6E    mov         dword ptr [esi+4],eax
>0048FA71    jmp         0048FA7E
 0048FA73    mov         eax,dword ptr [ebx+48]
 0048FA76    mov         dword ptr [esi],eax
 0048FA78    mov         eax,dword ptr [ebx+4C]
 0048FA7B    mov         dword ptr [esi+4],eax
 0048FA7E    mov         eax,dword ptr [ebx+1BC]
 0048FA84    mov         edx,dword ptr [eax+8]
 0048FA87    add         edx,dword ptr [eax+10]
 0048FA8A    sub         dword ptr [esi],edx
 0048FA8C    mov         eax,dword ptr [ebx+1BC]
 0048FA92    mov         edx,dword ptr [eax+0C]
 0048FA95    add         edx,dword ptr [eax+14]
 0048FA98    sub         dword ptr [esi+4],edx
 0048FA9B    add         esp,10
 0048FA9E    pop         esi
 0048FA9F    pop         ebx
 0048FAA0    ret
*}
end;

//0048FAA4
procedure TWinControl.SetParent(AParent:TWinControl);
begin
{*
 0048FAA4    push        ebp
 0048FAA5    mov         ebp,esp
 0048FAA7    add         esp,0FFFFFFF8
 0048FAAA    push        ebx
 0048FAAB    mov         ebx,edx
 0048FAAD    mov         dword ptr [ebp-4],eax
 0048FAB0    mov         eax,dword ptr [ebp-4]
 0048FAB3    call        TWinControl.HandleAllocated
 0048FAB8    test        al,al
>0048FABA    je          0048FAC5
 0048FABC    mov         eax,dword ptr [ebp-4]
 0048FABF    test        byte ptr [eax+55],20
>0048FAC3    je          0048FAC9
 0048FAC5    xor         eax,eax
>0048FAC7    jmp         0048FACB
 0048FAC9    mov         al,1
 0048FACB    mov         byte ptr [ebp-5],al
 0048FACE    cmp         byte ptr [ebp-5],0
>0048FAD2    je          0048FADE
 0048FAD4    mov         dl,1
 0048FAD6    mov         eax,dword ptr [ebp-4]
 0048FAD9    call        TWinControl.UpdateRecreatingFlag
 0048FADE    xor         eax,eax
 0048FAE0    push        ebp
 0048FAE1    push        48FB14
 0048FAE6    push        dword ptr fs:[eax]
 0048FAE9    mov         dword ptr fs:[eax],esp
 0048FAEC    mov         edx,ebx
 0048FAEE    mov         eax,dword ptr [ebp-4]
 0048FAF1    call        TControl.SetParent
 0048FAF6    xor         eax,eax
 0048FAF8    pop         edx
 0048FAF9    pop         ecx
 0048FAFA    pop         ecx
 0048FAFB    mov         dword ptr fs:[eax],edx
 0048FAFE    push        48FB1B
 0048FB03    cmp         byte ptr [ebp-5],0
>0048FB07    je          0048FB13
 0048FB09    xor         edx,edx
 0048FB0B    mov         eax,dword ptr [ebp-4]
 0048FB0E    call        TWinControl.UpdateRecreatingFlag
 0048FB13    ret
>0048FB14    jmp         @HandleFinally
>0048FB19    jmp         0048FB03
 0048FB1B    pop         ebx
 0048FB1C    pop         ecx
 0048FB1D    pop         ecx
 0048FB1E    pop         ebp
 0048FB1F    ret
*}
end;

//0048FB20
constructor TGraphicControl.Create;
begin
{*
 0048FB20    push        ebp
 0048FB21    mov         ebp,esp
 0048FB23    push        ecx
 0048FB24    push        ebx
 0048FB25    push        esi
 0048FB26    test        dl,dl
>0048FB28    je          0048FB32
 0048FB2A    add         esp,0FFFFFFF0
 0048FB2D    call        @ClassCreate
 0048FB32    mov         byte ptr [ebp-1],dl
 0048FB35    mov         ebx,eax
 0048FB37    xor         edx,edx
 0048FB39    mov         eax,ebx
 0048FB3B    call        TControl.Create
 0048FB40    mov         dl,1
 0048FB42    mov         eax,[00476D34];TControlCanvas
 0048FB47    call        TCanvas.Create
 0048FB4C    mov         esi,eax
 0048FB4E    mov         dword ptr [ebx+1A8],esi
 0048FB54    mov         eax,esi
 0048FB56    mov         edx,ebx
 0048FB58    call        TControlCanvas.SetControl
 0048FB5D    mov         eax,ebx
 0048FB5F    cmp         byte ptr [ebp-1],0
>0048FB63    je          0048FB74
 0048FB65    call        @AfterConstruction
 0048FB6A    pop         dword ptr fs:[0]
 0048FB71    add         esp,0C
 0048FB74    mov         eax,ebx
 0048FB76    pop         esi
 0048FB77    pop         ebx
 0048FB78    pop         ecx
 0048FB79    pop         ebp
 0048FB7A    ret
*}
end;

//0048FB7C
destructor TGraphicControl.Destroy();
begin
{*
 0048FB7C    push        ebx
 0048FB7D    push        esi
 0048FB7E    call        @BeforeDestruction
 0048FB83    mov         ebx,edx
 0048FB85    mov         esi,eax
 0048FB87    cmp         esi,dword ptr ds:[785A5C]
>0048FB8D    jne         0048FB96
 0048FB8F    xor         eax,eax
 0048FB91    call        SetCaptureControl
 0048FB96    mov         eax,dword ptr [esi+1A8]
 0048FB9C    call        TObject.Free
 0048FBA1    mov         edx,ebx
 0048FBA3    and         dl,0FC
 0048FBA6    mov         eax,esi
 0048FBA8    call        TControl.Destroy
 0048FBAD    test        bl,bl
>0048FBAF    jle         0048FBB8
 0048FBB1    mov         eax,esi
 0048FBB3    call        @ClassDestroy
 0048FBB8    pop         esi
 0048FBB9    pop         ebx
 0048FBBA    ret
*}
end;

//0048FBBC
procedure TGraphicControl.WMPaint(var Message:TWMPaint);
begin
{*
 0048FBBC    push        ebp
 0048FBBD    mov         ebp,esp
 0048FBBF    push        ecx
 0048FBC0    push        ebx
 0048FBC1    mov         ebx,edx
 0048FBC3    mov         dword ptr [ebp-4],eax
 0048FBC6    cmp         dword ptr [ebx+4],0
>0048FBCA    je          0048FC6B
 0048FBD0    mov         eax,dword ptr [ebp-4]
 0048FBD3    test        byte ptr [eax+1C],8
>0048FBD7    jne         0048FC6B
 0048FBDD    mov         eax,dword ptr [ebp-4]
 0048FBE0    mov         eax,dword ptr [eax+1A8]
 0048FBE6    call        TCustomCanvas.Lock
 0048FBEB    xor         eax,eax
 0048FBED    push        ebp
 0048FBEE    push        48FC64
 0048FBF3    push        dword ptr fs:[eax]
 0048FBF6    mov         dword ptr fs:[eax],esp
 0048FBF9    mov         edx,dword ptr [ebx+4]
 0048FBFC    mov         eax,dword ptr [ebp-4]
 0048FBFF    mov         eax,dword ptr [eax+1A8]
 0048FC05    call        TCanvas.SetHandle
 0048FC0A    xor         eax,eax
 0048FC0C    push        ebp
 0048FC0D    push        48FC41
 0048FC12    push        dword ptr fs:[eax]
 0048FC15    mov         dword ptr fs:[eax],esp
 0048FC18    mov         eax,dword ptr [ebp-4]
 0048FC1B    mov         edx,dword ptr [eax]
 0048FC1D    call        dword ptr [edx+0A0]
 0048FC23    xor         eax,eax
 0048FC25    pop         edx
 0048FC26    pop         ecx
 0048FC27    pop         ecx
 0048FC28    mov         dword ptr fs:[eax],edx
 0048FC2B    push        48FC48
 0048FC30    mov         eax,dword ptr [ebp-4]
 0048FC33    mov         eax,dword ptr [eax+1A8]
 0048FC39    xor         edx,edx
 0048FC3B    call        TCanvas.SetHandle
 0048FC40    ret
>0048FC41    jmp         @HandleFinally
>0048FC46    jmp         0048FC30
 0048FC48    xor         eax,eax
 0048FC4A    pop         edx
 0048FC4B    pop         ecx
 0048FC4C    pop         ecx
 0048FC4D    mov         dword ptr fs:[eax],edx
 0048FC50    push        48FC6B
 0048FC55    mov         eax,dword ptr [ebp-4]
 0048FC58    mov         eax,dword ptr [eax+1A8]
 0048FC5E    call        TCustomCanvas.Unlock
 0048FC63    ret
>0048FC64    jmp         @HandleFinally
>0048FC69    jmp         0048FC55
 0048FC6B    pop         ebx
 0048FC6C    pop         ecx
 0048FC6D    pop         ebp
 0048FC6E    ret
*}
end;

//0048FC70
procedure sub_0048FC70;
begin
{*
 0048FC70    ret
*}
end;

//0048FC74
constructor THintWindow.Create;
begin
{*
 0048FC74    push        ebx
 0048FC75    push        esi
 0048FC76    test        dl,dl
>0048FC78    je          0048FC82
 0048FC7A    add         esp,0FFFFFFF0
 0048FC7D    call        @ClassCreate
 0048FC82    mov         ebx,edx
 0048FC84    mov         esi,eax
 0048FC86    xor         edx,edx
 0048FC88    mov         eax,esi
 0048FC8A    call        TCustomControl.Create
 0048FC8F    mov         edx,80FFFF
 0048FC94    mov         eax,esi
 0048FC96    call        TControl.SetColor
 0048FC9B    mov         eax,[0078DB00];^Screen:TScreen
 0048FCA0    mov         eax,dword ptr [eax]
 0048FCA2    mov         edx,dword ptr [eax+7C]
 0048FCA5    mov         eax,dword ptr [esi+270]
 0048FCAB    call        TCanvas.SetFont
 0048FCB0    mov         eax,dword ptr [esi+270]
 0048FCB6    mov         eax,dword ptr [eax+48]
 0048FCB9    mov         dl,1
 0048FCBB    call        TBrush.SetStyle
 0048FCC0    mov         eax,esi
 0048FCC2    test        bl,bl
>0048FCC4    je          0048FCD5
 0048FCC6    call        @AfterConstruction
 0048FCCB    pop         dword ptr fs:[0]
 0048FCD2    add         esp,0C
 0048FCD5    mov         eax,esi
 0048FCD7    pop         esi
 0048FCD8    pop         ebx
 0048FCD9    ret
*}
end;

//0048FCDC
procedure THintWindow.CreateParams(var Params:TCreateParams);
begin
{*
 0048FCDC    push        ebx
 0048FCDD    push        esi
 0048FCDE    mov         ebx,edx
 0048FCE0    mov         esi,eax
 0048FCE2    mov         edx,ebx
 0048FCE4    mov         eax,esi
 0048FCE6    call        TWinControl.CreateParams
 0048FCEB    mov         dword ptr [ebx+4],80800000
 0048FCF2    or          dword ptr [ebx+24],800
 0048FCF9    mov         edx,1
 0048FCFE    mov         eax,5
 0048FD03    call        CheckWin32Version
 0048FD08    test        al,al
>0048FD0A    je          0048FD13
 0048FD0C    or          dword ptr [ebx+24],20000
 0048FD13    cmp         byte ptr ds:[793198],0;NewStyleControls:Boolean
>0048FD1A    je          0048FD23
 0048FD1C    mov         dword ptr [ebx+8],80
 0048FD23    lea         edx,[ebx+8]
 0048FD26    mov         eax,esi
 0048FD28    call        TWinControl.AddBiDiModeExStyle
 0048FD2D    pop         esi
 0048FD2E    pop         ebx
 0048FD2F    ret
*}
end;

//0048FD30
procedure TCustomHintWindow.WMNCHitTest(var Message:TWMNCHitTest);
begin
{*
 0048FD30    mov         dword ptr [edx+0C],0FFFFFFFF
 0048FD37    ret
*}
end;

//0048FD38
procedure TCustomHintWindow.WMNCPaint(var Message:TWMNCPaint);
begin
{*
 0048FD38    push        ebp
 0048FD39    mov         ebp,esp
 0048FD3B    add         esp,0FFFFFFF8
 0048FD3E    mov         dword ptr [ebp-4],eax
 0048FD41    mov         eax,dword ptr [ebp-4]
 0048FD44    call        TWinControl.GetHandle
 0048FD49    push        eax
 0048FD4A    call        user32.GetWindowDC
 0048FD4F    mov         dword ptr [ebp-8],eax
 0048FD52    xor         eax,eax
 0048FD54    push        ebp
 0048FD55    push        48FD8E
 0048FD5A    push        dword ptr fs:[eax]
 0048FD5D    mov         dword ptr fs:[eax],esp
 0048FD60    mov         edx,dword ptr [ebp-8]
 0048FD63    mov         eax,dword ptr [ebp-4]
 0048FD66    mov         ecx,dword ptr [eax]
 0048FD68    call        dword ptr [ecx+0F0]
 0048FD6E    xor         eax,eax
 0048FD70    pop         edx
 0048FD71    pop         ecx
 0048FD72    pop         ecx
 0048FD73    mov         dword ptr fs:[eax],edx
 0048FD76    push        48FD95
 0048FD7B    mov         eax,dword ptr [ebp-8]
 0048FD7E    push        eax
 0048FD7F    mov         eax,dword ptr [ebp-4]
 0048FD82    call        TWinControl.GetHandle
 0048FD87    push        eax
 0048FD88    call        user32.ReleaseDC
 0048FD8D    ret
>0048FD8E    jmp         @HandleFinally
>0048FD93    jmp         0048FD7B
 0048FD95    pop         ecx
 0048FD96    pop         ecx
 0048FD97    pop         ebp
 0048FD98    ret
*}
end;

//0048FD9C
procedure THintWindow.Paint;
begin
{*
 0048FD9C    push        ebp
 0048FD9D    mov         ebp,esp
 0048FD9F    add         esp,0FFFFFFCC
 0048FDA2    push        ebx
 0048FDA3    push        esi
 0048FDA4    push        edi
 0048FDA5    xor         edx,edx
 0048FDA7    mov         dword ptr [ebp-30],edx
 0048FDAA    mov         ebx,eax
 0048FDAC    xor         eax,eax
 0048FDAE    push        ebp
 0048FDAF    push        48FEB1
 0048FDB4    push        dword ptr fs:[eax]
 0048FDB7    mov         dword ptr fs:[eax],esp
 0048FDBA    lea         edx,[ebp-10]
 0048FDBD    mov         eax,ebx
 0048FDBF    mov         ecx,dword ptr [eax]
 0048FDC1    call        dword ptr [ecx+54]
 0048FDC4    xor         edx,edx
 0048FDC6    mov         eax,6
 0048FDCB    call        CheckWin32Version
 0048FDD0    test        al,al
>0048FDD2    je          0048FE37
 0048FDD4    call        ThemeServices
 0048FDD9    call        TThemeServices.GetThemesEnabled
 0048FDDE    test        al,al
>0048FDE0    je          0048FE37
 0048FDE2    lea         esi,[ebp-10]
 0048FDE5    lea         edi,[ebp-20]
 0048FDE8    movs        dword ptr [edi],dword ptr [esi]
 0048FDE9    movs        dword ptr [edi],dword ptr [esi]
 0048FDEA    movs        dword ptr [edi],dword ptr [esi]
 0048FDEB    movs        dword ptr [edi],dword ptr [esi]
 0048FDEC    push        4
 0048FDEE    push        4
 0048FDF0    lea         eax,[ebp-10]
 0048FDF3    push        eax
 0048FDF4    call        user32.InflateRect
 0048FDF9    call        ThemeServices
 0048FDFE    mov         esi,eax
 0048FE00    lea         eax,[ebp-10]
 0048FE03    push        eax
 0048FE04    lea         eax,[ebp-20]
 0048FE07    push        eax
 0048FE08    lea         ecx,[ebp-2C]
 0048FE0B    mov         dl,2
 0048FE0D    mov         eax,esi
 0048FE0F    call        TThemeServices.GetElementDetails
 0048FE14    lea         eax,[ebp-2C]
 0048FE17    push        eax
 0048FE18    mov         eax,dword ptr [ebx+270]
 0048FE1E    call        TCanvas.GetHandle
 0048FE23    mov         edx,eax
 0048FE25    mov         eax,esi
 0048FE27    pop         ecx
 0048FE28    call        TThemeServices.DrawElement
 0048FE2D    lea         esi,[ebp-20]
 0048FE30    lea         edi,[ebp-10]
 0048FE33    movs        dword ptr [edi],dword ptr [esi]
 0048FE34    movs        dword ptr [edi],dword ptr [esi]
 0048FE35    movs        dword ptr [edi],dword ptr [esi]
 0048FE36    movs        dword ptr [edi],dword ptr [esi]
 0048FE37    add         dword ptr [ebp-10],2
 0048FE3B    add         dword ptr [ebp-0C],2
 0048FE3F    mov         eax,[0078DB00];^Screen:TScreen
 0048FE44    mov         eax,dword ptr [eax]
 0048FE46    mov         eax,dword ptr [eax+7C]
 0048FE49    mov         edx,dword ptr [eax+18]
 0048FE4C    mov         eax,dword ptr [ebx+270]
 0048FE52    mov         eax,dword ptr [eax+40]
 0048FE55    call        TFont.SetColor
 0048FE5A    mov         eax,dword ptr [ebx+270]
 0048FE60    call        TCanvas.GetHandle
 0048FE65    mov         esi,eax
 0048FE67    lea         edx,[ebp-30]
 0048FE6A    mov         eax,ebx
 0048FE6C    call        TControl.GetText
 0048FE71    mov         edi,dword ptr [ebp-30]
 0048FE74    mov         eax,ebx
 0048FE76    call        TControl.DrawTextBiDiModeFlagsReadingOnly
 0048FE7B    or          eax,810
 0048FE80    mov         ebx,eax
 0048FE82    push        ebx
 0048FE83    lea         eax,[ebp-10]
 0048FE86    push        eax
 0048FE87    push        0FF
 0048FE89    mov         dword ptr [ebp-34],edi
 0048FE8C    mov         eax,dword ptr [ebp-34]
 0048FE8F    call        @UStrToPWChar
 0048FE94    push        eax
 0048FE95    push        esi
 0048FE96    call        user32.DrawTextW
 0048FE9B    xor         eax,eax
 0048FE9D    pop         edx
 0048FE9E    pop         ecx
 0048FE9F    pop         ecx
 0048FEA0    mov         dword ptr fs:[eax],edx
 0048FEA3    push        48FEB8
 0048FEA8    lea         eax,[ebp-30]
 0048FEAB    call        @UStrClr
 0048FEB0    ret
>0048FEB1    jmp         @HandleFinally
>0048FEB6    jmp         0048FEA8
 0048FEB8    pop         edi
 0048FEB9    pop         esi
 0048FEBA    pop         ebx
 0048FEBB    mov         esp,ebp
 0048FEBD    pop         ebp
 0048FEBE    ret
*}
end;

//0048FEC0
function THintWindow.IsHintMsg(var Msg:tagMSG):Boolean;
begin
{*
 0048FEC0    push        esi
 0048FEC1    mov         eax,dword ptr [edx+4]
 0048FEC4    cmp         eax,100
>0048FEC9    jb          0048FED2
 0048FECB    cmp         eax,109
>0048FED0    jbe         0048FF20
 0048FED2    mov         ecx,dword ptr [edx+4]
 0048FED5    cmp         ecx,0B000
>0048FEDB    je          0048FF20
 0048FEDD    cmp         ecx,0B001
>0048FEE3    je          0048FF20
 0048FEE5    cmp         dword ptr [edx+4],0B016
>0048FEEC    je          0048FF20
 0048FEEE    cmp         dword ptr [edx+4],0B017
>0048FEF5    je          0048FF20
 0048FEF7    cmp         dword ptr [edx+4],111
>0048FEFE    je          0048FF20
 0048FF00    mov         esi,dword ptr [edx+4]
 0048FF03    cmp         esi,200
>0048FF09    jbe         0048FF13
 0048FF0B    cmp         esi,20E
>0048FF11    jbe         0048FF20
 0048FF13    cmp         dword ptr [edx+4],0A0
>0048FF1A    je          0048FF20
 0048FF1C    xor         eax,eax
 0048FF1E    pop         esi
 0048FF1F    ret
 0048FF20    mov         al,1
 0048FF22    pop         esi
 0048FF23    ret
*}
end;

//0048FF24
procedure THintWindow.ReleaseHandle;
begin
{*
 0048FF24    mov         edx,dword ptr [eax]
 0048FF26    call        dword ptr [edx+0C0]
 0048FF2C    ret
*}
end;

//0048FF30
procedure THintWindow.CMTextChanged(var Message:TMessage);
begin
{*
 0048FF30    push        ebp
 0048FF31    mov         ebp,esp
 0048FF33    push        0
 0048FF35    push        0
 0048FF37    push        ebx
 0048FF38    mov         ebx,eax
 0048FF3A    xor         eax,eax
 0048FF3C    push        ebp
 0048FF3D    push        48FFBB
 0048FF42    push        dword ptr fs:[eax]
 0048FF45    mov         dword ptr fs:[eax],esp
 0048FF48    mov         eax,ebx
 0048FF4A    call        TWinControl.CMTextChanged
 0048FF4F    cmp         byte ptr [ebx+278],0
>0048FF56    jne         0048FFA0
 0048FF58    lea         edx,[ebp-4]
 0048FF5B    mov         eax,ebx
 0048FF5D    call        TControl.GetText
 0048FF62    mov         edx,dword ptr [ebp-4]
 0048FF65    mov         eax,dword ptr [ebx+270]
 0048FF6B    call        TCustomCanvas.TextWidth
 0048FF70    mov         edx,eax
 0048FF72    add         edx,6
 0048FF75    mov         eax,ebx
 0048FF77    call        TControl.SetWidth
 0048FF7C    lea         edx,[ebp-8]
 0048FF7F    mov         eax,ebx
 0048FF81    call        TControl.GetText
 0048FF86    mov         edx,dword ptr [ebp-8]
 0048FF89    mov         eax,dword ptr [ebx+270]
 0048FF8F    call        TCustomCanvas.TextHeight
 0048FF94    mov         edx,eax
 0048FF96    add         edx,4
 0048FF99    mov         eax,ebx
 0048FF9B    call        TControl.SetHeight
 0048FFA0    xor         eax,eax
 0048FFA2    pop         edx
 0048FFA3    pop         ecx
 0048FFA4    pop         ecx
 0048FFA5    mov         dword ptr fs:[eax],edx
 0048FFA8    push        48FFC2
 0048FFAD    lea         eax,[ebp-8]
 0048FFB0    mov         edx,2
 0048FFB5    call        @UStrArrayClr
 0048FFBA    ret
>0048FFBB    jmp         @HandleFinally
>0048FFC0    jmp         0048FFAD
 0048FFC2    pop         ebx
 0048FFC3    pop         ecx
 0048FFC4    pop         ecx
 0048FFC5    pop         ebp
 0048FFC6    ret
*}
end;

//0048FFC8
procedure THintWindow.ActivateHint(Rect:TRect; AHint:string);
begin
{*
 0048FFC8    push        ebp
 0048FFC9    mov         ebp,esp
 0048FFCB    add         esp,0FFFFFFD8
 0048FFCE    push        ebx
 0048FFCF    push        esi
 0048FFD0    push        edi
 0048FFD1    mov         esi,edx
 0048FFD3    lea         edi,[ebp-20]
 0048FFD6    movs        dword ptr [edi],dword ptr [esi]
 0048FFD7    movs        dword ptr [edi],dword ptr [esi]
 0048FFD8    movs        dword ptr [edi],dword ptr [esi]
 0048FFD9    movs        dword ptr [edi],dword ptr [esi]
 0048FFDA    mov         esi,ecx
 0048FFDC    mov         dword ptr [ebp-4],eax
 0048FFDF    mov         eax,dword ptr [ebp-4]
 0048FFE2    mov         byte ptr [eax+278],1
 0048FFE9    xor         edx,edx
 0048FFEB    push        ebp
 0048FFEC    push        490234
 0048FFF1    push        dword ptr fs:[edx]
 0048FFF4    mov         dword ptr fs:[edx],esp
 0048FFF7    mov         edx,esi
 0048FFF9    mov         eax,dword ptr [ebp-4]
 0048FFFC    call        TControl.SetText
 00490001    add         dword ptr [ebp-14],4
 00490005    lea         edx,[ebp-20]
 00490008    mov         eax,dword ptr [ebp-4]
 0049000B    call        TControl.UpdateBoundsRect
 00490010    mov         eax,dword ptr [ebp-20]
 00490013    mov         dword ptr [ebp-10],eax
 00490016    mov         eax,dword ptr [ebp-1C]
 00490019    mov         dword ptr [ebp-0C],eax
 0049001C    lea         edx,[ebp-10]
 0049001F    mov         eax,[0078DB00];^Screen:TScreen
 00490024    mov         eax,dword ptr [eax]
 00490026    xor         ecx,ecx
 00490028    call        TScreen.MonitorFromPoint
 0049002D    mov         ebx,eax
 0049002F    mov         eax,ebx
 00490031    call        TMonitor.GetWidth
 00490036    mov         edx,dword ptr [ebp-4]
 00490039    cmp         eax,dword ptr [edx+48]
>0049003C    jge         0049004F
 0049003E    mov         eax,ebx
 00490040    call        TMonitor.GetWidth
 00490045    mov         edx,eax
 00490047    mov         eax,dword ptr [ebp-4]
 0049004A    call        TControl.SetWidth
 0049004F    mov         eax,ebx
 00490051    call        TMonitor.GetHeight
 00490056    mov         edx,dword ptr [ebp-4]
 00490059    cmp         eax,dword ptr [edx+4C]
>0049005C    jge         0049006F
 0049005E    mov         eax,ebx
 00490060    call        TMonitor.GetHeight
 00490065    mov         edx,eax
 00490067    mov         eax,dword ptr [ebp-4]
 0049006A    call        TControl.SetHeight
 0049006F    mov         eax,ebx
 00490071    call        TMonitor.GetTop
 00490076    mov         edi,eax
 00490078    mov         eax,ebx
 0049007A    call        TMonitor.GetHeight
 0049007F    add         edi,eax
 00490081    mov         eax,dword ptr [ebp-4]
 00490084    mov         eax,dword ptr [eax+4C]
 00490087    add         eax,dword ptr [ebp-1C]
 0049008A    cmp         edi,eax
>0049008C    jge         004900A9
 0049008E    mov         eax,ebx
 00490090    call        TMonitor.GetTop
 00490095    mov         edi,eax
 00490097    mov         eax,ebx
 00490099    call        TMonitor.GetHeight
 0049009E    add         edi,eax
 004900A0    mov         eax,dword ptr [ebp-4]
 004900A3    sub         edi,dword ptr [eax+4C]
 004900A6    mov         dword ptr [ebp-1C],edi
 004900A9    mov         eax,ebx
 004900AB    call        TMonitor.GetLeft
 004900B0    mov         edi,eax
 004900B2    mov         eax,ebx
 004900B4    call        TMonitor.GetWidth
 004900B9    add         edi,eax
 004900BB    mov         eax,dword ptr [ebp-4]
 004900BE    mov         eax,dword ptr [eax+48]
 004900C1    add         eax,dword ptr [ebp-20]
 004900C4    cmp         edi,eax
>004900C6    jge         004900E3
 004900C8    mov         eax,ebx
 004900CA    call        TMonitor.GetLeft
 004900CF    mov         edi,eax
 004900D1    mov         eax,ebx
 004900D3    call        TMonitor.GetWidth
 004900D8    add         edi,eax
 004900DA    mov         eax,dword ptr [ebp-4]
 004900DD    sub         edi,dword ptr [eax+48]
 004900E0    mov         dword ptr [ebp-20],edi
 004900E3    mov         eax,ebx
 004900E5    call        TMonitor.GetLeft
 004900EA    cmp         eax,dword ptr [ebp-20]
>004900ED    jle         004900F9
 004900EF    mov         eax,ebx
 004900F1    call        TMonitor.GetLeft
 004900F6    mov         dword ptr [ebp-20],eax
 004900F9    mov         eax,ebx
 004900FB    call        TMonitor.GetTop
 00490100    cmp         eax,dword ptr [ebp-14]
>00490103    jle         0049010F
 00490105    mov         eax,ebx
 00490107    call        TMonitor.GetTop
 0049010C    mov         dword ptr [ebp-1C],eax
 0049010F    mov         eax,[0078D590];^Application:TApplication
 00490114    mov         eax,dword ptr [eax]
 00490116    mov         edx,dword ptr [eax+170]
 0049011C    mov         eax,dword ptr [ebp-4]
 0049011F    call        TWinControl.SetParentWindow
 00490124    push        10
 00490126    mov         eax,dword ptr [ebp-4]
 00490129    mov         eax,dword ptr [eax+4C]
 0049012C    push        eax
 0049012D    mov         eax,dword ptr [ebp-4]
 00490130    mov         eax,dword ptr [eax+48]
 00490133    push        eax
 00490134    mov         eax,dword ptr [ebp-1C]
 00490137    push        eax
 00490138    mov         eax,dword ptr [ebp-20]
 0049013B    push        eax
 0049013C    push        0FF
 0049013E    mov         eax,dword ptr [ebp-4]
 00490141    call        TWinControl.GetHandle
 00490146    push        eax
 00490147    call        user32.SetWindowPos
 0049014C    call        kernel32.GetTickCount
 00490151    mov         edx,dword ptr [ebp-4]
 00490154    sub         eax,dword ptr [edx+27C]
 0049015A    cmp         eax,0FA
>0049015F    jbe         00490174
 00490161    mov         eax,esi
 00490163    test        eax,eax
>00490165    je          0049016C
 00490167    sub         eax,4
 0049016A    mov         eax,dword ptr [eax]
 0049016C    cmp         eax,64
 0049016F    setl        al
>00490172    jmp         00490176
 00490174    xor         eax,eax
 00490176    test        al,al
>00490178    je          004901F3
 0049017A    cmp         dword ptr ds:[785998],0
>00490181    je          004901F3
 00490183    push        0
 00490185    lea         eax,[ebp-8]
 00490188    push        eax
 00490189    push        0
 0049018B    push        1016
 00490190    call        user32.SystemParametersInfoW
 00490195    cmp         dword ptr [ebp-8],0
>00490199    je          004901F3
 0049019B    push        0
 0049019D    lea         eax,[ebp-8]
 004901A0    push        eax
 004901A1    push        0
 004901A3    push        1018
 004901A8    call        user32.SystemParametersInfoW
 004901AD    cmp         dword ptr [ebp-8],0
>004901B1    je          004901B7
 004901B3    mov         bl,2
>004901B5    jmp         004901D2
 004901B7    lea         edx,[ebp-28]
 004901BA    mov         eax,[0079318C];Mouse:TMouse
 004901BF    call        TMouse.GetCursorPos
 004901C4    mov         eax,dword ptr [ebp-24]
 004901C7    cmp         eax,dword ptr [ebp-1C]
>004901CA    jle         004901D0
 004901CC    xor         ebx,ebx
>004901CE    jmp         004901D2
 004901D0    mov         bl,1
 004901D2    movzx       eax,bl
 004901D5    mov         eax,dword ptr [eax*4+785B1C]
 004901DC    or          eax,40000
 004901E1    push        eax
 004901E2    push        64
 004901E4    mov         eax,dword ptr [ebp-4]
 004901E7    call        TWinControl.GetHandle
 004901EC    push        eax
 004901ED    call        dword ptr ds:[785998]
 004901F3    push        4
 004901F5    mov         eax,dword ptr [ebp-4]
 004901F8    call        TWinControl.GetHandle
 004901FD    push        eax
 004901FE    call        user32.ShowWindow
 00490203    mov         eax,dword ptr [ebp-4]
 00490206    mov         edx,dword ptr [eax]
 00490208    call        dword ptr [edx+90]
 0049020E    xor         eax,eax
 00490210    pop         edx
 00490211    pop         ecx
 00490212    pop         ecx
 00490213    mov         dword ptr fs:[eax],edx
 00490216    push        49023B
 0049021B    call        kernel32.GetTickCount
 00490220    mov         edx,dword ptr [ebp-4]
 00490223    mov         dword ptr [edx+27C],eax
 00490229    mov         eax,dword ptr [ebp-4]
 0049022C    mov         byte ptr [eax+278],0
 00490233    ret
>00490234    jmp         @HandleFinally
>00490239    jmp         0049021B
 0049023B    pop         edi
 0049023C    pop         esi
 0049023D    pop         ebx
 0049023E    mov         esp,ebp
 00490240    pop         ebp
 00490241    ret
*}
end;

//00490244
procedure THintWindow.ActivateHintData(Rect:TRect; AHint:string; AData:Pointer);
begin
{*
 00490244    push        ebp
 00490245    mov         ebp,esp
 00490247    add         esp,0FFFFFFF0
 0049024A    push        ebx
 0049024B    push        esi
 0049024C    push        edi
 0049024D    mov         esi,edx
 0049024F    lea         edi,[ebp-10]
 00490252    movs        dword ptr [edi],dword ptr [esi]
 00490253    movs        dword ptr [edi],dword ptr [esi]
 00490254    movs        dword ptr [edi],dword ptr [esi]
 00490255    movs        dword ptr [edi],dword ptr [esi]
 00490256    lea         edx,[ebp-10]
 00490259    mov         ebx,dword ptr [eax]
 0049025B    call        dword ptr [ebx+0F4]
 00490261    pop         edi
 00490262    pop         esi
 00490263    pop         ebx
 00490264    mov         esp,ebp
 00490266    pop         ebp
 00490267    ret         4
*}
end;

//0049026C
function THintWindow.CalcHintRect(MaxWidth:Integer; AHint:string; AData:Pointer):TRect;
begin
{*
 0049026C    push        ebp
 0049026D    mov         ebp,esp
 0049026F    push        ecx
 00490270    push        ebx
 00490271    push        esi
 00490272    push        edi
 00490273    mov         dword ptr [ebp-4],ecx
 00490276    mov         edi,edx
 00490278    mov         esi,eax
 0049027A    mov         ebx,dword ptr [ebp+8]
 0049027D    push        0
 0049027F    push        ebx
 00490280    mov         ecx,edi
 00490282    xor         edx,edx
 00490284    xor         eax,eax
 00490286    call        Rect
 0049028B    mov         eax,dword ptr [esi+270]
 00490291    call        TCanvas.GetHandle
 00490296    mov         edi,eax
 00490298    mov         eax,esi
 0049029A    call        TControl.DrawTextBiDiModeFlagsReadingOnly
 0049029F    or          eax,0C10
 004902A4    mov         esi,eax
 004902A6    push        esi
 004902A7    push        ebx
 004902A8    push        0FF
 004902AA    mov         eax,dword ptr [ebp-4]
 004902AD    call        @UStrToPWChar
 004902B2    push        eax
 004902B3    push        edi
 004902B4    call        user32.DrawTextW
 004902B9    add         dword ptr [ebx+8],6
 004902BD    add         dword ptr [ebx+0C],2
 004902C1    pop         edi
 004902C2    pop         esi
 004902C3    pop         ebx
 004902C4    pop         ecx
 004902C5    pop         ebp
 004902C6    ret         8
*}
end;

//004902CC
procedure THintWindow.NCPaint(DC:HDC);
begin
{*
 004902CC    push        ebx
 004902CD    push        esi
 004902CE    add         esp,0FFFFFFE4
 004902D1    mov         esi,edx
 004902D3    mov         ebx,eax
 004902D5    mov         eax,dword ptr [ebx+4C]
 004902D8    push        eax
 004902D9    lea         eax,[esp+4]
 004902DD    push        eax
 004902DE    mov         ecx,dword ptr [ebx+48]
 004902E1    xor         edx,edx
 004902E3    xor         eax,eax
 004902E5    call        Rect
 004902EA    call        ThemeServices
 004902EF    call        TThemeServices.GetThemesEnabled
 004902F4    test        al,al
>004902F6    jne         00490309
 004902F8    push        0F
 004902FA    push        1
 004902FC    lea         eax,[esp+8]
 00490300    push        eax
 00490301    push        esi
 00490302    call        user32.DrawEdge
>00490307    jmp         0049032E
 00490309    call        ThemeServices
 0049030E    lea         ecx,[esp+10]
 00490312    mov         dl,1
 00490314    call        TThemeServices.GetElementDetails
 00490319    push        esp
 0049031A    push        1
 0049031C    push        0F
 0049031E    call        ThemeServices
 00490323    lea         ecx,[esp+1C]
 00490327    mov         edx,esi
 00490329    call        TThemeServices.DrawEdge
 0049032E    add         esp,1C
 00490331    pop         esi
 00490332    pop         ebx
 00490333    ret
*}
end;

//00490334
procedure TCustomHintWindow.WMPrint(var Message:TMessage);
begin
{*
 00490334    push        ebx
 00490335    push        esi
 00490336    mov         esi,edx
 00490338    mov         ebx,eax
 0049033A    push        0
 0049033C    mov         edx,dword ptr [esi+4]
 0049033F    xor         ecx,ecx
 00490341    mov         eax,ebx
 00490343    call        TWinControl.PaintTo
 00490348    mov         edx,dword ptr [esi+4]
 0049034B    mov         eax,ebx
 0049034D    mov         ecx,dword ptr [eax]
 0049034F    call        dword ptr [ecx+0F0]
 00490355    pop         esi
 00490356    pop         ebx
 00490357    ret
*}
end;

//00490358
function THintWindow.ShouldHideHint:Boolean;
begin
{*
 00490358    mov         al,1
 0049035A    ret
*}
end;

//0049035C
function ClientToWindow(Handle:HWND; X:Integer; Y:Integer):TPoint;
begin
{*
 0049035C    push        ebp
 0049035D    mov         ebp,esp
 0049035F    add         esp,0FFFFFFE8
 00490362    push        ebx
 00490363    push        esi
 00490364    mov         ebx,eax
 00490366    mov         esi,dword ptr [ebp+8]
 00490369    mov         dword ptr [ebp-8],edx
 0049036C    mov         dword ptr [ebp-4],ecx
 0049036F    lea         eax,[ebp-8]
 00490372    push        eax
 00490373    push        ebx
 00490374    call        user32.ClientToScreen
 00490379    lea         eax,[ebp-18]
 0049037C    push        eax
 0049037D    push        ebx
 0049037E    call        user32.GetWindowRect
 00490383    mov         eax,dword ptr [ebp-8]
 00490386    sub         eax,dword ptr [ebp-18]
 00490389    mov         dword ptr [esi],eax
 0049038B    mov         eax,dword ptr [ebp-4]
 0049038E    sub         eax,dword ptr [ebp-14]
 00490391    mov         dword ptr [esi+4],eax
 00490394    pop         esi
 00490395    pop         ebx
 00490396    mov         esp,ebp
 00490398    pop         ebp
 00490399    ret         4
*}
end;

//0049039C
procedure TDragImageList.Initialize;
begin
{*
 0049039C    push        ebx
 0049039D    mov         ebx,eax
 0049039F    mov         eax,ebx
 004903A1    call        TCustomImageList.Initialize
 004903A6    or          edx,0FFFFFFFF
 004903A9    mov         eax,ebx
 004903AB    call        TDragImageList.SetDragCursor
 004903B0    pop         ebx
 004903B1    ret
*}
end;

//004903B4
function TDragImageList.SetDragImage(Index:Integer; HotSpotX:Integer; HotSpotY:Integer):Boolean;
begin
{*
 004903B4    push        ebp
 004903B5    mov         ebp,esp
 004903B7    push        ebx
 004903B8    push        esi
 004903B9    push        edi
 004903BA    mov         edi,ecx
 004903BC    mov         esi,edx
 004903BE    mov         ebx,eax
 004903C0    mov         eax,ebx
 004903C2    call        TCustomImageList.HandleAllocated
 004903C7    test        al,al
>004903C9    je          004903FA
 004903CB    mov         dword ptr [ebx+88],esi
 004903D1    mov         dword ptr [ebx+80],edi
 004903D7    mov         eax,dword ptr [ebp+8]
 004903DA    mov         dword ptr [ebx+84],eax
 004903E0    mov         eax,dword ptr [ebp+8]
 004903E3    push        eax
 004903E4    push        edi
 004903E5    push        esi
 004903E6    mov         eax,ebx
 004903E8    call        TCustomImageList.GetHandle
 004903ED    push        eax
 004903EE    call        comctl32.ImageList_BeginDrag
 004903F3    mov         al,1
 004903F5    mov         byte ptr [ebx+7A],al
>004903F8    jmp         004903FC
 004903FA    xor         eax,eax
 004903FC    pop         edi
 004903FD    pop         esi
 004903FE    pop         ebx
 004903FF    pop         ebp
 00490400    ret         4
*}
end;

//00490404
procedure TDragImageList.SetDragCursor(Value:TCursor);
begin
{*
 00490404    cmp         dx,word ptr [eax+78]
>00490408    je          00490426
 0049040A    mov         ecx,edx
 0049040C    mov         word ptr [eax+78],cx
 00490410    cmp         byte ptr [eax+7A],0
>00490414    je          00490426
 00490416    mov         edx,dword ptr ds:[78DB00];^Screen:TScreen
 0049041C    mov         edx,dword ptr [edx]
 0049041E    mov         eax,ecx
 00490420    xchg        eax,edx
 00490421    call        TScreen.SetCursor
 00490426    ret
*}
end;

//00490428
function TDragImageList.GetHotSpot:TPoint;
begin
{*
 00490428    push        ebx
 00490429    push        esi
 0049042A    mov         esi,edx
 0049042C    mov         ebx,eax
 0049042E    mov         edx,esi
 00490430    mov         eax,ebx
 00490432    call        TCustomImageList.GetHotSpot
 00490437    mov         eax,ebx
 00490439    call        TCustomImageList.HandleAllocated
 0049043E    test        al,al
>00490440    je          00490450
 00490442    cmp         byte ptr [ebx+7A],0
>00490446    je          00490450
 00490448    push        esi
 00490449    push        0
 0049044B    call        comctl32.ImageList_GetDragImage
 00490450    pop         esi
 00490451    pop         ebx
 00490452    ret
*}
end;

//00490454
function TDragImageList.BeginDrag(Window:HWND; X:Integer; Y:Integer):Boolean;
begin
{*
 00490454    push        ebp
 00490455    mov         ebp,esp
 00490457    push        ecx
 00490458    push        ebx
 00490459    push        esi
 0049045A    push        edi
 0049045B    mov         dword ptr [ebp-4],ecx
 0049045E    mov         edi,edx
 00490460    mov         esi,eax
 00490462    xor         ebx,ebx
 00490464    mov         eax,esi
 00490466    call        TCustomImageList.HandleAllocated
 0049046B    test        al,al
>0049046D    je          004904C7
 0049046F    cmp         byte ptr [esi+7A],0
>00490473    jne         0049048F
 00490475    mov         eax,dword ptr [esi+84]
 0049047B    push        eax
 0049047C    mov         ecx,dword ptr [esi+80]
 00490482    mov         edx,dword ptr [esi+88]
 00490488    mov         eax,esi
 0049048A    call        TDragImageList.SetDragImage
 0049048F    mov         eax,dword ptr [ebp+8]
 00490492    push        eax
 00490493    mov         ecx,dword ptr [ebp-4]
 00490496    mov         edx,edi
 00490498    mov         eax,esi
 0049049A    call        TDragImageList.DragLock
 0049049F    mov         ebx,eax
 004904A1    test        bl,bl
>004904A3    je          004904C7
 004904A5    mov         eax,[0078DB00];^Screen:TScreen
 004904AA    mov         eax,dword ptr [eax]
 004904AC    movzx       eax,word ptr [eax+48]
 004904B0    mov         word ptr [esi+8C],ax
 004904B7    mov         eax,[0078DB00];^Screen:TScreen
 004904BC    mov         eax,dword ptr [eax]
 004904BE    movzx       edx,word ptr [esi+78]
 004904C2    call        TScreen.SetCursor
 004904C7    mov         eax,ebx
 004904C9    pop         edi
 004904CA    pop         esi
 004904CB    pop         ebx
 004904CC    pop         ecx
 004904CD    pop         ebp
 004904CE    ret         4
*}
end;

//004904D4
function TDragImageList.DragLock(Window:HWND; XPos:Integer; YPos:Integer):Boolean;
begin
{*
 004904D4    push        ebp
 004904D5    mov         ebp,esp
 004904D7    add         esp,0FFFFFFF4
 004904DA    push        ebx
 004904DB    push        esi
 004904DC    push        edi
 004904DD    mov         dword ptr [ebp-4],ecx
 004904E0    mov         esi,edx
 004904E2    mov         edi,eax
 004904E4    xor         ebx,ebx
 004904E6    mov         eax,edi
 004904E8    call        TCustomImageList.HandleAllocated
 004904ED    test        al,al
>004904EF    je          0049052A
 004904F1    cmp         esi,dword ptr [edi+7C]
>004904F4    je          0049052A
 004904F6    mov         eax,edi
 004904F8    call        TDragImageList.DragUnlock
 004904FD    mov         ebx,esi
 004904FF    mov         dword ptr [edi+7C],ebx
 00490502    lea         eax,[ebp-0C]
 00490505    push        eax
 00490506    mov         ecx,dword ptr [ebp+8]
 00490509    mov         edx,dword ptr [ebp-4]
 0049050C    mov         eax,ebx
 0049050E    call        ClientToWindow
 00490513    mov         eax,dword ptr [ebp-8]
 00490516    push        eax
 00490517    mov         eax,dword ptr [ebp-0C]
 0049051A    push        eax
 0049051B    mov         eax,dword ptr [edi+7C]
 0049051E    push        eax
 0049051F    call        comctl32.ImageList_DragEnter
 00490524    cmp         eax,1
 00490527    sbb         ebx,ebx
 00490529    inc         ebx
 0049052A    mov         eax,ebx
 0049052C    pop         edi
 0049052D    pop         esi
 0049052E    pop         ebx
 0049052F    mov         esp,ebp
 00490531    pop         ebp
 00490532    ret         4
*}
end;

//00490538
procedure TDragImageList.DragUnlock;
begin
{*
 00490538    push        ebx
 00490539    mov         ebx,eax
 0049053B    mov         eax,ebx
 0049053D    call        TCustomImageList.HandleAllocated
 00490542    test        al,al
>00490544    je          0049055A
 00490546    cmp         dword ptr [ebx+7C],0
>0049054A    je          0049055A
 0049054C    mov         eax,dword ptr [ebx+7C]
 0049054F    push        eax
 00490550    call        comctl32.ImageList_DragLeave
 00490555    xor         eax,eax
 00490557    mov         dword ptr [ebx+7C],eax
 0049055A    pop         ebx
 0049055B    ret
*}
end;

//0049055C
function TDragImageList.DragMove(X:Integer; Y:Integer):Boolean;
begin
{*
 0049055C    push        ebx
 0049055D    push        esi
 0049055E    push        edi
 0049055F    add         esp,0FFFFFFF8
 00490562    mov         edi,ecx
 00490564    mov         esi,edx
 00490566    mov         ebx,eax
 00490568    mov         eax,ebx
 0049056A    call        TCustomImageList.HandleAllocated
 0049056F    test        al,al
>00490571    je          00490597
 00490573    push        esp
 00490574    mov         ecx,edi
 00490576    mov         edx,esi
 00490578    mov         eax,dword ptr [ebx+7C]
 0049057B    call        ClientToWindow
 00490580    mov         eax,dword ptr [esp+4]
 00490584    push        eax
 00490585    mov         eax,dword ptr [esp+4]
 00490589    push        eax
 0049058A    call        comctl32.ImageList_DragMove
 0049058F    cmp         eax,1
 00490592    sbb         eax,eax
 00490594    inc         eax
>00490595    jmp         00490599
 00490597    xor         eax,eax
 00490599    pop         ecx
 0049059A    pop         edx
 0049059B    pop         edi
 0049059C    pop         esi
 0049059D    pop         ebx
 0049059E    ret
*}
end;

//004905A0
procedure TDragImageList.ShowDragImage;
begin
{*
 004905A0    push        ebx
 004905A1    mov         ebx,eax
 004905A3    mov         eax,ebx
 004905A5    call        TCustomImageList.HandleAllocated
 004905AA    test        al,al
>004905AC    je          004905B5
 004905AE    push        0FF
 004905B0    call        comctl32.ImageList_DragShowNolock
 004905B5    pop         ebx
 004905B6    ret
*}
end;

//004905B8
procedure TDragImageList.HideDragImage;
begin
{*
 004905B8    push        ebx
 004905B9    mov         ebx,eax
 004905BB    mov         eax,ebx
 004905BD    call        TCustomImageList.HandleAllocated
 004905C2    test        al,al
>004905C4    je          004905CD
 004905C6    push        0
 004905C8    call        comctl32.ImageList_DragShowNolock
 004905CD    pop         ebx
 004905CE    ret
*}
end;

//004905D0
function TDragImageList.EndDrag:Boolean;
begin
{*
 004905D0    push        ebx
 004905D1    push        esi
 004905D2    mov         esi,eax
 004905D4    mov         eax,esi
 004905D6    call        TCustomImageList.HandleAllocated
 004905DB    test        al,al
>004905DD    je          0049061A
 004905DF    cmp         byte ptr [esi+7A],0
>004905E3    je          0049061A
 004905E5    mov         eax,esi
 004905E7    call        TDragImageList.DragUnlock
 004905EC    call        comctl32.ImageList_EndDrag
 004905F1    cmp         eax,1
 004905F4    sbb         ebx,ebx
 004905F6    inc         ebx
 004905F7    mov         byte ptr [esi+7A],0
 004905FB    or          edx,0FFFFFFFF
 004905FE    mov         eax,esi
 00490600    call        TDragImageList.SetDragCursor
 00490605    mov         eax,[0078DB00];^Screen:TScreen
 0049060A    mov         eax,dword ptr [eax]
 0049060C    movzx       edx,word ptr [esi+8C]
 00490613    call        TScreen.SetCursor
>00490618    jmp         0049061C
 0049061A    xor         ebx,ebx
 0049061C    mov         eax,ebx
 0049061E    pop         esi
 0049061F    pop         ebx
 00490620    ret
*}
end;

//00490624
constructor TCustomControl.Create;
begin
{*
 00490624    push        ebp
 00490625    mov         ebp,esp
 00490627    push        ecx
 00490628    push        ebx
 00490629    push        esi
 0049062A    test        dl,dl
>0049062C    je          00490636
 0049062E    add         esp,0FFFFFFF0
 00490631    call        @ClassCreate
 00490636    mov         byte ptr [ebp-1],dl
 00490639    mov         ebx,eax
 0049063B    xor         edx,edx
 0049063D    mov         eax,ebx
 0049063F    call        TWinControl.Create
 00490644    mov         dl,1
 00490646    mov         eax,[00476D34];TControlCanvas
 0049064B    call        TCanvas.Create
 00490650    mov         esi,eax
 00490652    mov         dword ptr [ebx+270],esi
 00490658    mov         eax,esi
 0049065A    mov         edx,ebx
 0049065C    call        TControlCanvas.SetControl
 00490661    mov         eax,ebx
 00490663    cmp         byte ptr [ebp-1],0
>00490667    je          00490678
 00490669    call        @AfterConstruction
 0049066E    pop         dword ptr fs:[0]
 00490675    add         esp,0C
 00490678    mov         eax,ebx
 0049067A    pop         esi
 0049067B    pop         ebx
 0049067C    pop         ecx
 0049067D    pop         ebp
 0049067E    ret
*}
end;

//00490680
destructor TCustomControl.Destroy();
begin
{*
 00490680    push        ebx
 00490681    push        esi
 00490682    call        @BeforeDestruction
 00490687    mov         ebx,edx
 00490689    mov         esi,eax
 0049068B    mov         eax,dword ptr [esi+270]
 00490691    call        TObject.Free
 00490696    mov         edx,ebx
 00490698    and         dl,0FC
 0049069B    mov         eax,esi
 0049069D    call        TWinControl.Destroy
 004906A2    test        bl,bl
>004906A4    jle         004906AD
 004906A6    mov         eax,esi
 004906A8    call        @ClassDestroy
 004906AD    pop         esi
 004906AE    pop         ebx
 004906AF    ret
*}
end;

//004906B0
procedure TCustomControl.WMPaint(var Message:TWMPaint);
begin
{*
 004906B0    push        ebx
 004906B1    push        esi
 004906B2    mov         esi,edx
 004906B4    mov         ebx,eax
 004906B6    or          dword ptr [ebx+54],100
 004906BD    mov         edx,esi
 004906BF    mov         eax,ebx
 004906C1    call        TWinControl.WMPaint
 004906C6    and         dword ptr [ebx+54],0FFFFFEFF
 004906CD    pop         esi
 004906CE    pop         ebx
 004906CF    ret
*}
end;

//004906D0
procedure TCustomControl.PaintWindow(DC:HDC);
begin
{*
 004906D0    push        ebp
 004906D1    mov         ebp,esp
 004906D3    push        ecx
 004906D4    push        ebx
 004906D5    mov         ebx,edx
 004906D7    mov         dword ptr [ebp-4],eax
 004906DA    mov         eax,dword ptr [ebp-4]
 004906DD    mov         eax,dword ptr [eax+270]
 004906E3    call        TCustomCanvas.Lock
 004906E8    xor         eax,eax
 004906EA    push        ebp
 004906EB    push        49076E
 004906F0    push        dword ptr fs:[eax]
 004906F3    mov         dword ptr fs:[eax],esp
 004906F6    mov         eax,dword ptr [ebp-4]
 004906F9    mov         eax,dword ptr [eax+270]
 004906FF    mov         edx,ebx
 00490701    call        TCanvas.SetHandle
 00490706    xor         eax,eax
 00490708    push        ebp
 00490709    push        49074B
 0049070E    push        dword ptr fs:[eax]
 00490711    mov         dword ptr fs:[eax],esp
 00490714    mov         eax,dword ptr [ebp-4]
 00490717    mov         eax,dword ptr [eax+270]
 0049071D    call        TControlCanvas.UpdateTextFlags
 00490722    mov         eax,dword ptr [ebp-4]
 00490725    mov         edx,dword ptr [eax]
 00490727    call        dword ptr [edx+0EC]
 0049072D    xor         eax,eax
 0049072F    pop         edx
 00490730    pop         ecx
 00490731    pop         ecx
 00490732    mov         dword ptr fs:[eax],edx
 00490735    push        490752
 0049073A    mov         eax,dword ptr [ebp-4]
 0049073D    mov         eax,dword ptr [eax+270]
 00490743    xor         edx,edx
 00490745    call        TCanvas.SetHandle
 0049074A    ret
>0049074B    jmp         @HandleFinally
>00490750    jmp         0049073A
 00490752    xor         eax,eax
 00490754    pop         edx
 00490755    pop         ecx
 00490756    pop         ecx
 00490757    mov         dword ptr fs:[eax],edx
 0049075A    push        490775
 0049075F    mov         eax,dword ptr [ebp-4]
 00490762    mov         eax,dword ptr [eax+270]
 00490768    call        TCustomCanvas.Unlock
 0049076D    ret
>0049076E    jmp         @HandleFinally
>00490773    jmp         0049075F
 00490775    pop         ebx
 00490776    pop         ecx
 00490777    pop         ebp
 00490778    ret
*}
end;

//0049077C
procedure sub_0049077C;
begin
{*
 0049077C    ret
*}
end;

//00490780
function NextVisibleZone(StartZone:TDockZone):TDockZone;
begin
{*
 00490780    push        ebx
 00490781    mov         ebx,eax
>00490783    jmp         00490788
 00490785    mov         ebx,dword ptr [ebx+0C]
 00490788    test        ebx,ebx
>0049078A    je          00490797
 0049078C    mov         eax,ebx
 0049078E    call        TDockZone.GetVisible
 00490793    test        al,al
>00490795    je          00490785
 00490797    mov         eax,ebx
 00490799    pop         ebx
 0049079A    ret
*}
end;

//0049079C
function IsOrientationSet(Zone:TDockZone):Boolean;
begin
{*
 0049079C    mov         edx,dword ptr [eax+14]
 0049079F    test        edx,edx
>004907A1    je          004907A9
 004907A3    cmp         byte ptr [edx+10],0
>004907A7    jne         004907BA
 004907A9    mov         edx,dword ptr [eax+1C]
 004907AC    cmp         eax,dword ptr [edx+64]
>004907AF    jne         004907B7
 004907B1    cmp         byte ptr [eax+10],0
>004907B5    jne         004907BA
 004907B7    xor         eax,eax
 004907B9    ret
 004907BA    mov         al,1
 004907BC    ret
*}
end;

//004907C0
constructor TDockZone.Create;
begin
{*
 004907C0    push        ebx
 004907C1    push        esi
 004907C2    push        edi
 004907C3    test        dl,dl
>004907C5    je          004907CF
 004907C7    add         esp,0FFFFFFF0
 004907CA    call        @ClassCreate
 004907CF    mov         esi,ecx
 004907D1    mov         ebx,edx
 004907D3    mov         edi,eax
 004907D5    xor         edx,edx
 004907D7    mov         eax,edi
 004907D9    call        TObject.Create
 004907DE    mov         dword ptr [edi+1C],esi
 004907E1    mov         eax,edi
 004907E3    test        bl,bl
>004907E5    je          004907F6
 004907E7    call        @AfterConstruction
 004907EC    pop         dword ptr fs:[0]
 004907F3    add         esp,0C
 004907F6    mov         eax,edi
 004907F8    pop         edi
 004907F9    pop         esi
 004907FA    pop         ebx
 004907FB    ret
*}
end;

//004907FC
function TDockZone.GetChildCount:Integer;
begin
{*
 004907FC    xor         edx,edx
 004907FE    mov         eax,dword ptr [eax+8]
 00490801    test        eax,eax
>00490803    je          0049080D
 00490805    mov         eax,dword ptr [eax+0C]
 00490808    inc         edx
 00490809    test        eax,eax
>0049080B    jne         00490805
 0049080D    mov         eax,edx
 0049080F    ret
*}
end;

//00490810
function TDockZone.GetVisibleChildCount:Integer;
begin
{*
 00490810    push        ebx
 00490811    push        esi
 00490812    xor         esi,esi
 00490814    call        TDockZone.FirstVisibleChild
 00490819    mov         ebx,eax
 0049081B    test        ebx,ebx
>0049081D    je          0049082D
 0049081F    mov         eax,ebx
 00490821    call        TDockZone.NextVisible
 00490826    mov         ebx,eax
 00490828    inc         esi
 00490829    test        ebx,ebx
>0049082B    jne         0049081F
 0049082D    mov         eax,esi
 0049082F    pop         esi
 00490830    pop         ebx
 00490831    ret
*}
end;

//00490834
function TDockZone.GetVisible:Boolean;
begin
{*
 00490834    push        ebx
 00490835    push        esi
 00490836    mov         edx,dword ptr [eax+4]
 00490839    test        edx,edx
>0049083B    je          00490843
 0049083D    movzx       ebx,byte ptr [edx+59]
>00490841    jmp         00490864
 00490843    mov         bl,1
 00490845    call        TDockZone.FirstVisibleChild
 0049084A    mov         esi,eax
 0049084C    test        esi,esi
>0049084E    je          00490862
 00490850    mov         eax,esi
 00490852    call        TDockZone.GetVisible
 00490857    test        al,al
>00490859    jne         00490864
 0049085B    mov         esi,dword ptr [esi+0C]
 0049085E    test        esi,esi
>00490860    jne         00490850
 00490862    xor         ebx,ebx
 00490864    mov         eax,ebx
 00490866    pop         esi
 00490867    pop         ebx
 00490868    ret
*}
end;

//0049086C
function TDockZone.GetLimitBegin:Integer;
begin
{*
 0049086C    mov         edx,dword ptr [eax+1C]
 0049086F    cmp         eax,dword ptr [edx+64]
>00490872    jne         00490878
 00490874    mov         edx,eax
>00490876    jmp         0049087B
 00490878    mov         edx,dword ptr [eax+14]
 0049087B    movzx       ecx,byte ptr [edx+10]
 0049087F    cmp         cl,1
>00490882    jne         0049088F
 00490884    mov         edx,1
 00490889    call        TDockZone.GetTopLeft
 0049088E    ret
 0049088F    cmp         cl,2
>00490892    jne         004908A0
 00490894    mov         edx,2
 00490899    call        TDockZone.GetTopLeft
>0049089E    jmp         004908B3
 004908A0    xor         ecx,ecx
 004908A2    mov         dl,1
 004908A4    mov         eax,[00418C04];Exception
 004908A9    call        Exception.Create
 004908AE    call        @RaiseExcept
 004908B3    ret
*}
end;

//004908B4
function TDockZone.GetLimitSize:Integer;
begin
{*
 004908B4    mov         edx,dword ptr [eax+1C]
 004908B7    cmp         eax,dword ptr [edx+64]
>004908BA    jne         004908C0
 004908BC    mov         edx,eax
>004908BE    jmp         004908C3
 004908C0    mov         edx,dword ptr [eax+14]
 004908C3    movzx       ecx,byte ptr [edx+10]
 004908C7    cmp         cl,1
>004908CA    jne         004908D7
 004908CC    mov         edx,1
 004908D1    call        TDockZone.GetHeightWidth
 004908D6    ret
 004908D7    cmp         cl,2
>004908DA    jne         004908E8
 004908DC    mov         edx,2
 004908E1    call        TDockZone.GetHeightWidth
>004908E6    jmp         004908FB
 004908E8    xor         ecx,ecx
 004908EA    mov         dl,1
 004908EC    mov         eax,[00418C04];Exception
 004908F1    call        Exception.Create
 004908F6    call        @RaiseExcept
 004908FB    ret
*}
end;

//004908FC
function TDockZone.GetTopLeft(Orient:Integer):Integer;
begin
{*
 004908FC    push        ebx
 004908FD    push        esi
 004908FE    push        edi
 004908FF    push        ebp
 00490900    add         esp,0FFFFFFEC
 00490903    mov         edi,edx
 00490905    mov         esi,eax
 00490907    mov         ebx,esi
>00490909    jmp         0049092A
 0049090B    mov         eax,edi
 0049090D    mov         ebp,dword ptr [ebx+14]
 00490910    cmp         al,byte ptr [ebp+10]
>00490913    jne         00490928
 00490915    cmp         dword ptr [ebx+18],0
>00490919    je          00490928
 0049091B    mov         eax,dword ptr [ebx+18]
 0049091E    call        TDockZone.GetZoneLimit
 00490923    mov         dword ptr [esp],eax
>00490926    jmp         00490974
 00490928    mov         ebx,ebp
 0049092A    mov         eax,dword ptr [esi+1C]
 0049092D    cmp         ebx,dword ptr [eax+64]
>00490930    jne         0049090B
 00490932    lea         edx,[esp+4]
 00490936    mov         eax,dword ptr [esi+1C]
 00490939    mov         eax,dword ptr [eax+14]
 0049093C    mov         ecx,dword ptr [eax]
 0049093E    call        dword ptr [ecx+54]
 00490941    lea         edx,[esp+4]
 00490945    mov         eax,dword ptr [esi+1C]
 00490948    mov         eax,dword ptr [eax+14]
 0049094B    mov         ecx,dword ptr [eax]
 0049094D    call        dword ptr [ecx+0A0]
 00490953    mov         eax,edi
 00490955    dec         al
>00490957    je          00490966
 00490959    dec         al
>0049095B    jne         0049096F
 0049095D    mov         eax,dword ptr [esp+4]
 00490961    mov         dword ptr [esp],eax
>00490964    jmp         00490974
 00490966    mov         eax,dword ptr [esp+8]
 0049096A    mov         dword ptr [esp],eax
>0049096D    jmp         00490974
 0049096F    xor         eax,eax
 00490971    mov         dword ptr [esp],eax
 00490974    mov         eax,dword ptr [esp]
 00490977    add         esp,14
 0049097A    pop         ebp
 0049097B    pop         edi
 0049097C    pop         esi
 0049097D    pop         ebx
 0049097E    ret
*}
end;

//00490980
function TDockZone.GetHeightWidth(Orient:Integer):Integer;
begin
{*
 00490980    push        ebx
 00490981    push        esi
 00490982    push        edi
 00490983    push        ebp
 00490984    add         esp,0FFFFFFF0
 00490987    mov         edi,edx
 00490989    mov         ebx,eax
 0049098B    mov         eax,dword ptr [ebx+1C]
 0049098E    cmp         ebx,dword ptr [eax+64]
>00490991    je          004909AE
 00490993    mov         eax,dword ptr [ebx+1C]
 00490996    mov         esi,dword ptr [eax+64]
 00490999    cmp         esi,dword ptr [ebx+14]
>0049099C    jne         004909E4
 0049099E    cmp         dword ptr [ebx+4],0
>004909A2    je          004909E4
 004909A4    mov         eax,esi
 004909A6    call        TDockZone.GetVisibleChildCount
 004909AB    dec         eax
>004909AC    jne         004909E4
 004909AE    mov         edx,esp
 004909B0    mov         eax,dword ptr [ebx+1C]
 004909B3    mov         eax,dword ptr [eax+14]
 004909B6    mov         ecx,dword ptr [eax]
 004909B8    call        dword ptr [ecx+54]
 004909BB    mov         edx,esp
 004909BD    mov         eax,dword ptr [ebx+1C]
 004909C0    mov         eax,dword ptr [eax+14]
 004909C3    mov         ecx,dword ptr [eax]
 004909C5    call        dword ptr [ecx+0A0]
 004909CB    mov         eax,edi
 004909CD    cmp         al,1
>004909CF    jne         004909DB
 004909D1    mov         ebp,dword ptr [esp+0C]
 004909D5    sub         ebp,dword ptr [esp+4]
>004909D9    jmp         00490A2C
 004909DB    mov         ebp,dword ptr [esp+8]
 004909DF    sub         ebp,dword ptr [esp]
>004909E2    jmp         00490A2C
 004909E4    mov         esi,ebx
>004909E6    jmp         00490A09
 004909E8    mov         eax,edi
 004909EA    mov         edx,dword ptr [esi+14]
 004909ED    cmp         al,byte ptr [edx+10]
>004909F0    jne         00490A06
 004909F2    mov         eax,esi
 004909F4    call        TDockZone.GetZoneLimit
 004909F9    mov         ebp,eax
 004909FB    mov         eax,esi
 004909FD    call        TDockZone.GetLimitBegin
 00490A02    sub         ebp,eax
>00490A04    jmp         00490A2C
 00490A06    mov         esi,dword ptr [esi+14]
 00490A09    mov         eax,dword ptr [ebx+1C]
 00490A0C    cmp         esi,dword ptr [eax+64]
>00490A0F    jne         004909E8
 00490A11    mov         ecx,edi
 00490A13    mov         eax,dword ptr [ebx+1C]
 00490A16    mov         edx,dword ptr [eax+64]
 00490A19    cmp         cl,byte ptr [edx+10]
>00490A1C    jne         00490A23
 00490A1E    mov         ebp,dword ptr [eax+68]
>00490A21    jmp         00490A2C
 00490A23    mov         eax,edx
 00490A25    call        TDockZone.GetZoneLimit
 00490A2A    mov         ebp,eax
 00490A2C    mov         eax,ebp
 00490A2E    add         esp,10
 00490A31    pop         ebp
 00490A32    pop         edi
 00490A33    pop         esi
 00490A34    pop         ebx
 00490A35    ret
*}
end;

//00490A38
procedure TDockZone.ResetChildren;
begin
{*
 00490A38    push        ebx
 00490A39    push        esi
 00490A3A    push        edi
 00490A3B    mov         esi,eax
 00490A3D    mov         eax,esi
 00490A3F    call        TDockZone.GetVisibleChildCount
 00490A44    test        eax,eax
>00490A46    je          00490ADC
 00490A4C    cmp         byte ptr [esi+10],0
>00490A50    je          00490ADC
 00490A56    mov         eax,esi
 00490A58    call        TDockZone.FirstVisibleChild
 00490A5D    mov         ebx,eax
 00490A5F    movzx       eax,byte ptr [esi+10]
 00490A63    dec         al
>00490A65    je          00490A6D
 00490A67    dec         al
>00490A69    je          00490A7D
>00490A6B    jmp         00490A8D
 00490A6D    mov         edx,1
 00490A72    mov         eax,esi
 00490A74    call        TDockZone.GetHeightWidth
 00490A79    mov         edi,eax
>00490A7B    jmp         00490A8F
 00490A7D    mov         edx,2
 00490A82    mov         eax,esi
 00490A84    call        TDockZone.GetHeightWidth
 00490A89    mov         edi,eax
>00490A8B    jmp         00490A8F
 00490A8D    xor         edi,edi
 00490A8F    mov         eax,esi
 00490A91    call        TDockZone.GetVisibleChildCount
 00490A96    push        eax
 00490A97    mov         eax,edi
 00490A99    pop         edx
 00490A9A    mov         ecx,edx
 00490A9C    cdq
 00490A9D    idiv        eax,ecx
 00490A9F    mov         esi,eax
 00490AA1    test        ebx,ebx
>00490AA3    je          00490ADC
 00490AA5    cmp         dword ptr [ebx+0C],0
>00490AA9    jne         00490AB6
 00490AAB    mov         edx,edi
 00490AAD    mov         eax,ebx
 00490AAF    call        TDockZone.SetZoneLimit
>00490AB4    jmp         00490AC8
 00490AB6    mov         eax,ebx
 00490AB8    call        TDockZone.GetLimitBegin
 00490ABD    mov         edx,eax
 00490ABF    add         edx,esi
 00490AC1    mov         eax,ebx
 00490AC3    call        TDockZone.SetZoneLimit
 00490AC8    mov         eax,ebx
 00490ACA    call        TDockZone.Update
 00490ACF    mov         eax,ebx
 00490AD1    call        TDockZone.NextVisible
 00490AD6    mov         ebx,eax
 00490AD8    test        ebx,ebx
>00490ADA    jne         00490AA5
 00490ADC    pop         edi
 00490ADD    pop         esi
 00490ADE    pop         ebx
 00490ADF    ret
*}
end;

//00490AE0
function TDockZone.GetControlName:UnicodeString;
begin
{*
 00490AE0    push        ebx
 00490AE1    push        esi
 00490AE2    push        edi
 00490AE3    mov         esi,edx
 00490AE5    mov         ebx,eax
 00490AE7    mov         eax,esi
 00490AE9    call        @UStrClr
 00490AEE    mov         edi,dword ptr [ebx+4]
 00490AF1    test        edi,edi
>00490AF3    je          00490B1F
 00490AF5    cmp         dword ptr [edi+8],0
>00490AF9    jne         00490B12
 00490AFB    mov         ecx,dword ptr ds:[78D2B4];^SResString288:TResStringRec
 00490B01    mov         dl,1
 00490B03    mov         eax,[00418C04];Exception
 00490B08    call        Exception.CreateRes
 00490B0D    call        @RaiseExcept
 00490B12    mov         eax,esi
 00490B14    mov         edx,dword ptr [ebx+4]
 00490B17    mov         edx,dword ptr [edx+8]
 00490B1A    call        @UStrAsg
 00490B1F    pop         edi
 00490B20    pop         esi
 00490B21    pop         ebx
 00490B22    ret
*}
end;

//00490B24
function TDockZone.SetControlName(const Value:UnicodeString):Boolean;
begin
{*
 00490B24    push        ebp
 00490B25    mov         ebp,esp
 00490B27    add         esp,0FFFFFFF4
 00490B2A    push        esi
 00490B2B    push        edi
 00490B2C    mov         edi,eax
 00490B2E    xor         eax,eax
 00490B30    mov         dword ptr [ebp-8],eax
 00490B33    mov         eax,dword ptr [edi+1C]
 00490B36    mov         dword ptr [ebp-0C],eax
 00490B39    lea         ecx,[ebp-8]
 00490B3C    mov         eax,dword ptr [ebp-0C]
 00490B3F    mov         eax,dword ptr [eax+14]
 00490B42    mov         si,0FFB7
 00490B46    call        @CallDynaInst
 00490B4B    cmp         dword ptr [ebp-8],0
 00490B4F    setne       byte ptr [ebp-1]
 00490B53    cmp         byte ptr [ebp-1],0
>00490B57    je          00490B9C
 00490B59    mov         eax,dword ptr [ebp-0C]
 00490B5C    mov         dword ptr [eax+38],edi
 00490B5F    xor         eax,eax
 00490B61    push        ebp
 00490B62    push        490B95
 00490B67    push        dword ptr fs:[eax]
 00490B6A    mov         dword ptr fs:[eax],esp
 00490B6D    push        0
 00490B6F    mov         eax,dword ptr [ebp-0C]
 00490B72    mov         edx,dword ptr [eax+14]
 00490B75    xor         ecx,ecx
 00490B77    mov         eax,dword ptr [ebp-8]
 00490B7A    call        TControl.ManualDock
 00490B7F    xor         eax,eax
 00490B81    pop         edx
 00490B82    pop         ecx
 00490B83    pop         ecx
 00490B84    mov         dword ptr fs:[eax],edx
 00490B87    push        490B9C
 00490B8C    mov         eax,dword ptr [ebp-0C]
 00490B8F    xor         edx,edx
 00490B91    mov         dword ptr [eax+38],edx
 00490B94    ret
>00490B95    jmp         @HandleFinally
>00490B9A    jmp         00490B8C
 00490B9C    movzx       eax,byte ptr [ebp-1]
 00490BA0    pop         edi
 00490BA1    pop         esi
 00490BA2    mov         esp,ebp
 00490BA4    pop         ebp
 00490BA5    ret
*}
end;

//00490BA8
function ParentNotLast:Boolean;
begin
{*
 00490BA8    push        ebp
 00490BA9    mov         ebp,esp
 00490BAB    push        ebx
 00490BAC    push        esi
 00490BAD    xor         ebx,ebx
 00490BAF    mov         eax,dword ptr [ebp+8]
 00490BB2    mov         eax,dword ptr [eax-4]
 00490BB5    mov         esi,dword ptr [eax+14]
 00490BB8    test        esi,esi
>00490BBA    je          00490BD2
 00490BBC    mov         eax,esi
 00490BBE    call        TDockZone.NextVisible
 00490BC3    test        eax,eax
>00490BC5    je          00490BCB
 00490BC7    mov         bl,1
>00490BC9    jmp         00490BD2
 00490BCB    mov         esi,dword ptr [esi+14]
 00490BCE    test        esi,esi
>00490BD0    jne         00490BBC
 00490BD2    mov         eax,ebx
 00490BD4    pop         esi
 00490BD5    pop         ebx
 00490BD6    pop         ebp
 00490BD7    ret
*}
end;

//00490BD8
procedure TDockZone.Update;
begin
{*
 00490BD8    push        ebp
 00490BD9    mov         ebp,esp
 00490BDB    add         esp,0FFFFFFEC
 00490BDE    push        ebx
 00490BDF    push        esi
 00490BE0    push        edi
 00490BE1    mov         dword ptr [ebp-4],eax
 00490BE4    mov         eax,dword ptr [ebp-4]
 00490BE7    mov         eax,dword ptr [eax+4]
 00490BEA    test        eax,eax
>00490BEC    je          00490D4A
 00490BF2    cmp         byte ptr [eax+59],0
>00490BF6    je          00490D4A
 00490BFC    mov         edx,dword ptr [ebp-4]
 00490BFF    mov         edx,dword ptr [edx+1C]
 00490C02    cmp         dword ptr [edx+6C],0
>00490C06    jne         00490D4A
 00490C0C    mov         edx,dword ptr [ebp-4]
 00490C0F    mov         edx,dword ptr [edx+14]
 00490C12    movzx       edx,byte ptr [edx+10]
 00490C16    mov         byte ptr [eax+8C],dl
 00490C1C    mov         edx,2
 00490C21    mov         eax,dword ptr [ebp-4]
 00490C24    call        TDockZone.GetHeightWidth
 00490C29    mov         ebx,eax
 00490C2B    mov         edx,1
 00490C30    mov         eax,dword ptr [ebp-4]
 00490C33    call        TDockZone.GetHeightWidth
 00490C38    mov         esi,eax
 00490C3A    push        ebp
 00490C3B    call        ParentNotLast
 00490C40    pop         ecx
 00490C41    test        al,al
>00490C43    je          00490C65
 00490C45    mov         eax,dword ptr [ebp-4]
 00490C48    mov         eax,dword ptr [eax+14]
 00490C4B    cmp         byte ptr [eax+10],1
>00490C4F    jne         00490C5C
 00490C51    mov         eax,dword ptr [ebp-4]
 00490C54    mov         eax,dword ptr [eax+1C]
 00490C57    sub         ebx,dword ptr [eax+0C]
>00490C5A    jmp         00490C65
 00490C5C    mov         eax,dword ptr [ebp-4]
 00490C5F    mov         eax,dword ptr [eax+1C]
 00490C62    sub         esi,dword ptr [eax+0C]
 00490C65    mov         eax,dword ptr [ebp-4]
 00490C68    call        TDockZone.NextVisible
 00490C6D    test        eax,eax
>00490C6F    jne         00490CE1
 00490C71    mov         eax,dword ptr [ebp-4]
 00490C74    mov         eax,dword ptr [eax+14]
 00490C77    mov         edx,dword ptr [ebp-4]
 00490C7A    mov         edx,dword ptr [edx+1C]
 00490C7D    cmp         eax,dword ptr [edx+64]
>00490C80    je          00490CAD
 00490C82    mov         eax,dword ptr [ebp-4]
 00490C85    mov         eax,dword ptr [eax+14]
 00490C88    movzx       eax,byte ptr [eax+10]
 00490C8C    mov         edx,dword ptr [ebp-4]
 00490C8F    mov         edx,dword ptr [edx+1C]
 00490C92    mov         edx,dword ptr [edx+64]
 00490C95    cmp         al,byte ptr [edx+10]
>00490C98    jne         00490CAD
 00490C9A    mov         eax,dword ptr [ebp-4]
 00490C9D    call        TDockZone.GetZoneLimit
 00490CA2    mov         edx,dword ptr [ebp-4]
 00490CA5    mov         edx,dword ptr [edx+1C]
 00490CA8    cmp         eax,dword ptr [edx+68]
>00490CAB    jl          00490CE1
 00490CAD    mov         eax,dword ptr [ebp-4]
 00490CB0    mov         eax,dword ptr [eax+14]
 00490CB3    movzx       eax,byte ptr [eax+10]
 00490CB7    mov         edx,dword ptr [ebp-4]
 00490CBA    mov         edx,dword ptr [edx+1C]
 00490CBD    mov         edx,dword ptr [edx+64]
 00490CC0    cmp         al,byte ptr [edx+10]
>00490CC3    je          00490D01
 00490CC5    mov         eax,dword ptr [ebp-4]
 00490CC8    call        TDockZone.GetZoneLimit
 00490CCD    mov         edi,eax
 00490CCF    mov         eax,dword ptr [ebp-4]
 00490CD2    mov         eax,dword ptr [eax+1C]
 00490CD5    mov         eax,dword ptr [eax+64]
 00490CD8    call        TDockZone.GetZoneLimit
 00490CDD    cmp         edi,eax
>00490CDF    jge         00490D01
 00490CE1    mov         eax,dword ptr [ebp-4]
 00490CE4    mov         eax,dword ptr [eax+14]
 00490CE7    cmp         byte ptr [eax+10],1
>00490CEB    jne         00490CF8
 00490CED    mov         eax,dword ptr [ebp-4]
 00490CF0    mov         eax,dword ptr [eax+1C]
 00490CF3    sub         esi,dword ptr [eax+0C]
>00490CF6    jmp         00490D01
 00490CF8    mov         eax,dword ptr [ebp-4]
 00490CFB    mov         eax,dword ptr [eax+1C]
 00490CFE    sub         ebx,dword ptr [eax+0C]
 00490D01    push        esi
 00490D02    lea         eax,[ebp-14]
 00490D05    push        eax
 00490D06    mov         edx,1
 00490D0B    mov         eax,dword ptr [ebp-4]
 00490D0E    call        TDockZone.GetTopLeft
 00490D13    push        eax
 00490D14    mov         edx,2
 00490D19    mov         eax,dword ptr [ebp-4]
 00490D1C    call        TDockZone.GetTopLeft
 00490D21    mov         ecx,ebx
 00490D23    pop         edx
 00490D24    call        Bounds
 00490D29    lea         ecx,[ebp-14]
 00490D2C    mov         eax,dword ptr [ebp-4]
 00490D2F    mov         edx,dword ptr [eax+4]
 00490D32    mov         eax,dword ptr [ebp-4]
 00490D35    mov         eax,dword ptr [eax+1C]
 00490D38    mov         ebx,dword ptr [eax]
 00490D3A    call        dword ptr [ebx]
 00490D3C    lea         edx,[ebp-14]
 00490D3F    mov         eax,dword ptr [ebp-4]
 00490D42    mov         eax,dword ptr [eax+4]
 00490D45    call        TControl.SetBoundsRect
 00490D4A    pop         edi
 00490D4B    pop         esi
 00490D4C    pop         ebx
 00490D4D    mov         esp,ebp
 00490D4F    pop         ebp
 00490D50    ret
*}
end;

//00490D54
function TDockZone.GetZoneLimit:Integer;
begin
{*
 00490D54    push        ebx
 00490D55    mov         ebx,eax
 00490D57    mov         eax,ebx
 00490D59    call        TDockZone.GetVisible
 00490D5E    test        al,al
>00490D60    jne         00490D76
 00490D62    mov         eax,ebx
 00490D64    call        IsOrientationSet
 00490D69    test        al,al
>00490D6B    je          00490D76
 00490D6D    mov         eax,ebx
 00490D6F    call        TDockZone.GetLimitBegin
 00490D74    pop         ebx
 00490D75    ret
 00490D76    mov         eax,dword ptr [ebx+20]
 00490D79    pop         ebx
 00490D7A    ret
*}
end;

//00490D7C
procedure TDockZone.SetZoneLimit(const Value:Integer);
begin
{*
 00490D7C    mov         dword ptr [eax+20],edx
 00490D7F    ret
*}
end;

//00490D80
function GetLastChildZone(Zone:TDockZone):TDockZone;
begin
{*
 00490D80    mov         eax,dword ptr [eax+8]
>00490D83    jmp         00490D87
 00490D85    mov         eax,edx
 00490D87    mov         edx,dword ptr [eax+0C]
 00490D8A    test        edx,edx
>00490D8C    jne         00490D85
 00490D8E    ret
*}
end;

//00490D90
procedure TDockZone.ExpandZoneLimit(NewLimit:Integer);
begin
{*
 00490D90    push        ebx
 00490D91    push        esi
 00490D92    push        edi
 00490D93    mov         edi,edx
 00490D95    mov         edx,eax
 00490D97    mov         dword ptr [edx+20],edi
 00490D9A    mov         ebx,dword ptr [eax+8]
 00490D9D    test        ebx,ebx
>00490D9F    je          00490DC5
 00490DA1    mov         eax,ebx
 00490DA3    call        TDockZone.GetChildCount
 00490DA8    test        eax,eax
>00490DAA    jle         00490DBE
 00490DAC    mov         eax,ebx
 00490DAE    call        GetLastChildZone
 00490DB3    mov         esi,eax
 00490DB5    mov         edx,edi
 00490DB7    mov         eax,esi
 00490DB9    call        TDockZone.ExpandZoneLimit
 00490DBE    mov         ebx,dword ptr [ebx+0C]
 00490DC1    test        ebx,ebx
>00490DC3    jne         00490DA1
 00490DC5    pop         edi
 00490DC6    pop         esi
 00490DC7    pop         ebx
 00490DC8    ret
*}
end;

//00490DCC
procedure TDockZone.ResetZoneLimits;
begin
{*
 00490DCC    push        ebx
 00490DCD    push        esi
 00490DCE    push        edi
 00490DCF    mov         esi,eax
 00490DD1    mov         ebx,dword ptr [esi+8]
 00490DD4    test        ebx,ebx
>00490DD6    je          00490E27
 00490DD8    mov         eax,ebx
 00490DDA    call        TDockZone.GetZoneLimit
 00490DDF    mov         edi,eax
 00490DE1    mov         eax,ebx
 00490DE3    call        TDockZone.GetLimitBegin
 00490DE8    cmp         edi,eax
>00490DEA    jl          00490E00
 00490DEC    mov         eax,ebx
 00490DEE    call        TDockZone.GetZoneLimit
 00490DF3    mov         edi,eax
 00490DF5    mov         eax,esi
 00490DF7    call        TDockZone.GetLimitSize
 00490DFC    cmp         edi,eax
>00490DFE    jle         00490E19
 00490E00    mov         eax,esi
 00490E02    call        TDockZone.ResetChildren
 00490E07    mov         edi,dword ptr [esi+1C]
 00490E0A    push        edi
 00490E0B    push        492CC8;TDockTree.UpdateZone
 00490E10    mov         edx,esi
 00490E12    mov         eax,edi
 00490E14    call        TDockTree.ForEachAt
 00490E19    mov         eax,ebx
 00490E1B    call        TDockZone.ResetZoneLimits
 00490E20    mov         ebx,dword ptr [ebx+0C]
 00490E23    test        ebx,ebx
>00490E25    jne         00490DD8
 00490E27    pop         edi
 00490E28    pop         esi
 00490E29    pop         ebx
 00490E2A    ret
*}
end;

//00490E2C
function TDockZone.NextVisible:TDockZone;
begin
{*
 00490E2C    mov         eax,dword ptr [eax+0C]
 00490E2F    call        NextVisibleZone
 00490E34    ret
*}
end;

//00490E38
function TDockZone.PrevVisible:TDockZone;
begin
{*
 00490E38    push        ebx
 00490E39    mov         ebx,dword ptr [eax+18]
>00490E3C    jmp         00490E41
 00490E3E    mov         ebx,dword ptr [ebx+18]
 00490E41    test        ebx,ebx
>00490E43    je          00490E50
 00490E45    mov         eax,ebx
 00490E47    call        TDockZone.GetVisible
 00490E4C    test        al,al
>00490E4E    je          00490E3E
 00490E50    mov         eax,ebx
 00490E52    pop         ebx
 00490E53    ret
*}
end;

//00490E54
function TDockZone.FirstVisibleChild:TDockZone;
begin
{*
 00490E54    mov         eax,dword ptr [eax+8]
 00490E57    call        NextVisibleZone
 00490E5C    ret
*}
end;

//00490E60
constructor TDockTree.Create;
begin
{*
 00490E60    push        ebp
 00490E61    mov         ebp,esp
 00490E63    add         esp,0FFFFFFF4
 00490E66    push        ebx
 00490E67    push        esi
 00490E68    push        edi
 00490E69    test        dl,dl
>00490E6B    je          00490E75
 00490E6D    add         esp,0FFFFFFF0
 00490E70    call        @ClassCreate
 00490E75    mov         dword ptr [ebp-0C],ecx
 00490E78    mov         byte ptr [ebp-5],dl
 00490E7B    mov         dword ptr [ebp-4],eax
 00490E7E    xor         edx,edx
 00490E80    mov         eax,dword ptr [ebp-4]
 00490E83    call        TObject.Create
 00490E88    mov         eax,dword ptr [ebp-4]
 00490E8B    mov         dword ptr [eax+0C],4
 00490E92    mov         eax,dword ptr [ebp-4]
 00490E95    mov         edx,dword ptr [ebp-0C]
 00490E98    mov         dword ptr [eax+14],edx
 00490E9B    mov         eax,dword ptr [ebp-4]
 00490E9E    mov         dword ptr [eax+70],80000
 00490EA5    mov         eax,dword ptr [ebp-4]
 00490EA8    mov         dword ptr [eax+18],0C
 00490EAF    mov         eax,dword ptr [ebp-0C]
 00490EB2    movzx       eax,byte ptr [eax+5D]
 00490EB6    cmp         al,1
>00490EB8    je          00490EBE
 00490EBA    cmp         al,2
>00490EBC    jne         00490EC2
 00490EBE    xor         eax,eax
>00490EC0    jmp         00490EC4
 00490EC2    mov         al,1
 00490EC4    mov         edx,dword ptr [ebp-4]
 00490EC7    mov         byte ptr [edx+1C],al
 00490ECA    mov         ecx,dword ptr [ebp-4]
 00490ECD    mov         dl,1
 00490ECF    mov         eax,[0047E9AC];TDockZone
 00490ED4    call        TDockZone.Create
 00490ED9    mov         edx,dword ptr [ebp-4]
 00490EDC    mov         dword ptr [edx+64],eax
 00490EDF    mov         dl,1
 00490EE1    mov         eax,[00460070];TBrush
 00490EE6    call        TBrush.Create
 00490EEB    mov         ebx,eax
 00490EED    mov         eax,dword ptr [ebp-4]
 00490EF0    mov         dword ptr [eax+10],ebx
 00490EF3    mov         edx,0FFFFFF
 00490EF8    xor         eax,eax
 00490EFA    call        AllocPatternBitmap
 00490EFF    mov         edx,eax
 00490F01    mov         eax,ebx
 00490F03    call        TBrush.SetBitmap
 00490F08    mov         eax,dword ptr [ebp-4]
 00490F0B    call        TDockTree.BeginUpdate
 00490F10    xor         eax,eax
 00490F12    push        ebp
 00490F13    push        490F6D
 00490F18    push        dword ptr fs:[eax]
 00490F1B    mov         dword ptr fs:[eax],esp
 00490F1E    mov         eax,dword ptr [ebp-0C]
 00490F21    call        TWinControl.GetControlCount
 00490F26    mov         ebx,eax
 00490F28    dec         ebx
 00490F29    test        ebx,ebx
>00490F2B    jl          00490F4C
 00490F2D    inc         ebx
 00490F2E    xor         esi,esi
 00490F30    push        0
 00490F32    mov         edx,esi
 00490F34    mov         eax,dword ptr [ebp-0C]
 00490F37    call        TWinControl.GetControl
 00490F3C    mov         edx,eax
 00490F3E    mov         cl,3
 00490F40    mov         eax,dword ptr [ebp-4]
 00490F43    mov         edi,dword ptr [eax]
 00490F45    call        dword ptr [edi+0C]
 00490F48    inc         esi
 00490F49    dec         ebx
>00490F4A    jne         00490F30
 00490F4C    mov         eax,dword ptr [ebp-4]
 00490F4F    mov         eax,dword ptr [eax+64]
 00490F52    call        TDockZone.ResetChildren
 00490F57    xor         eax,eax
 00490F59    pop         edx
 00490F5A    pop         ecx
 00490F5B    pop         ecx
 00490F5C    mov         dword ptr fs:[eax],edx
 00490F5F    push        490F74
 00490F64    mov         eax,dword ptr [ebp-4]
 00490F67    call        TDockTree.EndUpdate
 00490F6C    ret
>00490F6D    jmp         @HandleFinally
>00490F72    jmp         00490F64
 00490F74    mov         eax,dword ptr [ebp-0C]
 00490F77    test        byte ptr [eax+1C],10
>00490F7B    jne         00490FA5
 00490F7D    mov         eax,dword ptr [ebp-4]
 00490F80    mov         edx,dword ptr [ebp-4]
 00490F83    mov         edx,dword ptr [edx+14]
 00490F86    mov         ecx,dword ptr [edx+38]
 00490F89    mov         dword ptr [eax+30],ecx
 00490F8C    mov         ecx,dword ptr [edx+3C]
 00490F8F    mov         dword ptr [eax+34],ecx
 00490F92    mov         eax,dword ptr [ebp-4]
 00490F95    mov         eax,dword ptr [eax+14]
 00490F98    mov         edx,dword ptr [ebp-4]
 00490F9B    mov         dword ptr [eax+3C],edx
 00490F9E    mov         dword ptr [eax+38],492CD8;TDockTree.WindowProc
 00490FA5    mov         eax,dword ptr [ebp-4]
 00490FA8    cmp         byte ptr [ebp-5],0
>00490FAC    je          00490FBD
 00490FAE    call        @AfterConstruction
 00490FB3    pop         dword ptr fs:[0]
 00490FBA    add         esp,0C
 00490FBD    mov         eax,dword ptr [ebp-4]
 00490FC0    pop         edi
 00490FC1    pop         esi
 00490FC2    pop         ebx
 00490FC3    mov         esp,ebp
 00490FC5    pop         ebp
 00490FC6    ret
*}
end;

//00490FC8
destructor TDockTree.Destroy();
begin
{*
 00490FC8    push        ebx
 00490FC9    push        esi
 00490FCA    call        @BeforeDestruction
 00490FCF    mov         ebx,edx
 00490FD1    mov         esi,eax
 00490FD3    cmp         word ptr [esi+32],0
>00490FD8    je          00490FF1
 00490FDA    mov         eax,dword ptr [esi+14]
 00490FDD    mov         edx,dword ptr [esi+30]
 00490FE0    mov         dword ptr [eax+38],edx
 00490FE3    mov         edx,dword ptr [esi+34]
 00490FE6    mov         dword ptr [eax+3C],edx
 00490FE9    xor         eax,eax
 00490FEB    mov         dword ptr [esi+30],eax
 00490FEE    mov         dword ptr [esi+34],eax
 00490FF1    mov         edx,dword ptr [esi+64]
 00490FF4    mov         eax,esi
 00490FF6    call        TDockTree.PruneZone
 00490FFB    mov         eax,dword ptr [esi+10]
 00490FFE    call        TObject.Free
 00491003    mov         edx,ebx
 00491005    and         dl,0FC
 00491008    mov         eax,esi
 0049100A    call        TObject.Destroy
 0049100F    test        bl,bl
>00491011    jle         0049101A
 00491013    mov         eax,esi
 00491015    call        @ClassDestroy
 0049101A    pop         esi
 0049101B    pop         ebx
 0049101C    ret
*}
end;

//00491020
procedure TDockTree.AdjustDockRect(Control:TControl; var ARect:TRect);
begin
{*
 00491020    mov         eax,dword ptr [eax+14]
 00491023    movzx       eax,byte ptr [eax+5D]
 00491027    dec         eax
 00491028    sub         al,2
>0049102A    jae         00491030
 0049102C    add         dword ptr [ecx],0C
 0049102F    ret
 00491030    add         dword ptr [ecx+4],0C
 00491034    ret
*}
end;

//00491038
procedure TDockTree.BeginUpdate;
begin
{*
 00491038    inc         dword ptr [eax+6C]
 0049103B    ret
*}
end;

//0049103C
procedure TDockTree.EndUpdate;
begin
{*
 0049103C    dec         dword ptr [eax+6C]
 0049103F    cmp         dword ptr [eax+6C],0
>00491043    jg          0049104F
 00491045    xor         edx,edx
 00491047    mov         dword ptr [eax+6C],edx
 0049104A    call        TDockTree.UpdateAll
 0049104F    ret
*}
end;

//00491050
procedure DoFindControlZone(StartZone:TDockZone);
begin
{*
 00491050    push        ebp
 00491051    mov         ebp,esp
 00491053    push        ebx
 00491054    mov         ebx,eax
 00491056    mov         eax,dword ptr [ebp+8]
 00491059    mov         eax,dword ptr [eax-4]
 0049105C    cmp         eax,dword ptr [ebx+4]
>0049105F    jne         0049106A
 00491061    mov         eax,dword ptr [ebp+8]
 00491064    mov         dword ptr [eax-8],ebx
 00491067    pop         ebx
 00491068    pop         ebp
 00491069    ret
 0049106A    mov         eax,dword ptr [ebp+8]
 0049106D    cmp         dword ptr [eax-8],0
>00491071    jne         00491086
 00491073    cmp         dword ptr [ebx+0C],0
>00491077    je          00491086
 00491079    mov         eax,dword ptr [ebp+8]
 0049107C    push        eax
 0049107D    mov         eax,dword ptr [ebx+0C]
 00491080    call        DoFindControlZone
 00491085    pop         ecx
 00491086    mov         eax,dword ptr [ebp+8]
 00491089    cmp         dword ptr [eax-8],0
>0049108D    jne         004910A2
 0049108F    cmp         dword ptr [ebx+8],0
>00491093    je          004910A2
 00491095    mov         eax,dword ptr [ebp+8]
 00491098    push        eax
 00491099    mov         eax,dword ptr [ebx+8]
 0049109C    call        DoFindControlZone
 004910A1    pop         ecx
 004910A2    pop         ebx
 004910A3    pop         ebp
 004910A4    ret
*}
end;

//004910A8
function TDockTree.FindControlZone(Control:TControl):TDockZone;
begin
{*
 004910A8    push        ebp
 004910A9    mov         ebp,esp
 004910AB    add         esp,0FFFFFFF8
 004910AE    mov         dword ptr [ebp-4],edx
 004910B1    xor         edx,edx
 004910B3    mov         dword ptr [ebp-8],edx
 004910B6    cmp         dword ptr [ebp-4],0
>004910BA    je          004910CC
 004910BC    cmp         dword ptr [eax+64],0
>004910C0    je          004910CC
 004910C2    push        ebp
 004910C3    mov         eax,dword ptr [eax+64]
 004910C6    call        DoFindControlZone
 004910CB    pop         ecx
 004910CC    mov         eax,dword ptr [ebp-8]
 004910CF    pop         ecx
 004910D0    pop         ecx
 004910D1    pop         ebp
 004910D2    ret
*}
end;

//004910D4
procedure DoForEach(Zone:TDockZone);
begin
{*
 004910D4    push        ebp
 004910D5    mov         ebp,esp
 004910D7    push        ebx
 004910D8    push        esi
 004910D9    mov         ebx,eax
 004910DB    mov         eax,dword ptr [ebp+8]
 004910DE    lea         esi,[eax+8]
 004910E1    mov         edx,ebx
 004910E3    mov         eax,dword ptr [esi+4]
 004910E6    call        dword ptr [esi]
 004910E8    mov         eax,dword ptr [ebx+0C]
 004910EB    test        eax,eax
>004910ED    je          004910F9
 004910EF    mov         edx,dword ptr [ebp+8]
 004910F2    push        edx
 004910F3    call        DoForEach
 004910F8    pop         ecx
 004910F9    mov         eax,dword ptr [ebx+8]
 004910FC    test        eax,eax
>004910FE    je          0049110A
 00491100    mov         edx,dword ptr [ebp+8]
 00491103    push        edx
 00491104    call        DoForEach
 00491109    pop         ecx
 0049110A    pop         esi
 0049110B    pop         ebx
 0049110C    pop         ebp
 0049110D    ret
*}
end;

//00491110
procedure TDockTree.ForEachAt(Zone:TDockZone; Proc:TForEachZoneProc);
begin
{*
 00491110    push        ebp
 00491111    mov         ebp,esp
 00491113    test        edx,edx
>00491115    jne         0049111A
 00491117    mov         edx,dword ptr [eax+64]
 0049111A    push        ebp
 0049111B    mov         eax,edx
 0049111D    call        DoForEach
 00491122    pop         ecx
 00491123    pop         ebp
 00491124    ret         8
*}
end;

//00491128
procedure TDockTree.GetControlBounds(Control:TControl; var CtlBounds:TRect);
begin
{*
 00491128    push        ebx
 00491129    push        esi
 0049112A    push        edi
 0049112B    add         esp,0FFFFFFF0
 0049112E    mov         esi,ecx
 00491130    call        TDockTree.FindControlZone
 00491135    mov         ebx,eax
 00491137    test        ebx,ebx
>00491139    jne         00491150
 0049113B    xor         eax,eax
 0049113D    mov         dword ptr [esi],eax
 0049113F    xor         eax,eax
 00491141    mov         dword ptr [esi+8],eax
 00491144    xor         eax,eax
 00491146    mov         dword ptr [esi+4],eax
 00491149    xor         eax,eax
 0049114B    mov         dword ptr [esi+0C],eax
>0049114E    jmp         00491197
 00491150    mov         edx,1
 00491155    mov         eax,ebx
 00491157    call        TDockZone.GetHeightWidth
 0049115C    push        eax
 0049115D    lea         eax,[esp+4]
 00491161    push        eax
 00491162    mov         edx,2
 00491167    mov         eax,ebx
 00491169    call        TDockZone.GetHeightWidth
 0049116E    push        eax
 0049116F    mov         edx,1
 00491174    mov         eax,ebx
 00491176    call        TDockZone.GetTopLeft
 0049117B    push        eax
 0049117C    mov         edx,2
 00491181    mov         eax,ebx
 00491183    call        TDockZone.GetTopLeft
 00491188    pop         edx
 00491189    pop         ecx
 0049118A    call        Bounds
 0049118F    mov         edi,esi
 00491191    mov         esi,esp
 00491193    movs        dword ptr [edi],dword ptr [esi]
 00491194    movs        dword ptr [edi],dword ptr [esi]
 00491195    movs        dword ptr [edi],dword ptr [esi]
 00491196    movs        dword ptr [edi],dword ptr [esi]
 00491197    add         esp,10
 0049119A    pop         edi
 0049119B    pop         esi
 0049119C    pop         ebx
 0049119D    ret
*}
end;

//004911A0
function TDockTree.HitTest(const MousePos:TPoint; var HTFlag:Integer):TControl;
begin
{*
 004911A0    call        TDockTree.InternalHitTest
 004911A5    test        eax,eax
>004911A7    je          004911AD
 004911A9    mov         eax,dword ptr [eax+4]
 004911AC    ret
 004911AD    xor         eax,eax
 004911AF    ret
*}
end;

//004911B0
procedure TDockTree.InsertControl(Control:TControl; InsertAt:TAlign; DropCtl:TControl);
begin
{*
 004911B0    push        ebp
 004911B1    mov         ebp,esp
 004911B3    add         esp,0FFFFFFD0
 004911B6    push        ebx
 004911B7    push        esi
 004911B8    push        edi
 004911B9    mov         byte ptr [ebp-1],cl
 004911BC    mov         ebx,edx
 004911BE    mov         esi,eax
 004911C0    cmp         byte ptr [ebx+59],0
>004911C4    je          004913B8
 004911CA    mov         eax,dword ptr [esi+38]
 004911CD    test        eax,eax
>004911CF    je          004911DE
 004911D1    mov         dword ptr [eax+4],ebx
 004911D4    call        TDockZone.Update
>004911D9    jmp         004913AD
 004911DE    mov         eax,dword ptr [esi+64]
 004911E1    cmp         dword ptr [eax+8],0
>004911E5    jne         0049128E
 004911EB    lea         edx,[ebp-20]
 004911EE    mov         eax,dword ptr [esi+14]
 004911F1    mov         ecx,dword ptr [eax]
 004911F3    call        dword ptr [ecx+54]
 004911F6    lea         edx,[ebp-20]
 004911F9    mov         eax,dword ptr [esi+14]
 004911FC    mov         ecx,dword ptr [eax]
 004911FE    call        dword ptr [ecx+0A0]
 00491204    mov         edi,dword ptr [ebp-18]
 00491207    sub         edi,dword ptr [ebp-20]
 0049120A    mov         eax,dword ptr [ebp-14]
 0049120D    sub         eax,dword ptr [ebp-1C]
 00491210    mov         dword ptr [ebp-10],eax
 00491213    mov         eax,dword ptr [esi+14]
 00491216    cmp         byte ptr [eax+5E],0
>0049121A    je          00491239
 0049121C    test        edi,edi
>0049121E    jne         00491229
 00491220    mov         eax,ebx
 00491222    call        TControl.GetUndockWidth
 00491227    mov         edi,eax
 00491229    cmp         dword ptr [ebp-10],0
>0049122D    jne         00491239
 0049122F    mov         eax,ebx
 00491231    call        TControl.GetUndockHeight
 00491236    mov         dword ptr [ebp-10],eax
 00491239    mov         eax,dword ptr [ebp-10]
 0049123C    push        eax
 0049123D    lea         eax,[ebp-30]
 00491240    push        eax
 00491241    mov         ecx,edi
 00491243    mov         edx,dword ptr [ebp-1C]
 00491246    mov         eax,dword ptr [ebp-20]
 00491249    call        Bounds
 0049124E    push        esi
 0049124F    lea         esi,[ebp-30]
 00491252    lea         edi,[ebp-20]
 00491255    movs        dword ptr [edi],dword ptr [esi]
 00491256    movs        dword ptr [edi],dword ptr [esi]
 00491257    movs        dword ptr [edi],dword ptr [esi]
 00491258    movs        dword ptr [edi],dword ptr [esi]
 00491259    pop         esi
 0049125A    lea         ecx,[ebp-20]
 0049125D    mov         edx,ebx
 0049125F    mov         eax,esi
 00491261    mov         edi,dword ptr [eax]
 00491263    call        dword ptr [edi]
 00491265    lea         edx,[ebp-20]
 00491268    mov         eax,ebx
 0049126A    call        TControl.SetBoundsRect
 0049126F    mov         ecx,esi
 00491271    mov         dl,1
 00491273    mov         eax,[0047E9AC];TDockZone
 00491278    call        TDockZone.Create
 0049127D    mov         edx,dword ptr [esi+64]
 00491280    mov         dword ptr [edx+8],eax
 00491283    mov         dword ptr [eax+14],edx
 00491286    mov         dword ptr [eax+4],ebx
>00491289    jmp         004913AD
 0049128E    movzx       eax,byte ptr [ebp-1]
 00491292    test        al,al
>00491294    je          0049129A
 00491296    sub         al,5
>00491298    jne         0049129E
 0049129A    mov         byte ptr [ebp-1],4
 0049129E    mov         edx,ebx
 004912A0    mov         eax,esi
 004912A2    call        TDockTree.FindControlZone
 004912A7    test        eax,eax
>004912A9    je          004912B4
 004912AB    mov         edx,eax
 004912AD    mov         eax,esi
 004912AF    call        TDockTree.RemoveZone
 004912B4    mov         edx,dword ptr [ebp+8]
 004912B7    mov         eax,esi
 004912B9    call        TDockTree.FindControlZone
 004912BE    mov         dword ptr [ebp-8],eax
 004912C1    movzx       eax,byte ptr [ebp-1]
 004912C5    movzx       eax,byte ptr [eax+785B28]
 004912CC    mov         byte ptr [ebp-9],al
 004912CF    mov         eax,dword ptr [esi+64]
 004912D2    call        TDockZone.GetChildCount
 004912D7    dec         eax
>004912D8    jne         0049133E
 004912DA    mov         eax,dword ptr [esi+64]
 004912DD    movzx       edx,byte ptr [ebp-9]
 004912E1    mov         byte ptr [eax+10],dl
 004912E4    movzx       edx,byte ptr [ebp-9]
 004912E8    dec         dl
>004912EA    je          004912F2
 004912EC    dec         dl
>004912EE    je          00491319
>004912F0    jmp         0049133E
 004912F2    mov         edi,eax
 004912F4    mov         eax,dword ptr [eax+8]
 004912F7    mov         edx,2
 004912FC    call        TDockZone.GetHeightWidth
 00491301    mov         dword ptr [edi+20],eax
 00491304    mov         eax,dword ptr [esi+64]
 00491307    mov         eax,dword ptr [eax+8]
 0049130A    mov         edx,1
 0049130F    call        TDockZone.GetHeightWidth
 00491314    mov         dword ptr [esi+68],eax
>00491317    jmp         0049133E
 00491319    mov         edi,eax
 0049131B    mov         eax,dword ptr [eax+8]
 0049131E    mov         edx,1
 00491323    call        TDockZone.GetHeightWidth
 00491328    mov         dword ptr [edi+20],eax
 0049132B    mov         eax,dword ptr [esi+64]
 0049132E    mov         eax,dword ptr [eax+8]
 00491331    mov         edx,2
 00491336    call        TDockZone.GetHeightWidth
 0049133B    mov         dword ptr [esi+68],eax
 0049133E    mov         ecx,esi
 00491340    mov         dl,1
 00491342    mov         eax,[0047E9AC];TDockZone
 00491347    call        TDockZone.Create
 0049134C    mov         dword ptr [eax+4],ebx
 0049134F    cmp         dword ptr [ebp-8],0
>00491353    je          00491361
 00491355    mov         edx,dword ptr [ebp-8]
 00491358    mov         edx,dword ptr [edx+14]
 0049135B    movzx       edx,byte ptr [edx+10]
>0049135F    jmp         00491368
 00491361    mov         edx,dword ptr [esi+64]
 00491364    movzx       edx,byte ptr [edx+10]
 00491368    cmp         byte ptr [ebp-9],0
>0049136C    jne         00491371
 0049136E    mov         byte ptr [ebp-9],dl
 00491371    cmp         dl,byte ptr [ebp-9]
>00491374    jne         00491390
 00491376    movzx       edx,byte ptr [ebp-1]
 0049137A    movzx       edx,byte ptr [edx+785B2F]
 00491381    push        edx
 00491382    mov         ecx,dword ptr [ebp-8]
 00491385    mov         edx,eax
 00491387    mov         eax,esi
 00491389    call        TDockTree.InsertSibling
>0049138E    jmp         004913AD
 00491390    movzx       edx,byte ptr [ebp-9]
 00491394    push        edx
 00491395    movzx       edx,byte ptr [ebp-1]
 00491399    movzx       edx,byte ptr [edx+785B2F]
 004913A0    push        edx
 004913A1    mov         ecx,dword ptr [ebp-8]
 004913A4    mov         edx,eax
 004913A6    mov         eax,esi
 004913A8    call        TDockTree.InsertNewParent
 004913AD    mov         eax,dword ptr [esi+14]
 004913B0    mov         edx,dword ptr [eax]
 004913B2    call        dword ptr [edx+90]
 004913B8    pop         edi
 004913B9    pop         esi
 004913BA    pop         ebx
 004913BB    mov         esp,ebp
 004913BD    pop         ebp
 004913BE    ret         4
*}
end;

//004913C4
procedure TDockTree.InsertNewParent(NewZone:TDockZone; SiblingZone:TDockZone; ParentOrientation:TDockOrientation; InsertLast:Boolean);
begin
{*
 004913C4    push        ebp
 004913C5    mov         ebp,esp
 004913C7    add         esp,0FFFFFFF8
 004913CA    push        ebx
 004913CB    push        esi
 004913CC    push        edi
 004913CD    mov         edi,ecx
 004913CF    mov         dword ptr [ebp-4],edx
 004913D2    mov         esi,eax
 004913D4    mov         ecx,esi
 004913D6    mov         dl,1
 004913D8    mov         eax,[0047E9AC];TDockZone
 004913DD    call        TDockZone.Create
 004913E2    mov         ebx,eax
 004913E4    movzx       eax,byte ptr [ebp+0C]
 004913E8    mov         byte ptr [ebx+10],al
 004913EB    test        edi,edi
>004913ED    jne         004914CB
 004913F3    mov         eax,ebx
 004913F5    mov         edx,dword ptr [esi+68]
 004913F8    mov         dword ptr [eax+20],edx
 004913FB    mov         eax,dword ptr [esi+64]
 004913FE    call        TDockZone.GetZoneLimit
 00491403    mov         dword ptr [esi+68],eax
 00491406    movzx       eax,byte ptr [ebp+0C]
 0049140A    mov         byte ptr [esi+48],al
 0049140D    xor         eax,eax
 0049140F    mov         dword ptr [esi+40],eax
 00491412    mov         dword ptr [esi+44],3FE00000
 00491419    cmp         byte ptr [ebp+8],0
>0049141D    je          00491452
 0049141F    mov         eax,dword ptr [esi+64]
 00491422    mov         dword ptr [ebx+8],eax
 00491425    mov         eax,dword ptr [esi+64]
 00491428    mov         dword ptr [eax+14],ebx
 0049142B    mov         edx,dword ptr [ebp-4]
 0049142E    mov         dword ptr [eax+0C],edx
 00491431    mov         edx,dword ptr [ebp-4]
 00491434    mov         dword ptr [edx+18],eax
 00491437    mov         eax,dword ptr [ebp-4]
 0049143A    mov         dword ptr [eax+14],ebx
 0049143D    mov         dword ptr [esi+64],ebx
 00491440    push        esi
 00491441    push        4926D4;TDockTree.ScaleZone
 00491446    mov         edx,dword ptr [ebx+8]
 00491449    mov         eax,esi
 0049144B    call        TDockTree.ForEachAt
>00491450    jmp         004914BA
 00491452    mov         eax,dword ptr [ebp-4]
 00491455    mov         dword ptr [ebx+8],eax
 00491458    mov         eax,dword ptr [esi+64]
 0049145B    mov         dword ptr [eax+14],ebx
 0049145E    mov         edx,dword ptr [ebp-4]
 00491461    mov         dword ptr [eax+18],edx
 00491464    mov         edx,dword ptr [ebp-4]
 00491467    mov         dword ptr [edx+0C],eax
 0049146A    mov         eax,dword ptr [ebp-4]
 0049146D    mov         dword ptr [eax+14],ebx
 00491470    mov         dword ptr [esi+64],ebx
 00491473    push        esi
 00491474    push        4926D4;TDockTree.ScaleZone
 00491479    mov         edx,dword ptr [ebx+8]
 0049147C    mov         eax,esi
 0049147E    call        TDockTree.ForEachAt
 00491483    mov         eax,dword ptr [esi+64]
 00491486    call        TDockZone.GetZoneLimit
 0049148B    sar         eax,1
>0049148D    jns         00491492
 0049148F    adc         eax,0
 00491492    mov         dword ptr [esi+4C],eax
 00491495    push        esi
 00491496    push        492B98;TDockTree.ShiftZone
 0049149B    mov         edx,dword ptr [ebx+8]
 0049149E    mov         eax,esi
 004914A0    call        TDockTree.ForEachAt
 004914A5    mov         edi,dword ptr [ebp-4]
 004914A8    mov         eax,dword ptr [esi+64]
 004914AB    call        TDockZone.GetZoneLimit
 004914B0    sar         eax,1
>004914B2    jns         004914B7
 004914B4    adc         eax,0
 004914B7    mov         dword ptr [edi+20],eax
 004914BA    push        esi
 004914BB    push        492CC8;TDockTree.UpdateZone
 004914C0    xor         edx,edx
 004914C2    mov         eax,esi
 004914C4    call        TDockTree.ForEachAt
>004914C9    jmp         00491542
 004914CB    mov         dword ptr [ebp-8],ebx
 004914CE    mov         eax,edi
 004914D0    call        TDockZone.GetZoneLimit
 004914D5    mov         edx,dword ptr [ebp-8]
 004914D8    mov         dword ptr [edx+20],eax
 004914DB    mov         eax,dword ptr [edi+14]
 004914DE    mov         dword ptr [ebx+14],eax
 004914E1    mov         eax,dword ptr [edi+18]
 004914E4    mov         dword ptr [ebx+18],eax
 004914E7    test        eax,eax
>004914E9    je          004914EE
 004914EB    mov         dword ptr [eax+0C],ebx
 004914EE    mov         eax,dword ptr [edi+0C]
 004914F1    mov         dword ptr [ebx+0C],eax
 004914F4    test        eax,eax
>004914F6    je          004914FB
 004914F8    mov         dword ptr [eax+18],ebx
 004914FB    mov         eax,dword ptr [ebx+14]
 004914FE    cmp         edi,dword ptr [eax+8]
>00491501    jne         00491506
 00491503    mov         dword ptr [eax+8],ebx
 00491506    mov         eax,dword ptr [ebp-4]
 00491509    mov         dword ptr [eax+14],ebx
 0049150C    mov         dword ptr [edi+14],ebx
 0049150F    cmp         byte ptr [ebp+8],0
>00491513    je          0049152B
 00491515    mov         dword ptr [ebx+8],edi
 00491518    xor         eax,eax
 0049151A    mov         dword ptr [edi+18],eax
 0049151D    mov         eax,dword ptr [ebp-4]
 00491520    mov         dword ptr [edi+0C],eax
 00491523    mov         eax,dword ptr [ebp-4]
 00491526    mov         dword ptr [eax+18],edi
>00491529    jmp         00491542
 0049152B    mov         eax,dword ptr [ebp-4]
 0049152E    mov         dword ptr [ebx+8],eax
 00491531    mov         eax,dword ptr [ebp-4]
 00491534    mov         dword ptr [edi+18],eax
 00491537    xor         eax,eax
 00491539    mov         dword ptr [edi+0C],eax
 0049153C    mov         eax,dword ptr [ebp-4]
 0049153F    mov         dword ptr [eax+0C],edi
 00491542    mov         eax,ebx
 00491544    call        TDockZone.ResetChildren
 00491549    mov         eax,ebx
 0049154B    call        TDockZone.ResetZoneLimits
 00491550    push        esi
 00491551    push        492CC8;TDockTree.UpdateZone
 00491556    xor         edx,edx
 00491558    mov         eax,esi
 0049155A    call        TDockTree.ForEachAt
 0049155F    pop         edi
 00491560    pop         esi
 00491561    pop         ebx
 00491562    pop         ecx
 00491563    pop         ecx
 00491564    pop         ebp
 00491565    ret         8
*}
end;

//00491568
procedure TDockTree.InsertSibling(NewZone:TDockZone; SiblingZone:TDockZone; InsertLast:Boolean);
begin
{*
 00491568    push        ebp
 00491569    mov         ebp,esp
 0049156B    push        ebx
 0049156C    mov         ebx,ecx
 0049156E    mov         ecx,dword ptr [ebp+8]
 00491571    test        ebx,ebx
>00491573    jne         0049158A
 00491575    mov         eax,dword ptr [eax+64]
 00491578    mov         ebx,dword ptr [eax+8]
 0049157B    test        cl,cl
>0049157D    je          0049158A
>0049157F    jmp         00491583
 00491581    mov         ebx,eax
 00491583    mov         eax,dword ptr [ebx+0C]
 00491586    test        eax,eax
>00491588    jne         00491581
 0049158A    test        cl,cl
>0049158C    je          004915A9
 0049158E    mov         eax,dword ptr [ebx+14]
 00491591    mov         dword ptr [edx+14],eax
 00491594    mov         dword ptr [edx+18],ebx
 00491597    mov         eax,dword ptr [ebx+0C]
 0049159A    mov         dword ptr [edx+0C],eax
 0049159D    test        eax,eax
>0049159F    je          004915A4
 004915A1    mov         dword ptr [eax+18],edx
 004915A4    mov         dword ptr [ebx+0C],edx
>004915A7    jmp         004915CA
 004915A9    mov         dword ptr [edx+0C],ebx
 004915AC    mov         eax,dword ptr [ebx+18]
 004915AF    mov         dword ptr [edx+18],eax
 004915B2    test        eax,eax
>004915B4    je          004915B9
 004915B6    mov         dword ptr [eax+0C],edx
 004915B9    mov         dword ptr [ebx+18],edx
 004915BC    mov         eax,dword ptr [ebx+14]
 004915BF    mov         dword ptr [edx+14],eax
 004915C2    cmp         ebx,dword ptr [eax+8]
>004915C5    jne         004915CA
 004915C7    mov         dword ptr [eax+8],edx
 004915CA    mov         eax,dword ptr [ebx+14]
 004915CD    call        TDockZone.ResetChildren
 004915D2    mov         eax,dword ptr [ebx+14]
 004915D5    call        TDockZone.ResetZoneLimits
 004915DA    pop         ebx
 004915DB    pop         ebp
 004915DC    ret         4
*}
end;

//004915E0
function TDockTree.ZoneCaptionHitTest(const Zone:TDockZone; const MousePos:TPoint; var HTFlag:Integer):Boolean;
begin
{*
 004915E0    push        ebp
 004915E1    mov         ebp,esp
 004915E3    add         esp,0FFFFFFF4
 004915E6    push        ebx
 004915E7    push        esi
 004915E8    push        edi
 004915E9    mov         ebx,ecx
 004915EB    mov         esi,edx
 004915ED    mov         dword ptr [ebp-4],eax
 004915F0    mov         byte ptr [ebp-5],0
 004915F4    mov         edx,1
 004915F9    mov         eax,esi
 004915FB    call        TDockZone.GetTopLeft
 00491600    mov         edi,eax
 00491602    mov         edx,2
 00491607    mov         eax,esi
 00491609    call        TDockZone.GetTopLeft
 0049160E    mov         dword ptr [ebp-0C],eax
 00491611    mov         eax,dword ptr [ebp-4]
 00491614    cmp         byte ptr [eax+1C],0
>00491618    je          00491680
 0049161A    cmp         edi,dword ptr [ebx+4]
>0049161D    jg          004916D6
 00491623    mov         eax,dword ptr [ebx+4]
 00491626    mov         edx,dword ptr [ebp-4]
 00491629    add         edi,dword ptr [edx+18]
 0049162C    cmp         eax,edi
>0049162E    jg          004916D6
 00491634    mov         eax,dword ptr [ebx]
 00491636    cmp         eax,dword ptr [ebp-0C]
>00491639    jl          004916D6
 0049163F    mov         edx,2
 00491644    mov         eax,esi
 00491646    call        TDockZone.GetHeightWidth
 0049164B    add         eax,dword ptr [ebp-0C]
 0049164E    cmp         eax,dword ptr [ebx]
>00491650    jl          004916D6
 00491656    mov         byte ptr [ebp-5],1
 0049165A    mov         eax,dword ptr [esi+4]
 0049165D    mov         edx,dword ptr [eax+40]
 00491660    add         edx,dword ptr [eax+48]
 00491663    sub         edx,0F
 00491666    cmp         edx,dword ptr [ebx]
>00491668    jge         00491675
 0049166A    mov         eax,dword ptr [ebp+8]
 0049166D    mov         dword ptr [eax],14
>00491673    jmp         004916D6
 00491675    mov         eax,dword ptr [ebp+8]
 00491678    mov         dword ptr [eax],2
>0049167E    jmp         004916D6
 00491680    mov         eax,dword ptr [ebx]
 00491682    cmp         eax,dword ptr [ebp-0C]
>00491685    jl          004916D6
 00491687    mov         eax,dword ptr [ebx]
 00491689    mov         edx,dword ptr [ebp-4]
 0049168C    mov         edx,dword ptr [edx+18]
 0049168F    add         edx,dword ptr [ebp-0C]
 00491692    cmp         eax,edx
>00491694    jg          004916D6
 00491696    cmp         edi,dword ptr [ebx+4]
>00491699    jg          004916D6
 0049169B    mov         edx,1
 004916A0    mov         eax,esi
 004916A2    call        TDockZone.GetHeightWidth
 004916A7    add         edi,eax
 004916A9    cmp         edi,dword ptr [ebx+4]
>004916AC    jl          004916D6
 004916AE    mov         byte ptr [ebp-5],1
 004916B2    mov         eax,dword ptr [ebx+4]
 004916B5    mov         edx,dword ptr [esi+4]
 004916B8    mov         edx,dword ptr [edx+44]
 004916BB    add         edx,0F
 004916BE    cmp         eax,edx
>004916C0    jge         004916CD
 004916C2    mov         eax,dword ptr [ebp+8]
 004916C5    mov         dword ptr [eax],14
>004916CB    jmp         004916D6
 004916CD    mov         eax,dword ptr [ebp+8]
 004916D0    mov         dword ptr [eax],2
 004916D6    movzx       eax,byte ptr [ebp-5]
 004916DA    pop         edi
 004916DB    pop         esi
 004916DC    pop         ebx
 004916DD    mov         esp,ebp
 004916DF    pop         ebp
 004916E0    ret         4
*}
end;

//004916E4
function TDockTree.FindControlAtPos(const Pos:TPoint):TControl;
begin
{*
 004916E4    push        ebx
 004916E5    push        esi
 004916E6    push        edi
 004916E7    push        ebp
 004916E8    add         esp,0FFFFFFE0
 004916EB    mov         edi,edx
 004916ED    mov         ebp,eax
 004916EF    mov         eax,dword ptr [ebp+14]
 004916F2    call        TWinControl.GetControlCount
 004916F7    mov         esi,eax
 004916F9    dec         esi
 004916FA    cmp         esi,0
>004916FD    jl          0049176D
 004916FF    mov         eax,dword ptr [ebp+14]
 00491702    mov         edx,esi
 00491704    call        TWinControl.GetControl
 00491709    mov         ebx,eax
 0049170B    cmp         byte ptr [ebx+59],0
>0049170F    je          00491767
 00491711    mov         eax,ebx
 00491713    mov         edx,dword ptr ds:[47C4E8];TWinControl
 00491719    call        @IsClass
 0049171E    test        al,al
>00491720    je          0049172B
 00491722    cmp         byte ptr [ebx+1EA],0
>00491729    je          00491767
 0049172B    mov         eax,dword ptr [edi]
 0049172D    sub         eax,dword ptr [ebx+40]
 00491730    mov         edx,dword ptr [edi+4]
 00491733    sub         edx,dword ptr [ebx+44]
 00491736    mov         dword ptr [esp+8],eax
 0049173A    mov         dword ptr [esp+0C],edx
 0049173E    mov         eax,dword ptr [esp+8]
 00491742    mov         dword ptr [esp],eax
 00491745    mov         eax,dword ptr [esp+0C]
 00491749    mov         dword ptr [esp+4],eax
 0049174D    lea         edx,[esp+10]
 00491751    mov         eax,ebx
 00491753    mov         ecx,dword ptr [eax]
 00491755    call        dword ptr [ecx+54]
 00491758    lea         eax,[esp+10]
 0049175C    mov         edx,esp
 0049175E    call        PtInRect
 00491763    test        al,al
>00491765    jne         0049176F
 00491767    dec         esi
 00491768    cmp         esi,0FFFFFFFF
>0049176B    jne         004916FF
 0049176D    xor         ebx,ebx
 0049176F    mov         eax,ebx
 00491771    add         esp,20
 00491774    pop         ebp
 00491775    pop         edi
 00491776    pop         esi
 00491777    pop         ebx
 00491778    ret
*}
end;

//0049177C
procedure DoFindZone(Zone:TDockZone);
begin
{*
 0049177C    push        ebp
 0049177D    mov         ebp,esp
 0049177F    push        ebx
 00491780    push        esi
 00491781    mov         ebx,eax
 00491783    mov         eax,dword ptr [ebx+14]
 00491786    cmp         byte ptr [eax+10],1
>0049178A    jne         004917CD
 0049178C    mov         eax,ebx
 0049178E    call        TDockZone.GetZoneLimit
 00491793    mov         edx,dword ptr [ebp+8]
 00491796    mov         edx,dword ptr [edx-4]
 00491799    cmp         eax,dword ptr [edx+4]
>0049179C    jl          004917CD
 0049179E    mov         eax,ebx
 004917A0    call        TDockZone.GetZoneLimit
 004917A5    mov         edx,dword ptr [ebp+8]
 004917A8    mov         edx,dword ptr [edx-8]
 004917AB    sub         eax,dword ptr [edx+0C]
 004917AE    mov         edx,dword ptr [ebp+8]
 004917B1    mov         edx,dword ptr [edx-4]
 004917B4    cmp         eax,dword ptr [edx+4]
>004917B7    jg          004917CD
 004917B9    mov         eax,dword ptr [ebp+8]
 004917BC    mov         eax,dword ptr [eax-0C]
 004917BF    mov         dword ptr [eax],12
 004917C5    mov         eax,dword ptr [ebp+8]
 004917C8    mov         dword ptr [eax-10],ebx
>004917CB    jmp         0049183F
 004917CD    mov         eax,dword ptr [ebx+14]
 004917D0    cmp         byte ptr [eax+10],2
>004917D4    jne         00491815
 004917D6    mov         eax,ebx
 004917D8    call        TDockZone.GetZoneLimit
 004917DD    mov         edx,dword ptr [ebp+8]
 004917E0    mov         edx,dword ptr [edx-4]
 004917E3    cmp         eax,dword ptr [edx]
>004917E5    jl          00491815
 004917E7    mov         eax,ebx
 004917E9    call        TDockZone.GetZoneLimit
 004917EE    mov         edx,dword ptr [ebp+8]
 004917F1    mov         edx,dword ptr [edx-8]
 004917F4    sub         eax,dword ptr [edx+0C]
 004917F7    mov         edx,dword ptr [ebp+8]
 004917FA    mov         edx,dword ptr [edx-4]
 004917FD    cmp         eax,dword ptr [edx]
>004917FF    jg          00491815
 00491801    mov         eax,dword ptr [ebp+8]
 00491804    mov         eax,dword ptr [eax-0C]
 00491807    mov         dword ptr [eax],12
 0049180D    mov         eax,dword ptr [ebp+8]
 00491810    mov         dword ptr [eax-10],ebx
>00491813    jmp         0049183F
 00491815    cmp         dword ptr [ebx+4],0
>00491819    je          0049183F
 0049181B    mov         eax,dword ptr [ebp+8]
 0049181E    mov         eax,dword ptr [eax-0C]
 00491821    push        eax
 00491822    mov         eax,dword ptr [ebp+8]
 00491825    mov         ecx,dword ptr [eax-4]
 00491828    mov         eax,dword ptr [ebp+8]
 0049182B    mov         eax,dword ptr [eax-8]
 0049182E    mov         edx,ebx
 00491830    mov         esi,dword ptr [eax]
 00491832    call        dword ptr [esi+40]
 00491835    test        al,al
>00491837    je          0049183F
 00491839    mov         eax,dword ptr [ebp+8]
 0049183C    mov         dword ptr [eax-10],ebx
 0049183F    mov         eax,dword ptr [ebp+8]
 00491842    cmp         dword ptr [eax-10],0
>00491846    jne         00491864
 00491848    mov         eax,ebx
 0049184A    call        TDockZone.NextVisible
 0049184F    test        eax,eax
>00491851    je          00491864
 00491853    mov         eax,dword ptr [ebp+8]
 00491856    push        eax
 00491857    mov         eax,ebx
 00491859    call        TDockZone.NextVisible
 0049185E    call        DoFindZone
 00491863    pop         ecx
 00491864    mov         eax,dword ptr [ebp+8]
 00491867    cmp         dword ptr [eax-10],0
>0049186B    jne         00491889
 0049186D    mov         eax,ebx
 0049186F    call        TDockZone.FirstVisibleChild
 00491874    test        eax,eax
>00491876    je          00491889
 00491878    mov         eax,dword ptr [ebp+8]
 0049187B    push        eax
 0049187C    mov         eax,ebx
 0049187E    call        TDockZone.FirstVisibleChild
 00491883    call        DoFindZone
 00491888    pop         ecx
 00491889    pop         esi
 0049188A    pop         ebx
 0049188B    pop         ebp
 0049188C    ret
*}
end;

//00491890
function TDockTree.InternalHitTest(const MousePos:TPoint; var HTFlag:Integer):TDockZone;
begin
{*
 00491890    push        ebp
 00491891    mov         ebp,esp
 00491893    add         esp,0FFFFFFF0
 00491896    push        ebx
 00491897    mov         dword ptr [ebp-0C],ecx
 0049189A    mov         dword ptr [ebp-4],edx
 0049189D    mov         dword ptr [ebp-8],eax
 004918A0    xor         eax,eax
 004918A2    mov         dword ptr [ebp-10],eax
 004918A5    mov         eax,dword ptr [ebp-0C]
 004918A8    xor         edx,edx
 004918AA    mov         dword ptr [eax],edx
 004918AC    mov         edx,dword ptr [ebp-4]
 004918AF    mov         eax,dword ptr [ebp-8]
 004918B2    call        TDockTree.FindControlAtPos
 004918B7    mov         ebx,eax
 004918B9    test        ebx,ebx
>004918BB    je          004918E9
 004918BD    mov         eax,dword ptr [ebp-8]
 004918C0    mov         eax,dword ptr [eax+14]
 004918C3    cmp         eax,dword ptr [ebx+90]
>004918C9    jne         004918E9
 004918CB    mov         edx,ebx
 004918CD    mov         eax,dword ptr [ebp-8]
 004918D0    call        TDockTree.FindControlZone
 004918D5    mov         dword ptr [ebp-10],eax
 004918D8    cmp         dword ptr [ebp-10],0
>004918DC    je          0049190E
 004918DE    mov         eax,dword ptr [ebp-0C]
 004918E1    mov         dword ptr [eax],1
>004918E7    jmp         0049190E
 004918E9    mov         eax,dword ptr [ebp-8]
 004918EC    mov         eax,dword ptr [eax+64]
 004918EF    call        TDockZone.FirstVisibleChild
 004918F4    test        eax,eax
>004918F6    je          0049190E
 004918F8    test        ebx,ebx
>004918FA    jne         0049190E
 004918FC    push        ebp
 004918FD    mov         eax,dword ptr [ebp-8]
 00491900    mov         eax,dword ptr [eax+64]
 00491903    call        TDockZone.FirstVisibleChild
 00491908    call        DoFindZone
 0049190D    pop         ecx
 0049190E    mov         eax,dword ptr [ebp-10]
 00491911    pop         ebx
 00491912    mov         esp,ebp
 00491914    pop         ebp
 00491915    ret
*}
end;

//00491918
procedure ReadControlName(var ControlName:UnicodeString);
begin
{*
 00491918    push        ebp
 00491919    mov         ebp,esp
 0049191B    push        0
 0049191D    push        0
 0049191F    push        0
 00491921    push        ebx
 00491922    mov         ebx,eax
 00491924    xor         eax,eax
 00491926    push        ebp
 00491927    push        4919BB
 0049192C    push        dword ptr fs:[eax]
 0049192F    mov         dword ptr fs:[eax],esp
 00491932    mov         eax,ebx
 00491934    call        @UStrClr
 00491939    lea         edx,[ebp-8]
 0049193C    mov         eax,dword ptr [ebp+8]
 0049193F    mov         eax,dword ptr [eax-4]
 00491942    mov         ecx,4
 00491947    call        TStream.ReadBuffer
 0049194C    cmp         dword ptr [ebp-8],0
>00491950    jle         00491997
 00491952    mov         eax,dword ptr [ebp-8]
 00491955    push        eax
 00491956    lea         eax,[ebp-4]
 00491959    mov         ecx,1
 0049195E    mov         edx,dword ptr ds:[418988];TArray<System.Byte>
 00491964    call        @DynArraySetLength
 00491969    add         esp,4
 0049196C    mov         edx,dword ptr [ebp-4]
 0049196F    mov         eax,dword ptr [ebp+8]
 00491972    mov         eax,dword ptr [eax-4]
 00491975    mov         ecx,dword ptr [ebp-8]
 00491978    call        TStream.ReadBuffer
 0049197D    call        TEncoding.GetUTF8
 00491982    lea         ecx,[ebp-0C]
 00491985    mov         edx,dword ptr [ebp-4]
 00491988    call        TEncoding.GetString
 0049198D    mov         edx,dword ptr [ebp-0C]
 00491990    mov         eax,ebx
 00491992    call        @UStrAsg
 00491997    xor         eax,eax
 00491999    pop         edx
 0049199A    pop         ecx
 0049199B    pop         ecx
 0049199C    mov         dword ptr fs:[eax],edx
 0049199F    push        4919C2
 004919A4    lea         eax,[ebp-0C]
 004919A7    call        @UStrClr
 004919AC    lea         eax,[ebp-4]
 004919AF    mov         edx,dword ptr ds:[418988];TArray<System.Byte>
 004919B5    call        @DynArrayClear
 004919BA    ret
>004919BB    jmp         @HandleFinally
>004919C0    jmp         004919A4
 004919C2    pop         ebx
 004919C3    mov         esp,ebp
 004919C5    pop         ebp
 004919C6    ret
*}
end;

//004919C8
procedure TDockTree.LoadFromStream(Stream:TStream);
begin
{*
 004919C8    push        ebp
 004919C9    mov         ebp,esp
 004919CB    add         esp,0FFFFFFC0
 004919CE    push        ebx
 004919CF    push        esi
 004919D0    push        edi
 004919D1    xor         ecx,ecx
 004919D3    mov         dword ptr [ebp-40],ecx
 004919D6    mov         dword ptr [ebp-8],ecx
 004919D9    mov         dword ptr [ebp-4],edx
 004919DC    mov         dword ptr [ebp-0C],eax
 004919DF    xor         eax,eax
 004919E1    push        ebp
 004919E2    push        491CF6
 004919E7    push        dword ptr fs:[eax]
 004919EA    mov         dword ptr fs:[eax],esp
 004919ED    mov         eax,dword ptr [ebp-0C]
 004919F0    mov         edx,dword ptr [eax+64]
 004919F3    mov         eax,dword ptr [ebp-0C]
 004919F6    call        TDockTree.PruneZone
 004919FB    mov         eax,dword ptr [ebp-0C]
 004919FE    movzx       eax,byte ptr [eax+74]
 00491A02    mov         byte ptr [ebp-21],al
 00491A05    mov         eax,dword ptr [ebp-0C]
 00491A08    call        TDockTree.BeginUpdate
 00491A0D    xor         eax,eax
 00491A0F    push        ebp
 00491A10    push        491CD1
 00491A15    push        dword ptr fs:[eax]
 00491A18    mov         dword ptr fs:[eax],esp
 00491A1B    lea         edx,[ebp-18]
 00491A1E    mov         ecx,4
 00491A23    mov         eax,dword ptr [ebp-4]
 00491A26    call        TStream.ReadBuffer
 00491A2B    cmp         dword ptr [ebp-18],40000
>00491A32    jne         00491A41
 00491A34    mov         eax,dword ptr [ebp-0C]
 00491A37    mov         byte ptr [eax+74],0
 00491A3B    mov         byte ptr [ebp-22],0
>00491A3F    jmp         00491AAF
 00491A41    mov         eax,dword ptr [ebp-0C]
 00491A44    mov         eax,dword ptr [eax+70]
 00491A47    cmp         eax,dword ptr [ebp-18]
>00491A4A    jne         00491A71
 00491A4C    mov         eax,dword ptr [ebp-0C]
 00491A4F    lea         edx,[eax+74]
 00491A52    mov         ecx,1
 00491A57    mov         eax,dword ptr [ebp-4]
 00491A5A    call        TStream.ReadBuffer
 00491A5F    lea         edx,[ebp-22]
 00491A62    mov         ecx,1
 00491A67    mov         eax,dword ptr [ebp-4]
 00491A6A    call        TStream.ReadBuffer
>00491A6F    jmp         00491AAF
 00491A71    mov         eax,dword ptr [ebp-0C]
 00491A74    mov         eax,dword ptr [eax+70]
 00491A77    mov         dword ptr [ebp-3C],eax
 00491A7A    mov         byte ptr [ebp-38],0
 00491A7E    mov         eax,dword ptr [ebp-18]
 00491A81    mov         dword ptr [ebp-34],eax
 00491A84    mov         byte ptr [ebp-30],0
 00491A88    lea         eax,[ebp-3C]
 00491A8B    push        eax
 00491A8C    push        1
 00491A8E    lea         edx,[ebp-40]
 00491A91    mov         eax,[0078CEA8];^SResString292:TResStringRec
 00491A96    call        LoadResString
 00491A9B    mov         ecx,dword ptr [ebp-40]
 00491A9E    mov         dl,1
 00491AA0    mov         eax,[00418C04];Exception
 00491AA5    call        Exception.CreateFmt
 00491AAA    call        @RaiseExcept
 00491AAF    lea         edx,[ebp-1C]
 00491AB2    mov         ecx,4
 00491AB7    mov         eax,dword ptr [ebp-4]
 00491ABA    call        TStream.ReadBuffer
 00491ABF    mov         eax,dword ptr [ebp-1C]
 00491AC2    dec         eax
 00491AC3    test        eax,eax
>00491AC5    jl          00491B21
 00491AC7    inc         eax
 00491AC8    mov         dword ptr [ebp-2C],eax
 00491ACB    mov         dword ptr [ebp-18],0
 00491AD2    push        ebp
 00491AD3    lea         eax,[ebp-8]
 00491AD6    call        ReadControlName
 00491ADB    pop         ecx
 00491ADC    cmp         dword ptr [ebp-8],0
>00491AE0    je          00491B19
 00491AE2    lea         ecx,[ebp-10]
 00491AE5    mov         eax,dword ptr [ebp-0C]
 00491AE8    mov         eax,dword ptr [eax+14]
 00491AEB    mov         edx,dword ptr [ebp-8]
 00491AEE    mov         si,0FFB7
 00491AF2    call        @CallDynaInst
 00491AF7    cmp         dword ptr [ebp-10],0
>00491AFB    je          00491B19
 00491AFD    xor         edx,edx
 00491AFF    mov         eax,dword ptr [ebp-10]
 00491B02    call        TControl.SetVisible
 00491B07    push        0
 00491B09    mov         eax,dword ptr [ebp-0C]
 00491B0C    mov         edx,dword ptr [eax+14]
 00491B0F    xor         ecx,ecx
 00491B11    mov         eax,dword ptr [ebp-10]
 00491B14    call        TControl.ManualDock
 00491B19    inc         dword ptr [ebp-18]
 00491B1C    dec         dword ptr [ebp-2C]
>00491B1F    jne         00491AD2
 00491B21    mov         eax,dword ptr [ebp-0C]
 00491B24    lea         edx,[eax+68]
 00491B27    mov         ecx,4
 00491B2C    mov         eax,dword ptr [ebp-4]
 00491B2F    call        TStream.ReadBuffer
 00491B34    mov         eax,dword ptr [ebp-0C]
 00491B37    cmp         byte ptr [eax+74],0
>00491B3B    je          00491B5F
 00491B3D    movzx       edx,byte ptr [ebp-22]
 00491B41    mov         eax,dword ptr [ebp-0C]
 00491B44    mov         ecx,dword ptr [eax]
 00491B46    call        dword ptr [ecx+28]
 00491B49    mov         ecx,eax
 00491B4B    mov         eax,dword ptr [ebp-0C]
 00491B4E    mov         edx,dword ptr [eax+68]
 00491B51    mov         eax,dword ptr [ebp-0C]
 00491B54    call        TDockTree.ActualSize
 00491B59    mov         edx,dword ptr [ebp-0C]
 00491B5C    mov         dword ptr [edx+68],eax
 00491B5F    xor         edi,edi
 00491B61    xor         esi,esi
 00491B63    lea         edx,[ebp-14]
 00491B66    mov         ecx,4
 00491B6B    mov         eax,dword ptr [ebp-4]
 00491B6E    call        TStream.ReadBuffer
 00491B73    mov         eax,dword ptr [ebp-14]
 00491B76    cmp         eax,dword ptr ds:[785B38]
>00491B7C    je          00491C93
 00491B82    mov         ecx,dword ptr [ebp-0C]
 00491B85    mov         dl,1
 00491B87    mov         eax,[0047E9AC];TDockZone
 00491B8C    call        TDockZone.Create
 00491B91    mov         ebx,eax
 00491B93    lea         edx,[ebx+10]
 00491B96    mov         ecx,1
 00491B9B    mov         eax,dword ptr [ebp-4]
 00491B9E    call        TStream.ReadBuffer
 00491BA3    lea         edx,[ebx+20]
 00491BA6    mov         ecx,4
 00491BAB    mov         eax,dword ptr [ebp-4]
 00491BAE    call        TStream.ReadBuffer
 00491BB3    mov         eax,dword ptr [ebp-0C]
 00491BB6    cmp         byte ptr [eax+74],0
>00491BBA    je          00491BD8
 00491BBC    movzx       edx,byte ptr [ebx+10]
 00491BC0    mov         eax,dword ptr [ebp-0C]
 00491BC3    mov         ecx,dword ptr [eax]
 00491BC5    call        dword ptr [ecx+28]
 00491BC8    mov         ecx,eax
 00491BCA    mov         edx,dword ptr [ebx+20]
 00491BCD    mov         eax,dword ptr [ebp-0C]
 00491BD0    call        TDockTree.ActualSize
 00491BD5    mov         dword ptr [ebx+20],eax
 00491BD8    push        ebp
 00491BD9    lea         eax,[ebp-8]
 00491BDC    call        ReadControlName
 00491BE1    pop         ecx
 00491BE2    cmp         dword ptr [ebp-8],0
>00491BE6    je          00491C02
 00491BE8    mov         edx,dword ptr [ebp-8]
 00491BEB    mov         eax,ebx
 00491BED    call        TDockZone.SetControlName
 00491BF2    test        al,al
>00491BF4    jne         00491C02
 00491BF6    mov         eax,ebx
 00491BF8    call        TObject.Free
>00491BFD    jmp         00491B63
 00491C02    cmp         dword ptr [ebp-14],0
>00491C06    jne         00491C10
 00491C08    mov         eax,dword ptr [ebp-0C]
 00491C0B    mov         dword ptr [eax+64],ebx
>00491C0E    jmp         00491C89
 00491C10    cmp         edi,dword ptr [ebp-14]
>00491C13    jne         00491C3D
 00491C15    cmp         dword ptr [esi+18],0
>00491C19    je          00491C2F
 00491C1B    cmp         dword ptr [esi+4],0
>00491C1F    jne         00491C2F
 00491C21    mov         dword ptr [ebp-28],esi
 00491C24    mov         esi,dword ptr [esi+18]
 00491C27    mov         eax,dword ptr [ebp-28]
 00491C2A    call        TObject.Free
 00491C2F    mov         dword ptr [esi+0C],ebx
 00491C32    mov         dword ptr [ebx+18],esi
 00491C35    mov         eax,dword ptr [esi+14]
 00491C38    mov         dword ptr [ebx+14],eax
>00491C3B    jmp         00491C89
 00491C3D    cmp         edi,dword ptr [ebp-14]
>00491C40    jge         00491C4A
 00491C42    mov         dword ptr [esi+8],ebx
 00491C45    mov         dword ptr [ebx+14],esi
>00491C48    jmp         00491C89
 00491C4A    cmp         edi,dword ptr [ebp-14]
>00491C4D    jle         00491C89
 00491C4F    mov         dword ptr [ebp-20],esi
 00491C52    sub         edi,dword ptr [ebp-14]
 00491C55    test        edi,edi
>00491C57    jle         00491C74
 00491C59    mov         dword ptr [ebp-2C],edi
 00491C5C    mov         dword ptr [ebp-18],1
 00491C63    mov         eax,dword ptr [ebp-20]
 00491C66    mov         eax,dword ptr [eax+14]
 00491C69    mov         dword ptr [ebp-20],eax
 00491C6C    inc         dword ptr [ebp-18]
 00491C6F    dec         dword ptr [ebp-2C]
>00491C72    jne         00491C63
 00491C74    mov         eax,dword ptr [ebp-20]
 00491C77    mov         dword ptr [eax+0C],ebx
 00491C7A    mov         eax,dword ptr [ebp-20]
 00491C7D    mov         dword ptr [ebx+18],eax
 00491C80    mov         eax,dword ptr [ebp-20]
 00491C83    mov         eax,dword ptr [eax+14]
 00491C86    mov         dword ptr [ebx+14],eax
 00491C89    mov         edi,dword ptr [ebp-14]
 00491C8C    mov         esi,ebx
>00491C8E    jmp         00491B63
 00491C93    xor         eax,eax
 00491C95    pop         edx
 00491C96    pop         ecx
 00491C97    pop         ecx
 00491C98    mov         dword ptr fs:[eax],edx
 00491C9B    push        491CD8
 00491CA0    mov         eax,dword ptr [ebp-0C]
 00491CA3    movzx       edx,byte ptr [ebp-21]
 00491CA7    mov         byte ptr [eax+74],dl
 00491CAA    mov         eax,dword ptr [ebp-0C]
 00491CAD    cmp         dword ptr [eax+64],0
>00491CB1    jne         00491CC8
 00491CB3    mov         ecx,dword ptr [ebp-0C]
 00491CB6    mov         dl,1
 00491CB8    mov         eax,[0047E9AC];TDockZone
 00491CBD    call        TDockZone.Create
 00491CC2    mov         edx,dword ptr [ebp-0C]
 00491CC5    mov         dword ptr [edx+64],eax
 00491CC8    mov         eax,dword ptr [ebp-0C]
 00491CCB    call        TDockTree.EndUpdate
 00491CD0    ret
>00491CD1    jmp         @HandleFinally
>00491CD6    jmp         00491CA0
 00491CD8    xor         eax,eax
 00491CDA    pop         edx
 00491CDB    pop         ecx
 00491CDC    pop         ecx
 00491CDD    mov         dword ptr fs:[eax],edx
 00491CE0    push        491CFD
 00491CE5    lea         eax,[ebp-40]
 00491CE8    call        @UStrClr
 00491CED    lea         eax,[ebp-8]
 00491CF0    call        @UStrClr
 00491CF5    ret
>00491CF6    jmp         @HandleFinally
>00491CFB    jmp         00491CE5
 00491CFD    pop         edi
 00491CFE    pop         esi
 00491CFF    pop         ebx
 00491D00    mov         esp,ebp
 00491D02    pop         ebp
 00491D03    ret
*}
end;

//00491D04
procedure DrawCloseButton(Left:Integer; Top:Integer);
begin
{*
 00491D04    push        ebp
 00491D05    mov         ebp,esp
 00491D07    add         esp,0FFFFFFE4
 00491D0A    push        ebx
 00491D0B    push        esi
 00491D0C    push        edi
 00491D0D    mov         esi,edx
 00491D0F    mov         ebx,eax
 00491D11    mov         eax,dword ptr [ebp+8]
 00491D14    mov         eax,dword ptr [eax-4]
 00491D17    mov         edi,dword ptr [eax+18]
 00491D1A    mov         eax,edi
 00491D1C    add         eax,esi
 00491D1E    sub         eax,2
 00491D21    push        eax
 00491D22    lea         eax,[ebp-1C]
 00491D25    push        eax
 00491D26    mov         eax,dword ptr [ebp+8]
 00491D29    mov         ecx,edi
 00491D2B    add         ecx,ebx
 00491D2D    sub         ecx,2
 00491D30    mov         edx,esi
 00491D32    mov         eax,ebx
 00491D34    call        Rect
 00491D39    call        ThemeServices
 00491D3E    call        TThemeServices.GetThemesEnabled
 00491D43    test        al,al
>00491D45    je          00491D78
 00491D47    call        ThemeServices
 00491D4C    lea         ecx,[ebp-0C]
 00491D4F    mov         dl,34
 00491D51    call        TThemeServices.GetElementDetails
 00491D56    lea         eax,[ebp-1C]
 00491D59    push        eax
 00491D5A    push        0
 00491D5C    mov         eax,dword ptr [ebp+8]
 00491D5F    mov         eax,dword ptr [eax-8]
 00491D62    call        TCanvas.GetHandle
 00491D67    push        eax
 00491D68    call        ThemeServices
 00491D6D    lea         ecx,[ebp-0C]
 00491D70    pop         edx
 00491D71    call        TThemeServices.DrawElement
>00491D76    jmp         00491D91
 00491D78    push        0
 00491D7A    push        1
 00491D7C    lea         eax,[ebp-1C]
 00491D7F    push        eax
 00491D80    mov         eax,dword ptr [ebp+8]
 00491D83    mov         eax,dword ptr [eax-8]
 00491D86    call        TCanvas.GetHandle
 00491D8B    push        eax
 00491D8C    call        user32.DrawFrameControl
 00491D91    pop         edi
 00491D92    pop         esi
 00491D93    pop         ebx
 00491D94    mov         esp,ebp
 00491D96    pop         ebp
 00491D97    ret
*}
end;

//00491D98
procedure DrawGrabberLine(Left:Integer; Top:Integer; Right:Integer; Bottom:Integer);
begin
{*
 00491D98    push        ebp
 00491D99    mov         ebp,esp
 00491D9B    push        ecx
 00491D9C    push        ebx
 00491D9D    push        esi
 00491D9E    push        edi
 00491D9F    mov         esi,ecx
 00491DA1    mov         ebx,edx
 00491DA3    mov         dword ptr [ebp-4],eax
 00491DA6    mov         eax,dword ptr [ebp+0C]
 00491DA9    mov         eax,dword ptr [eax-8]
 00491DAC    mov         eax,dword ptr [eax+44]
 00491DAF    mov         edx,0FF000014
 00491DB4    call        TPen.SetColor
 00491DB9    mov         eax,dword ptr [ebp+0C]
 00491DBC    mov         eax,dword ptr [eax-8]
 00491DBF    mov         ecx,ebx
 00491DC1    mov         edx,esi
 00491DC3    mov         edi,dword ptr [eax]
 00491DC5    call        dword ptr [edi+64]
 00491DC8    mov         eax,dword ptr [ebp+0C]
 00491DCB    mov         eax,dword ptr [eax-8]
 00491DCE    mov         ecx,ebx
 00491DD0    mov         edx,dword ptr [ebp-4]
 00491DD3    mov         edi,dword ptr [eax]
 00491DD5    call        dword ptr [edi+60]
 00491DD8    mov         eax,dword ptr [ebp+0C]
 00491DDB    mov         eax,dword ptr [eax-8]
 00491DDE    mov         ecx,dword ptr [ebp+8]
 00491DE1    mov         edx,dword ptr [ebp-4]
 00491DE4    mov         edi,dword ptr [eax]
 00491DE6    call        dword ptr [edi+60]
 00491DE9    mov         eax,dword ptr [ebp+0C]
 00491DEC    mov         eax,dword ptr [eax-8]
 00491DEF    mov         eax,dword ptr [eax+44]
 00491DF2    mov         edx,0FF000010
 00491DF7    call        TPen.SetColor
 00491DFC    mov         eax,dword ptr [ebp+0C]
 00491DFF    mov         eax,dword ptr [eax-8]
 00491E02    mov         ecx,dword ptr [ebp+8]
 00491E05    mov         edx,esi
 00491E07    mov         edi,dword ptr [eax]
 00491E09    call        dword ptr [edi+60]
 00491E0C    mov         ecx,ebx
 00491E0E    dec         ecx
 00491E0F    mov         eax,dword ptr [ebp+0C]
 00491E12    mov         eax,dword ptr [eax-8]
 00491E15    mov         edx,esi
 00491E17    mov         ebx,dword ptr [eax]
 00491E19    call        dword ptr [ebx+60]
 00491E1C    pop         edi
 00491E1D    pop         esi
 00491E1E    pop         ebx
 00491E1F    pop         ecx
 00491E20    pop         ebp
 00491E21    ret         4
*}
end;

//00491E24
procedure DrawThemedGrabber(const GripperType:TThemedRebar; const Left:Integer; const Top:Integer; const Right:Integer; const Bottom:Integer);
begin
{*
 00491E24    push        ebp
 00491E25    mov         ebp,esp
 00491E27    add         esp,0FFFFFFE4
 00491E2A    push        ebx
 00491E2B    push        esi
 00491E2C    push        edi
 00491E2D    mov         edi,ecx
 00491E2F    mov         esi,edx
 00491E31    mov         ebx,eax
 00491E33    mov         eax,dword ptr [ebp+8]
 00491E36    push        eax
 00491E37    lea         eax,[ebp-1C]
 00491E3A    push        eax
 00491E3B    mov         ecx,dword ptr [ebp+0C]
 00491E3E    mov         edx,edi
 00491E40    mov         eax,esi
 00491E42    call        Rect
 00491E47    call        ThemeServices
 00491E4C    lea         ecx,[ebp-0C]
 00491E4F    mov         edx,ebx
 00491E51    call        TThemeServices.GetElementDetails
 00491E56    lea         eax,[ebp-1C]
 00491E59    push        eax
 00491E5A    mov         eax,dword ptr [ebp+10]
 00491E5D    mov         eax,dword ptr [eax-8]
 00491E60    call        TCanvas.GetHandle
 00491E65    push        eax
 00491E66    call        ThemeServices
 00491E6B    lea         ecx,[ebp-0C]
 00491E6E    pop         edx
 00491E6F    call        TThemeServices.DrawElement
 00491E74    pop         edi
 00491E75    pop         esi
 00491E76    pop         ebx
 00491E77    mov         esp,ebp
 00491E79    pop         ebp
 00491E7A    ret         8
*}
end;

//00491E80
procedure TDockTree.PaintDockFrame(Canvas:TCanvas; Control:TControl; const ARect:TRect);
begin
{*
 00491E80    push        ebp
 00491E81    mov         ebp,esp
 00491E83    add         esp,0FFFFFFF8
 00491E86    push        ebx
 00491E87    mov         dword ptr [ebp-8],edx
 00491E8A    mov         dword ptr [ebp-4],eax
 00491E8D    mov         ebx,dword ptr [ebp+8]
 00491E90    mov         eax,dword ptr [ebp-4]
 00491E93    mov         eax,dword ptr [eax+14]
 00491E96    movzx       eax,byte ptr [eax+5D]
 00491E9A    dec         eax
 00491E9B    sub         al,2
>00491E9D    jae         00491F32
 00491EA3    push        ebp
 00491EA4    mov         edx,dword ptr [ebx+4]
 00491EA7    inc         edx
 00491EA8    mov         eax,dword ptr [ebx]
 00491EAA    inc         eax
 00491EAB    call        DrawCloseButton
 00491EB0    pop         ecx
 00491EB1    call        ThemeServices
 00491EB6    call        TThemeServices.GetThemesEnabled
 00491EBB    test        al,al
>00491EBD    je          00491EE9
 00491EBF    push        ebp
 00491EC0    mov         eax,dword ptr [ebx]
 00491EC2    mov         edx,eax
 00491EC4    add         edx,0A
 00491EC7    push        edx
 00491EC8    mov         edx,dword ptr [ebx+0C]
 00491ECB    sub         edx,2
 00491ECE    push        edx
 00491ECF    mov         ecx,dword ptr [ebx+4]
 00491ED2    mov         edx,dword ptr [ebp-4]
 00491ED5    add         ecx,dword ptr [edx+18]
 00491ED8    inc         ecx
 00491ED9    mov         edx,eax
 00491EDB    inc         edx
 00491EDC    mov         al,3
 00491EDE    call        DrawThemedGrabber
 00491EE3    pop         ecx
>00491EE4    jmp         00491FCA
 00491EE9    push        ebp
 00491EEA    mov         edx,dword ptr [ebx+0C]
 00491EED    sub         edx,2
 00491EF0    push        edx
 00491EF1    mov         edx,dword ptr [ebx+4]
 00491EF4    mov         ecx,dword ptr [ebp-4]
 00491EF7    add         edx,dword ptr [ecx+18]
 00491EFA    inc         edx
 00491EFB    mov         eax,dword ptr [ebx]
 00491EFD    mov         ecx,eax
 00491EFF    add         ecx,5
 00491F02    add         eax,3
 00491F05    call        DrawGrabberLine
 00491F0A    pop         ecx
 00491F0B    push        ebp
 00491F0C    mov         edx,dword ptr [ebx+0C]
 00491F0F    sub         edx,2
 00491F12    push        edx
 00491F13    mov         edx,dword ptr [ebx+4]
 00491F16    mov         ecx,dword ptr [ebp-4]
 00491F19    add         edx,dword ptr [ecx+18]
 00491F1C    inc         edx
 00491F1D    mov         eax,dword ptr [ebx]
 00491F1F    mov         ecx,eax
 00491F21    add         ecx,8
 00491F24    add         eax,6
 00491F27    call        DrawGrabberLine
 00491F2C    pop         ecx
>00491F2D    jmp         00491FCA
 00491F32    push        ebp
 00491F33    mov         eax,dword ptr [ebx+8]
 00491F36    mov         edx,dword ptr [ebp-4]
 00491F39    sub         eax,dword ptr [edx+18]
 00491F3C    inc         eax
 00491F3D    mov         edx,dword ptr [ebx+4]
 00491F40    inc         edx
 00491F41    call        DrawCloseButton
 00491F46    pop         ecx
 00491F47    call        ThemeServices
 00491F4C    call        TThemeServices.GetThemesEnabled
 00491F51    test        al,al
>00491F53    je          00491F7E
 00491F55    push        ebp
 00491F56    mov         edx,dword ptr [ebx+8]
 00491F59    mov         ecx,dword ptr [ebp-4]
 00491F5C    sub         edx,dword ptr [ecx+18]
 00491F5F    sub         edx,2
 00491F62    push        edx
 00491F63    mov         eax,dword ptr [ebx+4]
 00491F66    mov         edx,eax
 00491F68    add         edx,0A
 00491F6B    push        edx
 00491F6C    mov         ecx,eax
 00491F6E    inc         ecx
 00491F6F    mov         edx,dword ptr [ebx]
 00491F71    add         edx,2
 00491F74    mov         al,2
 00491F76    call        DrawThemedGrabber
 00491F7B    pop         ecx
>00491F7C    jmp         00491FCA
 00491F7E    push        ebp
 00491F7F    mov         eax,dword ptr [ebx+4]
 00491F82    mov         edx,eax
 00491F84    add         edx,5
 00491F87    push        edx
 00491F88    mov         ecx,dword ptr [ebx+8]
 00491F8B    mov         edx,dword ptr [ebp-4]
 00491F8E    sub         ecx,dword ptr [edx+18]
 00491F91    sub         ecx,2
 00491F94    mov         edx,eax
 00491F96    add         edx,3
 00491F99    mov         eax,dword ptr [ebx]
 00491F9B    add         eax,2
 00491F9E    call        DrawGrabberLine
 00491FA3    pop         ecx
 00491FA4    push        ebp
 00491FA5    mov         eax,dword ptr [ebx+4]
 00491FA8    mov         edx,eax
 00491FAA    add         edx,8
 00491FAD    push        edx
 00491FAE    mov         ecx,dword ptr [ebx+8]
 00491FB1    mov         edx,dword ptr [ebp-4]
 00491FB4    sub         ecx,dword ptr [edx+18]
 00491FB7    sub         ecx,2
 00491FBA    mov         edx,eax
 00491FBC    add         edx,6
 00491FBF    mov         eax,dword ptr [ebx]
 00491FC1    add         eax,2
 00491FC4    call        DrawGrabberLine
 00491FC9    pop         ecx
 00491FCA    pop         ebx
 00491FCB    pop         ecx
 00491FCC    pop         ecx
 00491FCD    pop         ebp
 00491FCE    ret         4
*}
end;

//00491FD4
procedure TDockTree.PaintSite(DC:HDC);
begin
{*
 00491FD4    push        ebp
 00491FD5    mov         ebp,esp
 00491FD7    add         esp,0FFFFFFE4
 00491FDA    push        ebx
 00491FDB    push        esi
 00491FDC    push        edi
 00491FDD    mov         ebx,edx
 00491FDF    mov         esi,eax
 00491FE1    mov         dl,1
 00491FE3    mov         eax,[00476D34];TControlCanvas
 00491FE8    call        TCanvas.Create
 00491FED    mov         dword ptr [ebp-4],eax
 00491FF0    xor         eax,eax
 00491FF2    push        ebp
 00491FF3    push        4920F8
 00491FF8    push        dword ptr fs:[eax]
 00491FFB    mov         dword ptr fs:[eax],esp
 00491FFE    mov         edx,dword ptr [esi+14]
 00492001    mov         eax,dword ptr [ebp-4]
 00492004    call        TControlCanvas.SetControl
 00492009    mov         eax,dword ptr [ebp-4]
 0049200C    call        TCustomCanvas.Lock
 00492011    xor         eax,eax
 00492013    push        ebp
 00492014    push        4920DB
 00492019    push        dword ptr fs:[eax]
 0049201C    mov         dword ptr fs:[eax],esp
 0049201F    mov         edx,ebx
 00492021    mov         eax,dword ptr [ebp-4]
 00492024    call        TCanvas.SetHandle
 00492029    xor         eax,eax
 0049202B    push        ebp
 0049202C    push        4920BE
 00492031    push        dword ptr fs:[eax]
 00492034    mov         dword ptr fs:[eax],esp
 00492037    mov         eax,dword ptr [esi+14]
 0049203A    call        TWinControl.GetControlCount
 0049203F    dec         eax
 00492040    test        eax,eax
>00492042    jl          004920A6
 00492044    inc         eax
 00492045    mov         dword ptr [ebp-0C],eax
 00492048    mov         dword ptr [ebp-8],0
 0049204F    mov         eax,dword ptr [esi+14]
 00492052    mov         edx,dword ptr [ebp-8]
 00492055    call        TWinControl.GetControl
 0049205A    mov         ebx,eax
 0049205C    cmp         byte ptr [ebx+59],0
>00492060    je          0049209E
 00492062    mov         eax,dword ptr [ebx+90]
 00492068    cmp         eax,dword ptr [esi+14]
>0049206B    jne         0049209E
 0049206D    lea         edx,[ebp-1C]
 00492070    mov         eax,ebx
 00492072    call        TControl.GetBoundsRect
 00492077    lea         ecx,[ebp-1C]
 0049207A    mov         edx,ebx
 0049207C    mov         eax,esi
 0049207E    mov         edi,dword ptr [eax]
 00492080    call        dword ptr [edi]
 00492082    lea         ecx,[ebp-1C]
 00492085    mov         edx,ebx
 00492087    mov         eax,esi
 00492089    mov         edi,dword ptr [eax]
 0049208B    call        dword ptr [edi+4]
 0049208E    lea         eax,[ebp-1C]
 00492091    push        eax
 00492092    mov         ecx,ebx
 00492094    mov         edx,dword ptr [ebp-4]
 00492097    mov         eax,esi
 00492099    mov         ebx,dword ptr [eax]
 0049209B    call        dword ptr [ebx+20]
 0049209E    inc         dword ptr [ebp-8]
 004920A1    dec         dword ptr [ebp-0C]
>004920A4    jne         0049204F
 004920A6    xor         eax,eax
 004920A8    pop         edx
 004920A9    pop         ecx
 004920AA    pop         ecx
 004920AB    mov         dword ptr fs:[eax],edx
 004920AE    push        4920C5
 004920B3    xor         edx,edx
 004920B5    mov         eax,dword ptr [ebp-4]
 004920B8    call        TCanvas.SetHandle
 004920BD    ret
>004920BE    jmp         @HandleFinally
>004920C3    jmp         004920B3
 004920C5    xor         eax,eax
 004920C7    pop         edx
 004920C8    pop         ecx
 004920C9    pop         ecx
 004920CA    mov         dword ptr fs:[eax],edx
 004920CD    push        4920E2
 004920D2    mov         eax,dword ptr [ebp-4]
 004920D5    call        TCustomCanvas.Unlock
 004920DA    ret
>004920DB    jmp         @HandleFinally
>004920E0    jmp         004920D2
 004920E2    xor         eax,eax
 004920E4    pop         edx
 004920E5    pop         ecx
 004920E6    pop         ecx
 004920E7    mov         dword ptr fs:[eax],edx
 004920EA    push        4920FF
 004920EF    mov         eax,dword ptr [ebp-4]
 004920F2    call        TObject.Free
 004920F7    ret
>004920F8    jmp         @HandleFinally
>004920FD    jmp         004920EF
 004920FF    pop         edi
 00492100    pop         esi
 00492101    pop         ebx
 00492102    mov         esp,ebp
 00492104    pop         ebp
 00492105    ret
*}
end;

//00492108
procedure TDockTree.PositionDockRect(Client:TControl; DropCtl:TControl; DropAlign:TAlign; var DockRect:TRect);
begin
{*
 00492108    push        ebp
 00492109    mov         ebp,esp
 0049210B    add         esp,0FFFFFFE4
 0049210E    push        ebx
 0049210F    push        esi
 00492110    push        edi
 00492111    mov         ebx,ecx
 00492113    mov         esi,eax
 00492115    mov         eax,dword ptr [esi+14]
 00492118    call        TWinControl.GetVisibleDockClientCount
 0049211D    mov         edi,eax
 0049211F    test        ebx,ebx
>00492121    je          00492135
 00492123    cmp         byte ptr [ebx+8C],0
>0049212A    je          00492135
 0049212C    cmp         edi,2
>0049212F    jge         004921E4
 00492135    mov         eax,dword ptr [esi+14]
 00492138    call        TControl.GetClientHeight
 0049213D    push        eax
 0049213E    lea         eax,[ebp-1C]
 00492141    push        eax
 00492142    mov         eax,dword ptr [esi+14]
 00492145    call        TControl.GetClientWidth
 0049214A    mov         ecx,eax
 0049214C    xor         edx,edx
 0049214E    xor         eax,eax
 00492150    call        Rect
 00492155    mov         eax,dword ptr [ebp+8]
 00492158    push        esi
 00492159    push        edi
 0049215A    lea         esi,[ebp-1C]
 0049215D    mov         edi,eax
 0049215F    movs        dword ptr [edi],dword ptr [esi]
 00492160    movs        dword ptr [edi],dword ptr [esi]
 00492161    movs        dword ptr [edi],dword ptr [esi]
 00492162    movs        dword ptr [edi],dword ptr [esi]
 00492163    pop         edi
 00492164    pop         esi
 00492165    test        edi,edi
>00492167    jle         00492262
 0049216D    movzx       eax,byte ptr [ebp+0C]
 00492171    dec         al
>00492173    je          004921B6
 00492175    dec         al
>00492177    je          004921CF
 00492179    dec         al
>0049217B    je          00492186
 0049217D    dec         al
>0049217F    je          0049219F
>00492181    jmp         00492262
 00492186    mov         eax,dword ptr [ebp+8]
 00492189    mov         ecx,2
 0049218E    add         eax,8
 00492191    push        eax
 00492192    mov         eax,dword ptr [eax]
 00492194    cdq
 00492195    idiv        eax,ecx
 00492197    pop         edx
 00492198    mov         dword ptr [edx],eax
>0049219A    jmp         00492262
 0049219F    mov         eax,dword ptr [ebp+8]
 004921A2    mov         eax,dword ptr [eax+8]
 004921A5    sar         eax,1
>004921A7    jns         004921AC
 004921A9    adc         eax,0
 004921AC    mov         edx,dword ptr [ebp+8]
 004921AF    mov         dword ptr [edx],eax
>004921B1    jmp         00492262
 004921B6    mov         eax,dword ptr [ebp+8]
 004921B9    mov         ecx,2
 004921BE    add         eax,0C
 004921C1    push        eax
 004921C2    mov         eax,dword ptr [eax]
 004921C4    cdq
 004921C5    idiv        eax,ecx
 004921C7    pop         edx
 004921C8    mov         dword ptr [edx],eax
>004921CA    jmp         00492262
 004921CF    mov         eax,dword ptr [ebp+8]
 004921D2    mov         eax,dword ptr [eax+0C]
 004921D5    sar         eax,1
>004921D7    jns         004921DC
 004921D9    adc         eax,0
 004921DC    mov         edx,dword ptr [ebp+8]
 004921DF    mov         dword ptr [edx+4],eax
>004921E2    jmp         00492262
 004921E4    mov         eax,dword ptr [ebx+40]
 004921E7    mov         dword ptr [ebp-4],eax
 004921EA    mov         eax,dword ptr [ebx+44]
 004921ED    mov         dword ptr [ebp-8],eax
 004921F0    mov         eax,dword ptr [ebx+48]
 004921F3    mov         edi,eax
 004921F5    mov         edx,dword ptr [ebx+4C]
 004921F8    mov         dword ptr [ebp-0C],edx
 004921FB    movzx       edx,byte ptr [ebp+0C]
 004921FF    add         dl,0FD
 00492202    sub         dl,2
>00492205    jae         00492212
 00492207    mov         edi,eax
 00492209    sar         edi,1
>0049220B    jns         00492228
 0049220D    adc         edi,0
>00492210    jmp         00492228
 00492212    movzx       eax,byte ptr [ebp+0C]
 00492216    dec         eax
 00492217    sub         al,2
>00492219    jae         00492228
 0049221B    mov         eax,dword ptr [ebx+4C]
 0049221E    sar         eax,1
>00492220    jns         00492225
 00492222    adc         eax,0
 00492225    mov         dword ptr [ebp-0C],eax
 00492228    movzx       eax,byte ptr [ebp+0C]
 0049222C    sub         al,2
>0049222E    je          00492239
 00492230    sub         al,2
>00492232    jne         0049223F
 00492234    add         dword ptr [ebp-4],edi
>00492237    jmp         0049223F
 00492239    mov         eax,dword ptr [ebp-0C]
 0049223C    add         dword ptr [ebp-8],eax
 0049223F    mov         eax,dword ptr [ebp-0C]
 00492242    push        eax
 00492243    lea         eax,[ebp-1C]
 00492246    push        eax
 00492247    mov         ecx,edi
 00492249    mov         edx,dword ptr [ebp-8]
 0049224C    mov         eax,dword ptr [ebp-4]
 0049224F    call        Bounds
 00492254    mov         eax,dword ptr [ebp+8]
 00492257    push        esi
 00492258    lea         esi,[ebp-1C]
 0049225B    mov         edi,eax
 0049225D    movs        dword ptr [edi],dword ptr [esi]
 0049225E    movs        dword ptr [edi],dword ptr [esi]
 0049225F    movs        dword ptr [edi],dword ptr [esi]
 00492260    movs        dword ptr [edi],dword ptr [esi]
 00492261    pop         esi
 00492262    push        2
 00492264    mov         eax,dword ptr [ebp+8]
 00492267    push        eax
 00492268    push        0
 0049226A    mov         eax,dword ptr [esi+14]
 0049226D    call        TWinControl.GetHandle
 00492272    push        eax
 00492273    call        user32.MapWindowPoints
 00492278    pop         edi
 00492279    pop         esi
 0049227A    pop         ebx
 0049227B    mov         esp,ebp
 0049227D    pop         ebp
 0049227E    ret         8
*}
end;

//00492284
procedure DoPrune(Zone:TDockZone);
begin
{*
 00492284    push        ebp
 00492285    mov         ebp,esp
 00492287    push        ebx
 00492288    mov         ebx,eax
 0049228A    mov         eax,dword ptr [ebx+0C]
 0049228D    test        eax,eax
>0049228F    je          0049229B
 00492291    mov         edx,dword ptr [ebp+8]
 00492294    push        edx
 00492295    call        DoPrune
 0049229A    pop         ecx
 0049229B    mov         eax,dword ptr [ebx+8]
 0049229E    test        eax,eax
>004922A0    je          004922AC
 004922A2    mov         edx,dword ptr [ebp+8]
 004922A5    push        edx
 004922A6    call        DoPrune
 004922AB    pop         ecx
 004922AC    mov         eax,ebx
 004922AE    call        TObject.Free
 004922B3    pop         ebx
 004922B4    pop         ebp
 004922B5    ret
*}
end;

//004922B8
procedure TDockTree.PruneZone(Zone:TDockZone);
begin
{*
 004922B8    push        ebp
 004922B9    mov         ebp,esp
 004922BB    push        ebx
 004922BC    push        esi
 004922BD    mov         ebx,edx
 004922BF    mov         esi,eax
 004922C1    test        ebx,ebx
>004922C3    je          0049230D
 004922C5    mov         eax,dword ptr [ebx+8]
 004922C8    test        eax,eax
>004922CA    je          004922D3
 004922CC    push        ebp
 004922CD    call        DoPrune
 004922D2    pop         ecx
 004922D3    mov         eax,dword ptr [ebx+18]
 004922D6    test        eax,eax
>004922D8    je          004922E2
 004922DA    mov         edx,dword ptr [ebx+0C]
 004922DD    mov         dword ptr [eax+0C],edx
>004922E0    jmp         004922EF
 004922E2    mov         eax,dword ptr [ebx+14]
 004922E5    test        eax,eax
>004922E7    je          004922EF
 004922E9    mov         edx,dword ptr [ebx+0C]
 004922EC    mov         dword ptr [eax+8],edx
 004922EF    mov         eax,dword ptr [ebx+0C]
 004922F2    test        eax,eax
>004922F4    je          004922FC
 004922F6    mov         edx,dword ptr [ebx+18]
 004922F9    mov         dword ptr [eax+18],edx
 004922FC    cmp         ebx,dword ptr [esi+64]
>004922FF    jne         00492306
 00492301    xor         eax,eax
 00492303    mov         dword ptr [esi+64],eax
 00492306    mov         eax,ebx
 00492308    call        TObject.Free
 0049230D    pop         esi
 0049230E    pop         ebx
 0049230F    pop         ebp
 00492310    ret
*}
end;

//00492314
procedure TDockTree.RemoveControl(Control:TControl);
begin
{*
 00492314    push        ebx
 00492315    push        esi
 00492316    mov         esi,edx
 00492318    mov         ebx,eax
 0049231A    mov         edx,esi
 0049231C    mov         eax,ebx
 0049231E    call        TDockTree.FindControlZone
 00492323    test        eax,eax
>00492325    je          0049234E
 00492327    cmp         eax,dword ptr [ebx+38]
>0049232A    jne         00492333
 0049232C    xor         edx,edx
 0049232E    mov         dword ptr [eax+4],edx
>00492331    jmp         0049233C
 00492333    mov         edx,eax
 00492335    mov         eax,ebx
 00492337    call        TDockTree.RemoveZone
 0049233C    mov         byte ptr [esi+8C],0
 00492343    mov         eax,dword ptr [ebx+14]
 00492346    mov         edx,dword ptr [eax]
 00492348    call        dword ptr [edx+90]
 0049234E    pop         esi
 0049234F    pop         ebx
 00492350    ret
*}
end;

//00492354
procedure TDockTree.RemoveZone(Zone:TDockZone);
begin
{*
 00492354    push        ebp
 00492355    mov         ebp,esp
 00492357    xor         ecx,ecx
 00492359    push        ecx
 0049235A    push        ecx
 0049235B    push        ecx
 0049235C    push        ecx
 0049235D    push        ecx
 0049235E    push        ebx
 0049235F    push        esi
 00492360    push        edi
 00492361    mov         ebx,edx
 00492363    mov         esi,eax
 00492365    xor         eax,eax
 00492367    push        ebp
 00492368    push        4925E6
 0049236D    push        dword ptr fs:[eax]
 00492370    mov         dword ptr fs:[eax],esp
 00492373    test        ebx,ebx
>00492375    jne         004923B2
 00492377    lea         edx,[ebp-8]
 0049237A    mov         eax,[0078D0F8];^SResString289:TResStringRec
 0049237F    call        LoadResString
 00492384    lea         eax,[ebp-8]
 00492387    push        eax
 00492388    lea         edx,[ebp-0C]
 0049238B    mov         eax,[0078CCE4];^SResString290:TResStringRec
 00492390    call        LoadResString
 00492395    mov         edx,dword ptr [ebp-0C]
 00492398    pop         eax
 00492399    call        @UStrCat
 0049239E    mov         ecx,dword ptr [ebp-8]
 004923A1    mov         dl,1
 004923A3    mov         eax,[00418C04];Exception
 004923A8    call        Exception.Create
 004923AD    call        @RaiseExcept
 004923B2    cmp         dword ptr [ebx+4],0
>004923B6    jne         004923F3
 004923B8    lea         edx,[ebp-10]
 004923BB    mov         eax,[0078D0F8];^SResString289:TResStringRec
 004923C0    call        LoadResString
 004923C5    lea         eax,[ebp-10]
 004923C8    push        eax
 004923C9    lea         edx,[ebp-14]
 004923CC    mov         eax,[0078D71C];^SResString291:TResStringRec
 004923D1    call        LoadResString
 004923D6    mov         edx,dword ptr [ebp-14]
 004923D9    pop         eax
 004923DA    call        @UStrCat
 004923DF    mov         ecx,dword ptr [ebp-10]
 004923E2    mov         dl,1
 004923E4    mov         eax,[00418C04];Exception
 004923E9    call        Exception.Create
 004923EE    call        @RaiseExcept
 004923F3    mov         eax,dword ptr [ebx+14]
 004923F6    call        TDockZone.GetChildCount
 004923FB    cmp         eax,1
>004923FE    jne         00492411
 00492400    mov         eax,dword ptr [esi+64]
 00492403    xor         edx,edx
 00492405    mov         dword ptr [eax+8],edx
 00492408    mov         byte ptr [eax+10],0
>0049240C    jmp         004925C4
 00492411    cmp         eax,2
>00492414    jne         0049256C
 0049241A    mov         eax,dword ptr [ebx+18]
 0049241D    test        eax,eax
>0049241F    jne         00492426
 00492421    mov         edi,dword ptr [ebx+0C]
>00492424    jmp         00492428
 00492426    mov         edi,eax
 00492428    cmp         dword ptr [edi+4],0
>0049242C    je          0049248D
 0049242E    mov         edx,dword ptr [esi+64]
 00492431    mov         eax,dword ptr [ebx+14]
 00492434    cmp         edx,eax
>00492436    jne         00492462
 00492438    mov         eax,dword ptr [esi+64]
 0049243B    mov         dword ptr [eax+8],edi
 0049243E    xor         eax,eax
 00492440    mov         dword ptr [edi+18],eax
 00492443    xor         eax,eax
 00492445    mov         dword ptr [edi+0C],eax
 00492448    mov         dword ptr [ebp-4],edi
 0049244B    mov         eax,dword ptr [esi+64]
 0049244E    call        TDockZone.GetLimitSize
 00492453    mov         edx,dword ptr [ebp-4]
 00492456    mov         dword ptr [edx+20],eax
 00492459    mov         eax,edi
 0049245B    call        TDockZone.Update
>00492460    jmp         00492478
 00492462    mov         byte ptr [eax+10],0
 00492466    mov         edx,dword ptr [edi+4]
 00492469    mov         dword ptr [eax+4],edx
 0049246C    xor         edx,edx
 0049246E    mov         dword ptr [eax+8],edx
 00492471    mov         eax,edi
 00492473    call        TObject.Free
 00492478    push        esi
 00492479    push        492CC8;TDockTree.UpdateZone
 0049247E    mov         edx,dword ptr [ebx+14]
 00492481    mov         eax,esi
 00492483    call        TDockTree.ForEachAt
>00492488    jmp         004925C4
 0049248D    mov         eax,dword ptr [ebx+14]
 00492490    cmp         eax,dword ptr [esi+64]
>00492493    jne         004924D0
 00492495    mov         edx,dword ptr [esi+68]
 00492498    mov         eax,edi
 0049249A    call        TDockZone.ExpandZoneLimit
 0049249F    mov         eax,dword ptr [esi+64]
 004924A2    call        TDockZone.GetZoneLimit
 004924A7    mov         dword ptr [esi+68],eax
 004924AA    mov         eax,dword ptr [esi+64]
 004924AD    call        TObject.Free
 004924B2    mov         dword ptr [esi+64],edi
 004924B5    xor         eax,eax
 004924B7    mov         dword ptr [edi+0C],eax
 004924BA    xor         eax,eax
 004924BC    mov         dword ptr [edi+18],eax
 004924BF    xor         eax,eax
 004924C1    mov         dword ptr [edi+14],eax
 004924C4    mov         eax,esi
 004924C6    call        TDockTree.UpdateAll
>004924CB    jmp         004925C4
 004924D0    mov         eax,dword ptr [edi+8]
 004924D3    test        eax,eax
>004924D5    je          0049255B
 004924DB    mov         edx,dword ptr [ebx+14]
 004924DE    mov         edx,dword ptr [edx+18]
 004924E1    mov         dword ptr [eax+18],edx
 004924E4    mov         edx,dword ptr [edi+8]
 004924E7    cmp         dword ptr [edx+18],0
>004924EB    jne         004924F8
 004924ED    mov         edx,dword ptr [ebx+14]
 004924F0    mov         edx,dword ptr [edx+14]
 004924F3    mov         dword ptr [edx+8],eax
>004924F6    jmp         00492501
 004924F8    mov         edx,dword ptr [edi+8]
 004924FB    mov         edx,dword ptr [edx+18]
 004924FE    mov         dword ptr [edx+0C],eax
 00492501    mov         eax,dword ptr [edi+8]
 00492504    mov         edx,dword ptr [ebx+14]
 00492507    mov         edx,dword ptr [edx+14]
 0049250A    mov         dword ptr [eax+14],edx
 0049250D    cmp         dword ptr [eax+0C],0
>00492511    je          00492525
 00492513    mov         eax,dword ptr [eax+0C]
 00492516    mov         edx,dword ptr [ebx+14]
 00492519    mov         edx,dword ptr [edx+14]
 0049251C    mov         dword ptr [eax+14],edx
 0049251F    cmp         dword ptr [eax+0C],0
>00492523    jne         00492513
 00492525    mov         edx,dword ptr [ebx+14]
 00492528    mov         edx,dword ptr [edx+0C]
 0049252B    mov         dword ptr [eax+0C],edx
 0049252E    cmp         dword ptr [eax+0C],0
>00492532    je          0049253A
 00492534    mov         edx,dword ptr [eax+0C]
 00492537    mov         dword ptr [edx+18],eax
 0049253A    push        esi
 0049253B    push        492CC8;TDockTree.UpdateZone
 00492540    mov         edx,dword ptr [eax+14]
 00492543    mov         eax,esi
 00492545    call        TDockTree.ForEachAt
 0049254A    mov         eax,dword ptr [ebx+14]
 0049254D    call        TObject.Free
 00492552    mov         eax,edi
 00492554    call        TObject.Free
>00492559    jmp         004925C4
 0049255B    mov         eax,dword ptr [edi+14]
 0049255E    xor         edx,edx
 00492560    mov         dword ptr [eax+8],edx
 00492563    mov         eax,edi
 00492565    call        TObject.Free
>0049256A    jmp         004925C4
 0049256C    mov         eax,dword ptr [ebx+18]
 0049256F    test        eax,eax
>00492571    jne         0049258B
 00492573    mov         eax,dword ptr [ebx+14]
 00492576    mov         edx,dword ptr [ebx+0C]
 00492579    mov         dword ptr [eax+8],edx
 0049257C    mov         eax,dword ptr [ebx+0C]
 0049257F    xor         edx,edx
 00492581    mov         dword ptr [eax+18],edx
 00492584    call        TDockZone.Update
>00492589    jmp         004925B4
 0049258B    mov         edx,dword ptr [ebx+0C]
 0049258E    mov         dword ptr [eax+0C],edx
 00492591    mov         edx,dword ptr [ebx+0C]
 00492594    test        edx,edx
>00492596    je          0049259B
 00492598    mov         dword ptr [edx+18],eax
 0049259B    mov         eax,ebx
 0049259D    call        TDockZone.GetZoneLimit
 004925A2    mov         edx,eax
 004925A4    mov         eax,dword ptr [ebx+18]
 004925A7    call        TDockZone.ExpandZoneLimit
 004925AC    mov         eax,dword ptr [ebx+18]
 004925AF    call        TDockZone.Update
 004925B4    push        esi
 004925B5    push        492CC8;TDockTree.UpdateZone
 004925BA    mov         edx,dword ptr [ebx+14]
 004925BD    mov         eax,esi
 004925BF    call        TDockTree.ForEachAt
 004925C4    mov         eax,ebx
 004925C6    call        TObject.Free
 004925CB    xor         eax,eax
 004925CD    pop         edx
 004925CE    pop         ecx
 004925CF    pop         ecx
 004925D0    mov         dword ptr fs:[eax],edx
 004925D3    push        4925ED
 004925D8    lea         eax,[ebp-14]
 004925DB    mov         edx,4
 004925E0    call        @UStrArrayClr
 004925E5    ret
>004925E6    jmp         @HandleFinally
>004925EB    jmp         004925D8
 004925ED    pop         edi
 004925EE    pop         esi
 004925EF    pop         ebx
 004925F0    mov         esp,ebp
 004925F2    pop         ebp
 004925F3    ret
*}
end;

//004925F4
procedure TDockTree.ResetBounds(Force:Boolean);
begin
{*
 004925F4    push        ebx
 004925F5    push        esi
 004925F6    push        edi
 004925F7    add         esp,0FFFFFFF0
 004925FA    mov         ebx,edx
 004925FC    mov         edi,eax
 004925FE    mov         esi,dword ptr [edi+14]
 00492601    test        byte ptr [esi+1C],1
>00492605    jne         004926CB
 0049260B    cmp         dword ptr [edi+38],0
>0049260F    jne         004926CB
 00492615    cmp         dword ptr [edi+64],0
>00492619    je          004926CB
 0049261F    mov         eax,esi
 00492621    call        TWinControl.GetVisibleDockClientCount
 00492626    test        eax,eax
>00492628    jle         004926CB
 0049262E    mov         edx,esp
 00492630    mov         eax,dword ptr [edi+14]
 00492633    mov         ecx,dword ptr [eax]
 00492635    call        dword ptr [ecx+54]
 00492638    mov         edx,esp
 0049263A    mov         eax,dword ptr [edi+14]
 0049263D    mov         ecx,dword ptr [eax]
 0049263F    call        dword ptr [ecx+0A0]
 00492645    test        bl,bl
>00492647    jne         00492657
 00492649    lea         edx,[edi+20]
 0049264C    mov         eax,esp
 0049264E    call        EqualRect
 00492653    test        al,al
>00492655    jne         004926CB
 00492657    push        edi
 00492658    lea         esi,[esp+4]
 0049265C    add         edi,20
 0049265F    movs        dword ptr [edi],dword ptr [esi]
 00492660    movs        dword ptr [edi],dword ptr [esi]
 00492661    movs        dword ptr [edi],dword ptr [esi]
 00492662    movs        dword ptr [edi],dword ptr [esi]
 00492663    pop         edi
 00492664    mov         eax,dword ptr [edi+64]
 00492667    movzx       edx,byte ptr [eax+10]
 0049266B    dec         dl
>0049266D    je          00492675
 0049266F    dec         dl
>00492671    je          0049268C
>00492673    jmp         004926A1
 00492675    mov         edx,dword ptr [esp+8]
 00492679    sub         edx,dword ptr [esp]
 0049267C    mov         dword ptr [eax+20],edx
 0049267F    mov         eax,dword ptr [esp+0C]
 00492683    sub         eax,dword ptr [esp+4]
 00492687    mov         dword ptr [edi+68],eax
>0049268A    jmp         004926A1
 0049268C    mov         edx,dword ptr [esp+0C]
 00492690    sub         edx,dword ptr [esp+4]
 00492694    mov         dword ptr [eax+20],edx
 00492697    mov         eax,dword ptr [esp+8]
 0049269B    sub         eax,dword ptr [esp]
 0049269E    mov         dword ptr [edi+68],eax
 004926A1    mov         eax,dword ptr [edi+14]
 004926A4    call        TWinControl.GetDockClientCount
 004926A9    test        eax,eax
>004926AB    jle         004926CB
 004926AD    xor         edx,edx
 004926AF    mov         eax,edi
 004926B1    call        TDockTree.SetNewBounds
 004926B6    cmp         dword ptr [edi+6C],0
>004926BA    jne         004926CB
 004926BC    push        edi
 004926BD    push        492CC8;TDockTree.UpdateZone
 004926C2    xor         edx,edx
 004926C4    mov         eax,edi
 004926C6    call        TDockTree.ForEachAt
 004926CB    add         esp,10
 004926CE    pop         edi
 004926CF    pop         esi
 004926D0    pop         ebx
 004926D1    ret
*}
end;

//004926D4
procedure TDockTree.ScaleZone(Zone:TDockZone);
begin
{*
 004926D4    push        ebx
 004926D5    push        esi
 004926D6    push        edi
 004926D7    push        ecx
 004926D8    mov         ebx,edx
 004926DA    mov         esi,eax
 004926DC    test        ebx,ebx
>004926DE    je          0049270A
 004926E0    test        ebx,ebx
>004926E2    je          0049270A
 004926E4    mov         eax,dword ptr [ebx+14]
 004926E7    movzx       eax,byte ptr [eax+10]
 004926EB    cmp         al,byte ptr [esi+48]
>004926EE    jne         0049270A
 004926F0    mov         edi,ebx
 004926F2    mov         eax,ebx
 004926F4    call        TDockZone.GetZoneLimit
 004926F9    mov         dword ptr [esp],eax
 004926FC    fild        dword ptr [esp]
 004926FF    fmul        qword ptr [esi+40]
 00492702    call        @ROUND
 00492707    mov         dword ptr [edi+20],eax
 0049270A    pop         edx
 0049270B    pop         edi
 0049270C    pop         esi
 0049270D    pop         ebx
 0049270E    ret
*}
end;

//00492744
procedure WriteControlName(const ControlName:UnicodeString);
begin
{*
 00492744    push        ebp
 00492745    mov         ebp,esp
 00492747    add         esp,0FFFFFFF8
 0049274A    push        ebx
 0049274B    xor         edx,edx
 0049274D    mov         dword ptr [ebp-4],edx
 00492750    mov         ebx,eax
 00492752    xor         eax,eax
 00492754    push        ebp
 00492755    push        4927C0
 0049275A    push        dword ptr fs:[eax]
 0049275D    mov         dword ptr fs:[eax],esp
 00492760    call        TEncoding.GetUTF8
 00492765    lea         ecx,[ebp-4]
 00492768    mov         edx,ebx
 0049276A    call        TEncoding.GetBytes
 0049276F    mov         eax,dword ptr [ebp-4]
 00492772    call        @DynArrayLength
 00492777    mov         dword ptr [ebp-8],eax
 0049277A    lea         edx,[ebp-8]
 0049277D    mov         eax,dword ptr [ebp+8]
 00492780    mov         eax,dword ptr [eax-4]
 00492783    mov         ecx,4
 00492788    mov         ebx,dword ptr [eax]
 0049278A    call        dword ptr [ebx+10]
 0049278D    cmp         dword ptr [ebp-8],0
>00492791    jle         004927A4
 00492793    mov         edx,dword ptr [ebp-4]
 00492796    mov         eax,dword ptr [ebp+8]
 00492799    mov         eax,dword ptr [eax-4]
 0049279C    mov         ecx,dword ptr [ebp-8]
 0049279F    mov         ebx,dword ptr [eax]
 004927A1    call        dword ptr [ebx+10]
 004927A4    xor         eax,eax
 004927A6    pop         edx
 004927A7    pop         ecx
 004927A8    pop         ecx
 004927A9    mov         dword ptr fs:[eax],edx
 004927AC    push        4927C7
 004927B1    lea         eax,[ebp-4]
 004927B4    mov         edx,dword ptr ds:[418988];TArray<System.Byte>
 004927BA    call        @DynArrayClear
 004927BF    ret
>004927C0    jmp         @HandleFinally
>004927C5    jmp         004927B1
 004927C7    pop         ebx
 004927C8    pop         ecx
 004927C9    pop         ecx
 004927CA    pop         ebp
 004927CB    ret
*}
end;

//004927CC
procedure DoSaveZone(Zone:TDockZone; Level:Integer);
begin
{*
 004927CC    push        ebp
 004927CD    mov         ebp,esp
 004927CF    add         esp,0FFFFFFF0
 004927D2    push        ebx
 004927D3    push        esi
 004927D4    xor         ecx,ecx
 004927D6    mov         dword ptr [ebp-10],ecx
 004927D9    mov         dword ptr [ebp-4],edx
 004927DC    mov         ebx,eax
 004927DE    xor         eax,eax
 004927E0    push        ebp
 004927E1    push        4928D3
 004927E6    push        dword ptr fs:[eax]
 004927E9    mov         dword ptr fs:[eax],esp
 004927EC    mov         eax,dword ptr [ebp+8]
 004927EF    mov         eax,dword ptr [eax-8]
 004927F2    cmp         ebx,dword ptr [eax+64]
>004927F5    je          00492807
 004927F7    cmp         dword ptr [ebx+8],0
>004927FB    jne         00492807
 004927FD    cmp         dword ptr [ebx+4],0
>00492801    je          00492894
 00492807    lea         edx,[ebp-4]
 0049280A    mov         eax,dword ptr [ebp+8]
 0049280D    mov         eax,dword ptr [eax-4]
 00492810    mov         ecx,4
 00492815    mov         esi,dword ptr [eax]
 00492817    call        dword ptr [esi+10]
 0049281A    movzx       eax,byte ptr [ebx+10]
 0049281E    mov         dword ptr [ebp-0C],eax
 00492821    lea         edx,[ebp-0C]
 00492824    mov         eax,dword ptr [ebp+8]
 00492827    mov         eax,dword ptr [eax-4]
 0049282A    mov         ecx,1
 0049282F    mov         esi,dword ptr [eax]
 00492831    call        dword ptr [esi+10]
 00492834    mov         eax,dword ptr [ebp+8]
 00492837    mov         eax,dword ptr [eax-8]
 0049283A    cmp         byte ptr [eax+74],0
>0049283E    je          00492864
 00492840    mov         eax,dword ptr [ebp+8]
 00492843    mov         eax,dword ptr [eax-8]
 00492846    movzx       edx,byte ptr [ebx+10]
 0049284A    mov         ecx,dword ptr [eax]
 0049284C    call        dword ptr [ecx+28]
 0049284F    mov         ecx,eax
 00492851    mov         eax,dword ptr [ebp+8]
 00492854    mov         eax,dword ptr [eax-8]
 00492857    mov         edx,dword ptr [ebx+20]
 0049285A    call        TDockTree.RelativeSize
 0049285F    mov         dword ptr [ebp-8],eax
>00492862    jmp         0049286A
 00492864    mov         eax,dword ptr [ebx+20]
 00492867    mov         dword ptr [ebp-8],eax
 0049286A    lea         edx,[ebp-8]
 0049286D    mov         eax,dword ptr [ebp+8]
 00492870    mov         eax,dword ptr [eax-4]
 00492873    mov         ecx,4
 00492878    mov         esi,dword ptr [eax]
 0049287A    call        dword ptr [esi+10]
 0049287D    mov         eax,dword ptr [ebp+8]
 00492880    push        eax
 00492881    lea         edx,[ebp-10]
 00492884    mov         eax,ebx
 00492886    call        TDockZone.GetControlName
 0049288B    mov         eax,dword ptr [ebp-10]
 0049288E    call        WriteControlName
 00492893    pop         ecx
 00492894    mov         eax,dword ptr [ebx+8]
 00492897    test        eax,eax
>00492899    je          004928A9
 0049289B    mov         edx,dword ptr [ebp+8]
 0049289E    push        edx
 0049289F    mov         edx,dword ptr [ebp-4]
 004928A2    inc         edx
 004928A3    call        DoSaveZone
 004928A8    pop         ecx
 004928A9    mov         eax,dword ptr [ebx+0C]
 004928AC    test        eax,eax
>004928AE    je          004928BD
 004928B0    mov         edx,dword ptr [ebp+8]
 004928B3    push        edx
 004928B4    mov         edx,dword ptr [ebp-4]
 004928B7    call        DoSaveZone
 004928BC    pop         ecx
 004928BD    xor         eax,eax
 004928BF    pop         edx
 004928C0    pop         ecx
 004928C1    pop         ecx
 004928C2    mov         dword ptr fs:[eax],edx
 004928C5    push        4928DA
 004928CA    lea         eax,[ebp-10]
 004928CD    call        @UStrClr
 004928D2    ret
>004928D3    jmp         @HandleFinally
>004928D8    jmp         004928CA
 004928DA    pop         esi
 004928DB    pop         ebx
 004928DC    mov         esp,ebp
 004928DE    pop         ebp
 004928DF    ret
*}
end;

//004928E0
procedure TDockTree.SaveToStream(Stream:TStream);
begin
{*
 004928E0    push        ebp
 004928E1    mov         ebp,esp
 004928E3    add         esp,0FFFFFFE4
 004928E6    push        ebx
 004928E7    push        esi
 004928E8    xor         ecx,ecx
 004928EA    mov         dword ptr [ebp-1C],ecx
 004928ED    mov         dword ptr [ebp-0C],ecx
 004928F0    mov         dword ptr [ebp-4],edx
 004928F3    mov         dword ptr [ebp-8],eax
 004928F6    xor         eax,eax
 004928F8    push        ebp
 004928F9    push        492AC2
 004928FE    push        dword ptr fs:[eax]
 00492901    mov         dword ptr fs:[eax],esp
 00492904    mov         eax,dword ptr [ebp-8]
 00492907    lea         edx,[eax+70]
 0049290A    mov         ecx,4
 0049290F    mov         eax,dword ptr [ebp-4]
 00492912    mov         ebx,dword ptr [eax]
 00492914    call        dword ptr [ebx+10]
 00492917    push        1
 00492919    lea         eax,[ebp-0C]
 0049291C    mov         ecx,1
 00492921    mov         edx,dword ptr ds:[492710];:TDockTree.:1
 00492927    call        @DynArraySetLength
 0049292C    add         esp,4
 0049292F    mov         eax,dword ptr [ebp-8]
 00492932    movzx       eax,byte ptr [eax+74]
 00492936    mov         edx,dword ptr [ebp-0C]
 00492939    mov         byte ptr [edx],al
 0049293B    mov         edx,dword ptr [ebp-0C]
 0049293E    mov         ecx,1
 00492943    mov         eax,dword ptr [ebp-4]
 00492946    mov         ebx,dword ptr [eax]
 00492948    call        dword ptr [ebx+10]
 0049294B    mov         eax,dword ptr [ebp-8]
 0049294E    mov         eax,dword ptr [eax+64]
 00492951    movzx       eax,byte ptr [eax+10]
 00492955    mov         edx,dword ptr [ebp-0C]
 00492958    mov         byte ptr [edx],al
 0049295A    mov         edx,dword ptr [ebp-0C]
 0049295D    mov         ecx,1
 00492962    mov         eax,dword ptr [ebp-4]
 00492965    mov         ebx,dword ptr [eax]
 00492967    call        dword ptr [ebx+10]
 0049296A    mov         dl,1
 0049296C    mov         eax,[0043C7BC];TStringList
 00492971    call        TStringList.Create
 00492976    mov         dword ptr [ebp-18],eax
 00492979    xor         eax,eax
 0049297B    push        ebp
 0049297C    push        492A2D
 00492981    push        dword ptr fs:[eax]
 00492984    mov         dword ptr fs:[eax],esp
 00492987    mov         eax,dword ptr [ebp-8]
 0049298A    mov         eax,dword ptr [eax+14]
 0049298D    call        TWinControl.GetDockClientCount
 00492992    mov         ebx,eax
 00492994    dec         ebx
 00492995    test        ebx,ebx
>00492997    jl          004929CE
 00492999    inc         ebx
 0049299A    mov         dword ptr [ebp-10],0
 004929A1    mov         eax,dword ptr [ebp-8]
 004929A4    mov         eax,dword ptr [eax+14]
 004929A7    mov         edx,dword ptr [ebp-10]
 004929AA    call        TWinControl.GetDockClients
 004929AF    mov         esi,eax
 004929B1    cmp         byte ptr [esi+59],0
>004929B5    jne         004929C8
 004929B7    cmp         dword ptr [esi+8],0
>004929BB    je          004929C8
 004929BD    mov         edx,dword ptr [esi+8]
 004929C0    mov         eax,dword ptr [ebp-18]
 004929C3    mov         ecx,dword ptr [eax]
 004929C5    call        dword ptr [ecx+38]
 004929C8    inc         dword ptr [ebp-10]
 004929CB    dec         ebx
>004929CC    jne         004929A1
 004929CE    mov         eax,dword ptr [ebp-18]
 004929D1    mov         edx,dword ptr [eax]
 004929D3    call        dword ptr [edx+14]
 004929D6    mov         dword ptr [ebp-14],eax
 004929D9    lea         edx,[ebp-14]
 004929DC    mov         ecx,4
 004929E1    mov         eax,dword ptr [ebp-4]
 004929E4    mov         ebx,dword ptr [eax]
 004929E6    call        dword ptr [ebx+10]
 004929E9    mov         ebx,dword ptr [ebp-14]
 004929EC    dec         ebx
 004929ED    test        ebx,ebx
>004929EF    jl          00492A17
 004929F1    inc         ebx
 004929F2    mov         dword ptr [ebp-10],0
 004929F9    push        ebp
 004929FA    lea         ecx,[ebp-1C]
 004929FD    mov         edx,dword ptr [ebp-10]
 00492A00    mov         eax,dword ptr [ebp-18]
 00492A03    mov         esi,dword ptr [eax]
 00492A05    call        dword ptr [esi+0C]
 00492A08    mov         eax,dword ptr [ebp-1C]
 00492A0B    call        WriteControlName
 00492A10    pop         ecx
 00492A11    inc         dword ptr [ebp-10]
 00492A14    dec         ebx
>00492A15    jne         004929F9
 00492A17    xor         eax,eax
 00492A19    pop         edx
 00492A1A    pop         ecx
 00492A1B    pop         ecx
 00492A1C    mov         dword ptr fs:[eax],edx
 00492A1F    push        492A34
 00492A24    mov         eax,dword ptr [ebp-18]
 00492A27    call        TObject.Free
 00492A2C    ret
>00492A2D    jmp         @HandleFinally
>00492A32    jmp         00492A24
 00492A34    mov         eax,dword ptr [ebp-8]
 00492A37    cmp         byte ptr [eax+74],0
>00492A3B    je          00492A64
 00492A3D    mov         eax,dword ptr [ebp-8]
 00492A40    mov         eax,dword ptr [eax+64]
 00492A43    movzx       edx,byte ptr [eax+10]
 00492A47    mov         eax,dword ptr [ebp-8]
 00492A4A    mov         ecx,dword ptr [eax]
 00492A4C    call        dword ptr [ecx+28]
 00492A4F    mov         ecx,eax
 00492A51    mov         eax,dword ptr [ebp-8]
 00492A54    mov         edx,dword ptr [eax+68]
 00492A57    mov         eax,dword ptr [ebp-8]
 00492A5A    call        TDockTree.RelativeSize
 00492A5F    mov         dword ptr [ebp-10],eax
>00492A62    jmp         00492A6D
 00492A64    mov         eax,dword ptr [ebp-8]
 00492A67    mov         eax,dword ptr [eax+68]
 00492A6A    mov         dword ptr [ebp-10],eax
 00492A6D    lea         edx,[ebp-10]
 00492A70    mov         ecx,4
 00492A75    mov         eax,dword ptr [ebp-4]
 00492A78    mov         ebx,dword ptr [eax]
 00492A7A    call        dword ptr [ebx+10]
 00492A7D    push        ebp
 00492A7E    mov         eax,dword ptr [ebp-8]
 00492A81    mov         eax,dword ptr [eax+64]
 00492A84    xor         edx,edx
 00492A86    call        DoSaveZone
 00492A8B    pop         ecx
 00492A8C    mov         edx,785B38
 00492A91    mov         ecx,4
 00492A96    mov         eax,dword ptr [ebp-4]
 00492A99    mov         ebx,dword ptr [eax]
 00492A9B    call        dword ptr [ebx+10]
 00492A9E    xor         eax,eax
 00492AA0    pop         edx
 00492AA1    pop         ecx
 00492AA2    pop         ecx
 00492AA3    mov         dword ptr fs:[eax],edx
 00492AA6    push        492AC9
 00492AAB    lea         eax,[ebp-1C]
 00492AAE    call        @UStrClr
 00492AB3    lea         eax,[ebp-0C]
 00492AB6    mov         edx,dword ptr ds:[492710];:TDockTree.:1
 00492ABC    call        @DynArrayClear
 00492AC1    ret
>00492AC2    jmp         @HandleFinally
>00492AC7    jmp         00492AAB
 00492AC9    pop         esi
 00492ACA    pop         ebx
 00492ACB    mov         esp,ebp
 00492ACD    pop         ebp
 00492ACE    ret
*}
end;

//00492AD0
procedure DoSetNewBounds(Zone:TDockZone);
begin
{*
 00492AD0    push        ebp
 00492AD1    mov         ebp,esp
 00492AD3    push        ebx
 00492AD4    push        esi
 00492AD5    mov         ebx,eax
 00492AD7    test        ebx,ebx
>00492AD9    je          00492B4B
 00492ADB    mov         eax,ebx
 00492ADD    call        TDockZone.NextVisible
 00492AE2    test        eax,eax
>00492AE4    jne         00492B29
 00492AE6    mov         eax,dword ptr [ebp+8]
 00492AE9    mov         eax,dword ptr [eax-4]
 00492AEC    cmp         ebx,dword ptr [eax+64]
>00492AEF    je          00492B29
 00492AF1    mov         eax,ebx
 00492AF3    call        TDockZone.GetVisible
 00492AF8    test        al,al
>00492AFA    je          00492B29
 00492AFC    mov         edx,dword ptr [ebp+8]
 00492AFF    mov         edx,dword ptr [edx-4]
 00492B02    mov         edx,dword ptr [edx+64]
 00492B05    mov         eax,dword ptr [ebx+14]
 00492B08    cmp         edx,eax
>00492B0A    jne         00492B1C
 00492B0C    mov         eax,ebx
 00492B0E    mov         edx,dword ptr [ebp+8]
 00492B11    mov         edx,dword ptr [edx-4]
 00492B14    mov         edx,dword ptr [edx+68]
 00492B17    mov         dword ptr [eax+20],edx
>00492B1A    jmp         00492B29
 00492B1C    mov         esi,ebx
 00492B1E    mov         eax,dword ptr [eax+14]
 00492B21    call        TDockZone.GetZoneLimit
 00492B26    mov         dword ptr [esi+20],eax
 00492B29    mov         eax,dword ptr [ebp+8]
 00492B2C    push        eax
 00492B2D    mov         eax,ebx
 00492B2F    call        TDockZone.FirstVisibleChild
 00492B34    call        DoSetNewBounds
 00492B39    pop         ecx
 00492B3A    mov         eax,dword ptr [ebp+8]
 00492B3D    push        eax
 00492B3E    mov         eax,ebx
 00492B40    call        TDockZone.NextVisible
 00492B45    call        DoSetNewBounds
 00492B4A    pop         ecx
 00492B4B    pop         esi
 00492B4C    pop         ebx
 00492B4D    pop         ebp
 00492B4E    ret
*}
end;

//00492B50
procedure TDockTree.SetNewBounds(Zone:TDockZone);
begin
{*
 00492B50    push        ebp
 00492B51    mov         ebp,esp
 00492B53    push        ecx
 00492B54    mov         dword ptr [ebp-4],eax
 00492B57    test        edx,edx
>00492B59    jne         00492B64
 00492B5B    mov         eax,dword ptr [ebp-4]
 00492B5E    mov         eax,dword ptr [eax+64]
 00492B61    mov         edx,dword ptr [eax+8]
 00492B64    push        ebp
 00492B65    mov         eax,edx
 00492B67    call        DoSetNewBounds
 00492B6C    pop         ecx
 00492B6D    mov         eax,dword ptr [ebp-4]
 00492B70    mov         eax,dword ptr [eax+14]
 00492B73    mov         edx,dword ptr [eax]
 00492B75    call        dword ptr [edx+90]
 00492B7B    pop         ecx
 00492B7C    pop         ebp
 00492B7D    ret
*}
end;

//00492B80
procedure TDockTree.SetReplacingControl(Control:TControl);
begin
{*
 00492B80    push        ebx
 00492B81    push        esi
 00492B82    mov         esi,edx
 00492B84    mov         ebx,eax
 00492B86    mov         edx,esi
 00492B88    mov         eax,ebx
 00492B8A    call        TDockTree.FindControlZone
 00492B8F    mov         dword ptr [ebx+38],eax
 00492B92    pop         esi
 00492B93    pop         ebx
 00492B94    ret
*}
end;

//00492B98
procedure TDockTree.ShiftZone(Zone:TDockZone);
begin
{*
 00492B98    push        ebx
 00492B99    push        esi
 00492B9A    push        edi
 00492B9B    mov         ebx,edx
 00492B9D    mov         esi,eax
 00492B9F    test        ebx,ebx
>00492BA1    je          00492BC3
 00492BA3    cmp         ebx,dword ptr [esi+64]
>00492BA6    je          00492BC3
 00492BA8    mov         eax,dword ptr [ebx+14]
 00492BAB    movzx       eax,byte ptr [eax+10]
 00492BAF    cmp         al,byte ptr [esi+48]
>00492BB2    jne         00492BC3
 00492BB4    mov         edi,ebx
 00492BB6    mov         eax,ebx
 00492BB8    call        TDockZone.GetZoneLimit
 00492BBD    add         eax,dword ptr [esi+4C]
 00492BC0    mov         dword ptr [edi+20],eax
 00492BC3    pop         edi
 00492BC4    pop         esi
 00492BC5    pop         ebx
 00492BC6    ret
*}
end;

//00492BC8
procedure TDockTree.SplitterMouseDown(OnZone:TDockZone; MousePos:TPoint);
begin
{*
 00492BC8    push        ebx
 00492BC9    push        esi
 00492BCA    push        edi
 00492BCB    add         esp,0FFFFFFF8
 00492BCE    mov         esi,ecx
 00492BD0    lea         edi,[esp]
 00492BD3    movs        dword ptr [edi],dword ptr [esi]
 00492BD4    movs        dword ptr [edi],dword ptr [esi]
 00492BD5    mov         ebx,eax
 00492BD7    mov         dword ptr [ebx+60],edx
 00492BDA    mov         eax,dword ptr [ebx+14]
 00492BDD    call        TWinControl.GetHandle
 00492BE2    mov         edx,eax
 00492BE4    mov         eax,[0079318C];Mouse:TMouse
 00492BE9    call        TMouse.SetCapture
 00492BEE    mov         eax,dword ptr [ebx+14]
 00492BF1    call        TWinControl.GetHandle
 00492BF6    mov         esi,eax
 00492BF8    mov         dword ptr [ebx+5C],esi
 00492BFB    push        412
 00492C00    push        0
 00492C02    push        esi
 00492C03    call        user32.GetDCEx
 00492C08    mov         dword ptr [ebx+58],eax
 00492C0B    mov         eax,dword ptr [esp]
 00492C0E    mov         dword ptr [ebx+50],eax
 00492C11    mov         eax,dword ptr [esp+4]
 00492C15    mov         dword ptr [ebx+54],eax
 00492C18    mov         eax,ebx
 00492C1A    call        TDockTree.DrawSizeSplitter
 00492C1F    pop         ecx
 00492C20    pop         edx
 00492C21    pop         edi
 00492C22    pop         esi
 00492C23    pop         ebx
 00492C24    ret
*}
end;

//00492C28
procedure TDockTree.SplitterMouseUp;
begin
{*
 00492C28    push        ebx
 00492C29    mov         ebx,eax
 00492C2B    xor         edx,edx
 00492C2D    mov         eax,[0079318C];Mouse:TMouse
 00492C32    call        TMouse.SetCapture
 00492C37    mov         eax,ebx
 00492C39    call        TDockTree.DrawSizeSplitter
 00492C3E    mov         eax,dword ptr [ebx+58]
 00492C41    push        eax
 00492C42    mov         eax,dword ptr [ebx+5C]
 00492C45    push        eax
 00492C46    call        user32.ReleaseDC
 00492C4B    mov         eax,dword ptr [ebx+60]
 00492C4E    mov         edx,dword ptr [eax+14]
 00492C51    cmp         byte ptr [edx+10],1
>00492C55    jne         00492C69
 00492C57    mov         edx,dword ptr [ebx+0C]
 00492C5A    sar         edx,1
>00492C5C    jns         00492C61
 00492C5E    adc         edx,0
 00492C61    add         edx,dword ptr [ebx+54]
 00492C64    mov         dword ptr [eax+20],edx
>00492C67    jmp         00492C79
 00492C69    mov         edx,dword ptr [ebx+0C]
 00492C6C    sar         edx,1
>00492C6E    jns         00492C73
 00492C70    adc         edx,0
 00492C73    add         edx,dword ptr [ebx+50]
 00492C76    mov         dword ptr [eax+20],edx
 00492C79    mov         eax,dword ptr [ebx+60]
 00492C7C    mov         edx,dword ptr [eax+14]
 00492C7F    mov         eax,ebx
 00492C81    call        TDockTree.SetNewBounds
 00492C86    push        ebx
 00492C87    push        492CC8;TDockTree.UpdateZone
 00492C8C    mov         eax,dword ptr [ebx+60]
 00492C8F    mov         edx,dword ptr [eax+14]
 00492C92    mov         eax,ebx
 00492C94    call        TDockTree.ForEachAt
 00492C99    xor         eax,eax
 00492C9B    mov         dword ptr [ebx+60],eax
 00492C9E    pop         ebx
 00492C9F    ret
*}
end;

//00492CA0
procedure TDockTree.UpdateAll;
begin
{*
 00492CA0    push        ebx
 00492CA1    mov         ebx,eax
 00492CA3    cmp         dword ptr [ebx+6C],0
>00492CA7    jne         00492CC4
 00492CA9    mov         eax,dword ptr [ebx+14]
 00492CAC    call        TWinControl.GetDockClientCount
 00492CB1    test        eax,eax
>00492CB3    jle         00492CC4
 00492CB5    push        ebx
 00492CB6    push        492CC8;TDockTree.UpdateZone
 00492CBB    xor         edx,edx
 00492CBD    mov         eax,ebx
 00492CBF    call        TDockTree.ForEachAt
 00492CC4    pop         ebx
 00492CC5    ret
*}
end;

//00492CC8
procedure TDockTree.UpdateZone(Zone:TDockZone);
begin
{*
 00492CC8    cmp         dword ptr [eax+6C],0
>00492CCC    jne         00492CD5
 00492CCE    mov         eax,edx
 00492CD0    call        TDockZone.Update
 00492CD5    ret
*}
end;

//00492CD8
procedure TDockTree.WindowProc(var Message:TMessage);
begin
{*
 00492CD8    push        esi
 00492CD9    push        edi
 00492CDA    mov         edi,edx
 00492CDC    mov         esi,eax
 00492CDE    mov         edx,edi
 00492CE0    mov         eax,esi
 00492CE2    mov         ecx,dword ptr [eax]
 00492CE4    call        dword ptr [ecx+3C]
 00492CE7    pop         edi
 00492CE8    pop         esi
 00492CE9    ret
*}
end;

//00492CEC
procedure TDockTree.DrawSizeSplitter;
begin
{*
 00492CEC    push        ebx
 00492CED    push        esi
 00492CEE    add         esp,0FFFFFFF0
 00492CF1    mov         ebx,eax
 00492CF3    mov         esi,dword ptr [ebx+60]
 00492CF6    test        esi,esi
>00492CF8    je          00492DCF
 00492CFE    mov         eax,dword ptr [esi+14]
 00492D01    cmp         byte ptr [eax+10],1
>00492D05    jne         00492D4A
 00492D07    mov         edx,2
 00492D0C    mov         eax,esi
 00492D0E    call        TDockZone.GetTopLeft
 00492D13    mov         dword ptr [esp],eax
 00492D16    mov         eax,dword ptr [ebx+0C]
 00492D19    sar         eax,1
>00492D1B    jns         00492D20
 00492D1D    adc         eax,0
 00492D20    mov         edx,dword ptr [ebx+54]
 00492D23    sub         edx,eax
 00492D25    mov         dword ptr [esp+4],edx
 00492D29    mov         edx,2
 00492D2E    mov         eax,dword ptr [ebx+60]
 00492D31    call        TDockZone.GetHeightWidth
 00492D36    add         eax,dword ptr [esp]
 00492D39    mov         dword ptr [esp+8],eax
 00492D3D    mov         eax,dword ptr [esp+4]
 00492D41    add         eax,dword ptr [ebx+0C]
 00492D44    mov         dword ptr [esp+0C],eax
>00492D48    jmp         00492D8B
 00492D4A    mov         eax,dword ptr [ebx+0C]
 00492D4D    sar         eax,1
>00492D4F    jns         00492D54
 00492D51    adc         eax,0
 00492D54    mov         edx,dword ptr [ebx+50]
 00492D57    sub         edx,eax
 00492D59    mov         dword ptr [esp],edx
 00492D5C    mov         edx,1
 00492D61    mov         eax,esi
 00492D63    call        TDockZone.GetTopLeft
 00492D68    mov         dword ptr [esp+4],eax
 00492D6C    mov         eax,dword ptr [esp]
 00492D6F    add         eax,dword ptr [ebx+0C]
 00492D72    mov         dword ptr [esp+8],eax
 00492D76    mov         edx,1
 00492D7B    mov         eax,dword ptr [ebx+60]
 00492D7E    call        TDockZone.GetHeightWidth
 00492D83    add         eax,dword ptr [esp+4]
 00492D87    mov         dword ptr [esp+0C],eax
 00492D8B    mov         eax,dword ptr [ebx+10]
 00492D8E    call        TBrush.GetHandle
 00492D93    push        eax
 00492D94    mov         eax,dword ptr [ebx+58]
 00492D97    push        eax
 00492D98    call        gdi32.SelectObject
 00492D9D    mov         esi,eax
 00492D9F    push        5A0049
 00492DA4    mov         ecx,dword ptr [esp+10]
 00492DA8    mov         edx,dword ptr [esp+8]
 00492DAC    sub         ecx,edx
 00492DAE    push        ecx
 00492DAF    mov         ecx,dword ptr [esp+10]
 00492DB3    mov         eax,dword ptr [esp+8]
 00492DB7    sub         ecx,eax
 00492DB9    push        ecx
 00492DBA    push        edx
 00492DBB    push        eax
 00492DBC    mov         eax,dword ptr [ebx+58]
 00492DBF    push        eax
 00492DC0    call        gdi32.PatBlt
 00492DC5    push        esi
 00492DC6    mov         eax,dword ptr [ebx+58]
 00492DC9    push        eax
 00492DCA    call        gdi32.SelectObject
 00492DCF    add         esp,10
 00492DD2    pop         esi
 00492DD3    pop         ebx
 00492DD4    ret
*}
end;

//00492DD8
procedure DoGetNextLimit(Zone:TDockZone);
begin
{*
 00492DD8    push        ebp
 00492DD9    mov         ebp,esp
 00492DDB    push        ebx
 00492DDC    push        esi
 00492DDD    push        edi
 00492DDE    mov         ebx,eax
 00492DE0    mov         eax,dword ptr [ebp+8]
 00492DE3    cmp         ebx,dword ptr [eax-4]
>00492DE6    je          00492E41
 00492DE8    mov         eax,dword ptr [ebx+14]
 00492DEB    movzx       eax,byte ptr [eax+10]
 00492DEF    mov         edx,dword ptr [ebp+8]
 00492DF2    mov         edx,dword ptr [edx-4]
 00492DF5    mov         edx,dword ptr [edx+14]
 00492DF8    cmp         al,byte ptr [edx+10]
>00492DFB    jne         00492E41
 00492DFD    mov         eax,ebx
 00492DFF    call        TDockZone.GetZoneLimit
 00492E04    mov         edi,eax
 00492E06    mov         eax,dword ptr [ebp+8]
 00492E09    mov         eax,dword ptr [eax-4]
 00492E0C    call        TDockZone.GetZoneLimit
 00492E11    cmp         edi,eax
>00492E13    jle         00492E41
 00492E15    cmp         dword ptr [ebx+4],0
>00492E19    je          00492E28
 00492E1B    mov         esi,dword ptr [ebx+4]
 00492E1E    test        esi,esi
>00492E20    je          00492E41
 00492E22    cmp         byte ptr [esi+59],0
>00492E26    je          00492E41
 00492E28    mov         eax,dword ptr [ebp+8]
 00492E2B    mov         esi,dword ptr [eax-8]
 00492E2E    mov         eax,ebx
 00492E30    call        TDockZone.GetZoneLimit
 00492E35    cmp         eax,esi
>00492E37    jle         00492E3B
 00492E39    mov         eax,esi
 00492E3B    mov         edx,dword ptr [ebp+8]
 00492E3E    mov         dword ptr [edx-8],eax
 00492E41    mov         eax,dword ptr [ebx+0C]
 00492E44    test        eax,eax
>00492E46    je          00492E52
 00492E48    mov         edx,dword ptr [ebp+8]
 00492E4B    push        edx
 00492E4C    call        DoGetNextLimit
 00492E51    pop         ecx
 00492E52    mov         eax,dword ptr [ebx+8]
 00492E55    test        eax,eax
>00492E57    je          00492E63
 00492E59    mov         edx,dword ptr [ebp+8]
 00492E5C    push        edx
 00492E5D    call        DoGetNextLimit
 00492E62    pop         ecx
 00492E63    pop         edi
 00492E64    pop         esi
 00492E65    pop         ebx
 00492E66    pop         ebp
 00492E67    ret
*}
end;

//00492E68
function TDockTree.GetNextLimit(AZone:TDockZone):Integer;
begin
{*
 00492E68    push        ebp
 00492E69    mov         ebp,esp
 00492E6B    add         esp,0FFFFFFF8
 00492E6E    push        ebx
 00492E6F    push        esi
 00492E70    mov         dword ptr [ebp-4],edx
 00492E73    mov         ebx,eax
 00492E75    mov         eax,dword ptr [ebp-4]
 00492E78    call        TDockZone.NextVisible
 00492E7D    test        eax,eax
>00492E7F    je          00492E93
 00492E81    mov         eax,dword ptr [ebp-4]
 00492E84    call        TDockZone.NextVisible
 00492E89    call        TDockZone.GetZoneLimit
 00492E8E    mov         dword ptr [ebp-8],eax
>00492E91    jmp         00492EAA
 00492E93    mov         eax,dword ptr [ebp-4]
 00492E96    call        TDockZone.GetZoneLimit
 00492E9B    mov         esi,eax
 00492E9D    mov         eax,dword ptr [ebp-4]
 00492EA0    call        TDockZone.GetLimitSize
 00492EA5    add         esi,eax
 00492EA7    mov         dword ptr [ebp-8],esi
 00492EAA    push        ebp
 00492EAB    mov         eax,dword ptr [ebx+64]
 00492EAE    mov         eax,dword ptr [eax+8]
 00492EB1    call        DoGetNextLimit
 00492EB6    pop         ecx
 00492EB7    mov         eax,dword ptr [ebp-8]
 00492EBA    pop         esi
 00492EBB    pop         ebx
 00492EBC    pop         ecx
 00492EBD    pop         ecx
 00492EBE    pop         ebp
 00492EBF    ret
*}
end;

//00492EC0
function GetDockAlign(Client:TControl; DropCtl:TControl):TAlign;
begin
{*
 00492EC0    push        ebp
 00492EC1    mov         ebp,esp
 00492EC3    add         esp,0FFFFFFE0
 00492EC6    push        ebx
 00492EC7    push        esi
 00492EC8    push        edi
 00492EC9    mov         esi,edx
 00492ECB    mov         edi,eax
 00492ECD    mov         bl,4
 00492ECF    test        esi,esi
>00492ED1    je          00492F33
 00492ED3    lea         edx,[ebp-10]
 00492ED6    mov         eax,edi
 00492ED8    call        TControl.GetBoundsRect
 00492EDD    lea         edx,[ebp-20]
 00492EE0    mov         eax,esi
 00492EE2    call        TControl.GetBoundsRect
 00492EE7    mov         eax,dword ptr [ebp-0C]
 00492EEA    cmp         eax,dword ptr [ebp-1C]
>00492EED    jg          00492F03
 00492EEF    mov         eax,dword ptr [ebp-4]
 00492EF2    cmp         eax,dword ptr [ebp-14]
>00492EF5    jge         00492F03
 00492EF7    mov         eax,dword ptr [ebp-8]
 00492EFA    cmp         eax,dword ptr [ebp-18]
>00492EFD    jl          00492F03
 00492EFF    mov         bl,1
>00492F01    jmp         00492F33
 00492F03    mov         eax,dword ptr [ebp-10]
 00492F06    cmp         eax,dword ptr [ebp-20]
>00492F09    jg          00492F1F
 00492F0B    mov         eax,dword ptr [ebp-8]
 00492F0E    cmp         eax,dword ptr [ebp-18]
>00492F11    jge         00492F1F
 00492F13    mov         eax,dword ptr [ebp-4]
 00492F16    cmp         eax,dword ptr [ebp-14]
>00492F19    jl          00492F1F
 00492F1B    mov         bl,3
>00492F1D    jmp         00492F33
 00492F1F    mov         eax,dword ptr [ebp-1C]
 00492F22    add         eax,dword ptr [ebp-14]
 00492F25    sar         eax,1
>00492F27    jns         00492F2C
 00492F29    adc         eax,0
 00492F2C    cmp         eax,dword ptr [ebp-0C]
>00492F2F    jg          00492F33
 00492F31    mov         bl,2
 00492F33    mov         eax,ebx
 00492F35    pop         edi
 00492F36    pop         esi
 00492F37    pop         ebx
 00492F38    mov         esp,ebp
 00492F3A    pop         ebp
 00492F3B    ret
*}
end;

//00492F3C
procedure HideZone(const Zone:TDockZone);
begin
{*
 00492F3C    push        ebp
 00492F3D    mov         ebp,esp
 00492F3F    push        ebx
 00492F40    push        esi
 00492F41    mov         ebx,eax
 00492F43    mov         eax,ebx
 00492F45    call        IsOrientationSet
 00492F4A    test        al,al
>00492F4C    je          00492F5F
 00492F4E    mov         eax,ebx
 00492F50    call        TDockZone.GetLimitBegin
 00492F55    mov         edx,dword ptr [ebx+20]
 00492F58    sub         edx,eax
 00492F5A    mov         dword ptr [ebx+24],edx
>00492F5D    jmp         00492F64
 00492F5F    xor         eax,eax
 00492F61    mov         dword ptr [ebx+24],eax
 00492F64    mov         esi,dword ptr [ebx+14]
 00492F67    test        esi,esi
>00492F69    je          00492F83
 00492F6B    mov         eax,esi
 00492F6D    call        TDockZone.GetVisible
 00492F72    test        al,al
>00492F74    jne         00492F83
 00492F76    mov         eax,dword ptr [ebp+8]
 00492F79    push        eax
 00492F7A    mov         eax,dword ptr [ebx+14]
 00492F7D    call        HideZone
 00492F82    pop         ecx
 00492F83    mov         eax,ebx
 00492F85    call        TDockZone.PrevVisible
 00492F8A    test        eax,eax
>00492F8C    je          00492F9D
 00492F8E    mov         eax,ebx
 00492F90    call        TDockZone.PrevVisible
 00492F95    mov         edx,dword ptr [ebx+20]
 00492F98    call        TDockZone.ExpandZoneLimit
 00492F9D    mov         eax,dword ptr [ebp+8]
 00492FA0    mov         eax,dword ptr [eax-4]
 00492FA3    push        eax
 00492FA4    push        492CC8;TDockTree.UpdateZone
 00492FA9    mov         eax,dword ptr [ebp+8]
 00492FAC    mov         eax,dword ptr [eax-4]
 00492FAF    mov         edx,dword ptr [ebx+14]
 00492FB2    call        TDockTree.ForEachAt
 00492FB7    pop         esi
 00492FB8    pop         ebx
 00492FB9    pop         ebp
 00492FBA    ret
*}
end;

//00492FBC
procedure ShowZone(const Zone:TDockZone);
begin
{*
 00492FBC    push        ebp
 00492FBD    mov         ebp,esp
 00492FBF    add         esp,0FFFFFFF4
 00492FC2    push        ebx
 00492FC3    push        esi
 00492FC4    push        edi
 00492FC5    mov         edi,eax
 00492FC7    mov         esi,dword ptr [edi+14]
 00492FCA    test        esi,esi
>00492FCC    je          00492FF0
 00492FCE    mov         eax,dword ptr [ebp+8]
 00492FD1    mov         eax,dword ptr [eax-4]
 00492FD4    cmp         esi,dword ptr [eax+64]
>00492FD7    je          00492FF0
 00492FD9    mov         eax,esi
 00492FDB    call        TDockZone.GetVisibleChildCount
 00492FE0    dec         eax
>00492FE1    jne         00492FF0
 00492FE3    mov         eax,dword ptr [ebp+8]
 00492FE6    push        eax
 00492FE7    mov         eax,dword ptr [edi+14]
 00492FEA    call        ShowZone
 00492FEF    pop         ecx
 00492FF0    mov         eax,dword ptr [edi+14]
 00492FF3    call        TDockZone.GetVisibleChildCount
 00492FF8    dec         eax
>00492FF9    je          00493001
 00492FFB    cmp         dword ptr [edi+24],0
>00492FFF    jne         00493008
 00493001    mov         bl,1
>00493003    jmp         004930C6
 00493008    xor         ebx,ebx
 0049300A    mov         eax,dword ptr [ebp+8]
 0049300D    mov         eax,dword ptr [eax-4]
 00493010    mov         eax,dword ptr [eax+18]
 00493013    mov         edx,dword ptr [ebp+8]
 00493016    mov         edx,dword ptr [edx-4]
 00493019    add         eax,dword ptr [edx+0C]
 0049301C    add         eax,0E
 0049301F    mov         dword ptr [ebp-4],eax
 00493022    mov         eax,edi
 00493024    call        TDockZone.PrevVisible
 00493029    test        eax,eax
>0049302B    je          00493088
 0049302D    mov         eax,edi
 0049302F    call        TDockZone.PrevVisible
 00493034    mov         esi,eax
 00493036    mov         eax,esi
 00493038    call        TDockZone.GetZoneLimit
 0049303D    push        eax
 0049303E    mov         eax,esi
 00493040    call        TDockZone.GetLimitBegin
 00493045    pop         edx
 00493046    sub         edx,eax
 00493048    sub         edx,dword ptr [edi+24]
 0049304B    cmp         edx,dword ptr [ebp-4]
>0049304E    jge         00493054
 00493050    mov         bl,1
>00493052    jmp         004930C6
 00493054    mov         dword ptr [ebp-8],esi
 00493057    mov         eax,esi
 00493059    call        TDockZone.GetZoneLimit
 0049305E    sub         eax,dword ptr [edi+24]
 00493061    mov         edx,dword ptr [ebp-8]
 00493064    mov         dword ptr [edx+20],eax
 00493067    mov         dword ptr [ebp-0C],edi
 0049306A    mov         eax,esi
 0049306C    call        TDockZone.GetZoneLimit
 00493071    add         eax,dword ptr [edi+24]
 00493074    mov         edx,dword ptr [ebp-0C]
 00493077    mov         dword ptr [edx+20],eax
 0049307A    mov         eax,edi
 0049307C    call        TDockZone.PrevVisible
 00493081    call        TDockZone.ResetZoneLimits
>00493086    jmp         004930C6
 00493088    mov         eax,edi
 0049308A    call        TDockZone.NextVisible
 0049308F    test        eax,eax
>00493091    je          004930C6
 00493093    mov         eax,edi
 00493095    call        TDockZone.NextVisible
 0049309A    call        TDockZone.GetZoneLimit
 0049309F    sub         eax,dword ptr [edi+24]
 004930A2    cmp         eax,dword ptr [ebp-4]
>004930A5    jge         004930AB
 004930A7    mov         bl,1
>004930A9    jmp         004930C6
 004930AB    mov         esi,edi
 004930AD    mov         eax,edi
 004930AF    call        TDockZone.GetLimitBegin
 004930B4    add         eax,dword ptr [edi+24]
 004930B7    mov         dword ptr [esi+20],eax
 004930BA    mov         eax,edi
 004930BC    call        TDockZone.NextVisible
 004930C1    call        TDockZone.ResetZoneLimits
 004930C6    test        bl,bl
>004930C8    je          004930D2
 004930CA    mov         eax,dword ptr [edi+14]
 004930CD    call        TDockZone.ResetChildren
 004930D2    mov         eax,dword ptr [ebp+8]
 004930D5    mov         eax,dword ptr [eax-4]
 004930D8    push        eax
 004930D9    push        492CC8;TDockTree.UpdateZone
 004930DE    mov         eax,dword ptr [ebp+8]
 004930E1    mov         eax,dword ptr [eax-4]
 004930E4    mov         edx,dword ptr [edi+14]
 004930E7    call        TDockTree.ForEachAt
 004930EC    pop         edi
 004930ED    pop         esi
 004930EE    pop         ebx
 004930EF    mov         esp,ebp
 004930F1    pop         ebp
 004930F2    ret
*}
end;

//004930F4
procedure TDockTree.ControlVisibilityChanged(Control:TControl; Visible:Boolean);
begin
{*
 004930F4    push        ebp
 004930F5    mov         ebp,esp
 004930F7    add         esp,0FFFFFFF0
 004930FA    push        ebx
 004930FB    push        esi
 004930FC    mov         ebx,ecx
 004930FE    mov         esi,edx
 00493100    mov         dword ptr [ebp-4],eax
 00493103    mov         edx,esi
 00493105    mov         eax,dword ptr [ebp-4]
 00493108    call        TDockTree.FindControlZone
 0049310D    test        eax,eax
>0049310F    je          00493135
 00493111    test        bl,bl
>00493113    je          0049311E
 00493115    push        ebp
 00493116    call        ShowZone
 0049311B    pop         ecx
>0049311C    jmp         00493125
 0049311E    push        ebp
 0049311F    call        HideZone
 00493124    pop         ecx
 00493125    mov         eax,dword ptr [ebp-4]
 00493128    mov         eax,dword ptr [eax+14]
 0049312B    mov         edx,dword ptr [eax]
 0049312D    call        dword ptr [edx+90]
>00493133    jmp         00493174
 00493135    test        bl,bl
>00493137    je          00493174
 00493139    mov         eax,dword ptr [esi+40]
 0049313C    mov         dword ptr [ebp-10],eax
 0049313F    mov         eax,dword ptr [esi+44]
 00493142    mov         dword ptr [ebp-0C],eax
 00493145    lea         ecx,[ebp-8]
 00493148    lea         edx,[ebp-10]
 0049314B    mov         eax,dword ptr [ebp-4]
 0049314E    call        TDockTree.InternalHitTest
 00493153    test        eax,eax
>00493155    je          0049315C
 00493157    mov         ebx,dword ptr [eax+4]
>0049315A    jmp         0049315E
 0049315C    xor         ebx,ebx
 0049315E    push        ebx
 0049315F    mov         edx,ebx
 00493161    mov         eax,esi
 00493163    call        GetDockAlign
 00493168    mov         ecx,eax
 0049316A    mov         edx,esi
 0049316C    mov         eax,dword ptr [ebp-4]
 0049316F    mov         ebx,dword ptr [eax]
 00493171    call        dword ptr [ebx+0C]
 00493174    pop         esi
 00493175    pop         ebx
 00493176    mov         esp,ebp
 00493178    pop         ebp
 00493179    ret
*}
end;

//0049317C
procedure TDockTree.WndProc(var Message:TMessage);
begin
{*
 0049317C    push        ebx
 0049317D    push        esi
 0049317E    push        edi
 0049317F    push        ebp
 00493180    add         esp,0FFFFFFE8
 00493183    mov         esi,edx
 00493185    mov         edi,eax
 00493187    mov         byte ptr [esp+0C],0
 0049318C    mov         eax,dword ptr [esi]
 0049318E    cmp         eax,204
>00493193    jg          004931D0
>00493195    je          004932C2
 0049319B    cmp         eax,201
>004931A0    jg          004931BD
>004931A2    je          0049329A
 004931A8    sub         eax,20
>004931AB    je          0049333A
 004931B1    sub         eax,1E0
>004931B6    je          00493217
>004931B8    jmp         004933F1
 004931BD    sub         eax,202
>004931C2    je          004932EA
 004931C8    dec         eax
>004931C9    je          0049323C
>004931CB    jmp         004933F1
 004931D0    sub         eax,205
>004931D5    je          00493312
 004931DB    dec         eax
>004931DC    je          0049326B
 004931E2    sub         eax,0AE2A
>004931E7    je          004933CA
 004931ED    sub         eax,12
>004931F0    jne         004933F1
 004931F6    mov         eax,dword ptr [esi+8]
 004931F9    cmp         dword ptr [eax],0B00B
>004931FF    jne         004933F1
 00493205    mov         ecx,dword ptr [eax+4]
 00493208    mov         edx,dword ptr [esi+4]
 0049320B    mov         eax,edi
 0049320D    call        TDockTree.ControlVisibilityChanged
>00493212    jmp         004933F1
 00493217    movsx       eax,word ptr [esi+0A]
 0049321B    push        eax
 0049321C    lea         eax,[esp+10]
 00493220    push        eax
 00493221    movzx       eax,word ptr [esi+4]
 00493225    call        KeysToShiftState
 0049322A    mov         edx,eax
 0049322C    movsx       ecx,word ptr [esi+8]
 00493230    mov         eax,edi
 00493232    mov         ebx,dword ptr [eax]
 00493234    call        dword ptr [ebx+18]
>00493237    jmp         004933F1
 0049323C    movsx       eax,word ptr [esi+8]
 00493240    push        eax
 00493241    movsx       eax,word ptr [esi+0A]
 00493245    push        eax
 00493246    lea         eax,[esp+14]
 0049324A    push        eax
 0049324B    movzx       eax,word ptr [esi+4]
 0049324F    call        KeysToShiftState
 00493254    mov         ecx,eax
 00493256    or          cx,word ptr ds:[493410]
 0049325D    xor         edx,edx
 0049325F    mov         eax,edi
 00493261    mov         ebx,dword ptr [eax]
 00493263    call        dword ptr [ebx+14]
>00493266    jmp         004933F1
 0049326B    movsx       eax,word ptr [esi+8]
 0049326F    push        eax
 00493270    movsx       eax,word ptr [esi+0A]
 00493274    push        eax
 00493275    lea         eax,[esp+14]
 00493279    push        eax
 0049327A    movzx       eax,word ptr [esi+4]
 0049327E    call        KeysToShiftState
 00493283    mov         ecx,eax
 00493285    or          cx,word ptr ds:[493410]
 0049328C    mov         dl,1
 0049328E    mov         eax,edi
 00493290    mov         ebx,dword ptr [eax]
 00493292    call        dword ptr [ebx+14]
>00493295    jmp         004933F1
 0049329A    movsx       eax,word ptr [esi+8]
 0049329E    push        eax
 0049329F    movsx       eax,word ptr [esi+0A]
 004932A3    push        eax
 004932A4    lea         eax,[esp+14]
 004932A8    push        eax
 004932A9    movzx       eax,word ptr [esi+4]
 004932AD    call        KeysToShiftState
 004932B2    mov         ecx,eax
 004932B4    xor         edx,edx
 004932B6    mov         eax,edi
 004932B8    mov         ebx,dword ptr [eax]
 004932BA    call        dword ptr [ebx+14]
>004932BD    jmp         004933F1
 004932C2    movsx       eax,word ptr [esi+8]
 004932C6    push        eax
 004932C7    movsx       eax,word ptr [esi+0A]
 004932CB    push        eax
 004932CC    lea         eax,[esp+14]
 004932D0    push        eax
 004932D1    movzx       eax,word ptr [esi+4]
 004932D5    call        KeysToShiftState
 004932DA    mov         ecx,eax
 004932DC    mov         dl,1
 004932DE    mov         eax,edi
 004932E0    mov         ebx,dword ptr [eax]
 004932E2    call        dword ptr [ebx+14]
>004932E5    jmp         004933F1
 004932EA    movsx       eax,word ptr [esi+8]
 004932EE    push        eax
 004932EF    movsx       eax,word ptr [esi+0A]
 004932F3    push        eax
 004932F4    lea         eax,[esp+14]
 004932F8    push        eax
 004932F9    movzx       eax,word ptr [esi+4]
 004932FD    call        KeysToShiftState
 00493302    mov         ecx,eax
 00493304    xor         edx,edx
 00493306    mov         eax,edi
 00493308    mov         ebx,dword ptr [eax]
 0049330A    call        dword ptr [ebx+1C]
>0049330D    jmp         004933F1
 00493312    movsx       eax,word ptr [esi+8]
 00493316    push        eax
 00493317    movsx       eax,word ptr [esi+0A]
 0049331B    push        eax
 0049331C    lea         eax,[esp+14]
 00493320    push        eax
 00493321    movzx       eax,word ptr [esi+4]
 00493325    call        KeysToShiftState
 0049332A    mov         ecx,eax
 0049332C    mov         dl,1
 0049332E    mov         eax,edi
 00493330    mov         ebx,dword ptr [eax]
 00493332    call        dword ptr [ebx+1C]
>00493335    jmp         004933F1
 0049333A    push        esp
 0049333B    call        user32.GetCursorPos
 00493340    lea         ecx,[esp+10]
 00493344    mov         edx,esp
 00493346    mov         eax,dword ptr [edi+14]
 00493349    call        TControl.ScreenToClient
 0049334E    mov         eax,dword ptr [esp+10]
 00493352    mov         dword ptr [esp],eax
 00493355    mov         eax,dword ptr [esp+14]
 00493359    mov         dword ptr [esp+4],eax
 0049335D    cmp         word ptr [esi+8],1
>00493362    jne         004933F1
 00493368    mov         eax,dword ptr [edi+14]
 0049336B    call        TWinControl.GetHandle
 00493370    cmp         eax,dword ptr [esi+4]
>00493373    jne         004933F1
 00493375    mov         eax,dword ptr [edi+14]
 00493378    call        TWinControl.GetVisibleDockClientCount
 0049337D    test        eax,eax
>0049337F    jle         004933F1
 00493381    lea         ecx,[esp+8]
 00493385    mov         edx,esp
 00493387    mov         eax,edi
 00493389    call        TDockTree.InternalHitTest
 0049338E    mov         ebx,eax
 00493390    test        ebx,ebx
>00493392    je          004933F1
 00493394    cmp         dword ptr [esp+8],12
>00493399    jne         004933F1
 0049339B    mov         eax,dword ptr [ebx+14]
 0049339E    movzx       eax,byte ptr [eax+10]
 004933A2    movsx       edx,word ptr [eax*2+785B3C]
 004933AA    mov         eax,[0078DB00];^Screen:TScreen
 004933AF    mov         eax,dword ptr [eax]
 004933B1    call        TScreen.GetCursors
 004933B6    push        eax
 004933B7    call        user32.SetCursor
 004933BC    mov         dword ptr [esi+0C],1
 004933C3    mov         byte ptr [esp+0C],1
>004933C8    jmp         004933F1
 004933CA    mov         edx,esi
 004933CC    mov         eax,dword ptr [edi+34]
 004933CF    call        dword ptr [edi+30]
 004933D2    cmp         dword ptr [esi+0C],0
>004933D6    jne         004933EC
 004933D8    mov         ebp,dword ptr [esi+8]
 004933DB    lea         eax,[ebp+38]
 004933DE    push        eax
 004933DF    lea         ecx,[ebp+18]
 004933E2    lea         edx,[ebp+28]
 004933E5    mov         eax,edi
 004933E7    mov         ebx,dword ptr [eax]
 004933E9    call        dword ptr [ebx+34]
 004933EC    mov         byte ptr [esp+0C],1
 004933F1    cmp         byte ptr [esp+0C],0
>004933F6    jne         00493407
 004933F8    cmp         word ptr [edi+32],0
>004933FD    je          00493407
 004933FF    mov         edx,esi
 00493401    mov         eax,dword ptr [edi+34]
 00493404    call        dword ptr [edi+30]
 00493407    add         esp,18
 0049340A    pop         ebp
 0049340B    pop         edi
 0049340C    pop         esi
 0049340D    pop         ebx
 0049340E    ret
*}
end;

//00493414
function TDockTree.ActualSize(const RelativeSize:Integer; const Reference:Integer):Integer;
begin
{*
 00493414    push        ebx
 00493415    push        esi
 00493416    add         esp,0FFFFFFF8
 00493419    mov         esi,ecx
 0049341B    mov         ebx,edx
 0049341D    mov         dword ptr [esp],ebx
 00493420    fild        dword ptr [esp]
 00493423    fdiv        dword ptr ds:[493440]
 00493429    mov         dword ptr [esp+4],esi
 0049342D    fild        dword ptr [esp+4]
 00493431    fmulp       st(1),st
 00493433    call        @ROUND
 00493438    pop         ecx
 00493439    pop         edx
 0049343A    pop         esi
 0049343B    pop         ebx
 0049343C    ret
*}
end;

//00493444
function TDockTree.RelativeSize(const ActualSize:Integer; const Reference:Integer):Integer;
begin
{*
 00493444    push        ebx
 00493445    push        esi
 00493446    add         esp,0FFFFFFF8
 00493449    mov         ebx,ecx
 0049344B    mov         esi,edx
 0049344D    test        ebx,ebx
>0049344F    je          0049346E
 00493451    mov         dword ptr [esp],esi
 00493454    fild        dword ptr [esp]
 00493457    mov         dword ptr [esp+4],ebx
 0049345B    fild        dword ptr [esp+4]
 0049345F    fdivp       st(1),st
 00493461    fmul        dword ptr ds:[493478]
 00493467    call        @ROUND
>0049346C    jmp         00493470
 0049346E    xor         eax,eax
 00493470    pop         ecx
 00493471    pop         edx
 00493472    pop         esi
 00493473    pop         ebx
 00493474    ret
*}
end;

//0049347C
function TDockTree.ReferenceFromOrient(const Orient:TDockOrientation):Integer;
begin
{*
 0049347C    cmp         dl,1
>0049347F    jne         00493493
 00493481    mov         eax,[0078DB00];^Screen:TScreen
 00493486    mov         eax,dword ptr [eax]
 00493488    call        TScreen.GetPrimaryMonitor
 0049348D    call        TMonitor.GetWidth
 00493492    ret
 00493493    mov         eax,[0078DB00];^Screen:TScreen
 00493498    mov         eax,dword ptr [eax]
 0049349A    call        TScreen.GetPrimaryMonitor
 0049349F    call        TMonitor.GetHeight
 004934A4    ret
*}
end;

//004934A8
procedure TDockTree.AdjustFrameRect(Control:TControl; var ARect:TRect);
begin
{*
 004934A8    push        ebx
 004934A9    mov         eax,dword ptr [ecx]
 004934AB    sub         eax,dword ptr [edx+40]
 004934AE    add         eax,eax
 004934B0    sub         dword ptr [ecx],eax
 004934B2    mov         eax,dword ptr [ecx+4]
 004934B5    sub         eax,dword ptr [edx+44]
 004934B8    add         eax,eax
 004934BA    sub         dword ptr [ecx+4],eax
 004934BD    mov         eax,dword ptr [ecx+8]
 004934C0    sub         eax,dword ptr [ecx]
 004934C2    mov         ebx,dword ptr [edx+48]
 004934C5    sub         ebx,eax
 004934C7    mov         eax,ebx
 004934C9    add         eax,eax
 004934CB    sub         dword ptr [ecx+8],eax
 004934CE    mov         eax,dword ptr [ecx+0C]
 004934D1    sub         eax,dword ptr [ecx+4]
 004934D4    mov         edx,dword ptr [edx+4C]
 004934D7    sub         edx,eax
 004934D9    mov         eax,edx
 004934DB    add         eax,eax
 004934DD    test        eax,eax
>004934DF    jle         004934E4
 004934E1    sub         dword ptr [ecx+0C],eax
 004934E4    pop         ebx
 004934E5    ret
*}
end;

//004934E8
procedure TDockTree.MouseDown(Button:TMouseButton; Shift:TShiftState; X:Integer; Y:Integer; var Handled:Boolean);
begin
{*
 004934E8    push        ebp
 004934E9    mov         ebp,esp
 004934EB    add         esp,0FFFFFFC4
 004934EE    push        ebx
 004934EF    push        esi
 004934F0    mov         word ptr [ebp-2],cx
 004934F4    mov         ebx,eax
 004934F6    test        dl,dl
>004934F8    jne         00493605
 004934FE    test        byte ptr [ebp-2],40
>00493502    je          00493553
 00493504    mov         eax,dword ptr [ebp+10]
 00493507    mov         dword ptr [ebp-10],eax
 0049350A    mov         eax,dword ptr [ebp+0C]
 0049350D    mov         dword ptr [ebp-0C],eax
 00493510    lea         ecx,[ebp-8]
 00493513    lea         edx,[ebp-10]
 00493516    mov         eax,ebx
 00493518    call        TDockTree.InternalHitTest
 0049351D    mov         esi,eax
 0049351F    test        esi,esi
>00493521    je          00493605
 00493527    cmp         dword ptr [esi+4],0
>0049352B    je          00493605
 00493531    cmp         dword ptr [ebp-8],2
>00493535    jne         00493605
 0049353B    call        CancelDrag
 00493540    push        1
 00493542    xor         ecx,ecx
 00493544    xor         edx,edx
 00493546    mov         eax,dword ptr [esi+4]
 00493549    call        TControl.ManualDock
>0049354E    jmp         00493605
 00493553    mov         eax,dword ptr [ebp+10]
 00493556    mov         dword ptr [ebp-18],eax
 00493559    mov         eax,dword ptr [ebp+0C]
 0049355C    mov         dword ptr [ebp-14],eax
 0049355F    lea         ecx,[ebp-8]
 00493562    lea         edx,[ebp-18]
 00493565    mov         eax,ebx
 00493567    call        TDockTree.InternalHitTest
 0049356C    mov         esi,eax
 0049356E    test        esi,esi
>00493570    je          00493605
 00493576    cmp         dword ptr [ebp-8],12
>0049357A    jne         00493596
 0049357C    mov         eax,dword ptr [ebp+10]
 0049357F    mov         dword ptr [ebp-20],eax
 00493582    mov         eax,dword ptr [ebp+0C]
 00493585    mov         dword ptr [ebp-1C],eax
 00493588    lea         ecx,[ebp-20]
 0049358B    mov         edx,esi
 0049358D    mov         eax,ebx
 0049358F    call        TDockTree.SplitterMouseDown
>00493594    jmp         00493605
 00493596    cmp         dword ptr [ebp-8],2
>0049359A    jne         00493605
 0049359C    push        0
 0049359E    push        203
 004935A3    push        203
 004935A8    mov         eax,dword ptr [ebx+14]
 004935AB    call        TWinControl.GetHandle
 004935B0    push        eax
 004935B1    lea         eax,[ebp-3C]
 004935B4    push        eax
 004935B5    call        user32.PeekMessageW
 004935BA    test        eax,eax
>004935BC    jne         004935DB
 004935BE    mov         eax,dword ptr [esi+4]
 004935C1    mov         edx,dword ptr ds:[47C4E8];TWinControl
 004935C7    call        @IsClass
 004935CC    test        al,al
>004935CE    je          004935DB
 004935D0    mov         eax,dword ptr [esi+4]
 004935D3    mov         edx,dword ptr [eax]
 004935D5    call        dword ptr [edx+0E8]
 004935DB    mov         ebx,dword ptr [esi+4]
 004935DE    cmp         byte ptr [ebx+8B],1
>004935E5    jne         004935FF
 004935E7    mov         eax,ebx
 004935E9    call        TControl.GetDragMode
 004935EE    cmp         al,1
>004935F0    jne         004935FF
 004935F2    or          ecx,0FFFFFFFF
 004935F5    xor         edx,edx
 004935F7    mov         eax,dword ptr [esi+4]
 004935FA    call        TControl.BeginDrag
 004935FF    mov         eax,dword ptr [ebp+8]
 00493602    mov         byte ptr [eax],1
 00493605    pop         esi
 00493606    pop         ebx
 00493607    mov         esp,ebp
 00493609    pop         ebp
 0049360A    ret         0C
*}
end;

//00493610
procedure CalcSplitterPos;
begin
{*
 00493610    push        ebp
 00493611    mov         ebp,esp
 00493613    push        ebx
 00493614    push        esi
 00493615    push        edi
 00493616    mov         edi,dword ptr [ebp+8]
 00493619    add         edi,0FFFFFFFC
 0049361C    mov         eax,dword ptr [edi]
 0049361E    mov         ebx,dword ptr [eax+18]
 00493621    mov         eax,dword ptr [edi]
 00493623    mov         esi,dword ptr [eax+60]
 00493626    mov         eax,dword ptr [esi+14]
 00493629    cmp         byte ptr [eax+10],1
>0049362D    jne         00493665
 0049362F    mov         eax,esi
 00493631    mov         edx,1
 00493636    call        TDockZone.GetTopLeft
 0049363B    add         eax,ebx
 0049363D    mov         edx,dword ptr [edi]
 0049363F    cmp         eax,dword ptr [edx+54]
>00493642    jl          00493649
 00493644    mov         edx,dword ptr [edi]
 00493646    mov         dword ptr [edx+54],eax
 00493649    mov         eax,dword ptr [edi]
 0049364B    mov         edx,dword ptr [eax+60]
 0049364E    mov         eax,dword ptr [edi]
 00493650    call        TDockTree.GetNextLimit
 00493655    sub         eax,ebx
 00493657    mov         edx,dword ptr [edi]
 00493659    cmp         eax,dword ptr [edx+54]
>0049365C    jg          00493699
 0049365E    mov         edx,dword ptr [edi]
 00493660    mov         dword ptr [edx+54],eax
>00493663    jmp         00493699
 00493665    mov         eax,esi
 00493667    mov         edx,2
 0049366C    call        TDockZone.GetTopLeft
 00493671    add         eax,ebx
 00493673    mov         edx,dword ptr [edi]
 00493675    cmp         eax,dword ptr [edx+50]
>00493678    jl          0049367F
 0049367A    mov         edx,dword ptr [edi]
 0049367C    mov         dword ptr [edx+50],eax
 0049367F    mov         eax,dword ptr [edi]
 00493681    mov         edx,dword ptr [eax+60]
 00493684    mov         eax,dword ptr [edi]
 00493686    call        TDockTree.GetNextLimit
 0049368B    sub         eax,ebx
 0049368D    mov         edx,dword ptr [edi]
 0049368F    cmp         eax,dword ptr [edx+50]
>00493692    jg          00493699
 00493694    mov         edx,dword ptr [edi]
 00493696    mov         dword ptr [edx+50],eax
 00493699    pop         edi
 0049369A    pop         esi
 0049369B    pop         ebx
 0049369C    pop         ebp
 0049369D    ret
*}
end;

//004936A0
procedure TDockTree.MouseMove(Shift:TShiftState; X:Integer; Y:Integer; var Handled:Boolean);
begin
{*
 004936A0    push        ebp
 004936A1    mov         ebp,esp
 004936A3    add         esp,0FFFFFFF4
 004936A6    push        ebx
 004936A7    mov         ebx,ecx
 004936A9    mov         dword ptr [ebp-4],eax
 004936AC    mov         eax,dword ptr [ebp-4]
 004936AF    cmp         dword ptr [eax+60],0
>004936B3    je          004936E4
 004936B5    mov         eax,dword ptr [ebp-4]
 004936B8    call        TDockTree.DrawSizeSplitter
 004936BD    mov         dword ptr [ebp-0C],ebx
 004936C0    mov         eax,dword ptr [ebp+0C]
 004936C3    mov         dword ptr [ebp-8],eax
 004936C6    mov         eax,dword ptr [ebp-4]
 004936C9    mov         edx,dword ptr [ebp-0C]
 004936CC    mov         dword ptr [eax+50],edx
 004936CF    mov         edx,dword ptr [ebp-8]
 004936D2    mov         dword ptr [eax+54],edx
 004936D5    push        ebp
 004936D6    call        CalcSplitterPos
 004936DB    pop         ecx
 004936DC    mov         eax,dword ptr [ebp-4]
 004936DF    call        TDockTree.DrawSizeSplitter
 004936E4    pop         ebx
 004936E5    mov         esp,ebp
 004936E7    pop         ebp
 004936E8    ret         8
*}
end;

//004936EC
procedure TDockTree.MouseUp(Button:TMouseButton; Shift:TShiftState; X:Integer; Y:Integer; var Handled:Boolean);
begin
{*
 004936EC    push        ebp
 004936ED    mov         ebp,esp
 004936EF    add         esp,0FFFFFFF4
 004936F2    push        ebx
 004936F3    push        esi
 004936F4    test        dl,dl
>004936F6    jne         0049374E
 004936F8    cmp         dword ptr [eax+60],0
>004936FC    jne         00493749
 004936FE    mov         edx,dword ptr [ebp+10]
 00493701    mov         dword ptr [ebp-0C],edx
 00493704    mov         edx,dword ptr [ebp+0C]
 00493707    mov         dword ptr [ebp-8],edx
 0049370A    lea         ecx,[ebp-4]
 0049370D    lea         edx,[ebp-0C]
 00493710    call        TDockTree.InternalHitTest
 00493715    mov         ebx,eax
 00493717    test        ebx,ebx
>00493719    je          0049374E
 0049371B    cmp         dword ptr [ebp-4],14
>0049371F    jne         0049374E
 00493721    mov         esi,dword ptr [ebx+4]
 00493724    mov         eax,esi
 00493726    mov         edx,dword ptr ds:[4DF7D4];TCustomForm
 0049372C    call        @IsClass
 00493731    test        al,al
>00493733    je          0049373E
 00493735    mov         eax,esi
 00493737    call        TCustomForm.Close
>0049373C    jmp         0049374E
 0049373E    mov         eax,esi
 00493740    xor         edx,edx
 00493742    call        TControl.SetVisible
>00493747    jmp         0049374E
 00493749    call        TDockTree.SplitterMouseUp
 0049374E    pop         esi
 0049374F    pop         ebx
 00493750    mov         esp,ebp
 00493752    pop         ebp
 00493753    ret         0C
*}
end;

//00493758
procedure TDockTree.ShowHint(CursorPos:TPoint; var CursorRect:TRect; var HintStr:UnicodeString);
begin
{*
 00493758    push        ebp
 00493759    mov         ebp,esp
 0049375B    add         esp,0FFFFFFDC
 0049375E    push        ebx
 0049375F    push        esi
 00493760    push        edi
 00493761    xor         ebx,ebx
 00493763    mov         dword ptr [ebp-24],ebx
 00493766    mov         esi,edx
 00493768    lea         edi,[ebp-8]
 0049376B    movs        dword ptr [edi],dword ptr [esi]
 0049376C    movs        dword ptr [edi],dword ptr [esi]
 0049376D    mov         dword ptr [ebp-0C],ecx
 00493770    mov         esi,eax
 00493772    xor         eax,eax
 00493774    push        ebp
 00493775    push        493839
 0049377A    push        dword ptr fs:[eax]
 0049377D    mov         dword ptr fs:[eax],esp
 00493780    lea         ecx,[ebp-10]
 00493783    lea         edx,[ebp-8]
 00493786    mov         eax,esi
 00493788    mov         ebx,dword ptr [eax]
 0049378A    call        dword ptr [ebx+8]
 0049378D    mov         ebx,eax
 0049378F    cmp         dword ptr [ebp-10],12
>00493793    jne         004937A2
 00493795    mov         eax,dword ptr [ebp+8]
 00493798    call        @UStrClr
>0049379D    jmp         00493823
 004937A2    test        ebx,ebx
>004937A4    je          00493823
 004937A6    mov         eax,dword ptr [ebp-10]
 004937A9    sub         eax,2
>004937AC    je          004937B3
 004937AE    sub         eax,12
>004937B1    jne         00493823
 004937B3    lea         edx,[ebp-20]
 004937B6    mov         eax,ebx
 004937B8    call        TControl.GetBoundsRect
 004937BD    lea         ecx,[ebp-20]
 004937C0    mov         edx,ebx
 004937C2    mov         eax,esi
 004937C4    mov         esi,dword ptr [eax]
 004937C6    call        dword ptr [esi]
 004937C8    mov         eax,dword ptr [ebp-20]
 004937CB    sub         eax,dword ptr [ebx+40]
 004937CE    add         eax,eax
 004937D0    sub         dword ptr [ebp-20],eax
 004937D3    mov         eax,dword ptr [ebp-1C]
 004937D6    sub         eax,dword ptr [ebx+44]
 004937D9    add         eax,eax
 004937DB    sub         dword ptr [ebp-1C],eax
 004937DE    mov         eax,dword ptr [ebp-18]
 004937E1    sub         eax,dword ptr [ebp-20]
 004937E4    mov         edx,dword ptr [ebx+48]
 004937E7    sub         edx,eax
 004937E9    mov         eax,edx
 004937EB    add         eax,eax
 004937ED    sub         dword ptr [ebp-18],eax
 004937F0    mov         eax,dword ptr [ebp-14]
 004937F3    sub         eax,dword ptr [ebp-1C]
 004937F6    mov         edx,dword ptr [ebx+4C]
 004937F9    sub         edx,eax
 004937FB    mov         eax,edx
 004937FD    add         eax,eax
 004937FF    sub         dword ptr [ebp-14],eax
 00493802    lea         edx,[ebp-24]
 00493805    mov         eax,ebx
 00493807    call        TControl.GetText
 0049380C    mov         edx,dword ptr [ebp-24]
 0049380F    mov         eax,dword ptr [ebp+8]
 00493812    call        @UStrAsg
 00493817    mov         eax,dword ptr [ebp-0C]
 0049381A    mov         edi,eax
 0049381C    lea         esi,[ebp-20]
 0049381F    movs        dword ptr [edi],dword ptr [esi]
 00493820    movs        dword ptr [edi],dword ptr [esi]
 00493821    movs        dword ptr [edi],dword ptr [esi]
 00493822    movs        dword ptr [edi],dword ptr [esi]
 00493823    xor         eax,eax
 00493825    pop         edx
 00493826    pop         ecx
 00493827    pop         ecx
 00493828    mov         dword ptr fs:[eax],edx
 0049382B    push        493840
 00493830    lea         eax,[ebp-24]
 00493833    call        @UStrClr
 00493838    ret
>00493839    jmp         @HandleFinally
>0049383E    jmp         00493830
 00493840    pop         edi
 00493841    pop         esi
 00493842    pop         ebx
 00493843    mov         esp,ebp
 00493845    pop         ebp
 00493846    ret         4
*}
end;

//0049384C
constructor TMouse.Create();
begin
{*
 0049384C    push        ebx
 0049384D    push        esi
 0049384E    test        dl,dl
>00493850    je          0049385A
 00493852    add         esp,0FFFFFFF0
 00493855    call        @ClassCreate
 0049385A    mov         ebx,edx
 0049385C    mov         esi,eax
 0049385E    xor         edx,edx
 00493860    mov         eax,esi
 00493862    call        TObject.Create
 00493867    mov         byte ptr [esi+4],1
 0049386B    mov         dword ptr [esi+8],5
 00493872    mov         eax,[0078DB58];^gvar_00784C7C
 00493877    cmp         dword ptr [eax],2
>0049387A    jne         00493886
 0049387C    mov         eax,[0078D080];^gvar_00784C80
 00493881    cmp         dword ptr [eax],4
>00493884    jge         004938B2
 00493886    mov         eax,[0078DB58];^gvar_00784C7C
 0049388B    cmp         dword ptr [eax],1
>0049388E    jne         004938AE
 00493890    mov         eax,[0078D080];^gvar_00784C80
 00493895    cmp         dword ptr [eax],4
>00493898    jg          004938B2
 0049389A    mov         eax,[0078D080];^gvar_00784C80
 0049389F    cmp         dword ptr [eax],4
>004938A2    jne         004938AE
 004938A4    mov         eax,[0078D6F0];^gvar_00784C84
 004938A9    cmp         dword ptr [eax],0A
>004938AC    jge         004938B2
 004938AE    xor         eax,eax
>004938B0    jmp         004938B4
 004938B2    mov         al,1
 004938B4    mov         byte ptr [esi+0D],al
 004938B7    xor         edx,edx
 004938B9    mov         eax,esi
 004938BB    call        TMouse.SettingChanged
 004938C0    mov         eax,esi
 004938C2    test        bl,bl
>004938C4    je          004938D5
 004938C6    call        @AfterConstruction
 004938CB    pop         dword ptr fs:[0]
 004938D2    add         esp,0C
 004938D5    mov         eax,esi
 004938D7    pop         esi
 004938D8    pop         ebx
 004938D9    ret
*}
end;

//004938DC
function TMouse.CreatePanningWindow:TCustomPanningWindow;
begin
{*
 004938DC    push        ebx
 004938DD    mov         ebx,eax
 004938DF    xor         eax,eax
 004938E1    cmp         dword ptr [ebx+2C],0
>004938E5    je          00493903
 004938E7    cmp         byte ptr [ebx+20],0
>004938EB    je          00493903
 004938ED    xor         edx,edx
 004938EF    mov         eax,ebx
 004938F1    call        TMouse.SetPanningWindow
 004938F6    xor         ecx,ecx
 004938F8    mov         dl,1
 004938FA    mov         eax,dword ptr [ebx+2C]
 004938FD    call        dword ptr [eax+2C]
 00493900    mov         dword ptr [ebx+28],eax
 00493903    pop         ebx
 00493904    ret
*}
end;

//00493908
destructor TMouse.Destroy();
begin
{*
 00493908    push        ebx
 00493909    push        esi
 0049390A    call        @BeforeDestruction
 0049390F    mov         ebx,edx
 00493911    mov         esi,eax
 00493913    xor         edx,edx
 00493915    mov         eax,esi
 00493917    call        TMouse.SetCapture
 0049391C    mov         edx,ebx
 0049391E    and         dl,0FC
 00493921    mov         eax,esi
 00493923    call        TObject.Destroy
 00493928    test        bl,bl
>0049392A    jle         00493933
 0049392C    mov         eax,esi
 0049392E    call        @ClassDestroy
 00493933    pop         esi
 00493934    pop         ebx
 00493935    ret
*}
end;

//00493938
function TMouse.GetCapture:HWND;
begin
{*
 00493938    call        user32.GetCapture
 0049393D    ret
*}
end;

//00493940
function TMouse.GetCursorPos:TPoint;
begin
{*
 00493940    push        ebx
 00493941    add         esp,0FFFFFFF8
 00493944    mov         ebx,edx
 00493946    push        ebx
 00493947    call        user32.GetCursorPos
 0049394C    test        eax,eax
>0049394E    jne         00493967
 00493950    xor         eax,eax
 00493952    mov         dword ptr [esp],eax
 00493955    xor         eax,eax
 00493957    mov         dword ptr [esp+4],eax
 0049395B    mov         eax,dword ptr [esp]
 0049395E    mov         dword ptr [ebx],eax
 00493960    mov         eax,dword ptr [esp+4]
 00493964    mov         dword ptr [ebx+4],eax
 00493967    pop         ecx
 00493968    pop         edx
 00493969    pop         ebx
 0049396A    ret
*}
end;

//0049396C
function TMouse.GetIsDragging:Boolean;
begin
{*
 0049396C    cmp         byte ptr ds:[7931D0],0
 00493973    setne       al
 00493976    ret
*}
end;

//00493978
function TMouse.GetIsPanning:Boolean;
begin
{*
 00493978    push        ebx
 00493979    push        esi
 0049397A    mov         ebx,eax
 0049397C    mov         esi,dword ptr [ebx+28]
 0049397F    test        esi,esi
>00493981    je          00493991
 00493983    mov         eax,esi
 00493985    mov         edx,dword ptr [eax]
 00493987    call        dword ptr [edx+0F0]
 0049398D    test        al,al
>0049398F    jne         00493996
 00493991    xor         eax,eax
 00493993    pop         esi
 00493994    pop         ebx
 00493995    ret
 00493996    mov         al,1
 00493998    pop         esi
 00493999    pop         ebx
 0049399A    ret
*}
end;

//0049399C
procedure TMouse.GetMouseData;
begin
{*
 0049399C    push        ebx
 0049399D    mov         ebx,eax
 0049399F    push        13
 004939A1    call        user32.GetSystemMetrics
 004939A6    cmp         eax,1
 004939A9    sbb         eax,eax
 004939AB    inc         eax
 004939AC    mov         byte ptr [ebx+0C],al
 004939AF    pop         ebx
 004939B0    ret
*}
end;

//004939B4
procedure TMouse.GetNativeData;
begin
{*
 004939B4    push        ebx
 004939B5    push        esi
 004939B6    mov         esi,eax
 004939B8    push        4B
 004939BA    call        user32.GetSystemMetrics
 004939BF    cmp         eax,1
 004939C2    sbb         ebx,ebx
 004939C4    inc         ebx
 004939C5    mov         byte ptr [esi+20],bl
 004939C8    test        bl,bl
>004939CA    je          004939DB
 004939CC    push        0
 004939CE    lea         eax,[esi+10]
 004939D1    push        eax
 004939D2    push        0
 004939D4    push        68
 004939D6    call        user32.SystemParametersInfoW
 004939DB    pop         esi
 004939DC    pop         ebx
 004939DD    ret
*}
end;

//004939E0
procedure TMouse.GetRegisteredData;
begin
{*
 004939E0    push        ebx
 004939E1    push        ecx
 004939E2    mov         ebx,eax
 004939E4    push        esp
 004939E5    lea         eax,[ebx+10]
 004939E8    push        eax
 004939E9    lea         ecx,[ebx+14]
 004939EC    lea         edx,[ebx+24]
 004939EF    lea         eax,[ebx+1C]
 004939F2    call        HwndMSWheel
 004939F7    mov         dword ptr [ebx+18],eax
 004939FA    cmp         dword ptr [ebx+1C],0
 004939FE    setne       al
 00493A01    mov         byte ptr [ebx+20],al
 00493A04    pop         edx
 00493A05    pop         ebx
 00493A06    ret
*}
end;

//00493A08
procedure TMouse.SetCapture(const Value:HWND);
begin
{*
 00493A08    push        ebx
 00493A09    push        esi
 00493A0A    mov         esi,edx
 00493A0C    mov         ebx,eax
 00493A0E    mov         eax,ebx
 00493A10    call        TMouse.GetCapture
 00493A15    cmp         esi,eax
>00493A17    je          00493A2A
 00493A19    test        esi,esi
>00493A1B    jne         00493A24
 00493A1D    call        user32.ReleaseCapture
>00493A22    jmp         00493A2A
 00493A24    push        esi
 00493A25    call        user32.SetCapture
 00493A2A    pop         esi
 00493A2B    pop         ebx
 00493A2C    ret
*}
end;

//00493A30
procedure TMouse.SetCursorPos(const Value:TPoint);
begin
{*
 00493A30    mov         eax,dword ptr [edx+4]
 00493A33    push        eax
 00493A34    mov         eax,dword ptr [edx]
 00493A36    push        eax
 00493A37    call        user32.SetCursorPos
 00493A3C    ret
*}
end;

//00493A40
procedure TMouse.SetPanningWindow(const Value:TCustomPanningWindow);
begin
{*
 00493A40    push        ebx
 00493A41    push        esi
 00493A42    mov         esi,edx
 00493A44    mov         ebx,eax
 00493A46    mov         eax,dword ptr [ebx+28]
 00493A49    cmp         esi,eax
>00493A4B    je          00493A64
 00493A4D    test        eax,eax
>00493A4F    je          00493A61
 00493A51    lea         eax,[ebx+28]
 00493A54    mov         edx,dword ptr [eax]
 00493A56    xor         ecx,ecx
 00493A58    mov         dword ptr [eax],ecx
 00493A5A    mov         eax,edx
 00493A5C    call        TObject.Free
 00493A61    mov         dword ptr [ebx+28],esi
 00493A64    pop         esi
 00493A65    pop         ebx
 00493A66    ret
*}
end;

//00493A68
procedure TMouse.SettingChanged(Setting:Integer);
begin
{*
 00493A68    push        ebx
 00493A69    mov         ebx,eax
 00493A6B    sub         edx,1
>00493A6E    jb          00493A77
 00493A70    sub         edx,67
>00493A73    je          00493A96
>00493A75    jmp         00493AC7
 00493A77    mov         eax,ebx
 00493A79    call        TMouse.GetMouseData
 00493A7E    cmp         byte ptr [ebx+0D],0
>00493A82    jne         00493A8D
 00493A84    mov         eax,ebx
 00493A86    call        TMouse.GetRegisteredData
>00493A8B    jmp         00493AC7
 00493A8D    mov         eax,ebx
 00493A8F    call        TMouse.GetNativeData
 00493A94    pop         ebx
 00493A95    ret
 00493A96    cmp         byte ptr [ebx+20],0
>00493A9A    je          00493AC7
 00493A9C    cmp         byte ptr [ebx+0D],0
>00493AA0    je          00493AB3
 00493AA2    push        0
 00493AA4    lea         eax,[ebx+10]
 00493AA7    push        eax
 00493AA8    push        0
 00493AAA    push        68
 00493AAC    call        user32.SystemParametersInfoW
>00493AB1    jmp         00493AC7
 00493AB3    push        0
 00493AB5    push        0
 00493AB7    mov         eax,dword ptr [ebx+14]
 00493ABA    push        eax
 00493ABB    mov         eax,dword ptr [ebx+18]
 00493ABE    push        eax
 00493ABF    call        user32.SendMessageW
 00493AC4    mov         dword ptr [ebx+10],eax
 00493AC7    pop         ebx
 00493AC8    ret
*}
end;

//00493ACC
procedure InitIMM32;
begin
{*
 00493ACC    push        ebp
 00493ACD    mov         ebp,esp
 00493ACF    push        ecx
 00493AD0    push        ebx
 00493AD1    mov         eax,[0078DB7C];SysLocale:TSysLocale
 00493AD6    cmp         byte ptr [eax+0C],0
>00493ADA    je          00493C39
 00493AE0    push        8000
 00493AE5    call        kernel32.SetErrorMode
 00493AEA    mov         dword ptr [ebp-4],eax
 00493AED    xor         eax,eax
 00493AEF    push        ebp
 00493AF0    push        493C32
 00493AF5    push        dword ptr fs:[eax]
 00493AF8    mov         dword ptr fs:[eax],esp
 00493AFB    cmp         dword ptr ds:[7931EC],0
>00493B02    jne         00493B20
 00493B04    push        493C40
 00493B09    call        kernel32.GetModuleHandleW
 00493B0E    mov         ebx,eax
 00493B10    push        493C50
 00493B15    push        ebx
 00493B16    call        GetProcAddress
 00493B1B    mov         [007931EC],eax
 00493B20    cmp         dword ptr ds:[785B44],0
>00493B27    jne         00493C1B
 00493B2D    push        493C70
 00493B32    call        kernel32.LoadLibraryW
 00493B37    mov         [00785B44],eax
 00493B3C    cmp         dword ptr ds:[785B44],0
>00493B43    je          00493C1B
 00493B49    push        493C84
 00493B4E    mov         eax,[00785B44]
 00493B53    push        eax
 00493B54    call        GetProcAddress
 00493B59    mov         [007931F0],eax
 00493B5E    push        493CA0
 00493B63    mov         eax,[00785B44]
 00493B68    push        eax
 00493B69    call        GetProcAddress
 00493B6E    mov         [007931F4],eax
 00493B73    push        493CC4
 00493B78    mov         eax,[00785B44]
 00493B7D    push        eax
 00493B7E    call        GetProcAddress
 00493B83    mov         [007931F8],eax
 00493B88    push        493CF4
 00493B8D    mov         eax,[00785B44]
 00493B92    push        eax
 00493B93    call        GetProcAddress
 00493B98    mov         [007931FC],eax
 00493B9D    push        493D24
 00493BA2    mov         eax,[00785B44]
 00493BA7    push        eax
 00493BA8    call        GetProcAddress
 00493BAD    mov         [00793200],eax
 00493BB2    push        493D48
 00493BB7    mov         eax,[00785B44]
 00493BBC    push        eax
 00493BBD    call        GetProcAddress
 00493BC2    mov         [00793204],eax
 00493BC7    push        493D78
 00493BCC    mov         eax,[00785B44]
 00493BD1    push        eax
 00493BD2    call        GetProcAddress
 00493BD7    mov         [00793208],eax
 00493BDC    push        493DA8
 00493BE1    mov         eax,[00785B44]
 00493BE6    push        eax
 00493BE7    call        GetProcAddress
 00493BEC    mov         [0079320C],eax
 00493BF1    push        493DDC
 00493BF6    mov         eax,[00785B44]
 00493BFB    push        eax
 00493BFC    call        GetProcAddress
 00493C01    mov         [00793210],eax
 00493C06    push        493DF0
 00493C0B    mov         eax,[00785B44]
 00493C10    push        eax
 00493C11    call        GetProcAddress
 00493C16    mov         [00793214],eax
 00493C1B    xor         eax,eax
 00493C1D    pop         edx
 00493C1E    pop         ecx
 00493C1F    pop         ecx
 00493C20    mov         dword ptr fs:[eax],edx
 00493C23    push        493C39
 00493C28    mov         eax,dword ptr [ebp-4]
 00493C2B    push        eax
 00493C2C    call        kernel32.SetErrorMode
 00493C31    ret
>00493C32    jmp         @HandleFinally
>00493C37    jmp         00493C28
 00493C39    pop         ebx
 00493C3A    pop         ecx
 00493C3B    pop         ebp
 00493C3C    ret
*}
end;

//00493E0C
function Win32NLSEnableIME(hWnd:HWND; Enable:Boolean):Boolean;
begin
{*
 00493E0C    cmp         dword ptr ds:[7931EC],0
>00493E13    je          00493E24
 00493E15    cmp         dl,1
 00493E18    cmc
 00493E19    sbb         edx,edx
 00493E1B    push        edx
 00493E1C    push        eax
 00493E1D    call        dword ptr ds:[7931EC]
 00493E23    ret
 00493E24    xor         eax,eax
 00493E26    ret
*}
end;

//00493E28
procedure SetImeMode(hWnd:HWND; Mode:TImeMode);
begin
{*
 00493E28    push        ebx
 00493E29    push        esi
 00493E2A    push        edi
 00493E2B    add         esp,0FFFFFFF8
 00493E2E    mov         ebx,edx
 00493E30    mov         esi,eax
 00493E32    mov         eax,[0078DB7C];SysLocale:TSysLocale
 00493E37    cmp         byte ptr [eax+0C],0
>00493E3B    je          00493EFA
 00493E41    cmp         bl,3
>00493E44    je          00493EFA
 00493E4A    test        bl,bl
>00493E4C    jne         00493E5C
 00493E4E    xor         edx,edx
 00493E50    mov         eax,esi
 00493E52    call        Win32NLSEnableIME
>00493E57    jmp         00493EFA
 00493E5C    mov         dl,1
 00493E5E    mov         eax,esi
 00493E60    call        Win32NLSEnableIME
 00493E65    cmp         dword ptr ds:[785B44],0
>00493E6C    je          00493EFA
 00493E72    push        esi
 00493E73    call        dword ptr ds:[7931F0]
 00493E79    mov         edi,eax
 00493E7B    test        edi,edi
>00493E7D    je          00493EFA
 00493E7F    lea         eax,[esp+4]
 00493E83    push        eax
 00493E84    lea         eax,[esp+4]
 00493E88    push        eax
 00493E89    push        edi
 00493E8A    call        dword ptr ds:[7931F8]
 00493E90    mov         eax,ebx
 00493E92    dec         al
>00493E94    je          00493E9C
 00493E96    dec         al
>00493E98    je          00493EA7
>00493E9A    jmp         00493EB2
 00493E9C    push        0
 00493E9E    push        edi
 00493E9F    call        dword ptr ds:[793200]
>00493EA5    jmp         00493EE1
 00493EA7    push        1
 00493EA9    push        edi
 00493EAA    call        dword ptr ds:[793200]
>00493EB0    jmp         00493EE1
 00493EB2    push        1
 00493EB4    push        edi
 00493EB5    call        dword ptr ds:[793200]
 00493EBB    lea         eax,[esp+4]
 00493EBF    push        eax
 00493EC0    lea         eax,[esp+4]
 00493EC4    push        eax
 00493EC5    push        edi
 00493EC6    call        dword ptr ds:[7931F8]
 00493ECC    mov         eax,dword ptr [esp]
 00493ECF    and         eax,0FFFFFFF4
 00493ED2    movzx       edx,bl
 00493ED5    movzx       edx,byte ptr [edx+785B44]
 00493EDC    or          eax,edx
 00493EDE    mov         dword ptr [esp],eax
 00493EE1    mov         eax,dword ptr [esp+4]
 00493EE5    push        eax
 00493EE6    mov         eax,dword ptr [esp+4]
 00493EEA    push        eax
 00493EEB    push        edi
 00493EEC    call        dword ptr ds:[7931FC]
 00493EF2    push        edi
 00493EF3    push        esi
 00493EF4    call        dword ptr ds:[7931F4]
 00493EFA    pop         ecx
 00493EFB    pop         edx
 00493EFC    pop         edi
 00493EFD    pop         esi
 00493EFE    pop         ebx
 00493EFF    ret
*}
end;

//00493F00
function Imm32GetContext(hWnd:HWND):HIMC;
begin
{*
 00493F00    cmp         dword ptr ds:[785B44],0
>00493F07    je          00493F11
 00493F09    push        eax
 00493F0A    call        dword ptr ds:[7931F0]
 00493F10    ret
 00493F11    xor         eax,eax
 00493F13    ret
*}
end;

//00493F14
function Imm32ReleaseContext(hWnd:HWND; hImc:HIMC):Boolean;
begin
{*
 00493F14    cmp         dword ptr ds:[785B44],0
>00493F1B    je          00493F26
 00493F1D    push        edx
 00493F1E    push        eax
 00493F1F    call        dword ptr ds:[7931F4]
 00493F25    ret
 00493F26    xor         eax,eax
 00493F28    ret
*}
end;

//00493F2C
function Imm32SetCompositionWindow(hImc:HIMC; lpCompForm:TCompositionForm):Boolean;
begin
{*
 00493F2C    push        esi
 00493F2D    push        edi
 00493F2E    add         esp,0FFFFFFE4
 00493F31    mov         esi,edx
 00493F33    lea         edi,[esp]
 00493F36    mov         ecx,7
 00493F3B    rep movs    dword ptr [edi],dword ptr [esi]
 00493F3D    cmp         dword ptr ds:[785B44],0
>00493F44    je          00493F50
 00493F46    push        esp
 00493F47    push        eax
 00493F48    call        dword ptr ds:[793204]
>00493F4E    jmp         00493F52
 00493F50    xor         eax,eax
 00493F52    add         esp,1C
 00493F55    pop         edi
 00493F56    pop         esi
 00493F57    ret
*}
end;

//00493F58
function Imm32SetCompositionFont(hImc:HIMC; var lpLogfont:LOGFONT):Boolean;
begin
{*
 00493F58    cmp         dword ptr ds:[785B44],0
>00493F5F    je          00493F6A
 00493F61    push        edx
 00493F62    push        eax
 00493F63    call        dword ptr ds:[793208]
 00493F69    ret
 00493F6A    xor         eax,eax
 00493F6C    ret
*}
end;

//00493F70
function Imm32IsIME(hKl:HKL):Boolean;
begin
{*
 00493F70    cmp         dword ptr ds:[785B44],0
>00493F77    je          00493F81
 00493F79    push        eax
 00493F7A    call        dword ptr ds:[793210]
 00493F80    ret
 00493F81    xor         eax,eax
 00493F83    ret
*}
end;

//00493F84
procedure DoneControls;
begin
{*
 00493F84    mov         eax,[007931E8]
 00493F89    xor         edx,edx
 00493F8B    mov         dword ptr ds:[7931E8],edx
 00493F91    call        TObject.Free
 00493F96    mov         eax,[0078D590];^Application:TApplication
 00493F9B    mov         eax,dword ptr [eax]
 00493F9D    call        TObject.Free
 00493FA2    mov         eax,[0078D590];^Application:TApplication
 00493FA7    xor         edx,edx
 00493FA9    mov         dword ptr [eax],edx
 00493FAB    mov         eax,[0078DB00];^Screen:TScreen
 00493FB0    mov         eax,dword ptr [eax]
 00493FB2    call        TObject.Free
 00493FB7    mov         eax,[0078DB00];^Screen:TScreen
 00493FBC    xor         edx,edx
 00493FBE    mov         dword ptr [eax],edx
 00493FC0    mov         eax,[0079318C];Mouse:TMouse
 00493FC5    call        TObject.Free
 00493FCA    xor         eax,eax
 00493FCC    mov         [0079318C],eax;Mouse:TMouse
 00493FD1    mov         eax,[007931E4]
 00493FD6    call        TObject.Free
 00493FDB    movzx       eax,word ptr ds:[7931A2]
 00493FE2    push        eax
 00493FE3    call        kernel32.GlobalDeleteAtom
 00493FE8    mov         eax,7931A8
 00493FED    call        @UStrClr
 00493FF2    movzx       eax,word ptr ds:[7931A0]
 00493FF9    push        eax
 00493FFA    call        kernel32.GlobalDeleteAtom
 00493FFF    mov         eax,7931A4
 00494004    call        @UStrClr
 00494009    cmp         dword ptr ds:[785B44],0
>00494010    je          0049401D
 00494012    mov         eax,[00785B44]
 00494017    push        eax
 00494018    call        kernel32.FreeLibrary
 0049401D    ret
*}
end;

//00494020
procedure InitControls;
begin
{*
 00494020    push        ebp
 00494021    mov         ebp,esp
 00494023    add         esp,0FFFFFFE0
 00494026    push        ebx
 00494027    xor         eax,eax
 00494029    mov         dword ptr [ebp-10],eax
 0049402C    mov         dword ptr [ebp-4],eax
 0049402F    xor         eax,eax
 00494031    push        ebp
 00494032    push        4941AB
 00494037    push        dword ptr fs:[eax]
 0049403A    mov         dword ptr fs:[eax],esp
 0049403D    lea         eax,[ebp-4]
 00494040    push        eax
 00494041    call        kernel32.GetCurrentProcessId
 00494046    mov         dword ptr [ebp-0C],eax
 00494049    mov         byte ptr [ebp-8],0
 0049404D    lea         edx,[ebp-0C]
 00494050    xor         ecx,ecx
 00494052    mov         eax,4941C4;'Delphi%.8X'
 00494057    call        Format
 0049405C    mov         edx,dword ptr [ebp-4]
 0049405F    mov         eax,7931A4
 00494064    call        @UStrAsg
 00494069    mov         eax,[007931A4]
 0049406E    call        @UStrToPWChar
 00494073    push        eax
 00494074    call        kernel32.GlobalAddAtomW
 00494079    mov         [007931A0],ax
 0049407F    lea         eax,[ebp-10]
 00494082    push        eax
 00494083    mov         eax,[00790C38];gvar_00790C38
 00494088    mov         dword ptr [ebp-20],eax
 0049408B    mov         byte ptr [ebp-1C],0
 0049408F    call        kernel32.GetCurrentThreadId
 00494094    mov         dword ptr [ebp-18],eax
 00494097    mov         byte ptr [ebp-14],0
 0049409B    lea         edx,[ebp-20]
 0049409E    mov         ecx,1
 004940A3    mov         eax,4941E8;'ControlOfs%.8X%.8X'
 004940A8    call        Format
 004940AD    mov         edx,dword ptr [ebp-10]
 004940B0    mov         eax,7931A8
 004940B5    call        @UStrAsg
 004940BA    mov         eax,[007931A8]
 004940BF    call        @UStrToPWChar
 004940C4    push        eax
 004940C5    call        kernel32.GlobalAddAtomW
 004940CA    mov         [007931A2],ax
 004940D0    mov         eax,[007931A8]
 004940D5    call        @UStrToPWChar
 004940DA    push        eax
 004940DB    call        user32.RegisterWindowMessageW
 004940E0    mov         [007931AC],eax
 004940E5    mov         dl,1
 004940E7    mov         eax,[00439D58];TThreadList
 004940EC    call        TThreadList.Create
 004940F1    mov         [007931E4],eax
 004940F6    call        InitIMM32
 004940FB    mov         dl,1
 004940FD    mov         eax,[0047F5BC];TMouse
 00494102    call        TMouse.Create
 00494107    mov         [0079318C],eax;Mouse:TMouse
 0049410C    xor         ecx,ecx
 0049410E    mov         dl,1
 00494110    mov         eax,[004E2618];TScreen
 00494115    call        TScreen.Create
 0049411A    mov         edx,dword ptr ds:[78DB00];^Screen:TScreen
 00494120    mov         dword ptr [edx],eax
 00494122    xor         ecx,ecx
 00494124    mov         dl,1
 00494126    mov         eax,[004E365C];TApplication
 0049412B    call        TApplication.Create
 00494130    mov         edx,dword ptr ds:[78D590];^Application:TApplication
 00494136    mov         dword ptr [edx],eax
 00494138    mov         eax,[0078D590];^Application:TApplication
 0049413D    mov         eax,dword ptr [eax]
 0049413F    mov         dl,1
 00494141    call        TApplication.SetShowHint
 00494146    xor         ecx,ecx
 00494148    mov         dl,1
 0049414A    mov         eax,[0047A16C];TControl
 0049414F    call        TControl.Create
 00494154    mov         [007931E8],eax
 00494159    push        494210
 0049415E    call        kernel32.GetModuleHandleW
 00494163    mov         ebx,eax
 00494165    mov         ecx,4812E8;CursorToIdent:Boolean
 0049416A    mov         edx,4812F8;IdentToCursor:Boolean
 0049416F    mov         eax,[00475C2C];TCursor
 00494174    call        RegisterIntegerConsts
 00494179    test        ebx,ebx
>0049417B    je          0049418D
 0049417D    push        494220
 00494182    push        ebx
 00494183    call        GetProcAddress
 00494188    mov         [00785998],eax
 0049418D    xor         eax,eax
 0049418F    pop         edx
 00494190    pop         ecx
 00494191    pop         ecx
 00494192    mov         dword ptr fs:[eax],edx
 00494195    push        4941B2
 0049419A    lea         eax,[ebp-10]
 0049419D    call        @UStrClr
 004941A2    lea         eax,[ebp-4]
 004941A5    call        @UStrClr
 004941AA    ret
>004941AB    jmp         @HandleFinally
>004941B0    jmp         0049419A
 004941B2    pop         ebx
 004941B3    mov         esp,ebp
 004941B5    pop         ebp
 004941B6    ret
*}
end;

//0049423C
constructor TCustomListControl.Create;
begin
{*
 0049423C    push        ebp
 0049423D    mov         ebp,esp
 0049423F    push        ecx
 00494240    push        ebx
 00494241    test        dl,dl
>00494243    je          0049424D
 00494245    add         esp,0FFFFFFF0
 00494248    call        @ClassCreate
 0049424D    mov         byte ptr [ebp-1],dl
 00494250    mov         ebx,eax
 00494252    xor         edx,edx
 00494254    mov         eax,ebx
 00494256    call        TWinControl.Create
 0049425B    mov         eax,dword ptr [ebx+0AC]
 00494261    movzx       edx,byte ptr ds:[494294]
 00494268    mov         byte ptr [eax+10],dl
 0049426B    movzx       edx,byte ptr ds:[494298]
 00494272    mov         byte ptr [eax+11],dl
 00494275    mov         eax,ebx
 00494277    cmp         byte ptr [ebp-1],0
>0049427B    je          0049428C
 0049427D    call        @AfterConstruction
 00494282    pop         dword ptr fs:[0]
 00494289    add         esp,0C
 0049428C    mov         eax,ebx
 0049428E    pop         ebx
 0049428F    pop         ecx
 00494290    pop         ebp
 00494291    ret
*}
end;

//0049429C
procedure TCustomListControl.IsTouchPropertyStored(AProperty:TTouchProperty);
begin
{*
 0049429C    push        ebx
 0049429D    push        esi
 0049429E    mov         ebx,edx
 004942A0    mov         esi,eax
 004942A2    mov         edx,ebx
 004942A4    mov         eax,esi
 004942A6    call        TControl.IsTouchPropertyStored
 004942AB    sub         bl,1
>004942AE    jb          004942B4
>004942B0    je          004942CA
>004942B2    jmp         004942DD
 004942B4    mov         eax,dword ptr [esi+0AC]
 004942BA    movzx       edx,byte ptr ds:[4942E0]
 004942C1    cmp         dl,byte ptr [eax+10]
 004942C4    setne       al
 004942C7    pop         esi
 004942C8    pop         ebx
 004942C9    ret
 004942CA    mov         eax,dword ptr [esi+0AC]
 004942D0    movzx       edx,byte ptr ds:[4942E4]
 004942D7    cmp         dl,byte ptr [eax+11]
 004942DA    setne       al
 004942DD    pop         esi
 004942DE    pop         ebx
 004942DF    ret
*}
end;

//004942E8
procedure TCustomListControl.MoveSelection(Destination:TCustomListControl);
begin
{*
 004942E8    push        ebx
 004942E9    mov         ebx,eax
 004942EB    mov         eax,ebx
 004942ED    mov         ecx,dword ptr [eax]
 004942EF    call        dword ptr [ecx+100]
 004942F5    mov         eax,ebx
 004942F7    mov         edx,dword ptr [eax]
 004942F9    call        dword ptr [edx+104]
 004942FF    pop         ebx
 00494300    ret
*}
end;

//00494304
constructor TMargins.Create;
begin
{*
 00494304    push        ebx
 00494305    push        esi
 00494306    push        edi
 00494307    test        dl,dl
>00494309    je          00494313
 0049430B    add         esp,0FFFFFFF0
 0049430E    call        @ClassCreate
 00494313    mov         esi,ecx
 00494315    mov         ebx,edx
 00494317    mov         edi,eax
 00494319    xor         edx,edx
 0049431B    mov         eax,edi
 0049431D    call        TObject.Create
 00494322    mov         dword ptr [edi+4],esi
 00494325    mov         eax,dword ptr [edi]
 00494327    mov         edx,edi
 00494329    call        dword ptr [eax+14]
 0049432C    mov         eax,edi
 0049432E    test        bl,bl
>00494330    je          00494341
 00494332    call        @AfterConstruction
 00494337    pop         dword ptr fs:[0]
 0049433E    add         esp,0C
 00494341    mov         eax,edi
 00494343    pop         edi
 00494344    pop         esi
 00494345    pop         ebx
 00494346    ret
*}
end;

//00494348
procedure TMargins.AssignTo(Dest:TPersistent);
begin
{*
 00494348    push        ebx
 00494349    push        esi
 0049434A    mov         ebx,edx
 0049434C    mov         esi,eax
 0049434E    mov         eax,ebx
 00494350    mov         edx,dword ptr ds:[477884];TMargins
 00494356    call        @IsClass
 0049435B    test        al,al
>0049435D    je          00494381
 0049435F    mov         eax,ebx
 00494361    mov         edx,dword ptr [esi+8]
 00494364    mov         dword ptr [eax+8],edx
 00494367    mov         edx,dword ptr [esi+0C]
 0049436A    mov         dword ptr [eax+0C],edx
 0049436D    mov         edx,dword ptr [esi+10]
 00494370    mov         dword ptr [eax+10],edx
 00494373    mov         edx,dword ptr [esi+14]
 00494376    mov         dword ptr [eax+14],edx
 00494379    mov         edx,dword ptr [eax]
 0049437B    call        dword ptr [edx+0C]
 0049437E    pop         esi
 0049437F    pop         ebx
 00494380    ret
 00494381    mov         edx,ebx
 00494383    mov         eax,esi
 00494385    call        TPersistent.AssignTo
 0049438A    pop         esi
 0049438B    pop         ebx
 0049438C    ret
*}
end;

//00494390
procedure TSizeConstraints.Change;
begin
{*
 00494390    push        ebx
 00494391    cmp         word ptr [eax+1A],0
>00494396    je          004943A2
 00494398    mov         ebx,eax
 0049439A    mov         edx,eax
 0049439C    mov         eax,dword ptr [ebx+1C]
 0049439F    call        dword ptr [ebx+18]
 004943A2    pop         ebx
 004943A3    ret
*}
end;

//004943A4
procedure TMargins.InitDefaults(Margins:TMargins);
begin
{*
 004943A4    mov         dword ptr [edx+8],3
 004943AB    mov         dword ptr [edx+10],3
 004943B2    mov         dword ptr [edx+0C],3
 004943B9    mov         dword ptr [edx+14],3
 004943C0    ret
*}
end;

//004943C4
procedure TMargins.SetMargin(Index:Integer; Value:TMarginSize);
begin
{*
 004943C4    push        esi
 004943C5    mov         esi,eax
 004943C7    sub         edx,1
>004943CA    jb          004943D6
>004943CC    je          004943E7
 004943CE    dec         edx
>004943CF    je          004943F8
 004943D1    dec         edx
>004943D2    je          00494409
>004943D4    jmp         00494418
 004943D6    cmp         ecx,dword ptr [esi+8]
>004943D9    je          00494418
 004943DB    mov         dword ptr [esi+8],ecx
 004943DE    mov         eax,esi
 004943E0    mov         edx,dword ptr [eax]
 004943E2    call        dword ptr [edx+0C]
 004943E5    pop         esi
 004943E6    ret
 004943E7    cmp         ecx,dword ptr [esi+0C]
>004943EA    je          00494418
 004943EC    mov         dword ptr [esi+0C],ecx
 004943EF    mov         eax,esi
 004943F1    mov         edx,dword ptr [eax]
 004943F3    call        dword ptr [edx+0C]
 004943F6    pop         esi
 004943F7    ret
 004943F8    cmp         ecx,dword ptr [esi+10]
>004943FB    je          00494418
 004943FD    mov         dword ptr [esi+10],ecx
 00494400    mov         eax,esi
 00494402    mov         edx,dword ptr [eax]
 00494404    call        dword ptr [edx+0C]
 00494407    pop         esi
 00494408    ret
 00494409    cmp         ecx,dword ptr [esi+14]
>0049440C    je          00494418
 0049440E    mov         dword ptr [esi+14],ecx
 00494411    mov         eax,esi
 00494413    mov         edx,dword ptr [eax]
 00494415    call        dword ptr [edx+0C]
 00494418    pop         esi
 00494419    ret
*}
end;

//0049441C
procedure TMargins.SetControlBounds(ALeft:Integer; ATop:Integer; Aligning:Boolean; AHeight:Integer; AWidth:Integer);
begin
{*
 0049441C    push        ebp
 0049441D    mov         ebp,esp
 0049441F    add         esp,0FFFFFFF8
 00494422    push        ebx
 00494423    push        esi
 00494424    push        edi
 00494425    mov         dword ptr [ebp-8],ecx
 00494428    mov         edi,edx
 0049442A    mov         dword ptr [ebp-4],eax
 0049442D    mov         eax,dword ptr [ebp-4]
 00494430    mov         ebx,dword ptr [eax+4]
 00494433    test        ebx,ebx
>00494435    je          004944FD
 0049443B    cmp         byte ptr [ebp+8],0
>0049443F    je          0049444F
 00494441    mov         byte ptr [ebx+178],1
 00494448    or          dword ptr [ebx+54],4000
 0049444F    xor         edx,edx
 00494451    push        ebp
 00494452    push        4944F6
 00494457    push        dword ptr fs:[edx]
 0049445A    mov         dword ptr fs:[edx],esp
 0049445D    mov         eax,dword ptr [ebp-4]
 00494460    mov         esi,dword ptr [eax+4]
 00494463    test        byte ptr [esi+52],10
>00494467    je          00494472
 00494469    cmp         dword ptr [esi+34],0
 0049446D    setne       al
>00494470    jmp         00494474
 00494472    xor         eax,eax
 00494474    test        al,al
>00494476    je          004944B7
 00494478    mov         eax,dword ptr [ebp-4]
 0049447B    mov         eax,dword ptr [eax+8]
 0049447E    mov         edx,eax
 00494480    mov         ecx,dword ptr [ebp-4]
 00494483    add         edx,dword ptr [ecx+10]
 00494486    mov         ecx,dword ptr [ebp+10]
 00494489    sub         ecx,edx
 0049448B    push        ecx
 0049448C    mov         edx,dword ptr [ebp-4]
 0049448F    mov         edx,dword ptr [edx+0C]
 00494492    mov         ecx,dword ptr [ebp-4]
 00494495    add         edx,dword ptr [ecx+14]
 00494498    mov         ecx,dword ptr [ebp+0C]
 0049449B    sub         ecx,edx
 0049449D    push        ecx
 0049449E    mov         edx,dword ptr [ebp-4]
 004944A1    mov         ecx,dword ptr [edx+0C]
 004944A4    add         ecx,dword ptr [ebp-8]
 004944A7    mov         edx,eax
 004944A9    add         edx,edi
 004944AB    mov         eax,esi
 004944AD    mov         ebx,dword ptr [eax]
 004944AF    call        dword ptr [ebx+98]
>004944B5    jmp         004944CE
 004944B7    mov         eax,dword ptr [ebp+10]
 004944BA    push        eax
 004944BB    mov         eax,dword ptr [ebp+0C]
 004944BE    push        eax
 004944BF    mov         eax,esi
 004944C1    mov         ecx,dword ptr [ebp-8]
 004944C4    mov         edx,edi
 004944C6    mov         ebx,dword ptr [eax]
 004944C8    call        dword ptr [ebx+98]
 004944CE    xor         eax,eax
 004944D0    pop         edx
 004944D1    pop         ecx
 004944D2    pop         ecx
 004944D3    mov         dword ptr fs:[eax],edx
 004944D6    push        4944FD
 004944DB    cmp         byte ptr [ebp+8],0
>004944DF    je          004944F5
 004944E1    mov         eax,dword ptr [ebp-4]
 004944E4    mov         ebx,dword ptr [eax+4]
 004944E7    mov         byte ptr [ebx+178],0
 004944EE    and         dword ptr [ebx+54],0FFFFBFFF
 004944F5    ret
>004944F6    jmp         @HandleFinally
>004944FB    jmp         004944DB
 004944FD    pop         edi
 004944FE    pop         esi
 004944FF    pop         ebx
 00494500    pop         ecx
 00494501    pop         ecx
 00494502    pop         ebp
 00494503    ret         0C
*}
end;

//00494508
procedure TMargins.SetControlBounds(ARect:TRect; Aligning:Boolean);
begin
{*
 00494508    push        ebx
 00494509    push        esi
 0049450A    push        edi
 0049450B    mov         ebx,dword ptr [edx+8]
 0049450E    mov         esi,dword ptr [edx]
 00494510    sub         ebx,esi
 00494512    push        ebx
 00494513    mov         ebx,dword ptr [edx+0C]
 00494516    mov         edi,dword ptr [edx+4]
 00494519    sub         ebx,edi
 0049451B    push        ebx
 0049451C    push        ecx
 0049451D    mov         ecx,esi
 0049451F    mov         edx,edi
 00494521    xchg        ecx,edx
 00494523    call        TMargins.SetControlBounds
 00494528    pop         edi
 00494529    pop         esi
 0049452A    pop         ebx
 0049452B    ret
*}
end;

//0049452C
procedure TMargins.SetBounds(ALeft:Integer; ATop:Integer; ABottom:Integer; ARight:Integer);
begin
{*
 0049452C    push        ebp
 0049452D    mov         ebp,esp
 0049452F    push        esi
 00494530    push        edi
 00494531    mov         esi,eax
 00494533    mov         edi,dword ptr [ebp+8]
 00494536    mov         eax,dword ptr [ebp+0C]
 00494539    cmp         edx,dword ptr [esi+8]
>0049453C    jne         0049454D
 0049453E    cmp         ecx,dword ptr [esi+0C]
>00494541    jne         0049454D
 00494543    cmp         eax,dword ptr [esi+10]
>00494546    jne         0049454D
 00494548    cmp         edi,dword ptr [esi+14]
>0049454B    je          00494560
 0049454D    mov         dword ptr [esi+8],edx
 00494550    mov         dword ptr [esi+0C],ecx
 00494553    mov         dword ptr [esi+10],eax
 00494556    mov         dword ptr [esi+14],edi
 00494559    mov         eax,esi
 0049455B    mov         edx,dword ptr [eax]
 0049455D    call        dword ptr [edx+0C]
 00494560    pop         edi
 00494561    pop         esi
 00494562    pop         ebp
 00494563    ret         8
*}
end;

//00494568
function TMargins.GetControlBound(Index:Integer):Integer;
begin
{*
 00494568    push        esi
 00494569    xor         ecx,ecx
 0049456B    mov         esi,dword ptr [eax+4]
 0049456E    test        esi,esi
>00494570    je          004946F3
 00494576    cmp         edx,7
>00494579    ja          004946F3
 0049457F    jmp         dword ptr [edx*4+494586]
 0049457F    dd          004945A6
 0049457F    dd          004945CE
 0049457F    dd          004945F6
 0049457F    dd          00494621
 0049457F    dd          0049464C
 0049457F    dd          00494677
 0049457F    dd          0049469F
 0049457F    dd          004946CA
 004945A6    test        byte ptr [esi+52],10
>004945AA    je          004945B5
 004945AC    cmp         dword ptr [esi+34],0
 004945B0    setne       dl
>004945B3    jmp         004945B7
 004945B5    xor         edx,edx
 004945B7    test        dl,dl
>004945B9    je          004945C6
 004945BB    mov         ecx,dword ptr [esi+40]
 004945BE    sub         ecx,dword ptr [eax+8]
>004945C1    jmp         004946F3
 004945C6    mov         ecx,dword ptr [esi+40]
>004945C9    jmp         004946F3
 004945CE    test        byte ptr [esi+52],10
>004945D2    je          004945DD
 004945D4    cmp         dword ptr [esi+34],0
 004945D8    setne       dl
>004945DB    jmp         004945DF
 004945DD    xor         edx,edx
 004945DF    test        dl,dl
>004945E1    je          004945EE
 004945E3    mov         ecx,dword ptr [esi+44]
 004945E6    sub         ecx,dword ptr [eax+0C]
>004945E9    jmp         004946F3
 004945EE    mov         ecx,dword ptr [esi+44]
>004945F1    jmp         004946F3
 004945F6    test        byte ptr [esi+52],10
>004945FA    je          00494605
 004945FC    cmp         dword ptr [esi+34],0
 00494600    setne       dl
>00494603    jmp         00494607
 00494605    xor         edx,edx
 00494607    test        dl,dl
>00494609    je          00494619
 0049460B    mov         ecx,dword ptr [esi+48]
 0049460E    add         ecx,dword ptr [eax+8]
 00494611    add         ecx,dword ptr [eax+10]
>00494614    jmp         004946F3
 00494619    mov         ecx,dword ptr [esi+48]
>0049461C    jmp         004946F3
 00494621    test        byte ptr [esi+52],10
>00494625    je          00494630
 00494627    cmp         dword ptr [esi+34],0
 0049462B    setne       dl
>0049462E    jmp         00494632
 00494630    xor         edx,edx
 00494632    test        dl,dl
>00494634    je          00494644
 00494636    mov         ecx,dword ptr [esi+4C]
 00494639    add         ecx,dword ptr [eax+0C]
 0049463C    add         ecx,dword ptr [eax+14]
>0049463F    jmp         004946F3
 00494644    mov         ecx,dword ptr [esi+4C]
>00494647    jmp         004946F3
 0049464C    test        byte ptr [esi+52],10
>00494650    je          0049465B
 00494652    cmp         dword ptr [esi+34],0
 00494656    setne       dl
>00494659    jmp         0049465D
 0049465B    xor         edx,edx
 0049465D    test        dl,dl
>0049465F    je          0049466F
 00494661    mov         ecx,dword ptr [esi+194]
 00494667    sub         ecx,dword ptr [eax+8]
>0049466A    jmp         004946F3
 0049466F    mov         ecx,dword ptr [esi+194]
>00494675    jmp         004946F3
 00494677    test        byte ptr [esi+52],10
>0049467B    je          00494686
 0049467D    cmp         dword ptr [esi+34],0
 00494681    setne       dl
>00494684    jmp         00494688
 00494686    xor         edx,edx
 00494688    test        dl,dl
>0049468A    je          00494697
 0049468C    mov         ecx,dword ptr [esi+198]
 00494692    sub         ecx,dword ptr [eax+0C]
>00494695    jmp         004946F3
 00494697    mov         ecx,dword ptr [esi+198]
>0049469D    jmp         004946F3
 0049469F    test        byte ptr [esi+52],10
>004946A3    je          004946AE
 004946A5    cmp         dword ptr [esi+34],0
 004946A9    setne       dl
>004946AC    jmp         004946B0
 004946AE    xor         edx,edx
 004946B0    test        dl,dl
>004946B2    je          004946C2
 004946B4    mov         ecx,dword ptr [esi+19C]
 004946BA    add         ecx,dword ptr [eax+8]
 004946BD    add         ecx,dword ptr [eax+10]
>004946C0    jmp         004946F3
 004946C2    mov         ecx,dword ptr [esi+19C]
>004946C8    jmp         004946F3
 004946CA    test        byte ptr [esi+52],10
>004946CE    je          004946D9
 004946D0    cmp         dword ptr [esi+34],0
 004946D4    setne       dl
>004946D7    jmp         004946DB
 004946D9    xor         edx,edx
 004946DB    test        dl,dl
>004946DD    je          004946ED
 004946DF    mov         ecx,dword ptr [esi+1A0]
 004946E5    add         ecx,dword ptr [eax+0C]
 004946E8    add         ecx,dword ptr [eax+14]
>004946EB    jmp         004946F3
 004946ED    mov         ecx,dword ptr [esi+1A0]
 004946F3    mov         eax,ecx
 004946F5    pop         esi
 004946F6    ret
*}
end;

//004946F8
procedure TPadding.InitDefaults(Margins:TMargins);
begin
{*
 004946F8    ret
*}
end;

//004946FC
procedure TCustomHintWindow.AutoSize;
begin
{*
 004946FC    mov         edx,eax
 004946FE    mov         eax,dword ptr [eax+278]
 00494704    mov         ecx,dword ptr [eax]
 00494706    call        dword ptr [ecx+3C]
 00494709    ret
*}
end;

//0049470C
procedure TCustomHintWindow.CMTextChanged(var Message:TMessage);
begin
{*
 0049470C    call        TWinControl.CMTextChanged
 00494711    ret
*}
end;

//00494714
constructor TCustomHintWindow.Create;
begin
{*
 00494714    push        ebx
 00494715    push        esi
 00494716    test        dl,dl
>00494718    je          00494722
 0049471A    add         esp,0FFFFFFF0
 0049471D    call        @ClassCreate
 00494722    mov         ebx,edx
 00494724    mov         esi,eax
 00494726    xor         edx,edx
 00494728    mov         eax,esi
 0049472A    call        TCustomControl.Create
 0049472F    xor         edx,edx
 00494731    mov         eax,esi
 00494733    call        TControl.SetVisible
 00494738    mov         edx,80FFFF
 0049473D    mov         eax,esi
 0049473F    call        TControl.SetColor
 00494744    mov         eax,[0078DB00];^Screen:TScreen
 00494749    mov         eax,dword ptr [eax]
 0049474B    mov         edx,dword ptr [eax+7C]
 0049474E    mov         eax,dword ptr [esi+270]
 00494754    call        TCanvas.SetFont
 00494759    mov         eax,dword ptr [esi+270]
 0049475F    mov         eax,dword ptr [eax+48]
 00494762    mov         dl,1
 00494764    call        TBrush.SetStyle
 00494769    xor         edx,edx
 0049476B    mov         eax,esi
 0049476D    call        TControl.SetWidth
 00494772    xor         edx,edx
 00494774    mov         eax,esi
 00494776    call        TControl.SetHeight
 0049477B    mov         eax,esi
 0049477D    test        bl,bl
>0049477F    je          00494790
 00494781    call        @AfterConstruction
 00494786    pop         dword ptr fs:[0]
 0049478D    add         esp,0C
 00494790    mov         eax,esi
 00494792    pop         esi
 00494793    pop         ebx
 00494794    ret
*}
end;

//00494798
procedure TCustomHintWindow.CreateParams(var Params:TCreateParams);
begin
{*
 00494798    push        ebx
 00494799    mov         ebx,edx
 0049479B    mov         edx,ebx
 0049479D    call        TWinControl.CreateParams
 004947A2    mov         dword ptr [ebx+4],80000000
 004947A9    mov         dword ptr [ebx+8],88
 004947B0    pop         ebx
 004947B1    ret
*}
end;

//004947B4
procedure TCustomHintWindow.CreateWnd;
begin
{*
 004947B4    push        ebx
 004947B5    mov         ebx,eax
 004947B7    mov         eax,ebx
 004947B9    call        TWinControl.CreateWnd
 004947BE    call        ThemeServices
 004947C3    call        TThemeServices.GetThemesEnabled
 004947C8    test        al,al
>004947CA    je          0049480A
 004947CC    push        0EC
 004947CE    mov         eax,ebx
 004947D0    call        TWinControl.GetHandle
 004947D5    push        eax
 004947D6    call        user32.GetWindowLongW
 004947DB    or          eax,80000
 004947E0    push        eax
 004947E1    push        0EC
 004947E3    mov         eax,ebx
 004947E5    call        TWinControl.GetHandle
 004947EA    push        eax
 004947EB    call        user32.SetWindowLongW
 004947F0    push        3
 004947F2    push        0
 004947F4    push        0FF00
 004947F9    mov         eax,ebx
 004947FB    call        TWinControl.GetHandle
 00494800    push        eax
 00494801    mov         eax,[0078D314]
 00494806    mov         eax,dword ptr [eax]
 00494808    call        eax
 0049480A    pop         ebx
 0049480B    ret
*}
end;

//0049480C
procedure TCustomHintWindow.NCPaint(DC:HDC);
begin
{*
 0049480C    push        ebx
 0049480D    push        esi
 0049480E    mov         esi,eax
 00494810    mov         ecx,edx
 00494812    mov         eax,dword ptr [esi+278]
 00494818    mov         edx,esi
 0049481A    mov         ebx,dword ptr [eax]
 0049481C    call        dword ptr [ebx+38]
 0049481F    pop         esi
 00494820    pop         ebx
 00494821    ret
*}
end;

//00494824
procedure TCustomHintWindow.Paint;
begin
{*
 00494824    mov         edx,eax
 00494826    mov         eax,dword ptr [eax+278]
 0049482C    mov         ecx,dword ptr [eax]
 0049482E    call        dword ptr [ecx+34]
 00494831    ret
*}
end;

//00494834
procedure TCustomHintWindow.PositionAtCursor;
begin
{*
 00494834    push        ebx
 00494835    add         esp,0FFFFFFF8
 00494838    mov         ebx,eax
 0049483A    push        esp
 0049483B    call        user32.GetCursorPos
 00494840    mov         edx,esp
 00494842    mov         eax,ebx
 00494844    call        TCustomHintWindow.PositionAt
 00494849    pop         ecx
 0049484A    pop         edx
 0049484B    pop         ebx
 0049484C    ret
*}
end;

//00494850
procedure TCustomHintWindow.PositionAt(Rect:TRect);
begin
{*
 00494850    push        ebx
 00494851    push        esi
 00494852    push        edi
 00494853    add         esp,0FFFFFFF0
 00494856    mov         esi,edx
 00494858    lea         edi,[esp]
 0049485B    movs        dword ptr [edi],dword ptr [esi]
 0049485C    movs        dword ptr [edi],dword ptr [esi]
 0049485D    movs        dword ptr [edi],dword ptr [esi]
 0049485E    movs        dword ptr [edi],dword ptr [esi]
 0049485F    mov         esi,eax
 00494861    mov         eax,esi
 00494863    call        TCustomHintWindow.AutoSize
 00494868    mov         edx,dword ptr [esp+0C]
 0049486C    mov         eax,esi
 0049486E    call        TControl.SetTop
 00494873    mov         edx,dword ptr [esp+8]
 00494877    mov         eax,dword ptr [esp]
 0049487A    sub         edx,eax
 0049487C    sar         edx,1
>0049487E    jns         00494883
 00494880    adc         edx,0
 00494883    add         edx,eax
 00494885    mov         eax,dword ptr [esi+48]
 00494888    sar         eax,1
>0049488A    jns         0049488F
 0049488C    adc         eax,0
 0049488F    sub         edx,eax
 00494891    mov         eax,esi
 00494893    call        TControl.SetLeft
 00494898    mov         eax,dword ptr [esi+278]
 0049489E    cmp         byte ptr [eax+44],1
>004948A2    jne         004948B1
 004948A4    mov         edx,dword ptr [esi+40]
 004948A7    add         edx,0A
 004948AA    mov         eax,esi
 004948AC    call        TControl.SetLeft
 004948B1    mov         eax,[0078DB00];^Screen:TScreen
 004948B6    mov         eax,dword ptr [eax]
 004948B8    call        TScreen.GetHeight
 004948BD    sar         eax,1
>004948BF    jns         004948C4
 004948C1    adc         eax,0
 004948C4    cmp         eax,dword ptr [esi+44]
 004948C7    setl        bl
 004948CA    mov         byte ptr [esi+27C],bl
 004948D0    test        bl,bl
>004948D2    je          004948EB
 004948D4    mov         edx,dword ptr [esi+44]
 004948D7    sub         edx,dword ptr [esi+4C]
 004948DA    mov         eax,dword ptr [esp+0C]
 004948DE    sub         eax,dword ptr [esp+4]
 004948E2    sub         edx,eax
 004948E4    mov         eax,esi
 004948E6    call        TControl.SetTop
 004948EB    add         esp,10
 004948EE    pop         edi
 004948EF    pop         esi
 004948F0    pop         ebx
 004948F1    ret
*}
end;

//004948F4
procedure TCustomHintWindow.PositionAt(Point:TPoint);
begin
{*
 004948F4    push        ebx
 004948F5    push        esi
 004948F6    push        edi
 004948F7    add         esp,0FFFFFFE8
 004948FA    mov         esi,edx
 004948FC    lea         edi,[esp]
 004948FF    movs        dword ptr [edi],dword ptr [esi]
 00494900    movs        dword ptr [edi],dword ptr [esi]
 00494901    mov         ebx,eax
 00494903    mov         edi,dword ptr [esp+4]
 00494907    push        edi
 00494908    lea         eax,[esp+0C]
 0049490C    push        eax
 0049490D    mov         esi,dword ptr [esp+8]
 00494911    mov         ecx,esi
 00494913    mov         edx,edi
 00494915    mov         eax,esi
 00494917    call        Rect
 0049491C    lea         edx,[esp+8]
 00494920    mov         eax,ebx
 00494922    call        TCustomHintWindow.PositionAt
 00494927    add         esp,18
 0049492A    pop         edi
 0049492B    pop         esi
 0049492C    pop         ebx
 0049492D    ret
*}
end;

//00494930
procedure THintWindow.WMNCHitTest(var Message:TWMNCHitTest);
begin
{*
 00494930    mov         dword ptr [edx+0C],0FFFFFFFF
 00494937    ret
*}
end;

//00494938
procedure THintWindow.WMNCPaint(var Message:TWMNCPaint);
begin
{*
 00494938    push        ebp
 00494939    mov         ebp,esp
 0049493B    add         esp,0FFFFFFF8
 0049493E    mov         dword ptr [ebp-4],eax
 00494941    mov         eax,dword ptr [ebp-4]
 00494944    call        TWinControl.GetHandle
 00494949    push        eax
 0049494A    call        user32.GetWindowDC
 0049494F    mov         dword ptr [ebp-8],eax
 00494952    xor         eax,eax
 00494954    push        ebp
 00494955    push        49498E
 0049495A    push        dword ptr fs:[eax]
 0049495D    mov         dword ptr fs:[eax],esp
 00494960    mov         edx,dword ptr [ebp-8]
 00494963    mov         eax,dword ptr [ebp-4]
 00494966    mov         ecx,dword ptr [eax]
 00494968    call        dword ptr [ecx+0F0]
 0049496E    xor         eax,eax
 00494970    pop         edx
 00494971    pop         ecx
 00494972    pop         ecx
 00494973    mov         dword ptr fs:[eax],edx
 00494976    push        494995
 0049497B    mov         eax,dword ptr [ebp-8]
 0049497E    push        eax
 0049497F    mov         eax,dword ptr [ebp-4]
 00494982    call        TWinControl.GetHandle
 00494987    push        eax
 00494988    call        user32.ReleaseDC
 0049498D    ret
>0049498E    jmp         @HandleFinally
>00494993    jmp         0049497B
 00494995    pop         ecx
 00494996    pop         ecx
 00494997    pop         ebp
 00494998    ret
*}
end;

//0049499C
procedure THintWindow.WMPrint(var Message:TMessage);
begin
{*
 0049499C    push        ebx
 0049499D    push        esi
 0049499E    mov         esi,edx
 004949A0    mov         ebx,eax
 004949A2    push        0
 004949A4    mov         edx,dword ptr [esi+4]
 004949A7    xor         ecx,ecx
 004949A9    mov         eax,ebx
 004949AB    call        TWinControl.PaintTo
 004949B0    mov         edx,dword ptr [esi+4]
 004949B3    mov         eax,ebx
 004949B5    mov         ecx,dword ptr [eax]
 004949B7    call        dword ptr [ecx+0F0]
 004949BD    pop         esi
 004949BE    pop         ebx
 004949BF    ret
*}
end;

//004949C0
procedure TCustomHint.SetHintSize(HintWindow:TCustomHintWindow);
begin
{*
 004949C0    push        ebx
 004949C1    push        esi
 004949C2    push        edi
 004949C3    push        ebp
 004949C4    add         esp,0FFFFFFE0
 004949C7    mov         esi,edx
 004949C9    xor         eax,eax
 004949CB    mov         dword ptr [esp],eax
 004949CE    xor         eax,eax
 004949D0    mov         dword ptr [esp+4],eax
 004949D4    xor         eax,eax
 004949D6    mov         dword ptr [esp+8],eax
 004949DA    xor         edi,edi
 004949DC    mov         ebp,dword ptr [esi+278]
 004949E2    cmp         dword ptr [ebp+34],0
>004949E6    je          00494A93
 004949EC    mov         eax,dword ptr [esi+270]
 004949F2    mov         eax,dword ptr [eax+40]
 004949F5    mov         eax,dword ptr [eax+10]
 004949F8    movzx       eax,byte ptr [eax+21]
 004949FC    test        al,1
 004949FE    setne       al
 00494A01    mov         byte ptr [esp+0C],al
 00494A05    mov         eax,dword ptr [esi+270]
 00494A0B    mov         eax,dword ptr [eax+40]
 00494A0E    mov         eax,dword ptr [eax+10]
 00494A11    movzx       ebx,byte ptr [eax+21]
 00494A15    movzx       edx,byte ptr ds:[494B04]
 00494A1C    or          dl,bl
 00494A1E    mov         eax,dword ptr [esi+270]
 00494A24    mov         eax,dword ptr [eax+40]
 00494A27    call        TFont.SetStyle
 00494A2C    mov         eax,[00494B08]
 00494A31    push        eax
 00494A32    lea         ecx,[ebp+34]
 00494A35    lea         edx,[esp+14]
 00494A39    mov         eax,dword ptr [esi+270]
 00494A3F    mov         ebx,dword ptr [eax]
 00494A41    call        dword ptr [ebx+94]
 00494A47    cmp         byte ptr [esp+0C],0
>00494A4C    jne         00494A77
 00494A4E    mov         eax,dword ptr [esi+270]
 00494A54    mov         eax,dword ptr [eax+40]
 00494A57    mov         eax,dword ptr [eax+10]
 00494A5A    movzx       ebx,byte ptr [eax+21]
 00494A5E    movzx       edx,byte ptr ds:[494B04]
 00494A65    not         edx
 00494A67    and         dl,bl
 00494A69    mov         eax,dword ptr [esi+270]
 00494A6F    mov         eax,dword ptr [eax+40]
 00494A72    call        TFont.SetStyle
 00494A77    mov         eax,dword ptr [esp+18]
 00494A7B    sub         eax,dword ptr [esp+10]
 00494A7F    add         eax,8
 00494A82    mov         dword ptr [esp+8],eax
 00494A86    mov         eax,dword ptr [esp+1C]
 00494A8A    sub         eax,dword ptr [esp+14]
 00494A8E    add         edi,eax
 00494A90    add         edi,4
 00494A93    cmp         dword ptr [ebp+38],0
>00494A97    je          00494ADA
 00494A99    mov         eax,[00494B08]
 00494A9E    push        eax
 00494A9F    lea         ecx,[ebp+38]
 00494AA2    lea         edx,[esp+14]
 00494AA6    mov         eax,dword ptr [esi+270]
 00494AAC    mov         ebx,dword ptr [eax]
 00494AAE    call        dword ptr [ebx+94]
 00494AB4    mov         eax,dword ptr [esp+18]
 00494AB8    sub         eax,dword ptr [esp+10]
 00494ABC    add         eax,8
 00494ABF    cmp         eax,dword ptr [esp+8]
>00494AC3    jge         00494AC9
 00494AC5    mov         eax,dword ptr [esp+8]
 00494AC9    mov         dword ptr [esp+8],eax
 00494ACD    mov         eax,dword ptr [esp+1C]
 00494AD1    sub         eax,dword ptr [esp+14]
 00494AD5    add         edi,eax
 00494AD7    add         edi,4
 00494ADA    add         dword ptr [esp+4],edi
 00494ADE    mov         eax,dword ptr [esp+8]
 00494AE2    add         dword ptr [esp],eax
 00494AE5    mov         edx,dword ptr [esp+4]
 00494AE9    mov         eax,esi
 00494AEB    call        TControl.SetHeight
 00494AF0    mov         edx,dword ptr [esp]
 00494AF3    mov         eax,esi
 00494AF5    call        TControl.SetWidth
 00494AFA    add         esp,20
 00494AFD    pop         ebp
 00494AFE    pop         edi
 00494AFF    pop         esi
 00494B00    pop         ebx
 00494B01    ret
*}
end;

//00494B0C
procedure TCustomHint.SetImages(Value:TImageList);
begin
{*
 00494B0C    cmp         edx,dword ptr [eax+3C]
>00494B0F    je          00494B23
 00494B11    mov         ecx,edx
 00494B13    mov         dword ptr [eax+3C],ecx
 00494B16    test        ecx,ecx
>00494B18    je          00494B23
 00494B1A    mov         edx,eax
 00494B1C    mov         eax,ecx
 00494B1E    call        TComponent.FreeNotification
 00494B23    ret
*}
end;

//00494B24
constructor TCustomHint.Create;
begin
{*
 00494B24    push        ebx
 00494B25    push        esi
 00494B26    test        dl,dl
>00494B28    je          00494B32
 00494B2A    add         esp,0FFFFFFF0
 00494B2D    call        @ClassCreate
 00494B32    mov         ebx,edx
 00494B34    mov         esi,eax
 00494B36    xor         edx,edx
 00494B38    mov         eax,esi
 00494B3A    call        TComponent.Create
 00494B3F    mov         dword ptr [esi+54],0FFFFFFFF
 00494B46    mov         byte ptr [esi+44],1
 00494B4A    xor         eax,eax
 00494B4C    mov         dword ptr [esi+48],eax
 00494B4F    mov         dword ptr [esi+4C],1F4
 00494B56    mov         byte ptr [esi+50],1
 00494B5A    mov         eax,esi
 00494B5C    test        bl,bl
>00494B5E    je          00494B6F
 00494B60    call        @AfterConstruction
 00494B65    pop         dword ptr fs:[0]
 00494B6C    add         esp,0C
 00494B6F    mov         eax,esi
 00494B71    pop         esi
 00494B72    pop         ebx
 00494B73    ret
*}
end;

//00494B74
destructor TCustomHint.Destroy();
begin
{*
 00494B74    push        ebx
 00494B75    push        esi
 00494B76    call        @BeforeDestruction
 00494B7B    mov         ebx,edx
 00494B7D    mov         esi,eax
 00494B7F    mov         eax,esi
 00494B81    call        TCustomHint.HideHint
 00494B86    mov         byte ptr [esi+5C],1
 00494B8A    mov         eax,dword ptr [esi+48]
 00494B8D    test        eax,eax
>00494B8F    je          00494BAB
 00494B91    call        TCustomHintShowHideThread.ResumeWork
 00494B96    mov         eax,dword ptr [esi+48]
 00494B99    call        TThread.Terminate
 00494B9E    mov         eax,dword ptr [esi+48]
 00494BA1    call        TObject.Free
 00494BA6    xor         eax,eax
 00494BA8    mov         dword ptr [esi+48],eax
 00494BAB    mov         edx,ebx
 00494BAD    and         dl,0FC
 00494BB0    mov         eax,esi
 00494BB2    call        TComponent.Destroy
 00494BB7    test        bl,bl
>00494BB9    jle         00494BC2
 00494BBB    mov         eax,esi
 00494BBD    call        @ClassDestroy
 00494BC2    pop         esi
 00494BC3    pop         ebx
 00494BC4    ret
*}
end;

//00494BC8
procedure TCustomHint.HideHint(HidingControl:TControl);
begin
{*
 00494BC8    cmp         edx,dword ptr [eax+58]
>00494BCB    jne         00494BD2
 00494BCD    call        TCustomHint.HideHint
 00494BD2    ret
*}
end;

//00494BD4
procedure TCustomHint.HideHint;
begin
{*
 00494BD4    mov         byte ptr [eax+50],0
 00494BD8    ret
*}
end;

//00494BDC
procedure TCustomHint.NCPaintHint(HintWindow:TCustomHintWindow; DC:HDC);
begin
{*
 00494BDC    ret
*}
end;

//00494BE0
procedure TCustomHint.Notification(AComponent:TComponent; Operation:TOperation);
begin
{*
 00494BE0    push        ebx
 00494BE1    push        esi
 00494BE2    push        edi
 00494BE3    mov         ebx,ecx
 00494BE5    mov         edi,edx
 00494BE7    mov         esi,eax
 00494BE9    mov         ecx,ebx
 00494BEB    mov         edx,edi
 00494BED    mov         eax,esi
 00494BEF    call        TComponent.Notification
 00494BF4    cmp         bl,1
>00494BF7    jne         00494C07
 00494BF9    cmp         edi,dword ptr [esi+3C]
>00494BFC    jne         00494C07
 00494BFE    xor         edx,edx
 00494C00    mov         eax,esi
 00494C02    call        TCustomHint.SetImages
 00494C07    pop         edi
 00494C08    pop         esi
 00494C09    pop         ebx
 00494C0A    ret
*}
end;

//00494C0C
procedure TCustomHint.PaintHint(HintWindow:TCustomHintWindow);
begin
{*
 00494C0C    push        ebp
 00494C0D    mov         ebp,esp
 00494C0F    add         esp,0FFFFFFA4
 00494C12    push        ebx
 00494C13    push        esi
 00494C14    push        edi
 00494C15    mov         dword ptr [ebp-4],edx
 00494C18    lea         eax,[ebp-1C]
 00494C1B    push        eax
 00494C1C    lea         edx,[ebp-5C]
 00494C1F    mov         eax,dword ptr [ebp-4]
 00494C22    mov         ecx,dword ptr [eax]
 00494C24    call        dword ptr [ecx+54]
 00494C27    lea         eax,[ebp-5C]
 00494C2A    mov         edx,dword ptr [ebp-4]
 00494C2D    mov         ecx,dword ptr [edx+4C]
 00494C30    mov         dl,3
 00494C32    call        SplitRect
 00494C37    mov         eax,dword ptr [ebp-4]
 00494C3A    mov         eax,dword ptr [eax+270]
 00494C40    mov         eax,dword ptr [eax+48]
 00494C43    mov         edx,0F0FFFF
 00494C48    call        TBrush.SetColor
 00494C4D    lea         edx,[ebp-5C]
 00494C50    mov         eax,dword ptr [ebp-4]
 00494C53    mov         ecx,dword ptr [eax]
 00494C55    call        dword ptr [ecx+54]
 00494C58    lea         edx,[ebp-5C]
 00494C5B    mov         eax,dword ptr [ebp-4]
 00494C5E    mov         eax,dword ptr [eax+270]
 00494C64    mov         ecx,dword ptr [eax]
 00494C66    call        dword ptr [ecx+54]
 00494C69    mov         eax,dword ptr [ebp-10]
 00494C6C    push        eax
 00494C6D    mov         eax,dword ptr [ebp-14]
 00494C70    push        eax
 00494C71    mov         eax,dword ptr [ebp-18]
 00494C74    push        eax
 00494C75    mov         eax,dword ptr [ebp-1C]
 00494C78    push        eax
 00494C79    call        gdi32.CreateRectRgn
 00494C7E    mov         dword ptr [ebp-8],eax
 00494C81    mov         eax,dword ptr [ebp-8]
 00494C84    push        eax
 00494C85    mov         eax,dword ptr [ebp-4]
 00494C88    mov         eax,dword ptr [eax+270]
 00494C8E    call        TCanvas.GetHandle
 00494C93    push        eax
 00494C94    call        gdi32.SelectObject
 00494C99    mov         dword ptr [ebp-0C],eax
 00494C9C    xor         eax,eax
 00494C9E    push        ebp
 00494C9F    push        494E41
 00494CA4    push        dword ptr fs:[eax]
 00494CA7    mov         dword ptr fs:[eax],esp
 00494CAA    mov         eax,dword ptr [ebp-4]
 00494CAD    mov         eax,dword ptr [eax+270]
 00494CB3    mov         eax,dword ptr [eax+48]
 00494CB6    xor         edx,edx
 00494CB8    call        TBrush.SetColor
 00494CBD    push        1
 00494CBF    push        1
 00494CC1    mov         eax,dword ptr [ebp-4]
 00494CC4    mov         eax,dword ptr [eax+270]
 00494CCA    mov         eax,dword ptr [eax+48]
 00494CCD    call        TBrush.GetHandle
 00494CD2    push        eax
 00494CD3    mov         eax,dword ptr [ebp-8]
 00494CD6    push        eax
 00494CD7    mov         eax,dword ptr [ebp-4]
 00494CDA    mov         eax,dword ptr [eax+270]
 00494CE0    call        TCanvas.GetHandle
 00494CE5    push        eax
 00494CE6    call        gdi32.FrameRgn
 00494CEB    mov         eax,dword ptr [ebp-4]
 00494CEE    cmp         dword ptr [eax+284],0
>00494CF5    je          00494D0D
 00494CF7    push        3FE00000
 00494CFC    push        0
 00494CFE    lea         ecx,[ebp-2C]
 00494D01    lea         eax,[ebp-1C]
 00494D04    mov         dl,2
 00494D06    call        SplitRect
>00494D0B    jmp         00494D17
 00494D0D    lea         esi,[ebp-1C]
 00494D10    lea         edi,[ebp-2C]
 00494D13    movs        dword ptr [edi],dword ptr [esi]
 00494D14    movs        dword ptr [edi],dword ptr [esi]
 00494D15    movs        dword ptr [edi],dword ptr [esi]
 00494D16    movs        dword ptr [edi],dword ptr [esi]
 00494D17    mov         eax,dword ptr [ebp-4]
 00494D1A    cmp         dword ptr [eax+280],0
>00494D21    je          00494D39
 00494D23    push        3FE00000
 00494D28    push        0
 00494D2A    lea         ecx,[ebp-3C]
 00494D2D    lea         eax,[ebp-1C]
 00494D30    mov         dl,3
 00494D32    call        SplitRect
>00494D37    jmp         00494D43
 00494D39    lea         esi,[ebp-1C]
 00494D3C    lea         edi,[ebp-3C]
 00494D3F    movs        dword ptr [edi],dword ptr [esi]
 00494D40    movs        dword ptr [edi],dword ptr [esi]
 00494D41    movs        dword ptr [edi],dword ptr [esi]
 00494D42    movs        dword ptr [edi],dword ptr [esi]
 00494D43    mov         eax,dword ptr [ebp-4]
 00494D46    mov         eax,dword ptr [eax+270]
 00494D4C    mov         eax,dword ptr [eax+48]
 00494D4F    mov         dl,1
 00494D51    call        TBrush.SetStyle
 00494D56    mov         eax,[00494E50]
 00494D5B    push        eax
 00494D5C    mov         eax,dword ptr [ebp-4]
 00494D5F    lea         ecx,[eax+280]
 00494D65    lea         edx,[ebp-4C]
 00494D68    mov         eax,dword ptr [ebp-4]
 00494D6B    mov         eax,dword ptr [eax+270]
 00494D71    mov         ebx,dword ptr [eax]
 00494D73    call        dword ptr [ebx+94]
 00494D79    lea         ecx,[ebp-5C]
 00494D7C    lea         edx,[ebp-4C]
 00494D7F    lea         eax,[ebp-2C]
 00494D82    call        CenteredRect
 00494D87    lea         esi,[ebp-5C]
 00494D8A    lea         edi,[ebp-2C]
 00494D8D    movs        dword ptr [edi],dword ptr [esi]
 00494D8E    movs        dword ptr [edi],dword ptr [esi]
 00494D8F    movs        dword ptr [edi],dword ptr [esi]
 00494D90    movs        dword ptr [edi],dword ptr [esi]
 00494D91    mov         eax,[00494E54]
 00494D96    push        eax
 00494D97    mov         eax,dword ptr [ebp-4]
 00494D9A    lea         ecx,[eax+280]
 00494DA0    lea         edx,[ebp-2C]
 00494DA3    mov         eax,dword ptr [ebp-4]
 00494DA6    mov         eax,dword ptr [eax+270]
 00494DAC    mov         ebx,dword ptr [eax]
 00494DAE    call        dword ptr [ebx+94]
 00494DB4    mov         eax,[00494E50]
 00494DB9    push        eax
 00494DBA    mov         eax,dword ptr [ebp-4]
 00494DBD    lea         ecx,[eax+284]
 00494DC3    lea         edx,[ebp-4C]
 00494DC6    mov         eax,dword ptr [ebp-4]
 00494DC9    mov         eax,dword ptr [eax+270]
 00494DCF    mov         ebx,dword ptr [eax]
 00494DD1    call        dword ptr [ebx+94]
 00494DD7    lea         ecx,[ebp-5C]
 00494DDA    lea         edx,[ebp-4C]
 00494DDD    lea         eax,[ebp-3C]
 00494DE0    call        CenteredRect
 00494DE5    lea         esi,[ebp-5C]
 00494DE8    lea         edi,[ebp-3C]
 00494DEB    movs        dword ptr [edi],dword ptr [esi]
 00494DEC    movs        dword ptr [edi],dword ptr [esi]
 00494DED    movs        dword ptr [edi],dword ptr [esi]
 00494DEE    movs        dword ptr [edi],dword ptr [esi]
 00494DEF    mov         eax,[00494E54]
 00494DF4    push        eax
 00494DF5    mov         eax,dword ptr [ebp-4]
 00494DF8    lea         ecx,[eax+284]
 00494DFE    lea         edx,[ebp-3C]
 00494E01    mov         eax,dword ptr [ebp-4]
 00494E04    mov         eax,dword ptr [eax+270]
 00494E0A    mov         ebx,dword ptr [eax]
 00494E0C    call        dword ptr [ebx+94]
 00494E12    xor         eax,eax
 00494E14    pop         edx
 00494E15    pop         ecx
 00494E16    pop         ecx
 00494E17    mov         dword ptr fs:[eax],edx
 00494E1A    push        494E48
 00494E1F    mov         eax,dword ptr [ebp-0C]
 00494E22    push        eax
 00494E23    mov         eax,dword ptr [ebp-4]
 00494E26    mov         eax,dword ptr [eax+270]
 00494E2C    call        TCanvas.GetHandle
 00494E31    push        eax
 00494E32    call        gdi32.SelectObject
 00494E37    mov         eax,dword ptr [ebp-8]
 00494E3A    push        eax
 00494E3B    call        gdi32.DeleteObject
 00494E40    ret
>00494E41    jmp         @HandleFinally
>00494E46    jmp         00494E1F
 00494E48    pop         edi
 00494E49    pop         esi
 00494E4A    pop         ebx
 00494E4B    mov         esp,ebp
 00494E4D    pop         ebp
 00494E4E    ret
*}
end;

//00494E58
procedure TCustomHint.ShowAnotherHint;
begin
{*
 00494E58    mov         byte ptr [eax+50],1
 00494E5C    ret
*}
end;

//00494E60
procedure TCustomHint.ShowHint(Control:TControl);
begin
{*
 00494E60    push        ebp
 00494E61    mov         ebp,esp
 00494E63    add         esp,0FFFFFFE4
 00494E66    push        ebx
 00494E67    push        esi
 00494E68    push        edi
 00494E69    xor         ecx,ecx
 00494E6B    mov         dword ptr [ebp-1C],ecx
 00494E6E    mov         dword ptr [ebp-18],ecx
 00494E71    mov         dword ptr [ebp-14],ecx
 00494E74    mov         esi,edx
 00494E76    mov         ebx,eax
 00494E78    xor         eax,eax
 00494E7A    push        ebp
 00494E7B    push        494F9B
 00494E80    push        dword ptr fs:[eax]
 00494E83    mov         dword ptr fs:[eax],esp
 00494E86    test        esi,esi
>00494E88    je          00494F80
 00494E8E    mov         eax,esi
 00494E90    call        TControl.GetCustomHint
 00494E95    cmp         ebx,eax
>00494E97    jne         00494F56
 00494E9D    cmp         dword ptr [esi+80],0
>00494EA4    je          00494F80
 00494EAA    mov         edx,dword ptr [esi+80]
 00494EB0    mov         eax,494FB8;'|'
 00494EB5    call        AnsiPos
 00494EBA    mov         edi,eax
 00494EBC    lea         edx,[ebp-14]
 00494EBF    mov         eax,dword ptr [esi+80]
 00494EC5    call        GetShortHint
 00494ECA    mov         edx,dword ptr [ebp-14]
 00494ECD    lea         eax,[ebx+34]
 00494ED0    call        @UStrAsg
 00494ED5    test        edi,edi
>00494ED7    je          00494EF4
 00494ED9    lea         edx,[ebp-18]
 00494EDC    mov         eax,dword ptr [esi+80]
 00494EE2    call        GetLongHint
 00494EE7    mov         edx,dword ptr [ebp-18]
 00494EEA    lea         eax,[ebx+38]
 00494EED    call        @UStrAsg
>00494EF2    jmp         00494EFC
 00494EF4    lea         eax,[ebx+38]
 00494EF7    call        @UStrClr
 00494EFC    mov         edx,dword ptr [ebx+38]
 00494EFF    mov         eax,494FB8;'|'
 00494F04    call        AnsiPos
 00494F09    mov         edi,eax
 00494F0B    test        edi,edi
>00494F0D    je          00494F41
 00494F0F    lea         eax,[ebp-1C]
 00494F12    push        eax
 00494F13    lea         edx,[edi+1]
 00494F16    mov         ecx,7FFFFFFF
 00494F1B    mov         eax,dword ptr [ebx+38]
 00494F1E    call        @UStrCopy
 00494F23    mov         eax,dword ptr [ebp-1C]
 00494F26    call        StrToInt
 00494F2B    mov         dword ptr [ebx+40],eax
 00494F2E    lea         eax,[ebx+38]
 00494F31    push        eax
 00494F32    mov         ecx,edi
 00494F34    dec         ecx
 00494F35    xor         edx,edx
 00494F37    mov         eax,dword ptr [ebx+38]
 00494F3A    call        @UStrCopy
>00494F3F    jmp         00494F48
 00494F41    mov         dword ptr [ebx+40],0FFFFFFFF
 00494F48    mov         dword ptr [ebx+58],esi
 00494F4B    lea         eax,[ebp-8]
 00494F4E    push        eax
 00494F4F    call        user32.GetCursorPos
>00494F54    jmp         00494F76
 00494F56    mov         eax,dword ptr [esi+48]
 00494F59    sar         eax,1
>00494F5B    jns         00494F60
 00494F5D    adc         eax,0
 00494F60    mov         dword ptr [ebp-10],eax
 00494F63    mov         eax,dword ptr [esi+4C]
 00494F66    mov         dword ptr [ebp-0C],eax
 00494F69    lea         ecx,[ebp-8]
 00494F6C    lea         edx,[ebp-10]
 00494F6F    mov         eax,esi
 00494F71    call        TControl.ClientToScreen
 00494F76    lea         edx,[ebp-8]
 00494F79    mov         eax,ebx
 00494F7B    call        TCustomHint.ShowHint
 00494F80    xor         eax,eax
 00494F82    pop         edx
 00494F83    pop         ecx
 00494F84    pop         ecx
 00494F85    mov         dword ptr fs:[eax],edx
 00494F88    push        494FA2
 00494F8D    lea         eax,[ebp-1C]
 00494F90    mov         edx,3
 00494F95    call        @UStrArrayClr
 00494F9A    ret
>00494F9B    jmp         @HandleFinally
>00494FA0    jmp         00494F8D
 00494FA2    pop         edi
 00494FA3    pop         esi
 00494FA4    pop         ebx
 00494FA5    mov         esp,ebp
 00494FA7    pop         ebp
 00494FA8    ret
*}
end;

//00494FBC
procedure TCustomHint.ShowHint(Rect:TRect);
begin
{*
 00494FBC    push        ebx
 00494FBD    push        esi
 00494FBE    push        edi
 00494FBF    add         esp,0FFFFFFF0
 00494FC2    mov         esi,edx
 00494FC4    lea         edi,[esp]
 00494FC7    movs        dword ptr [edi],dword ptr [esi]
 00494FC8    movs        dword ptr [edi],dword ptr [esi]
 00494FC9    movs        dword ptr [edi],dword ptr [esi]
 00494FCA    movs        dword ptr [edi],dword ptr [esi]
 00494FCB    mov         ebx,eax
 00494FCD    mov         byte ptr [ebx+50],1
 00494FD1    xor         ecx,ecx
 00494FD3    mov         dl,1
 00494FD5    mov         eax,[00480168];TCustomHintWindow
 00494FDA    call        TCustomHintWindow.Create
 00494FDF    mov         esi,eax
 00494FE1    mov         dword ptr [esi+278],ebx
 00494FE7    mov         eax,esi
 00494FE9    call        TWinControl.HandleNeeded
 00494FEE    lea         eax,[esi+280]
 00494FF4    mov         edx,dword ptr [ebx+34]
 00494FF7    call        @UStrAsg
 00494FFC    lea         eax,[esi+284]
 00495002    mov         edx,dword ptr [ebx+38]
 00495005    call        @UStrAsg
 0049500A    mov         eax,dword ptr [ebx+40]
 0049500D    mov         dword ptr [esi+288],eax
 00495013    mov         edx,esp
 00495015    mov         eax,esi
 00495017    call        TCustomHintWindow.PositionAt
 0049501C    mov         byte ptr [ebx+5C],0
 00495020    mov         eax,dword ptr [ebx+48]
 00495023    test        eax,eax
>00495025    jne         0049503B
 00495027    push        ebx
 00495028    mov         ecx,esi
 0049502A    mov         dl,1
 0049502C    mov         eax,[004805A4];TCustomHintShowHideThread
 00495031    call        TCustomHintShowHideThread.Create
 00495036    mov         dword ptr [ebx+48],eax
>00495039    jmp         0049504A
 0049503B    mov         edx,esi
 0049503D    call        TCustomHintShowHideThread.QueHintWindow
 00495042    mov         eax,dword ptr [ebx+48]
 00495045    call        TCustomHintShowHideThread.ResumeWork
 0049504A    add         esp,10
 0049504D    pop         edi
 0049504E    pop         esi
 0049504F    pop         ebx
 00495050    ret
*}
end;

//00495054
procedure TCustomHint.ShowHint(Point:TPoint);
begin
{*
 00495054    push        ebx
 00495055    push        esi
 00495056    push        edi
 00495057    add         esp,0FFFFFFE8
 0049505A    mov         esi,edx
 0049505C    lea         edi,[esp]
 0049505F    movs        dword ptr [edi],dword ptr [esi]
 00495060    movs        dword ptr [edi],dword ptr [esi]
 00495061    mov         ebx,eax
 00495063    mov         edi,dword ptr [esp+4]
 00495067    push        edi
 00495068    lea         eax,[esp+0C]
 0049506C    push        eax
 0049506D    mov         esi,dword ptr [esp+8]
 00495071    mov         ecx,esi
 00495073    mov         edx,edi
 00495075    mov         eax,esi
 00495077    call        Rect
 0049507C    lea         edx,[esp+8]
 00495080    mov         eax,ebx
 00495082    call        TCustomHint.ShowHint
 00495087    add         esp,18
 0049508A    pop         edi
 0049508B    pop         esi
 0049508C    pop         ebx
 0049508D    ret
*}
end;

//00495090
procedure TCustomHint.ShowHint;
begin
{*
 00495090    add         esp,0FFFFFFF8
 00495093    xor         edx,edx
 00495095    mov         dword ptr [esp],edx
 00495098    xor         edx,edx
 0049509A    mov         dword ptr [esp+4],edx
 0049509E    mov         edx,esp
 004950A0    call        TCustomHint.ShowHint
 004950A5    pop         ecx
 004950A6    pop         edx
 004950A7    ret
*}
end;

//004950A8
constructor TCustomHintShowHideThread.Create(HintObject:TCustomHint);
begin
{*
 004950A8    push        ebp
 004950A9    mov         ebp,esp
 004950AB    push        ecx
 004950AC    push        ebx
 004950AD    push        esi
 004950AE    push        edi
 004950AF    test        dl,dl
>004950B1    je          004950BB
 004950B3    add         esp,0FFFFFFF0
 004950B6    call        @ClassCreate
 004950BB    mov         edi,ecx
 004950BD    mov         byte ptr [ebp-1],dl
 004950C0    mov         ebx,eax
 004950C2    xor         ecx,ecx
 004950C4    xor         edx,edx
 004950C6    mov         eax,ebx
 004950C8    call        TThread.Create
 004950CD    xor         ecx,ecx
 004950CF    mov         dl,1
 004950D1    mov         eax,[00455E1C];TEvent
 004950D6    call        TEvent.Create
 004950DB    mov         dword ptr [ebx+50],eax
 004950DE    mov         dl,1
 004950E0    mov         eax,[00439D58];TThreadList
 004950E5    call        TThreadList.Create
 004950EA    mov         esi,eax
 004950EC    mov         dword ptr [ebx+40],esi
 004950EF    mov         byte ptr [esi+0C],1
 004950F3    mov         edx,edi
 004950F5    mov         eax,ebx
 004950F7    call        TCustomHintShowHideThread.QueHintWindow
 004950FC    mov         byte ptr [ebx+48],0
 00495100    mov         byte ptr [ebx+49],1
 00495104    mov         eax,dword ptr [ebp+8]
 00495107    mov         dword ptr [ebx+44],eax
 0049510A    mov         eax,ebx
 0049510C    cmp         byte ptr [ebp-1],0
>00495110    je          00495121
 00495112    call        @AfterConstruction
 00495117    pop         dword ptr fs:[0]
 0049511E    add         esp,0C
 00495121    mov         eax,ebx
 00495123    pop         edi
 00495124    pop         esi
 00495125    pop         ebx
 00495126    pop         ecx
 00495127    pop         ebp
 00495128    ret         4
*}
end;

//0049512C
destructor TCustomHintShowHideThread.Destroy();
begin
{*
 0049512C    push        ebp
 0049512D    mov         ebp,esp
 0049512F    add         esp,0FFFFFFF8
 00495132    push        ebx
 00495133    push        esi
 00495134    push        edi
 00495135    call        @BeforeDestruction
 0049513A    mov         byte ptr [ebp-5],dl
 0049513D    mov         dword ptr [ebp-4],eax
 00495140    mov         eax,dword ptr [ebp-4]
 00495143    mov         byte ptr [eax+49],0
 00495147    mov         eax,dword ptr [ebp-4]
 0049514A    call        TCustomHintShowHideThread.ResumeWork
 0049514F    movzx       edx,byte ptr [ebp-5]
 00495153    and         dl,0FC
 00495156    mov         eax,dword ptr [ebp-4]
 00495159    call        TThread.Destroy
 0049515E    mov         eax,dword ptr [ebp-4]
 00495161    mov         eax,dword ptr [eax+40]
 00495164    call        TThreadList.LockList
 00495169    mov         edi,eax
 0049516B    xor         eax,eax
 0049516D    push        ebp
 0049516E    push        4951B2
 00495173    push        dword ptr fs:[eax]
 00495176    mov         dword ptr fs:[eax],esp
 00495179    mov         ebx,dword ptr [edi+8]
 0049517C    dec         ebx
 0049517D    test        ebx,ebx
>0049517F    jl          00495196
 00495181    inc         ebx
 00495182    xor         esi,esi
 00495184    mov         edx,esi
 00495186    mov         eax,edi
 00495188    call        TList.Get
 0049518D    call        TObject.Free
 00495192    inc         esi
 00495193    dec         ebx
>00495194    jne         00495184
 00495196    xor         eax,eax
 00495198    pop         edx
 00495199    pop         ecx
 0049519A    pop         ecx
 0049519B    mov         dword ptr fs:[eax],edx
 0049519E    push        4951B9
 004951A3    mov         eax,dword ptr [ebp-4]
 004951A6    mov         eax,dword ptr [eax+40]
 004951A9    mov         eax,dword ptr [eax+8]
 004951AC    call        TMonitor.Exit
 004951B1    ret
>004951B2    jmp         @HandleFinally
>004951B7    jmp         004951A3
 004951B9    mov         eax,dword ptr [ebp-4]
 004951BC    mov         eax,dword ptr [eax+40]
 004951BF    call        TThreadList.Clear
 004951C4    mov         eax,dword ptr [ebp-4]
 004951C7    mov         eax,dword ptr [eax+40]
 004951CA    call        TObject.Free
 004951CF    mov         eax,dword ptr [ebp-4]
 004951D2    mov         eax,dword ptr [eax+50]
 004951D5    call        TObject.Free
 004951DA    cmp         byte ptr [ebp-5],0
>004951DE    jle         004951E8
 004951E0    mov         eax,dword ptr [ebp-4]
 004951E3    call        @ClassDestroy
 004951E8    pop         edi
 004951E9    pop         esi
 004951EA    pop         ebx
 004951EB    pop         ecx
 004951EC    pop         ecx
 004951ED    pop         ebp
 004951EE    ret
*}
end;

//004951F0
function LatestHintWindow:TCustomHintWindow;
begin
{*
 004951F0    push        ebp
 004951F1    mov         ebp,esp
 004951F3    add         esp,0FFFFFFF4
 004951F6    push        ebx
 004951F7    push        esi
 004951F8    push        edi
 004951F9    xor         eax,eax
 004951FB    mov         dword ptr [ebp-4],eax
 004951FE    mov         dl,1
 00495200    mov         eax,[00439644];TList
 00495205    call        TObject.Create
 0049520A    mov         dword ptr [ebp-0C],eax
 0049520D    xor         edx,edx
 0049520F    push        ebp
 00495210    push        4952E9
 00495215    push        dword ptr fs:[edx]
 00495218    mov         dword ptr fs:[edx],esp
 0049521B    mov         eax,dword ptr [ebp+8]
 0049521E    mov         eax,dword ptr [eax-4]
 00495221    mov         eax,dword ptr [eax+40]
 00495224    call        TThreadList.LockList
 00495229    mov         edi,eax
 0049522B    xor         edx,edx
 0049522D    push        ebp
 0049522E    push        49529F
 00495233    push        dword ptr fs:[edx]
 00495236    mov         dword ptr fs:[edx],esp
 00495239    mov         eax,dword ptr [edi+8]
 0049523C    mov         dword ptr [ebp-8],eax
 0049523F    mov         ebx,dword ptr [ebp-8]
 00495242    dec         ebx
 00495243    test        ebx,ebx
>00495245    jl          00495280
 00495247    inc         ebx
 00495248    xor         esi,esi
 0049524A    mov         eax,dword ptr [ebp-8]
 0049524D    dec         eax
 0049524E    cmp         esi,eax
>00495250    jne         00495260
 00495252    xor         edx,edx
 00495254    mov         eax,edi
 00495256    call        TList.Get
 0049525B    mov         dword ptr [ebp-4],eax
>0049525E    jmp         0049527C
 00495260    xor         edx,edx
 00495262    mov         eax,edi
 00495264    call        TList.Get
 00495269    mov         edx,eax
 0049526B    mov         eax,dword ptr [ebp-0C]
 0049526E    call        TList.Add
 00495273    xor         edx,edx
 00495275    mov         eax,edi
 00495277    call        TList.Delete
 0049527C    inc         esi
 0049527D    dec         ebx
>0049527E    jne         0049524A
 00495280    xor         eax,eax
 00495282    pop         edx
 00495283    pop         ecx
 00495284    pop         ecx
 00495285    mov         dword ptr fs:[eax],edx
 00495288    push        4952A6
 0049528D    mov         eax,dword ptr [ebp+8]
 00495290    mov         eax,dword ptr [eax-4]
 00495293    mov         eax,dword ptr [eax+40]
 00495296    mov         eax,dword ptr [eax+8]
 00495299    call        TMonitor.Exit
 0049529E    ret
>0049529F    jmp         @HandleFinally
>004952A4    jmp         0049528D
 004952A6    mov         eax,dword ptr [ebp-0C]
 004952A9    mov         ebx,dword ptr [eax+8]
 004952AC    dec         ebx
 004952AD    test        ebx,ebx
>004952AF    jl          004952D3
 004952B1    inc         ebx
 004952B2    xor         esi,esi
 004952B4    mov         edx,esi
 004952B6    mov         eax,dword ptr [ebp-0C]
 004952B9    call        TList.Get
 004952BE    push        eax
 004952BF    push        405B0C;TObject.Free
 004952C4    mov         eax,dword ptr [ebp+8]
 004952C7    mov         eax,dword ptr [eax-4]
 004952CA    call        TThread.Synchronize
 004952CF    inc         esi
 004952D0    dec         ebx
>004952D1    jne         004952B4
 004952D3    xor         eax,eax
 004952D5    pop         edx
 004952D6    pop         ecx
 004952D7    pop         ecx
 004952D8    mov         dword ptr fs:[eax],edx
 004952DB    push        4952F0
 004952E0    mov         eax,dword ptr [ebp-0C]
 004952E3    call        TObject.Free
 004952E8    ret
>004952E9    jmp         @HandleFinally
>004952EE    jmp         004952E0
 004952F0    mov         eax,dword ptr [ebp-4]
 004952F3    pop         edi
 004952F4    pop         esi
 004952F5    pop         ebx
 004952F6    mov         esp,ebp
 004952F8    pop         ebp
 004952F9    ret
*}
end;

//004952FC
procedure TCustomHintShowHideThread.Execute;
begin
{*
 004952FC    push        ebp
 004952FD    mov         ebp,esp
 004952FF    add         esp,0FFFFFFE0
 00495302    push        ebx
 00495303    push        esi
 00495304    push        edi
 00495305    mov         dword ptr [ebp-4],eax
>00495308    jmp         0049574C
 0049530D    mov         byte ptr [ebp-12],1
 00495311    push        ebp
 00495312    call        LatestHintWindow
 00495317    pop         ecx
 00495318    mov         dword ptr [ebp-10],eax
 0049531B    mov         eax,dword ptr [ebp-4]
 0049531E    mov         eax,dword ptr [eax+44]
 00495321    mov         dword ptr [ebp-0C],eax
 00495324    cmp         dword ptr [ebp-10],0
>00495328    je          0049571A
 0049532E    xor         eax,eax
 00495330    push        ebp
 00495331    push        495713
 00495336    push        dword ptr fs:[eax]
 00495339    mov         dword ptr fs:[eax],esp
 0049533C    mov         eax,dword ptr [ebp-10]
 0049533F    call        TWinControl.HandleAllocated
 00495344    test        al,al
>00495346    je          00495363
 00495348    push        3
 0049534A    push        0
 0049534C    push        0FF00
 00495351    mov         eax,dword ptr [ebp-10]
 00495354    call        TWinControl.GetHandle
 00495359    push        eax
 0049535A    mov         eax,[0078D314]
 0049535F    mov         eax,dword ptr [eax]
 00495361    call        eax
 00495363    mov         eax,dword ptr [ebp-10]
 00495366    mov         eax,dword ptr [eax+278]
 0049536C    mov         eax,dword ptr [eax+4C]
 0049536F    call        TThread.Sleep
 00495374    mov         eax,dword ptr [ebp-10]
 00495377    mov         eax,dword ptr [eax+278]
 0049537D    cmp         byte ptr [eax+50],0
>00495381    je          004956AB
>00495387    jmp         0049569E
 0049538C    mov         byte ptr [ebp-11],0
 00495390    mov         eax,dword ptr [ebp-10]
 00495393    call        TWinControl.HandleAllocated
 00495398    test        al,al
>0049539A    je          004953C1
 0049539C    mov         eax,dword ptr [ebp-10]
 0049539F    push        eax
 004953A0    mov         eax,dword ptr [eax]
 004953A2    mov         eax,dword ptr [eax+0EC]
 004953A8    push        eax
 004953A9    mov         eax,dword ptr [ebp-4]
 004953AC    call        TThread.Synchronize
 004953B1    push        4
 004953B3    mov         eax,dword ptr [ebp-10]
 004953B6    call        TWinControl.GetHandle
 004953BB    push        eax
 004953BC    call        user32.ShowWindow
 004953C1    cmp         byte ptr [ebp-12],0
>004953C5    je          00495489
 004953CB    mov         byte ptr [ebp-12],0
 004953CF    mov         dword ptr [ebp-8],1
 004953D6    mov         eax,dword ptr [ebp-10]
 004953D9    call        TWinControl.HandleAllocated
 004953DE    test        al,al
>004953E0    je          00495410
 004953E2    push        3
 004953E4    fild        dword ptr [ebp-8]
 004953E7    fdiv        dword ptr ds:[495760]
 004953ED    fmul        dword ptr ds:[495764]
 004953F3    call        @TRUNC
 004953F8    push        eax
 004953F9    push        0FF00
 004953FE    mov         eax,dword ptr [ebp-10]
 00495401    call        TWinControl.GetHandle
 00495406    push        eax
 00495407    mov         eax,[0078D314]
 0049540C    mov         eax,dword ptr [eax]
 0049540E    call        eax
 00495410    mov         eax,dword ptr [ebp-4]
 00495413    mov         eax,dword ptr [eax+40]
 00495416    call        TThreadList.LockList
 0049541B    mov         edi,eax
 0049541D    xor         eax,eax
 0049541F    push        ebp
 00495420    push        49544D
 00495425    push        dword ptr fs:[eax]
 00495428    mov         dword ptr fs:[eax],esp
 0049542B    mov         eax,dword ptr [edi+8]
 0049542E    mov         dword ptr [ebp-18],eax
 00495431    xor         eax,eax
 00495433    pop         edx
 00495434    pop         ecx
 00495435    pop         ecx
 00495436    mov         dword ptr fs:[eax],edx
 00495439    push        495454
 0049543E    mov         eax,dword ptr [ebp-4]
 00495441    mov         eax,dword ptr [eax+40]
 00495444    mov         eax,dword ptr [eax+8]
 00495447    call        TMonitor.Exit
 0049544C    ret
>0049544D    jmp         @HandleFinally
>00495452    jmp         0049543E
 00495454    cmp         dword ptr [ebp-18],1
>00495458    jle         00495472
 0049545A    push        ebp
 0049545B    call        LatestHintWindow
 00495460    pop         ecx
 00495461    mov         dword ptr [ebp-10],eax
 00495464    mov         byte ptr [ebp-11],1
 00495468    mov         eax,dword ptr [ebp-0C]
 0049546B    call        TCustomHint.ShowAnotherHint
>00495470    jmp         00495489
 00495472    mov         eax,14
 00495477    call        TThread.Sleep
 0049547C    inc         dword ptr [ebp-8]
 0049547F    cmp         dword ptr [ebp-8],0B
>00495483    jne         004953D6
 00495489    cmp         byte ptr [ebp-11],0
>0049548D    jne         0049569E
 00495493    call        kernel32.GetTickCount
 00495498    mov         edx,dword ptr [ebp-4]
 0049549B    mov         dword ptr [edx+4C],eax
 0049549E    mov         eax,dword ptr [ebp-10]
 004954A1    call        TWinControl.HandleAllocated
 004954A6    test        al,al
>004954A8    je          00495573
 004954AE    push        3
 004954B0    push        0FF
 004954B5    push        0FF00
 004954BA    mov         eax,dword ptr [ebp-10]
 004954BD    call        TWinControl.GetHandle
 004954C2    push        eax
 004954C3    mov         eax,[0078D314]
 004954C8    mov         eax,dword ptr [eax]
 004954CA    call        eax
>004954CC    jmp         00495573
 004954D1    mov         eax,14
 004954D6    call        TThread.Sleep
 004954DB    mov         eax,dword ptr [ebp-4]
 004954DE    mov         eax,dword ptr [eax+40]
 004954E1    call        TThreadList.LockList
 004954E6    mov         ebx,eax
 004954E8    xor         eax,eax
 004954EA    push        ebp
 004954EB    push        495518
 004954F0    push        dword ptr fs:[eax]
 004954F3    mov         dword ptr fs:[eax],esp
 004954F6    mov         eax,dword ptr [ebx+8]
 004954F9    mov         dword ptr [ebp-18],eax
 004954FC    xor         eax,eax
 004954FE    pop         edx
 004954FF    pop         ecx
 00495500    pop         ecx
 00495501    mov         dword ptr fs:[eax],edx
 00495504    push        49551F
 00495509    mov         eax,dword ptr [ebp-4]
 0049550C    mov         eax,dword ptr [eax+40]
 0049550F    mov         eax,dword ptr [eax+8]
 00495512    call        TMonitor.Exit
 00495517    ret
>00495518    jmp         @HandleFinally
>0049551D    jmp         00495509
 0049551F    cmp         dword ptr [ebp-18],1
>00495523    jle         0049553D
 00495525    push        ebp
 00495526    call        LatestHintWindow
 0049552B    pop         ecx
 0049552C    mov         dword ptr [ebp-10],eax
 0049552F    mov         byte ptr [ebp-11],1
 00495533    mov         eax,dword ptr [ebp-0C]
 00495536    call        TCustomHint.ShowAnotherHint
>0049553B    jmp         00495586
 0049553D    mov         eax,dword ptr [ebp-10]
 00495540    mov         eax,dword ptr [eax+278]
 00495546    cmp         dword ptr [eax+54],0FFFFFFFF
>0049554A    je          00495573
 0049554C    call        kernel32.GetTickCount
 00495551    mov         edx,dword ptr [ebp-4]
 00495554    sub         eax,dword ptr [edx+4C]
 00495557    mov         edx,dword ptr [ebp-10]
 0049555A    mov         edx,dword ptr [edx+278]
 00495560    cmp         eax,dword ptr [edx+54]
>00495563    jbe         00495573
 00495565    mov         eax,dword ptr [ebp-10]
 00495568    mov         eax,dword ptr [eax+278]
 0049556E    call        TCustomHint.HideHint
 00495573    mov         eax,dword ptr [ebp-10]
 00495576    mov         eax,dword ptr [eax+278]
 0049557C    cmp         byte ptr [eax+50],0
>00495580    jne         004954D1
 00495586    cmp         byte ptr [ebp-11],0
>0049558A    jne         0049569E
 00495590    mov         dword ptr [ebp-8],0A
 00495597    mov         eax,dword ptr [ebp-10]
 0049559A    call        TWinControl.HandleAllocated
 0049559F    test        al,al
>004955A1    je          004955D1
 004955A3    push        3
 004955A5    fild        dword ptr [ebp-8]
 004955A8    fdiv        dword ptr ds:[495760]
 004955AE    fmul        dword ptr ds:[495764]
 004955B4    call        @TRUNC
 004955B9    push        eax
 004955BA    push        0FF00
 004955BF    mov         eax,dword ptr [ebp-10]
 004955C2    call        TWinControl.GetHandle
 004955C7    push        eax
 004955C8    mov         eax,[0078D314]
 004955CD    mov         eax,dword ptr [eax]
 004955CF    call        eax
 004955D1    mov         eax,dword ptr [ebp-4]
 004955D4    mov         eax,dword ptr [eax+40]
 004955D7    call        TThreadList.LockList
 004955DC    mov         esi,eax
 004955DE    xor         eax,eax
 004955E0    push        ebp
 004955E1    push        49560E
 004955E6    push        dword ptr fs:[eax]
 004955E9    mov         dword ptr fs:[eax],esp
 004955EC    mov         eax,dword ptr [esi+8]
 004955EF    mov         dword ptr [ebp-18],eax
 004955F2    xor         eax,eax
 004955F4    pop         edx
 004955F5    pop         ecx
 004955F6    pop         ecx
 004955F7    mov         dword ptr fs:[eax],edx
 004955FA    push        495615
 004955FF    mov         eax,dword ptr [ebp-4]
 00495602    mov         eax,dword ptr [eax+40]
 00495605    mov         eax,dword ptr [eax+8]
 00495608    call        TMonitor.Exit
 0049560D    ret
>0049560E    jmp         @HandleFinally
>00495613    jmp         004955FF
 00495615    cmp         dword ptr [ebp-18],1
>00495619    jle         00495633
 0049561B    push        ebp
 0049561C    call        LatestHintWindow
 00495621    pop         ecx
 00495622    mov         dword ptr [ebp-10],eax
 00495625    mov         byte ptr [ebp-11],1
 00495629    mov         eax,dword ptr [ebp-0C]
 0049562C    call        TCustomHint.ShowAnotherHint
>00495631    jmp         0049564A
 00495633    mov         eax,14
 00495638    call        TThread.Sleep
 0049563D    dec         dword ptr [ebp-8]
 00495640    cmp         dword ptr [ebp-8],0FFFFFFFF
>00495644    jne         00495597
 0049564A    cmp         byte ptr [ebp-11],0
>0049564E    jne         0049569E
 00495650    mov         eax,dword ptr [ebp-4]
 00495653    mov         eax,dword ptr [eax+40]
 00495656    call        TThreadList.LockList
 0049565B    mov         dword ptr [ebp-1C],eax
 0049565E    xor         eax,eax
 00495660    push        ebp
 00495661    push        495691
 00495666    push        dword ptr fs:[eax]
 00495669    mov         dword ptr fs:[eax],esp
 0049566C    mov         eax,dword ptr [ebp-1C]
 0049566F    mov         eax,dword ptr [eax+8]
 00495672    mov         dword ptr [ebp-18],eax
 00495675    xor         eax,eax
 00495677    pop         edx
 00495678    pop         ecx
 00495679    pop         ecx
 0049567A    mov         dword ptr fs:[eax],edx
 0049567D    push        495698
 00495682    mov         eax,dword ptr [ebp-4]
 00495685    mov         eax,dword ptr [eax+40]
 00495688    mov         eax,dword ptr [eax+8]
 0049568B    call        TMonitor.Exit
 00495690    ret
>00495691    jmp         @HandleFinally
>00495696    jmp         00495682
 00495698    cmp         dword ptr [ebp-18],1
>0049569C    je          004956AB
 0049569E    mov         eax,dword ptr [ebp-4]
 004956A1    cmp         byte ptr [eax+0D],0
>004956A5    je          0049538C
 004956AB    xor         eax,eax
 004956AD    pop         edx
 004956AE    pop         ecx
 004956AF    pop         ecx
 004956B0    mov         dword ptr fs:[eax],edx
 004956B3    push        49571A
 004956B8    mov         eax,dword ptr [ebp-10]
 004956BB    push        eax
 004956BC    push        405B0C;TObject.Free
 004956C1    mov         eax,dword ptr [ebp-4]
 004956C4    call        TThread.Synchronize
 004956C9    mov         eax,dword ptr [ebp-4]
 004956CC    mov         eax,dword ptr [eax+40]
 004956CF    call        TThreadList.LockList
 004956D4    mov         dword ptr [ebp-20],eax
 004956D7    xor         eax,eax
 004956D9    push        ebp
 004956DA    push        49570B
 004956DF    push        dword ptr fs:[eax]
 004956E2    mov         dword ptr fs:[eax],esp
 004956E5    xor         edx,edx
 004956E7    mov         eax,dword ptr [ebp-20]
 004956EA    call        TList.Delete
 004956EF    xor         eax,eax
 004956F1    pop         edx
 004956F2    pop         ecx
 004956F3    pop         ecx
 004956F4    mov         dword ptr fs:[eax],edx
 004956F7    push        495712
 004956FC    mov         eax,dword ptr [ebp-4]
 004956FF    mov         eax,dword ptr [eax+40]
 00495702    mov         eax,dword ptr [eax+8]
 00495705    call        TMonitor.Exit
 0049570A    ret
>0049570B    jmp         @HandleFinally
>00495710    jmp         004956FC
 00495712    ret
>00495713    jmp         @HandleFinally
>00495718    jmp         004956B8
 0049571A    mov         eax,dword ptr [ebp-0C]
 0049571D    cmp         byte ptr [eax+5C],0
>00495721    jne         0049574C
 00495723    mov         eax,[0078D590];^Application:TApplication
 00495728    mov         eax,dword ptr [eax]
 0049572A    cmp         byte ptr [eax+0A4],0
>00495731    jne         0049574C
 00495733    mov         eax,dword ptr [ebp-4]
 00495736    mov         eax,dword ptr [eax+50]
 00495739    call        TEvent.ResetEvent
 0049573E    mov         eax,dword ptr [ebp-4]
 00495741    mov         eax,dword ptr [eax+50]
 00495744    or          edx,0FFFFFFFF
 00495747    mov         ecx,dword ptr [eax]
 00495749    call        dword ptr [ecx+8]
 0049574C    mov         eax,dword ptr [ebp-4]
 0049574F    cmp         byte ptr [eax+49],0
>00495753    jne         0049530D
 00495759    pop         edi
 0049575A    pop         esi
 0049575B    pop         ebx
 0049575C    mov         esp,ebp
 0049575E    pop         ebp
 0049575F    ret
*}
end;

//00495768
procedure TCustomHintShowHideThread.HideHint;
begin
{*
 00495768    mov         byte ptr [eax+48],1;TCustomHintShowHideThread.FHideHint:Boolean
 0049576C    ret
*}
end;

//00495770
procedure TCustomHintShowHideThread.QueHintWindow(Value:TCustomHintWindow);
begin
{*
 00495770    mov         eax,dword ptr [eax+40]
 00495773    call        TThreadList.Add
 00495778    ret
*}
end;

//0049577C
procedure TCustomHintShowHideThread.ResumeWork;
begin
{*
 0049577C    mov         eax,dword ptr [eax+50]
 0049577F    call        TEvent.SetEvent
 00495784    ret
*}
end;

//00495788
function TCustomGestureEngine.Supported:Boolean;
begin
{*
 00495788    xor         eax,eax
 0049578A    ret
*}
end;

//0049578C
constructor TCustomTouchManager.Create;
begin
{*
 0049578C    push        ebp
 0049578D    mov         ebp,esp
 0049578F    push        ecx
 00495790    push        ebx
 00495791    push        esi
 00495792    push        edi
 00495793    test        dl,dl
>00495795    je          0049579F
 00495797    add         esp,0FFFFFFF0
 0049579A    call        @ClassCreate
 0049579F    mov         esi,ecx
 004957A1    mov         byte ptr [ebp-1],dl
 004957A4    mov         ebx,eax
 004957A6    xor         edx,edx
 004957A8    mov         eax,ebx
 004957AA    call        TObject.Create
 004957AF    mov         dword ptr [ebx+4],esi
 004957B2    xor         eax,eax
 004957B4    mov         dword ptr [ebx+8],eax
 004957B7    xor         eax,eax
 004957B9    mov         dword ptr [ebx+0C],eax
 004957BC    mov         dl,1
 004957BE    mov         eax,[00439644];TList
 004957C3    call        TObject.Create
 004957C8    mov         edi,eax
 004957CA    mov         dword ptr [ebx+14],edi
 004957CD    mov         eax,edi
 004957CF    mov         edx,esi
 004957D1    call        TList.Add
 004957D6    mov         eax,ebx
 004957D8    cmp         byte ptr [ebp-1],0
>004957DC    je          004957ED
 004957DE    call        @AfterConstruction
 004957E3    pop         dword ptr fs:[0]
 004957EA    add         esp,0C
 004957ED    mov         eax,ebx
 004957EF    pop         edi
 004957F0    pop         esi
 004957F1    pop         ebx
 004957F2    pop         ecx
 004957F3    pop         ebp
 004957F4    ret
*}
end;

//004957F8
destructor TCustomTouchManager.Destroy();
begin
{*
 004957F8    push        ebx
 004957F9    push        esi
 004957FA    call        @BeforeDestruction
 004957FF    mov         ebx,edx
 00495801    mov         esi,eax
 00495803    cmp         dword ptr [esi+0C],0;TCustomTouchManager.FGestureManager:TCustomGestureManager
>00495807    je          00495812
 00495809    xor         edx,edx
 0049580B    mov         eax,esi
 0049580D    call        TCustomTouchManager.SetGestureManager
 00495812    lea         eax,[esi+14];TCustomTouchManager.FNotifyList:TList
 00495815    mov         edx,dword ptr [eax]
 00495817    xor         ecx,ecx
 00495819    mov         dword ptr [eax],ecx
 0049581B    mov         eax,edx
 0049581D    call        TObject.Free
 00495822    mov         edx,ebx
 00495824    and         dl,0FC
 00495827    mov         eax,esi
 00495829    call        TMemoryStream.Destroy
 0049582E    test        bl,bl
>00495830    jle         00495839
 00495832    mov         eax,esi
 00495834    call        @ClassDestroy
 00495839    pop         esi
 0049583A    pop         ebx
 0049583B    ret
*}
end;

//0049583C
procedure TCustomTouchManager.AssignTo(Dest:TPersistent);
begin
{*
 0049583C    push        ebx
 0049583D    push        esi
 0049583E    push        edi
 0049583F    mov         esi,edx
 00495841    mov         ebx,eax
 00495843    mov         eax,esi
 00495845    mov         edx,dword ptr ds:[478C60];TCustomTouchManager
 0049584B    call        @IsClass
 00495850    test        al,al
>00495852    je          0049589B
 00495854    mov         edi,esi
 00495856    mov         eax,dword ptr [ebx+4]
 00495859    mov         dword ptr [edi+4],eax
 0049585C    mov         eax,dword ptr [ebx+0C]
 0049585F    mov         dword ptr [edi+0C],eax
 00495862    mov         eax,dword ptr [ebx+8]
 00495865    mov         dword ptr [edi+8],eax
 00495868    movzx       eax,byte ptr [ebx+10]
 0049586C    mov         byte ptr [edi+10],al
 0049586F    movzx       eax,byte ptr [ebx+11]
 00495873    mov         byte ptr [edi+11],al
 00495876    push        0
 00495878    mov         eax,dword ptr [edi+14]
 0049587B    xor         ecx,ecx
 0049587D    mov         edx,dword ptr [ebx+14]
 00495880    call        TList.Assign
 00495885    mov         eax,dword ptr [ebx+19]
 00495888    mov         dword ptr [edi+19],eax
 0049588B    mov         al,byte ptr [ebx+1D]
 0049588E    mov         byte ptr [edi+1D],al
 00495891    movzx       eax,word ptr [ebx+1E]
 00495895    mov         word ptr [edi+1E],ax
>00495899    jmp         004958A4
 0049589B    mov         edx,esi
 0049589D    mov         eax,ebx
 0049589F    call        TPersistent.AssignTo
 004958A4    pop         edi
 004958A5    pop         esi
 004958A6    pop         ebx
 004958A7    ret
*}
end;

//004958A8
procedure TCustomTouchManager.ChangeNotification(AControl:TControl);
begin
{*
 004958A8    test        edx,edx
>004958AA    je          004958B4
 004958AC    mov         eax,dword ptr [eax+14]
 004958AF    call        TList.Add
 004958B4    ret
*}
end;

//004958B8
function TCustomTouchManager.FindGesture(AGestureID:TGestureID):TCustomGestureCollectionItem;
begin
{*
 004958B8    push        ebx
 004958B9    push        esi
 004958BA    xor         ecx,ecx
 004958BC    mov         esi,dword ptr [eax+0C]
 004958BF    test        esi,esi
>004958C1    je          004958D2
 004958C3    mov         ecx,edx
 004958C5    mov         edx,esi
 004958C7    mov         eax,dword ptr [eax+4]
 004958CA    xchg        eax,edx
 004958CB    mov         ebx,dword ptr [eax]
 004958CD    call        dword ptr [ebx+4C]
 004958D0    mov         ecx,eax
 004958D2    mov         eax,ecx
 004958D4    pop         esi
 004958D5    pop         ebx
 004958D6    ret
*}
end;

//004958D8
function TCustomTouchManager.FindGesture(AName:string):TCustomGestureCollectionItem;
begin
{*
 004958D8    push        ebx
 004958D9    push        esi
 004958DA    xor         ecx,ecx
 004958DC    mov         esi,dword ptr [eax+0C]
 004958DF    test        esi,esi
>004958E1    je          004958F2
 004958E3    mov         ecx,edx
 004958E5    mov         edx,esi
 004958E7    mov         eax,dword ptr [eax+4]
 004958EA    xchg        eax,edx
 004958EB    mov         ebx,dword ptr [eax]
 004958ED    call        dword ptr [ebx+50]
 004958F0    mov         ecx,eax
 004958F2    mov         eax,ecx
 004958F4    pop         esi
 004958F5    pop         ebx
 004958F6    ret
*}
end;

//004958F8
function TCustomTouchManager.GetGestureList:TGestureArray;
begin
{*
 004958F8    push        ebx
 004958F9    push        esi
 004958FA    push        edi
 004958FB    mov         esi,edx
 004958FD    mov         ebx,eax
 004958FF    mov         eax,esi
 00495901    mov         edx,dword ptr ds:[4781E0];TGestureArray
 00495907    call        @DynArrayClear
 0049590C    mov         edi,dword ptr [ebx+0C]
 0049590F    test        edi,edi
>00495911    je          0049591F
 00495913    mov         ecx,esi
 00495915    mov         edx,dword ptr [ebx+4]
 00495918    mov         eax,edi
 0049591A    mov         ebx,dword ptr [eax]
 0049591C    call        dword ptr [ebx+34]
 0049591F    pop         edi
 00495920    pop         esi
 00495921    pop         ebx
 00495922    ret
*}
end;

//00495924
function TCustomTouchManager.GetStandardGestures:TStandardGestures;
begin
{*
 00495924    push        ebx
 00495925    push        esi
 00495926    push        edi
 00495927    add         esp,0FFFFFFF8
 0049592A    mov         edi,edx
 0049592C    mov         ebx,eax
 0049592E    mov         esi,dword ptr [ebx+0C]
 00495931    test        esi,esi
>00495933    je          0049594E
 00495935    mov         ecx,esp
 00495937    mov         edx,dword ptr [ebx+4]
 0049593A    mov         eax,esi
 0049593C    mov         esi,dword ptr [eax]
 0049593E    call        dword ptr [esi+38]
 00495941    mov         eax,dword ptr [esp]
 00495944    mov         dword ptr [ebx+19],eax
 00495947    mov         al,byte ptr [esp+4]
 0049594B    mov         byte ptr [ebx+1D],al
 0049594E    mov         eax,dword ptr [ebx+19]
 00495951    mov         dword ptr [edi],eax
 00495953    mov         al,byte ptr [ebx+1D]
 00495956    mov         byte ptr [edi+4],al
 00495959    pop         ecx
 0049595A    pop         edx
 0049595B    pop         edi
 0049595C    pop         esi
 0049595D    pop         ebx
 0049595E    ret
*}
end;

//00495960
function TCustomTouchManager.IsInteractiveGestureOptionsStored(Value:TInteractiveGestureOptions):Boolean;
begin
{*
 00495960    push        esi
 00495961    mov         dl,1
 00495963    mov         eax,dword ptr [eax+4]
 00495966    mov         si,0FFD7
 0049596A    call        @CallDynaInst
 0049596F    pop         esi
 00495970    ret
*}
end;

//00495974
function TCustomTouchManager.IsInteractiveGesturesStored(Value:TInteractiveGestures):Boolean;
begin
{*
 00495974    push        esi
 00495975    xor         edx,edx
 00495977    mov         eax,dword ptr [eax+4]
 0049597A    mov         si,0FFD7
 0049597E    call        @CallDynaInst
 00495983    pop         esi
 00495984    ret
*}
end;

//00495988
function TCustomTouchManager.IsParentTabletOptionsStored(Value:Boolean):Boolean;
begin
{*
 00495988    push        esi
 00495989    mov         dl,2
 0049598B    mov         eax,dword ptr [eax+4]
 0049598E    mov         si,0FFD7
 00495992    call        @CallDynaInst
 00495997    pop         esi
 00495998    ret
*}
end;

//0049599C
function TCustomTouchManager.IsTabletOptionsStored(Value:TTabletOptions):Boolean;
begin
{*
 0049599C    push        esi
 0049599D    mov         dl,3
 0049599F    mov         eax,dword ptr [eax+4]
 004959A2    mov         si,0FFD7
 004959A6    call        @CallDynaInst
 004959AB    pop         esi
 004959AC    ret
*}
end;

//004959B0
procedure TCustomTouchManager.RemoveChangeNotification(AControl:TControl);
begin
{*
 004959B0    push        ebx
 004959B1    push        esi
 004959B2    mov         esi,edx
 004959B4    mov         ebx,eax
 004959B6    mov         edx,esi
 004959B8    mov         eax,dword ptr [ebx+14]
 004959BB    call        TList.IndexOf
 004959C0    inc         eax
>004959C1    je          004959CF
 004959C3    mov         edx,esi
 004959C5    xor         ecx,ecx
 004959C7    mov         eax,dword ptr [ebx+14]
 004959CA    call        TList.RemoveItem
 004959CF    pop         esi
 004959D0    pop         ebx
 004959D1    ret
*}
end;

//004959D4
function TCustomTouchManager.SelectGesture(AGestureID:TGestureID):Boolean;
begin
{*
 004959D4    push        ebx
 004959D5    push        esi
 004959D6    xor         ecx,ecx
 004959D8    mov         esi,dword ptr [eax+0C]
 004959DB    test        esi,esi
>004959DD    je          004959EE
 004959DF    mov         ecx,edx
 004959E1    mov         edx,esi
 004959E3    mov         eax,dword ptr [eax+4]
 004959E6    xchg        eax,edx
 004959E7    mov         ebx,dword ptr [eax]
 004959E9    call        dword ptr [ebx+60]
 004959EC    mov         ecx,eax
 004959EE    mov         eax,ecx
 004959F0    pop         esi
 004959F1    pop         ebx
 004959F2    ret
*}
end;

//004959F4
function TCustomTouchManager.SelectGesture(AName:string):Boolean;
begin
{*
 004959F4    push        ebx
 004959F5    push        esi
 004959F6    xor         ecx,ecx
 004959F8    mov         esi,dword ptr [eax+0C]
 004959FB    test        esi,esi
>004959FD    je          00495A0E
 004959FF    mov         ecx,edx
 00495A01    mov         edx,esi
 00495A03    mov         eax,dword ptr [eax+4]
 00495A06    xchg        eax,edx
 00495A07    mov         ebx,dword ptr [eax]
 00495A09    call        dword ptr [ebx+64]
 00495A0C    mov         ecx,eax
 00495A0E    mov         eax,ecx
 00495A10    pop         esi
 00495A11    pop         ebx
 00495A12    ret
*}
end;

//00495A14
procedure TCustomTouchManager.SetGestureEngine(const Value:TCustomGestureEngine);
begin
{*
 00495A14    push        ebx
 00495A15    push        esi
 00495A16    mov         esi,edx
 00495A18    mov         ebx,eax
 00495A1A    cmp         esi,dword ptr [ebx+8]
>00495A1D    je          00495A53
 00495A1F    mov         eax,dword ptr [ebx+4]
 00495A22    mov         edx,dword ptr ds:[47C4E8];TWinControl
 00495A28    call        @IsClass
 00495A2D    test        al,al
>00495A2F    je          00495A53
 00495A31    mov         dword ptr [ebx+8],esi
 00495A34    mov         eax,dword ptr [ebx+4]
 00495A37    call        TWinControl.HandleAllocated
 00495A3C    test        al,al
>00495A3E    je          00495A53
 00495A40    mov         eax,dword ptr [ebx+4]
 00495A43    test        byte ptr [eax+52],20
>00495A47    je          00495A53
 00495A49    mov         dl,1
 00495A4B    mov         eax,dword ptr [ebx+8]
 00495A4E    mov         ecx,dword ptr [eax]
 00495A50    call        dword ptr [ecx+8]
 00495A53    pop         esi
 00495A54    pop         ebx
 00495A55    ret
*}
end;

//00495A58
procedure TCustomTouchManager.SetGestureManager(const Value:TCustomGestureManager);
begin
{*
 00495A58    push        ebx
 00495A59    push        esi
 00495A5A    push        edi
 00495A5B    mov         esi,edx
 00495A5D    mov         ebx,eax
 00495A5F    mov         eax,dword ptr [ebx+0C]
 00495A62    cmp         esi,eax
>00495A64    je          00495AC7
 00495A66    test        eax,eax
>00495A68    je          00495A82
 00495A6A    mov         edx,dword ptr [ebx+4]
 00495A6D    call        TComponent.RemoveFreeNotification
 00495A72    mov         edx,dword ptr [ebx+4]
 00495A75    mov         eax,dword ptr [ebx+0C]
 00495A78    mov         ecx,dword ptr [eax]
 00495A7A    call        dword ptr [ecx+68]
 00495A7D    xor         eax,eax
 00495A7F    mov         dword ptr [ebx+0C],eax
 00495A82    test        esi,esi
>00495A84    je          00495A9A
 00495A86    mov         edx,dword ptr [ebx+4]
 00495A89    mov         eax,esi
 00495A8B    call        TComponent.FreeNotification
 00495A90    mov         edx,dword ptr [ebx+4]
 00495A93    mov         eax,esi
 00495A95    mov         ecx,dword ptr [eax]
 00495A97    call        dword ptr [ecx+54]
 00495A9A    mov         dword ptr [ebx+0C],esi
 00495A9D    mov         eax,dword ptr [ebx+14]
 00495AA0    mov         esi,dword ptr [eax+8]
 00495AA3    dec         esi
 00495AA4    test        esi,esi
>00495AA6    jl          00495AC7
 00495AA8    inc         esi
 00495AA9    xor         edi,edi
 00495AAB    push        0
 00495AAD    mov         edx,edi
 00495AAF    mov         eax,dword ptr [ebx+14]
 00495AB2    call        TList.Get
 00495AB7    xor         ecx,ecx
 00495AB9    mov         edx,0B054
 00495ABE    call        TControl.Perform
 00495AC3    inc         edi
 00495AC4    dec         esi
>00495AC5    jne         00495AAB
 00495AC7    pop         edi
 00495AC8    pop         esi
 00495AC9    pop         ebx
 00495ACA    ret
*}
end;

//00495ACC
procedure TCustomTouchManager.SetParentTabletOptions(const Value:Boolean);
begin
{*
 00495ACC    cmp         dl,byte ptr [eax+18]
>00495ACF    je          00495AF3
 00495AD1    mov         byte ptr [eax+18],dl
 00495AD4    mov         edx,dword ptr [eax+4]
 00495AD7    cmp         dword ptr [edx+34],0
>00495ADB    je          00495AF3
 00495ADD    test        byte ptr [edx+1C],2
>00495AE1    jne         00495AF3
 00495AE3    push        0
 00495AE5    xor         ecx,ecx
 00495AE7    mov         eax,edx
 00495AE9    mov         edx,0B058
 00495AEE    call        TControl.Perform
 00495AF3    ret
*}
end;

//00495AF4
procedure TCustomTouchManager.SetStandardGestures(const Value:TStandardGestures);
begin
{*
 00495AF4    push        ebx
 00495AF5    push        esi
 00495AF6    mov         esi,edx
 00495AF8    mov         ebx,eax
 00495AFA    mov         eax,esi
 00495AFC    lea         edx,[ebx+19]
 00495AFF    mov         cl,5
 00495B01    call        @SetEq
>00495B06    je          00495B25
 00495B08    mov         eax,dword ptr [esi]
 00495B0A    mov         dword ptr [ebx+19],eax
 00495B0D    mov         al,byte ptr [esi+4]
 00495B10    mov         byte ptr [ebx+1D],al
 00495B13    mov         eax,dword ptr [ebx+0C]
 00495B16    test        eax,eax
>00495B18    je          00495B25
 00495B1A    lea         ecx,[ebx+19]
 00495B1D    mov         edx,dword ptr [ebx+4]
 00495B20    mov         ebx,dword ptr [eax]
 00495B22    call        dword ptr [ebx+3C]
 00495B25    pop         esi
 00495B26    pop         ebx
 00495B27    ret
*}
end;

//00495B28
procedure TCustomTouchManager.SetTabletOptions(const Value:TTabletOptions);
begin
{*
 00495B28    push        ebx
 00495B29    push        ecx
 00495B2A    mov         word ptr [esp],dx
 00495B2E    mov         ebx,eax
 00495B30    movzx       eax,word ptr [ebx+1E]
 00495B34    cmp         ax,word ptr [esp]
>00495B38    je          00495B57
 00495B3A    movzx       eax,word ptr [esp]
 00495B3E    mov         word ptr [ebx+1E],ax
 00495B42    mov         byte ptr [ebx+18],0
 00495B46    push        0
 00495B48    xor         ecx,ecx
 00495B4A    mov         edx,0B057
 00495B4F    mov         eax,dword ptr [ebx+4]
 00495B52    call        TControl.Perform
 00495B57    pop         edx
 00495B58    pop         ebx
 00495B59    ret
*}
end;

//00495B5C
procedure TCustomTouchManager.UnselectGesture(AGestureID:TGestureID);
begin
{*
 00495B5C    push        ebx
 00495B5D    push        esi
 00495B5E    mov         esi,dword ptr [eax+0C]
 00495B61    test        esi,esi
>00495B63    je          00495B72
 00495B65    mov         ecx,edx
 00495B67    mov         edx,esi
 00495B69    mov         eax,dword ptr [eax+4]
 00495B6C    xchg        eax,edx
 00495B6D    mov         ebx,dword ptr [eax]
 00495B6F    call        dword ptr [ebx+6C]
 00495B72    pop         esi
 00495B73    pop         ebx
 00495B74    ret
*}
end;

Initialization
//00780910
{*
 00780910    push        ebp
 00780911    mov         ebp,esp
 00780913    xor         eax,eax
 00780915    push        ebp
 00780916    push        78098F
 0078091B    push        dword ptr fs:[eax]
 0078091E    mov         dword ptr fs:[eax],esp
 00780921    sub         dword ptr ds:[79319C],1
>00780928    jae         00780981
 0078092A    call        kernel32.GetVersion
 0078092F    cmp         al,4
 00780931    setae       byte ptr ds:[793198];NewStyleControls:Boolean
 00780938    call        InitControls
 0078093D    mov         eax,[0047A16C];TControl
 00780942    call        StartClassGroup
 00780947    mov         eax,[0047A16C];TControl
 0078094C    call        ActivateClassGroup
 00780951    mov         edx,dword ptr ds:[47A16C];TControl
 00780957    mov         eax,[0049B7BC];TCustomImageList
 0078095C    call        GroupDescendentsWith
 00780961    mov         edx,dword ptr ds:[47A16C];TControl
 00780967    mov         eax,[00473848];TContainedAction
 0078096C    call        GroupDescendentsWith
 00780971    mov         edx,dword ptr ds:[47A16C];TControl
 00780977    mov         eax,[00473DC0];TCustomActionList
 0078097C    call        GroupDescendentsWith
 00780981    xor         eax,eax
 00780983    pop         edx
 00780984    pop         ecx
 00780985    pop         ecx
 00780986    mov         dword ptr fs:[eax],edx
 00780989    push        780996
 0078098E    ret
>0078098F    jmp         @HandleFinally
>00780994    jmp         0078098E
 00780996    pop         ebp
 00780997    ret
*}
Finalization
//00495B78
{*
 00495B78    push        ebp
 00495B79    mov         ebp,esp
 00495B7B    xor         eax,eax
 00495B7D    push        ebp
 00495B7E    push        495BDF
 00495B83    push        dword ptr fs:[eax]
 00495B86    mov         dword ptr fs:[eax],esp
 00495B89    inc         dword ptr ds:[79319C]
>00495B8F    jne         00495BD1
 00495B91    mov         eax,[007931D8]
 00495B96    xor         edx,edx
 00495B98    mov         dword ptr ds:[7931D8],edx
 00495B9E    call        TObject.Free
 00495BA3    call        DoneControls
 00495BA8    mov         eax,7931A4
 00495BAD    call        @UStrClr
 00495BB2    mov         eax,7931A8
 00495BB7    call        @UStrClr
 00495BBC    mov         eax,7859AC
 00495BC1    mov         ecx,16
 00495BC6    mov         edx,dword ptr ds:[4432AC];TIdentMapEntry
 00495BCC    call        @FinalizeArray
 00495BD1    xor         eax,eax
 00495BD3    pop         edx
 00495BD4    pop         ecx
 00495BD5    pop         ecx
 00495BD6    mov         dword ptr fs:[eax],edx
 00495BD9    push        495BE6
 00495BDE    ret
>00495BDF    jmp         @HandleFinally
>00495BE4    jmp         00495BDE
 00495BE6    pop         ebp
 00495BE7    ret
*}
end.